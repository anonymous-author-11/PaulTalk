; ModuleID = 'C:\Users\PaulK\OneDrive\Documents\PL\PyPL\temp_build\out_lto.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128-Fn32"
target triple = "aarch64-unknown-linux-gnu"

@string_string = internal constant [4 x i8] c"%s\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = weak_odr dso_local thread_local global [3 x ptr] zeroinitializer
@current_coroutine = weak_odr dso_local thread_local local_unnamed_addr global ptr null
@always_one = weak dso_local thread_local local_unnamed_addr global i1 true
@current_ptr = internal thread_local global ptr null
@vqfwb_Warning_Remove_returned_Nil_for_key_ = internal unnamed_addr constant [37 x i8] c"Warning: Remove returned Nil for key "
@vvjwi_Warning_Remove_returned_wrong_value_for_key_ = internal unnamed_addr constant [45 x i8] c"Warning: Remove returned wrong value for key "
@jwicz_Error_Nil_returned_during_random_hit_test_for_key_ = internal unnamed_addr constant [51 x i8] c"Error: Nil returned during random hit test for key "
@emoka__unique_keys_for_random_hit_test = internal unnamed_addr constant [33 x i8] c" unique keys for random hit test."
@rwhsb_Error_Nil_returned_during_sequential_hit_test_for_key_ = internal unnamed_addr constant [55 x i8] c"Error: Nil returned during sequential hit test for key "
@_parameterization_Pairi32._i1 = weak_odr dso_local constant [4 x ptr] [ptr @Pair, ptr @_parameterization_i32, ptr @_parameterization_i1, ptr null]
@_parameterization_Functioni32._i32_to_i1 = weak_odr dso_local local_unnamed_addr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_i1, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32_to_i32 = weak_odr dso_local local_unnamed_addr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Pairi32._i32 = weak_odr dso_local constant [4 x ptr] [ptr @Pair, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@PRNG_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @PRNG, ptr null]
@PRNG_offset_tbl = dso_local constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@PRNG = dso_local constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -4401938362882229211, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @PRNG_hashtbl, ptr @PRNG_offset_tbl, ptr @_data_size_PRNG, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @PRNG_field_seed, ptr @PRNG_B_init_initial_seedi32, ptr @PRNG_B_next_, ptr @PRNG_init_initial_seedi32, ptr @PRNG_next_] }
@PRNG_field_seed = internal constant { ptr, ptr } { ptr @PRNG_getter_seed, ptr @PRNG_setter_seed }
@bool_typ_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i32_typ_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ_hashtbl = dso_local constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@f64_typ_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@nil_typ_hashtbl = dso_local constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = dso_local constant [2 x i32] [i32 10, i32 10]
@any_typ_hashtbl = dso_local constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = dso_local constant [1 x i32] [i32 10]
@function_typ_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@union_typ_hashtbl = dso_local constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Object_hashtbl = dso_local constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = dso_local constant [2 x i32] [i32 10, i32 10]
@_parameterization_i1 = weak_odr dso_local constant [2 x ptr] [ptr @bool_typ, ptr null]
@function_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@Pair_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = dso_local constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Container_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@Iterator_hashtbl = dso_local constant [4 x ptr] [ptr @Iterator, ptr @any_typ, ptr @Container, ptr @Object]
@Iterator_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 13, i32 13]
@Iterable_hashtbl = dso_local constant [4 x ptr] [ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 33, i32 33]
@MapIterable_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@MapIterable_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 61, i32 10, i32 38, i32 61, i32 0, i32 0, i32 10]
@MapIterable = dso_local constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable_field_MapIterable_0, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@MapIterator_hashtbl = dso_local constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @Container, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = dso_local constant [8 x i32] [i32 21, i32 10, i32 10, i32 21, i32 0, i32 18, i32 0, i32 0]
@MapIterator = dso_local constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator_field_MapIterator_0, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_next_, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @FilterIterable, ptr null, ptr @Container, ptr @Iterable, ptr null]
@FilterIterable_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 60, i32 10, i32 10, i32 0, i32 60, i32 37, i32 0]
@FilterIterable = dso_local constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388319, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@FilterIterator_hashtbl = dso_local constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = dso_local constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@FilterIterator = dso_local constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_next_, ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = dso_local constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr @ChainIterable, ptr @Container, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = dso_local constant [8 x i32] [i32 10, i32 37, i32 0, i32 10, i32 60, i32 0, i32 0, i32 60]
@ChainIterable = dso_local constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIterableT_secondIterableT, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_init_firstIterableT_secondIterableT, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ChainIterator_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ChainIterator]
@ChainIterator_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 0, i32 21, i32 18, i32 21, i32 0, i32 10, i32 10]
@ChainIterator = dso_local constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_next_, ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr @Container, ptr @InterleaveIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@InterleaveIterable_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 60, i32 10, i32 37, i32 60, i32 0, i32 0, i32 10]
@InterleaveIterable = dso_local constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@InterleaveIterator_hashtbl = dso_local constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @InterleaveIterator, ptr @Iterator, ptr null, ptr null]
@InterleaveIterator_offset_tbl = dso_local constant [8 x i32] [i32 21, i32 10, i32 0, i32 21, i32 10, i32 18, i32 0, i32 0]
@InterleaveIterator = dso_local constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@ZipIterable_hashtbl = dso_local constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr null, ptr @Container, ptr null, ptr @ZipIterable, ptr @Object]
@ZipIterable_offset_tbl = dso_local constant [8 x i32] [i32 10, i32 39, i32 0, i32 0, i32 62, i32 0, i32 10, i32 62]
@ZipIterable = dso_local constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable_field_ZipIterable_0, ptr @ZipIterable_field_ZipIterable_1, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIterableT_secondIterableU, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_init_firstIterableT_secondIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ZipIterator_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 0, i32 22, i32 19, i32 22, i32 0, i32 10, i32 10]
@ZipIterator = dso_local constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator_field_ZipIterator_0, ptr @ZipIterator_field_ZipIterator_1, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_next_, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = dso_local constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ProductIterable, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr null]
@ProductIterable_offset_tbl = dso_local constant [8 x i32] [i32 62, i32 10, i32 10, i32 62, i32 0, i32 39, i32 0, i32 0]
@ProductIterable = dso_local constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable_field_ProductIterable_0, ptr @ProductIterable_field_ProductIterable_1, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIterableT_secondIterableU, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_init_firstIterableT_secondIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ProductIterator_hashtbl = dso_local constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr null, ptr @Container, ptr @Object, ptr null, ptr @ProductIterator]
@ProductIterator_offset_tbl = dso_local constant [8 x i32] [i32 10, i32 0, i32 21, i32 0, i32 24, i32 24, i32 0, i32 10]
@ProductIterator = dso_local constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator_field_ProductIterator_0, ptr @ProductIterator_field_ProductIterator_1, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_next_, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_B_next_, ptr @ProductIterator_next_] }
@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@_parameterization_Character = weak_odr dso_local constant [2 x ptr] [ptr @Character, ptr null]
@_parameterization_i8 = weak_odr dso_local local_unnamed_addr constant [2 x ptr] [ptr @i8_typ, ptr null]
@Representable_hashtbl = dso_local constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@String_hashtbl = dso_local constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @Representable, ptr @Container, ptr @Object, ptr null, ptr null, ptr @String]
@String_offset_tbl = dso_local constant [8 x i32] [i32 10, i32 64, i32 87, i32 87, i32 87, i32 0, i32 0, i32 10]
@Character_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = dso_local constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@StringIterator_hashtbl = dso_local constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = dso_local constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@Exception_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = dso_local constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@i32_string = weak_odr dso_local constant [4 x i8] c"%d\0A\00"
@i64_string = weak_odr dso_local constant [6 x i8] c"%lld\0A\00"
@float_string = weak_odr dso_local constant [4 x i8] c"%f\0A\00"
@bool_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@IO_hashtbl = dso_local constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@IO = dso_local constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xi1__Self_print_xNil__Self_print_xCharacter__Self_print_xi32__Self_print_xRepresentable__Self_print_xString__Self_print_xf64__Self_print_xi64__Self_print_xi8, ptr @IO__Self_print_xi1, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xi32, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xString, ptr @IO__Self_print_xf64, ptr @IO__Self_print_xi64, ptr @IO__Self_print_xi8] }
@_parameterization_i64 = weak_odr dso_local local_unnamed_addr constant [2 x ptr] [ptr @i64_typ, ptr null]
@i8_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i64_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@fvslk_CUsersPaulKOneDriveDocumentsPLPyPLlibarraymini = internal unnamed_addr constant [56 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\array.mini"
@Representable = dso_local constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@Array_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Array, ptr @Representable, ptr @Object]
@Array_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 0, i32 68, i32 10, i32 91, i32 10, i32 91, i32 91]
@Array = dso_local constant { [3 x i64], [7 x ptr], [83 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [83 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterableT, ptr @Array_B_init_, ptr @Array_B_init_capacityi32, ptr @Array_B_init_lengthi32_capacityi32, ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_extend_otherArrayT, ptr @Array_B_reserve_new_capacityi32, ptr @Array_B__index_xi32, ptr @Array_B__set_index_xi32_valueT, ptr @Array_B_throw_oob_xi32, ptr @Array_B_unchecked_index_xi32, ptr @Array_B_unchecked_insert_xi32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_B_repr_, ptr @Array__Self_from_iterable_iterableIterableT, ptr @Array_init_, ptr @Array_init_capacityi32, ptr @Array_init_lengthi32_capacityi32, ptr @Array_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_extend_otherArrayT, ptr @Array_reserve_new_capacityi32, ptr @Array__index_xi32, ptr @Array__set_index_xi32_valueT, ptr @Array_throw_oob_xi32, ptr @Array_unchecked_index_xi32, ptr @Array_unchecked_insert_xi32_valueT, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_repr_, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_B_repr_, ptr @Array_repr_] }
@ArrayIterator_hashtbl = dso_local constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr @Iterator, ptr null, ptr null]
@ArrayIterator_offset_tbl = dso_local constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 10, i32 17, i32 0, i32 0]
@ArrayIterator = dso_local constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@f64_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@_parameterization_String = weak_odr dso_local constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_Bufferi8 = weak_odr dso_local constant [2 x ptr] [ptr @buffer_typ, ptr null]
@gkoch_CUsersPaulKOneDriveDocumentsPLPyPLlibmapmini = internal unnamed_addr constant [54 x i8] c"C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\map.mini"
@String = dso_local constant { [3 x i64], [7 x ptr], [79 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388601, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [79 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_field_String_0, ptr @String_B__Self_from_c_string_c_stringBufferi8, ptr @String_B_init_, ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_c_string_, ptr @String_B_append_xi8, ptr @String_B_extend_strString, ptr @String_B__index_xi32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_B_repr_, ptr @String__Self_from_c_string_c_stringBufferi8, ptr @String_init_, ptr @String_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_c_string_, ptr @String_append_xi8, ptr @String_extend_strString, ptr @String__index_xi32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_repr_, ptr @String_field_String_0, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_B_repr_, ptr @String_repr_] }
@Character = dso_local constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytei8, ptr @Character_byte_, ptr @Character_init_bytei8] }
@StringIterator = dso_local constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_next_, ptr @StringIterator_next_] }
@Exception = dso_local constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberi32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@KeyNotFound_hashtbl = dso_local constant [4 x ptr] [ptr @Object, ptr @KeyNotFound, ptr @any_typ, ptr @Exception]
@KeyNotFound_offset_tbl = dso_local constant [4 x i32] [i32 36, i32 10, i32 10, i32 23]
@KeyNotFound = dso_local constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 2946564862774055400, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @KeyNotFound_hashtbl, ptr @KeyNotFound_offset_tbl, ptr @_data_size_KeyNotFound, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @KeyNotFound_field_line_number, ptr @KeyNotFound_field_file_name, ptr @KeyNotFound_field_message, ptr @KeyNotFound_B_init_messageString, ptr @KeyNotFound_B_init_, ptr @KeyNotFound_B_set_info_line_numberi32_file_nameString, ptr @KeyNotFound_B_report_, ptr @KeyNotFound_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @KeyNotFound_field_line_number, ptr @KeyNotFound_field_file_name, ptr @KeyNotFound_field_message, ptr @KeyNotFound_B_init_messageString, ptr @KeyNotFound_B_init_, ptr @KeyNotFound_B_set_info_line_numberi32_file_nameString, ptr @KeyNotFound_B_report_, ptr @KeyNotFound_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@Map_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr null, ptr @Object]
@Map_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 0, i32 47, i32 10, i32 70, i32 10, i32 0, i32 70]
@HashMap_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr @HashMap, ptr @Object]
@HashMap_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 0, i32 107, i32 10, i32 130, i32 47, i32 10, i32 130]
@KeyNotFound_field_line_number = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_line_number, ptr @KeyNotFound_setter_line_number }
@KeyNotFound_field_file_name = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_file_name, ptr @KeyNotFound_setter_file_name }
@KeyNotFound_field_message = internal constant { ptr, ptr } { ptr @KeyNotFound_getter_message, ptr @KeyNotFound_setter_message }
@_parameterization_Nil = weak_odr dso_local constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_i32 = weak_odr dso_local constant [2 x ptr] [ptr @i32_typ, ptr null]
@i32_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@nil_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@buffer_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@union_typ = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Pair = dso_local constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_data_size_Container, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterator = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388349, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388477, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Map = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5249855671126779970, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Map_hashtbl, ptr @Map_offset_tbl, ptr @_data_size_Map, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@HashMap = dso_local constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2849643283898152329, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @HashMap_hashtbl, ptr @HashMap_offset_tbl, ptr @_data_size_HashMap, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Entry_hashtbl = dso_local constant [4 x ptr] [ptr @Entry, ptr @Object, ptr @any_typ, ptr null]
@Entry_offset_tbl = dso_local constant [4 x i32] [i32 10, i32 25, i32 10, i32 0]
@Entry = dso_local constant { [3 x i64], [7 x ptr], [15 x ptr] } { [3 x i64] [i64 4015701072841558310, i64 4611686018427388181, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Entry_hashtbl, ptr @Entry_offset_tbl, ptr @_data_size_Entry, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [15 x ptr] [ptr @Entry_field_Entry_0, ptr @Entry_field_Entry_1, ptr @Entry_field_primary_hash, ptr @Entry_field_key, ptr @Entry_field_value, ptr @Entry_B_init_keyK_valueV_primary_hashi32, ptr @Entry_B_key_, ptr @Entry_B_value_, ptr @Entry_B_primary_hash_, ptr @Entry_B_to_pair_, ptr @Entry_init_keyK_valueV_primary_hashi32, ptr @Entry_key_, ptr @Entry_value_, ptr @Entry_primary_hash_, ptr @Entry_to_pair_] }
@CuckooMap_hashtbl = dso_local constant [8 x ptr] [ptr null, ptr @CuckooMap, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Map, ptr @HashMap, ptr @Object]
@CuckooMap_offset_tbl = dso_local constant [8 x i32] [i32 0, i32 10, i32 259, i32 10, i32 282, i32 199, i32 79, i32 282]
@CuckooMap = dso_local constant { [3 x i64], [7 x ptr], [272 x ptr] } { [3 x i64] [i64 3547150501766965522, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @CuckooMap_hashtbl, ptr @CuckooMap_offset_tbl, ptr @_data_size_CuckooMap, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [272 x ptr] [ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_field_table1, ptr @CuckooMap_field_table2, ptr @CuckooMap_field_table_len, ptr @CuckooMap_field_size, ptr @CuckooMap_field_hasher, ptr @CuckooMap_field_eq, ptr @CuckooMap_B__Self_max_displacements_, ptr @CuckooMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1, ptr @CuckooMap_B_hash1_keyK, ptr @CuckooMap_B_hash2_from_primary_primary_hashi32, ptr @CuckooMap_B_index1_primary_hashi32, ptr @CuckooMap_B_index2_primary_hashi32, ptr @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32, ptr @CuckooMap_B_resize_, ptr @CuckooMap_B_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_B_insert_keyK_valueV, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap__Self_max_displacements_, ptr @CuckooMap_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1, ptr @CuckooMap_hash1_keyK, ptr @CuckooMap_hash2_from_primary_primary_hashi32, ptr @CuckooMap_index1_primary_hashi32, ptr @CuckooMap_index2_primary_hashi32, ptr @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V, ptr @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32, ptr @CuckooMap_resize_, ptr @CuckooMap_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil, ptr @CuckooMap_insert_keyK_valueV, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_0, ptr @CuckooMap_field_CuckooMap_1, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_size_, ptr @CuckooMap_B_get_keyK, ptr @CuckooMap_B__set_index_keyK_valueV, ptr @CuckooMap_B_remove_keyK, ptr @CuckooMap_B_clear_, ptr @CuckooMap_B__index_keyK, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_size_, ptr @CuckooMap_get_keyK, ptr @CuckooMap__set_index_keyK_valueV, ptr @CuckooMap_remove_keyK, ptr @CuckooMap_clear_, ptr @Map__index_keyK, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @CuckooMap_field_CuckooMap_6, ptr @CuckooMap_B_iterator_, ptr @CuckooMap_B_each_fFunctionT_to_Nothing, ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @CuckooMap_B_all_fFunctionT_to_i1, ptr @CuckooMap_B_any_fFunctionT_to_i1, ptr @CuckooMap_B_map_fFunctionT_to_U, ptr @CuckooMap_B_filter_fFunctionT_to_i1, ptr @CuckooMap_B_chain_otherIterableT, ptr @CuckooMap_B_interleave_otherIterableT, ptr @CuckooMap_B_zip_otherIterableU, ptr @CuckooMap_B_product_otherIterableU, ptr @CuckooMap_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@CuckooMapIterator_hashtbl = dso_local constant [8 x ptr] [ptr @CuckooMapIterator, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr null]
@CuckooMapIterator_offset_tbl = dso_local constant [8 x i32] [i32 10, i32 0, i32 27, i32 24, i32 27, i32 0, i32 10, i32 0]
@CuckooMapIterator = dso_local constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 -1975748647346050920, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @CuckooMapIterator_hashtbl, ptr @CuckooMapIterator_offset_tbl, ptr @_data_size_CuckooMapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @CuckooMapIterator_field_CuckooMapIterator_0, ptr @CuckooMapIterator_field_CuckooMapIterator_1, ptr @CuckooMapIterator_field_CuckooMapIterator_2, ptr @CuckooMapIterator_field_map_table1, ptr @CuckooMapIterator_field_map_table2, ptr @CuckooMapIterator_field_table_len, ptr @CuckooMapIterator_field_index, ptr @CuckooMapIterator_field_on_second, ptr @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, ptr @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil, ptr @CuckooMapIterator_B_next_, ptr @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32, ptr @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil, ptr @CuckooMapIterator_next_, ptr @CuckooMapIterator_field_CuckooMapIterator_2, ptr @CuckooMapIterator_B_next_, ptr @CuckooMapIterator_next_] }
@Entry_field_primary_hash = internal constant { ptr, ptr } { ptr @Entry_getter_primary_hash, ptr @Entry_setter_primary_hash }
@Entry_field_key = internal constant { ptr, ptr } { ptr @Entry_getter_key, ptr @Entry_setter_key }
@Entry_field_value = internal constant { ptr, ptr } { ptr @Entry_getter_value, ptr @Entry_setter_value }
@CuckooMap_field_table1 = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table1, ptr @CuckooMap_setter_table1 }
@CuckooMap_field_table2 = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table2, ptr @CuckooMap_setter_table2 }
@CuckooMap_field_table_len = internal constant { ptr, ptr } { ptr @CuckooMap_getter_table_len, ptr @CuckooMap_setter_table_len }
@CuckooMap_field_size = internal constant { ptr, ptr } { ptr @CuckooMap_getter_size, ptr @CuckooMap_setter_size }
@CuckooMap_field_hasher = internal constant { ptr, ptr } { ptr @CuckooMap_getter_hasher, ptr @CuckooMap_setter_hasher }
@CuckooMap_field_eq = internal constant { ptr, ptr } { ptr @CuckooMap_getter_eq, ptr @CuckooMap_setter_eq }
@CuckooMapIterator_field_map_table1 = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_map_table1, ptr @CuckooMapIterator_setter_map_table1 }
@CuckooMapIterator_field_map_table2 = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_map_table2, ptr @CuckooMapIterator_setter_map_table2 }
@CuckooMapIterator_field_table_len = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_table_len, ptr @CuckooMapIterator_setter_table_len }
@CuckooMapIterator_field_index = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_index, ptr @CuckooMapIterator_setter_index }
@CuckooMapIterator_field_on_second = internal constant { ptr, ptr } { ptr @CuckooMapIterator_getter_on_second, ptr @CuckooMapIterator_setter_on_second }

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define dso_local i1 @subtype_test(i64 %0, i64 %1, i64 %2, i64 %3, ptr nocapture nofree readonly %4) #0 {
  %6 = mul i64 %2, %1
  %7 = lshr i64 %6, 32
  %8 = xor i64 %7, %6
  %9 = and i64 %8, %0
  %10 = getelementptr i64, ptr %4, i64 %9
  %11 = load i64, ptr %10, align 4
  %12 = icmp eq i64 %11, %3
  ret i1 %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_PRNG(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_Default(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(28) %0, ptr nocapture nofree readnone %1) #2 {
  %3 = load ptr, ptr %0, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr inbounds i8, ptr %0, i64 8
  %6 = load i160, ptr %5, align 8
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_Default({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(28) %2) #3 {
  %4 = extractvalue { ptr, i160 } %0, 0
  %5 = extractvalue { ptr, i160 } %0, 1
  %6 = getelementptr inbounds i8, ptr %2, i64 8
  store ptr %4, ptr %2, align 8
  store i160 %5, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_size_Default(ptr nocapture nofree readnone %0) #4 {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @PRNG_B_init_initial_seedi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @PRNG_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @PRNG_init_initial_seedi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #6 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !3
  %11 = load i64, ptr %8, align 4, !noalias !3
  %12 = load ptr, ptr %9, align 8, !noalias !3
  %13 = mul i64 %10, -4401938362882229211
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !3
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 @llvm.smax.i32(i32 %3, i32 noundef 1) #44
  call void %24(ptr %6, i32 %25) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @PRNG_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !6
  %10 = load i64, ptr %7, align 4, !noalias !6
  %11 = load ptr, ptr %8, align 8, !noalias !6
  %12 = mul i64 %9, -4401938362882229211
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !6
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %5) #46
  %24 = mul i32 %23, 1103515245
  %25 = add i32 %24, 12345
  %26 = and i32 %25, 2147483647
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %4) #43
  %28 = getelementptr i8, ptr %21, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %5, i32 %26) #45
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %4) #43
  %31 = load ptr, ptr %20, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %5) #46
  ret i32 %33
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local void @set_offset(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0, ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(8) %1) local_unnamed_addr #8 {
  %3 = load ptr, ptr %0, align 8
  %4 = load i64, ptr %1, align 4
  %5 = getelementptr i8, ptr %3, i64 8
  %6 = getelementptr i8, ptr %3, i64 16
  %7 = getelementptr i8, ptr %3, i64 40
  %8 = load i64, ptr %5, align 4
  %9 = load i64, ptr %6, align 4
  %10 = load ptr, ptr %7, align 8
  %11 = mul i64 %8, %4
  %12 = lshr i64 %11, 32
  %13 = xor i64 %12, %11
  %14 = and i64 %13, %9
  %15 = getelementptr i32, ptr %10, i64 %14
  %16 = load i32, ptr %15, align 4
  %17 = getelementptr i8, ptr %0, i64 24
  store i32 %16, ptr %17, align 8
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #9

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local i32 @get_offset(ptr nocapture nofree readonly align 8 %0, ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(8) %1) local_unnamed_addr #10 {
  %3 = load i64, ptr %1, align 4
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = getelementptr i8, ptr %0, i64 40
  %7 = load i64, ptr %4, align 8
  %8 = load i64, ptr %5, align 8
  %9 = load ptr, ptr %6, align 8
  %10 = mul i64 %7, %3
  %11 = lshr i64 %10, 32
  %12 = xor i64 %11, %10
  %13 = and i64 %12, %8
  %14 = getelementptr i32, ptr %9, i64 %13
  %15 = load i32, ptr %14, align 4
  ret i32 %15
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local i64 @hash_to_index(i64 %0, i64 %1, i64 %2) local_unnamed_addr #4 {
  %4 = mul i64 %2, %1
  %5 = lshr i64 %4, 32
  %6 = xor i64 %5, %4
  %7 = and i64 %6, %0
  ret i64 %7
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #11

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @PRNG_getter_seed(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %0) #12 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @PRNG_setter_seed(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %0, i32 %1) #13 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define dso_local align 4 ptr @typegetter_wrapper(ptr nocapture nofree noundef nonnull readonly %0, ptr nocapture nofree noundef nonnull readonly %1) local_unnamed_addr #0 {
  %3 = tail call ptr %0(ptr nocapture nofree noundef nonnull readonly %1) #2
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define dso_local { i64, i64 } @size_wrapper(ptr nocapture nofree noundef nonnull readonly %0, ptr nocapture nofree readonly %1) local_unnamed_addr #0 {
  %3 = tail call { i64, i64 } %0(ptr nocapture nofree readonly %1) #2
  ret { i64, i64 } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define dso_local { ptr, i160 } @box_wrapper(ptr nocapture nofree noundef nonnull readonly %0, ptr nocapture nofree readonly %1, ptr nocapture nofree readonly %2) local_unnamed_addr #0 {
  %4 = tail call { ptr, i160 } %0(ptr nocapture nofree readonly %1, ptr nocapture nofree readonly %2) #2
  ret { ptr, i160 } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local void @unbox_wrapper(ptr nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, ptr nocapture nofree readonly %2, ptr nocapture nofree writeonly %3) local_unnamed_addr #14 {
  tail call void %0({ ptr, i160 } %1, ptr nocapture nofree readonly %2, ptr nocapture nofree writeonly %3) #8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define dso_local align 4 ptr @behavior_wrapper(ptr nocapture nofree noundef nonnull readonly %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree noundef nonnull readonly %2) local_unnamed_addr #15 {
  %4 = tail call ptr %0({ ptr, ptr, ptr, i32 } %1, ptr nocapture nofree noundef nonnull %2) #10
  ret ptr %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define dso_local align 4 ptr @class_behavior_wrapper(ptr nocapture nofree noundef nonnull readonly %0, ptr nocapture nofree noundef nonnull readonly %1) local_unnamed_addr #15 {
  %3 = tail call ptr %0(ptr nocapture nofree noundef nonnull %1) #10
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @adjust_trampoline(ptr nofree readonly %0) local_unnamed_addr #2 {
  %2 = tail call align 4 ptr @llvm.adjust.trampoline(ptr nofree readonly %0) #47
  ret ptr %2
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #16

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none)
define dso_local noalias align 4 ptr @bump_malloc(i64 noundef %0) local_unnamed_addr #17 {
  %2 = tail call noalias align 4 ptr @bump_malloc_inner(i64 noundef %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  ret ptr %2
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(argmem: readwrite)
define dso_local noalias align 4 ptr @bump_malloc_inner(i64 noundef %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #18 {
  %3 = add i64 %0, 15
  %4 = and i64 %3, -16
  %5 = load ptr, ptr %1, align 8
  %6 = getelementptr i8, ptr %5, i64 %4
  store ptr %6, ptr %1, align 8
  ret ptr %5
}

define dso_local { i64, i64 } @_data_size_tuple_typ(ptr nocapture nofree readonly align 4 %0) local_unnamed_addr {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %28, label %5

5:                                                ; preds = %5, %1
  %6 = phi i64 [ %26, %5 ], [ %3, %1 ]
  %7 = phi i64 [ %24, %5 ], [ 1, %1 ]
  %8 = phi i64 [ %23, %5 ], [ 0, %1 ]
  %9 = phi i64 [ %17, %5 ], [ 1, %1 ]
  %10 = inttoptr i64 %6 to ptr
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 72
  %13 = load ptr, ptr %12, align 8
  %14 = tail call { i64, i64 } %13(ptr nonnull align 8 %10)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = extractvalue { i64, i64 } %14, 1
  %17 = tail call i64 @llvm.umax.i64(i64 %16, i64 %9)
  %18 = urem i64 %8, %16
  %19 = icmp eq i64 %18, 0
  %20 = sub i64 %16, %18
  %21 = select i1 %19, i64 0, i64 %20
  %22 = add i64 %15, %8
  %23 = add i64 %22, %21
  %24 = add i64 %7, 1
  %25 = getelementptr ptr, ptr %0, i64 %24
  %26 = load i64, ptr %25, align 4
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %5

28:                                               ; preds = %5, %1
  %29 = phi i64 [ 1, %1 ], [ %17, %5 ]
  %30 = phi i64 [ 0, %1 ], [ %23, %5 ]
  %31 = urem i64 %30, %29
  %32 = icmp eq i64 %31, 0
  %33 = sub i64 %29, %31
  %34 = select i1 %32, i64 0, i64 %33
  %35 = add i64 %34, %30
  %36 = insertvalue { i64, i64 } undef, i64 %35, 0
  %37 = insertvalue { i64, i64 } %36, i64 %29, 1
  ret { i64, i64 } %37
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #11

define dso_local { i64, i64 } @_data_size_union_typ(ptr nocapture nofree readonly align 4 %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %32, label %5

5:                                                ; preds = %5, %1
  %6 = phi i64 [ %26, %5 ], [ %3, %1 ]
  %7 = phi i64 [ %24, %5 ], [ 1, %1 ]
  %8 = phi i64 [ %23, %5 ], [ 0, %1 ]
  %9 = phi i64 [ %17, %5 ], [ 1, %1 ]
  %10 = inttoptr i64 %6 to ptr
  %11 = load ptr, ptr %10, align 8
  %12 = getelementptr i8, ptr %11, i64 72
  %13 = load ptr, ptr %12, align 8
  %14 = tail call { i64, i64 } %13(ptr nonnull align 8 %10)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = extractvalue { i64, i64 } %14, 1
  %17 = tail call i64 @llvm.umax.i64(i64 noundef %16, i64 noundef %9)
  %18 = urem i64 %8, %16
  %19 = icmp eq i64 %18, 0
  %20 = sub i64 %16, %18
  %21 = select i1 %19, i64 0, i64 %20
  %22 = tail call i64 @llvm.umax.i64(i64 noundef %15, i64 noundef %8)
  %23 = tail call i64 @llvm.umax.i64(i64 noundef %22, i64 noundef %21)
  %24 = add i64 %7, 1
  %25 = getelementptr ptr, ptr %0, i64 %24
  %26 = load i64, ptr %25, align 4
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %5

28:                                               ; preds = %5
  %29 = icmp eq i64 %23, 32
  %30 = select i1 %29, i64 0, i64 8
  %31 = add i64 %30, %23
  br label %32

32:                                               ; preds = %28, %1
  %33 = phi i64 [ 1, %1 ], [ %17, %28 ]
  %34 = phi i64 [ 8, %1 ], [ %31, %28 ]
  %35 = urem i64 %34, %33
  %36 = icmp eq i64 %35, 0
  %37 = sub i64 %33, %35
  %38 = select i1 %36, i64 0, i64 %37
  %39 = add i64 %38, %34
  %40 = insertvalue { i64, i64 } undef, i64 %39, 0
  %41 = insertvalue { i64, i64 } %40, i64 %33, 1
  ret { i64, i64 } %41
}

define dso_local void @_unbox_union_typ({ ptr, i160 } %0, ptr nocapture nofree readonly align 4 %1, ptr nocapture nofree writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %5 = extractvalue { ptr, i160 } %0, 0
  store ptr %5, ptr %4, align 8
  %6 = extractvalue { ptr, i160 } %0, 1
  %7 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %6, ptr %7, align 8
  %8 = getelementptr i8, ptr %1, i64 8
  %9 = load i64, ptr %8, align 4
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %38, label %11

11:                                               ; preds = %11, %3
  %12 = phi i64 [ %32, %11 ], [ %9, %3 ]
  %13 = phi i64 [ %30, %11 ], [ 1, %3 ]
  %14 = phi i64 [ %29, %11 ], [ 0, %3 ]
  %15 = phi i64 [ %23, %11 ], [ 1, %3 ]
  %16 = inttoptr i64 %12 to ptr
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { i64, i64 } %19(ptr nonnull align 8 %16)
  %21 = extractvalue { i64, i64 } %20, 0
  %22 = extractvalue { i64, i64 } %20, 1
  %23 = tail call i64 @llvm.umax.i64(i64 noundef %22, i64 noundef %15)
  %24 = urem i64 %14, %22
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %22, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = tail call i64 @llvm.umax.i64(i64 noundef %21, i64 noundef %14)
  %29 = tail call i64 @llvm.umax.i64(i64 noundef %28, i64 noundef %27)
  %30 = add i64 %13, 1
  %31 = getelementptr ptr, ptr %1, i64 %30
  %32 = load i64, ptr %31, align 4
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %11

34:                                               ; preds = %11
  %35 = icmp eq i64 %29, 32
  %36 = select i1 %35, i64 0, i64 8
  %37 = add i64 %36, %29
  br label %38

38:                                               ; preds = %34, %3
  %39 = phi i64 [ 1, %3 ], [ %23, %34 ]
  %40 = phi i64 [ 8, %3 ], [ %37, %34 ]
  %41 = trunc i160 %6 to i64
  %42 = inttoptr i64 %41 to ptr
  %43 = urem i64 %40, %39
  %44 = icmp eq i64 %43, 0
  %45 = sub i64 %39, %43
  %46 = select i1 %44, i64 0, i64 %45
  %47 = add i64 %46, %40
  %48 = icmp slt i64 %47, 17
  %49 = icmp eq i64 %47, 32
  %50 = select i1 %48, ptr %7, ptr %42
  %51 = select i1 %49, ptr %4, ptr %50
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 1 %2, ptr nocapture nofree readonly align 1 %51, i64 %47, i1 noundef false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #19

define dso_local noundef nonnull align 4 ptr @coroutine_create(ptr nofree %0, ptr nofree %1) local_unnamed_addr {
  %3 = tail call noalias noundef nonnull align 8 dereferenceable(8388608) ptr @VirtualAlloc(ptr nofree noundef null, i64 noundef 8388608, i32 noundef 12288, i32 noundef 4) #23
  store ptr %0, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8388608
  %5 = ptrtoint ptr %4 to i64
  %6 = and i64 %5, -16
  %7 = getelementptr inbounds i8, ptr %3, i64 8
  %8 = getelementptr inbounds i8, ptr %3, i64 32
  %9 = getelementptr inbounds i8, ptr %3, i64 16
  %10 = getelementptr inbounds i8, ptr %3, i64 24
  store i64 %6, ptr %7, align 8
  store i64 %6, ptr %10, align 8
  store ptr %1, ptr %8, align 8
  %11 = getelementptr inbounds i8, ptr %3, i64 40
  store i1 false, ptr %11, align 8
  tail call void @coroutine_trampoline(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8388592) %9)
  ret ptr %3
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define dso_local noalias align 4 ptr @virtual_reserve(i64 %0) local_unnamed_addr #20 {
  %2 = tail call noalias align 4 ptr @VirtualAlloc(ptr nofree noundef null, i64 %0, i32 noundef 12288, i32 noundef 4) #23
  ret ptr %2
}

define dso_local void @coroutine_trampoline(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) %0) {
  store ptr blockaddress(@coroutine_trampoline, %3), ptr %0, align 8
  %2 = tail call i1 @returns_one() #49
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = load ptr, ptr @current_coroutine, align 8
  %5 = getelementptr i8, ptr %4, i64 32
  %6 = load ptr, ptr %5, align 8
  tail call void %6(ptr %4)
  %7 = load ptr, ptr @current_coroutine, align 8
  %8 = getelementptr i8, ptr %7, i64 40
  store i1 true, ptr %8, align 1
  tail call void @llvm.eh.sjlj.longjmp(ptr noundef nonnull align 8 dereferenceable(24) @into_caller_buf) #22
  unreachable

9:                                                ; preds = %1
  ret void
}

; Function Attrs: mustprogress nofree noinline norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define dso_local i1 @returns_one() local_unnamed_addr #21 {
  %1 = load i1, ptr @always_one, align 1
  ret i1 %1
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #22

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias align 4 ptr @VirtualAlloc(ptr, i64, i32, i32) local_unnamed_addr #23

define dso_local void @setup_landing_pad() {
  %1 = tail call noalias align 4 dereferenceable_or_null(5368709120) ptr @VirtualAlloc(ptr nofree noundef null, i64 noundef 5368709120, i32 noundef 12288, i32 noundef 4) #23
  store ptr %1, ptr @current_ptr, align 8
  %2 = tail call ptr @llvm.stacksave.p0() #50
  store ptr %2, ptr @into_caller_buf, align 8
  store ptr blockaddress(@setup_landing_pad, %13), ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 8), align 8
  store ptr %2, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  %3 = tail call noalias noundef nonnull align 8 dereferenceable(8388608) ptr @VirtualAlloc(ptr nofree noundef null, i64 noundef 8388608, i32 noundef 12288, i32 noundef 4) #23
  store ptr @setup_landing_pad, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8388608
  %5 = ptrtoint ptr %4 to i64
  %6 = and i64 %5, -16
  %7 = getelementptr inbounds i8, ptr %3, i64 8
  %8 = getelementptr inbounds i8, ptr %3, i64 32
  %9 = getelementptr inbounds i8, ptr %3, i64 16
  %10 = getelementptr inbounds i8, ptr %3, i64 24
  store i64 %6, ptr %7, align 8
  store i64 %6, ptr %10, align 8
  store ptr @arg_passer, ptr %8, align 8
  %11 = getelementptr inbounds i8, ptr %3, i64 40
  store i1 false, ptr %11, align 8
  tail call void @coroutine_trampoline(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8388592) %9)
  store ptr %3, ptr @current_coroutine, align 8
  %12 = tail call i1 @returns_one() #51
  br i1 %12, label %17, label %13

13:                                               ; preds = %0
  %14 = tail call i32 @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @string_string, ptr nofree noundef nonnull align 16 dereferenceable(45) @exception_message) #28
  %15 = load ptr, ptr @current_coroutine, align 8
  %16 = insertvalue { ptr } poison, ptr %15, 0
  tail call void @report_exception({ ptr } %16) #28
  tail call void @exit()
  unreachable

17:                                               ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #24

define dso_local void @arg_passer(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) {
  %2 = load ptr, ptr %0, align 8
  tail call void %2()
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #25

declare void @exit() local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local void @assume_offset(ptr nocapture nofree noundef nonnull readnone align 8 dereferenceable(8) %0, ptr nocapture nofree readnone align 4 %1) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define dso_local i1 @subtype_test_wrapper(ptr nocapture nofree noundef nonnull readonly %0, i64 %1, i64 %2, i64 %3, i64 %4, ptr nofree readonly %5) local_unnamed_addr #0 {
  %7 = tail call i1 %0(i64 %1, i64 %2, i64 %3, i64 %4, ptr %5) #2
  ret i1 %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local void @arg_buffer_filler(ptr nocapture nofree readnone %0) local_unnamed_addr #4 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define dso_local align 4 ptr @get_current_coroutine() local_unnamed_addr #26 {
  %1 = load ptr, ptr @current_coroutine, align 8
  ret ptr %1
}

; Function Attrs: noinline nounwind memory(readwrite)
define dso_local preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %0, ptr %1) #27 {
  %3 = getelementptr inbounds i8, ptr %0, i64 8
  %4 = getelementptr inbounds i8, ptr %0, i64 16
  store ptr blockaddress(@context_switch, %8), ptr %3, align 8
  %5 = tail call ptr @llvm.stacksave.p0() #50
  store ptr %5, ptr %0, align 8
  store ptr %5, ptr %4, align 8
  %6 = tail call i1 @returns_one() #49
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @llvm.eh.sjlj.longjmp(ptr %1) #22
  unreachable

8:                                                ; preds = %2
  ret void
}

; Function Attrs: nounwind
define dso_local void @coroutine_yield(ptr nocapture nofree nonnull writeonly align 8 dereferenceable(24) %0) local_unnamed_addr #28 {
  %2 = getelementptr inbounds i8, ptr %0, i64 8
  tail call preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %2, ptr noundef nonnull align 8 dereferenceable(24) @into_caller_buf) #52
  ret void
}

; Function Attrs: nounwind
define dso_local void @coroutine_call(ptr %0) local_unnamed_addr #28 {
  %2 = load ptr, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  %3 = load ptr, ptr @current_coroutine, align 8
  store ptr %0, ptr @current_coroutine, align 8
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load <2 x ptr>, ptr @into_caller_buf, align 8
  tail call preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) @into_caller_buf, ptr %4) #52
  store ptr %3, ptr @current_coroutine, align 8
  store <2 x ptr> %5, ptr @into_caller_buf, align 8
  store ptr %2, ptr getelementptr inbounds (i8, ptr @into_caller_buf, i64 16), align 8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
define dso_local void @anoint_trampoline(ptr nofree %0) local_unnamed_addr #29 {
  %2 = alloca i32, align 4
  %3 = call i32 @VirtualProtect(ptr nofree %0, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %2) #28
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) local_unnamed_addr #29

define dso_local i1 @hgzqejipdr(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @goryohrwlm(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @kobgulxfyk(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @eultmxdams(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @zmdnszcnkv(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @qglslaydpu(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @gmsltkzmbe(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @towonlcxcg(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @qkztifquoh(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @ygrdseesna(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @dbpurprsxk(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @byginoovye(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @elwawarosi(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @ryesqrruad(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @cowrhrqqtx(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @goxfdsovrl(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @xtbmzvyqyo(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @dqdnkdjhng(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

define dso_local i1 @yycrreevvs(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) #30 {
  %4 = extractvalue { ptr, i160 } %1, 1
  %5 = trunc i160 %4 to i32
  %6 = extractvalue { ptr, i160 } %2, 1
  %7 = trunc i160 %6 to i32
  %8 = call i1 %0(i32 %5, i32 %7)
  ret i1 %8
}

define dso_local i32 @ptvlruaxpt(ptr nest nocapture nofree noundef nonnull readonly %0, { ptr, i160 } %1) #30 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 %0(i32 %4)
  ret i32 %5
}

; Function Attrs: nounwind
define dso_local void @print_benchmark_result({ ptr, ptr, ptr, i32 } %0, i32 %1, i64 %2) local_unnamed_addr #31 {
  %4 = alloca [4 x i8], align 4
  store i32 0, ptr %4, align 4
  %5 = alloca [16 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  %6 = alloca [4 x i8], align 4
  store i32 0, ptr %6, align 4
  %7 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %7, i8 0, i64 15, i1 false)
  %8 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %8, i8 0, i64 15, i1 false)
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %12 = getelementptr i8, ptr %9, i64 8
  %13 = getelementptr i8, ptr %9, i64 16
  %14 = getelementptr i8, ptr %9, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !9
  %16 = load i64, ptr %13, align 4, !noalias !9
  %17 = load ptr, ptr %14, align 8, !noalias !9
  %18 = mul i64 %15, 6499063144389013426
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !9
  %24 = insertvalue { ptr, i160 } undef, ptr %9, 0
  %25 = ptrtoint ptr %10 to i64
  %26 = ptrtoint ptr %11 to i64
  %27 = zext i32 %23 to i160
  %28 = shl nuw i160 %27, 128
  %29 = zext i64 %26 to i160
  %30 = shl nuw nsw i160 %29, 64
  %31 = or disjoint i160 %28, %30
  %32 = zext i64 %25 to i160
  %33 = or disjoint i160 %31, %32
  %34 = insertvalue { ptr, i160 } %24, i160 %33, 1
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %35) #43
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  %38 = icmp eq ptr %9, @f64_typ
  br i1 %38, label %66, label %39

39:                                               ; preds = %3
  %40 = icmp eq ptr %9, @i32_typ
  br i1 %40, label %66, label %41

41:                                               ; preds = %39
  %42 = getelementptr i8, ptr %9, i64 24
  %43 = getelementptr i8, ptr %9, i64 32
  %44 = load i64, ptr %12, align 4
  %45 = load i64, ptr %13, align 4
  %46 = load ptr, ptr %42, align 8
  %47 = load ptr, ptr %43, align 8
  %48 = call i1 %46(i64 %45, i64 %44, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %47) #2
  br i1 %48, label %49, label %51

49:                                               ; preds = %41
  %50 = call i1 %46(i64 %45, i64 %44, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %47) #2
  br i1 %50, label %51, label %66

51:                                               ; preds = %49, %41
  %52 = icmp eq ptr %9, @bool_typ
  br i1 %52, label %66, label %53

53:                                               ; preds = %51
  %54 = icmp eq ptr %9, @i8_typ
  br i1 %54, label %66, label %55

55:                                               ; preds = %53
  %56 = call i1 %46(i64 %45, i64 %44, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %47) #2
  %57 = xor i1 %56, true
  %58 = or i1 %48, %57
  br i1 %58, label %59, label %66

59:                                               ; preds = %55
  %60 = icmp eq ptr %9, @i64_typ
  br i1 %60, label %66, label %61

61:                                               ; preds = %59
  %62 = icmp eq ptr %9, @nil_typ
  %63 = icmp eq ptr %9, null
  %64 = or i1 %62, %63
  %65 = select i1 %64, i64 2, i64 5
  br label %66

66:                                               ; preds = %61, %59, %55, %53, %51, %49, %39, %3
  %67 = phi i64 [ 7, %3 ], [ 4, %39 ], [ 1, %51 ], [ 9, %53 ], [ 8, %59 ], [ 3, %49 ], [ %65, %61 ], [ 6, %55 ]
  %68 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %67
  %69 = getelementptr i8, ptr %68, i64 80
  %70 = load ptr, ptr %69, align 8
  call void %70(ptr nonnull align 8 dereferenceable(8) %35, { ptr, i160 } %34) #28
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %8, align 16
  %71 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %8) #25
  %72 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %1) #25
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %7, align 16
  %73 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %7) #25
  %74 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %2) #25
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #53
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %6, align 4
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  %77 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %6) #25
  %78 = icmp sgt i32 %1, 0
  br i1 %78, label %79, label %92

79:                                               ; preds = %66
  %80 = icmp sgt i64 %2, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %79
  %82 = mul i64 %2, 1000000
  %83 = zext nneg i32 %1 to i64
  %84 = sdiv i64 %82, %83
  br label %85

85:                                               ; preds = %81, %79
  %86 = phi i64 [ %84, %81 ], [ 0, %79 ]
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %5, align 16
  %87 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %5) #25
  %88 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %86) #25
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #53
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %4, align 4
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  %91 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %4) #25
  br label %92

92:                                               ; preds = %85, %66
  ret void
}

define dso_local void @benchmark_insert_sequential(i32 %0) local_unnamed_addr #30 {
  %2 = alloca {}, align 8
  %3 = alloca [5 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(5) %3, i8 0, i64 5, i1 false)
  %4 = alloca [19 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(19) %4, i8 0, i64 19, i1 false)
  %5 = alloca [4 x i8], align 4
  store i32 0, ptr %5, align 4
  %6 = alloca [16 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  %7 = alloca [4 x i8], align 4
  store i32 0, ptr %7, align 4
  %8 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %8, i8 0, i64 15, i1 false)
  %9 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %9, i8 0, i64 15, i1 false)
  %10 = alloca [18 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(18) %10, i8 0, i64 18, i1 false)
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [3 x ptr], align 8
  %14 = alloca { ptr, ptr, ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [3 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %21) #43
  %25 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %12) #43
  %26 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %25, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %12) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %12) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %25, ptr noalias nofree noundef nonnull readnone align 4 @ptvlruaxpt, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %27 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %25) #47
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %25) #43
  %29 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %11) #43
  %30 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %29, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %11) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %11) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %29, ptr noalias nofree noundef nonnull readnone align 4 @yycrreevvs, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %31 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %29) #47
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %29) #43
  %33 = getelementptr inbounds i8, ptr %21, i64 48
  store ptr %27, ptr %33, align 8
  %34 = getelementptr inbounds i8, ptr %21, i64 56
  store ptr %31, ptr %34, align 8
  %35 = getelementptr inbounds i8, ptr %21, i64 40
  store i32 8, ptr %35, align 8
  %36 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %37 = getelementptr inbounds i8, ptr %21, i64 24
  store ptr %36, ptr %37, align 8
  %38 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %39 = getelementptr inbounds i8, ptr %21, i64 32
  store ptr %38, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %41 = call i64 @clock()
  %42 = icmp sgt i32 %0, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %1
  %44 = getelementptr inbounds i8, ptr %21, i64 44
  %45 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr undef, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 10, 3
  br label %52

48:                                               ; preds = %1
  %49 = call i64 @clock()
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  br label %1512

52:                                               ; preds = %1328, %43
  %53 = phi i32 [ %54, %1328 ], [ 0, %43 ]
  %54 = add nuw nsw i32 %53, 1
  %55 = zext nneg i32 %53 to i160
  %56 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %55, 1
  %57 = zext nneg i32 %54 to i160
  %58 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %57, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %59 = load ptr, ptr %33, align 8
  %60 = call i32 %59({ ptr, i160 } %56) #28
  %61 = load i32, ptr %35, align 8
  %62 = add i32 %61, -1
  %63 = and i32 %62, %60
  %64 = load ptr, ptr %37, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %66 = sext i32 %63 to i64
  %67 = shl nsw i64 %66, 5
  %68 = getelementptr i8, ptr %64, i64 %67
  %69 = load ptr, ptr %68, align 8
  %70 = getelementptr i8, ptr %68, i64 8
  %71 = icmp ne ptr %69, @nil_typ
  %72 = icmp ne ptr %69, null
  %73 = and i1 %71, %72
  br i1 %73, label %74, label %197

74:                                               ; preds = %52
  %75 = load i64, ptr %70, align 4
  %76 = getelementptr i8, ptr %68, i64 16
  %77 = load i64, ptr %76, align 4
  %78 = inttoptr i64 %75 to ptr
  %79 = inttoptr i64 %77 to ptr
  %80 = getelementptr i8, ptr %69, i64 8
  %81 = getelementptr i8, ptr %69, i64 16
  %82 = getelementptr i8, ptr %69, i64 40
  %83 = load i64, ptr %80, align 4, !noalias !12
  %84 = load i64, ptr %81, align 4, !noalias !12
  %85 = load ptr, ptr %82, align 8, !noalias !12
  %86 = mul i64 %83, 4015701072841558310
  %87 = lshr i64 %86, 32
  %88 = xor i64 %87, %86
  %89 = and i64 %88, %84
  %90 = getelementptr i32, ptr %85, i64 %89
  %91 = load i32, ptr %90, align 4, !noalias !12
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %93 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %78, 1
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %79, 2
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %91, 3
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %97 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %69) #43
  %98 = sext i32 %91 to i64
  %99 = getelementptr ptr, ptr %69, i64 %98
  %100 = getelementptr i8, ptr %99, i64 64
  %101 = load ptr, ptr %100, align 8
  %102 = call align 4 ptr %101({ ptr, ptr, ptr, i32 } %95, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %103 = call i32 %102({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull align 8 %2) #28
  %104 = icmp eq i32 %103, %60
  br i1 %104, label %105, label %197

105:                                              ; preds = %74
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %69)
  %108 = getelementptr i8, ptr %99, i64 48
  %109 = load ptr, ptr %108, align 8
  %110 = call align 4 ptr %109({ ptr, ptr, ptr, i32 } %95, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %111 = call { ptr, i160 } %110({ ptr, ptr, ptr, i32 } %95, { ptr, ptr, ptr, i32 } %95, ptr nonnull align 8 %2) #28
  %112 = load ptr, ptr %34, align 8
  %113 = call i1 %112({ ptr, i160 } %111, { ptr, i160 } %56) #28
  br i1 %113, label %114, label %197

114:                                              ; preds = %105
  %115 = load ptr, ptr %21, align 8
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %117 = load ptr, ptr %22, align 8
  %118 = load ptr, ptr %115, align 8, !alias.scope !15
  %119 = getelementptr i8, ptr %118, i64 72
  %120 = load ptr, ptr %119, align 8, !alias.scope !15
  %121 = call { i64, i64 } %120(ptr nocapture nofree nonnull readonly align 8 %115) #2, !alias.scope !15
  %122 = extractvalue { i64, i64 } %121, 0
  %123 = extractvalue { i64, i64 } %121, 1
  %124 = urem i64 20, %123
  %125 = icmp eq i64 %124, 0
  %126 = sub i64 %123, %124
  %127 = select i1 %125, i64 0, i64 %126
  %128 = add i64 %122, 20
  %129 = add i64 %128, %127
  %130 = load ptr, ptr %117, align 8, !alias.scope !15
  %131 = getelementptr i8, ptr %130, i64 72
  %132 = load ptr, ptr %131, align 8, !alias.scope !15
  %133 = call { i64, i64 } %132(ptr nocapture nofree nonnull readonly align 8 %117) #2, !alias.scope !15
  %134 = extractvalue { i64, i64 } %133, 0
  %135 = extractvalue { i64, i64 } %133, 1
  %136 = call i64 @llvm.umax.i64(i64 %123, i64 %135) #44
  %137 = call i64 @llvm.umax.i64(i64 %136, i64 noundef 8) #44, !range !18
  %138 = urem i64 %129, %135
  %139 = icmp eq i64 %138, 0
  %140 = sub i64 %135, %138
  %141 = select i1 %139, i64 0, i64 %140
  %142 = add i64 %134, %129
  %143 = add i64 %142, %141
  %144 = urem i64 %143, %137
  %145 = icmp eq i64 %144, 0
  %146 = sub i64 %137, %144
  %147 = select i1 %145, i64 0, i64 %146
  %148 = add i64 %147, %143
  %149 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %148, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %115, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %149, i64 8
  store ptr %117, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %149)
  %152 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %153 = load ptr, ptr %115, align 8
  %154 = getelementptr i8, ptr %153, i64 72
  %155 = load ptr, ptr %154, align 8
  %156 = call { i64, i64 } %155(ptr nocapture nofree nonnull readonly align 8 %115) #2
  %157 = extractvalue { i64, i64 } %156, 1
  %158 = urem i64 20, %157
  %159 = icmp eq i64 %158, 0
  %160 = sub i64 %157, %158
  %161 = add i64 %160, 20
  %162 = select i1 %159, i64 20, i64 %161
  %163 = getelementptr i8, ptr %149, i64 %162
  %164 = getelementptr i8, ptr %153, i64 64
  %165 = load ptr, ptr %164, align 8
  call void %165({ ptr, i160 } %56, ptr nocapture nofree nonnull readonly align 8 %115, ptr nocapture nofree writeonly %163) #8
  %166 = load ptr, ptr %149, align 8
  %167 = load ptr, ptr %166, align 8
  %168 = getelementptr i8, ptr %167, i64 72
  %169 = load ptr, ptr %168, align 8
  %170 = call { i64, i64 } %169(ptr nocapture nofree nonnull readonly align 8 %166) #2
  %171 = extractvalue { i64, i64 } %170, 0
  %172 = extractvalue { i64, i64 } %170, 1
  %173 = urem i64 20, %172
  %174 = icmp eq i64 %173, 0
  %175 = sub i64 %172, %173
  %176 = select i1 %174, i64 0, i64 %175
  %177 = add i64 %171, 20
  %178 = add i64 %177, %176
  %179 = load ptr, ptr %150, align 8
  %180 = load ptr, ptr %179, align 8
  %181 = getelementptr i8, ptr %180, i64 72
  %182 = load ptr, ptr %181, align 8
  %183 = call { i64, i64 } %182(ptr nocapture nofree nonnull readonly align 8 %179) #2
  %184 = extractvalue { i64, i64 } %183, 1
  %185 = urem i64 %178, %184
  %186 = icmp eq i64 %185, 0
  %187 = sub i64 %184, %185
  %188 = select i1 %186, i64 0, i64 %187
  %189 = getelementptr i8, ptr %149, i64 %178
  %190 = getelementptr i8, ptr %189, i64 %188
  %191 = getelementptr i8, ptr %180, i64 64
  %192 = load ptr, ptr %191, align 8
  call void %192({ ptr, i160 } %58, ptr nocapture nofree nonnull readonly align 8 %179, ptr nocapture nofree writeonly %190) #8
  %193 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %194 = getelementptr inbounds i8, ptr %149, i64 16
  store i32 %60, ptr %194, align 8
  store ptr @Entry, ptr %68, align 8
  %195 = ptrtoint ptr %149 to i64
  store i64 %195, ptr %70, align 4
  %196 = getelementptr i8, ptr %68, i64 24
  store i32 10, ptr %196, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1328

197:                                              ; preds = %105, %74, %52
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %198 = add i32 %60, 2127912214
  %199 = shl i32 %60, 12
  %200 = add i32 %198, %199
  %201 = ashr i32 %200, 19
  %202 = xor i32 %200, %201
  %203 = xor i32 %202, -949894596
  %204 = add i32 %203, 374761393
  %205 = shl i32 %203, 5
  %206 = add i32 %204, %205
  %207 = add i32 %206, -744332180
  %208 = shl i32 %206, 9
  %209 = xor i32 %207, %208
  %210 = add i32 %209, -42973499
  %211 = shl i32 %209, 3
  %212 = add i32 %210, %211
  %213 = ashr i32 %212, 16
  %214 = xor i32 %212, %213
  %215 = xor i32 %214, -1252372727
  %216 = load i32, ptr %35, align 8
  %217 = add i32 %216, -1
  %218 = and i32 %217, %215
  %219 = load ptr, ptr %39, align 8
  %220 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %221 = sext i32 %218 to i64
  %222 = shl nsw i64 %221, 5
  %223 = getelementptr i8, ptr %219, i64 %222
  %224 = load ptr, ptr %223, align 8
  %225 = getelementptr i8, ptr %223, i64 8
  %226 = icmp ne ptr %224, @nil_typ
  %227 = icmp ne ptr %224, null
  %228 = and i1 %226, %227
  br i1 %228, label %229, label %352

229:                                              ; preds = %197
  %230 = load i64, ptr %225, align 4
  %231 = getelementptr i8, ptr %223, i64 16
  %232 = load i64, ptr %231, align 4
  %233 = inttoptr i64 %230 to ptr
  %234 = inttoptr i64 %232 to ptr
  %235 = getelementptr i8, ptr %224, i64 8
  %236 = getelementptr i8, ptr %224, i64 16
  %237 = getelementptr i8, ptr %224, i64 40
  %238 = load i64, ptr %235, align 4, !noalias !19
  %239 = load i64, ptr %236, align 4, !noalias !19
  %240 = load ptr, ptr %237, align 8, !noalias !19
  %241 = mul i64 %238, 4015701072841558310
  %242 = lshr i64 %241, 32
  %243 = xor i64 %242, %241
  %244 = and i64 %243, %239
  %245 = getelementptr i32, ptr %240, i64 %244
  %246 = load i32, ptr %245, align 4, !noalias !19
  %247 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %224, 0
  %248 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %233, 1
  %249 = insertvalue { ptr, ptr, ptr, i32 } %248, ptr %234, 2
  %250 = insertvalue { ptr, ptr, ptr, i32 } %249, i32 %246, 3
  %251 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %252 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %224) #43
  %253 = sext i32 %246 to i64
  %254 = getelementptr ptr, ptr %224, i64 %253
  %255 = getelementptr i8, ptr %254, i64 64
  %256 = load ptr, ptr %255, align 8
  %257 = call align 4 ptr %256({ ptr, ptr, ptr, i32 } %250, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %258 = call i32 %257({ ptr, ptr, ptr, i32 } %250, { ptr, ptr, ptr, i32 } %250, ptr nonnull align 8 %2) #28
  %259 = icmp eq i32 %258, %60
  br i1 %259, label %260, label %352

260:                                              ; preds = %229
  %261 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %262 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %224)
  %263 = getelementptr i8, ptr %254, i64 48
  %264 = load ptr, ptr %263, align 8
  %265 = call align 4 ptr %264({ ptr, ptr, ptr, i32 } %250, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %266 = call { ptr, i160 } %265({ ptr, ptr, ptr, i32 } %250, { ptr, ptr, ptr, i32 } %250, ptr nonnull align 8 %2) #28
  %267 = load ptr, ptr %34, align 8
  %268 = call i1 %267({ ptr, i160 } %266, { ptr, i160 } %56) #28
  br i1 %268, label %269, label %352

269:                                              ; preds = %260
  %270 = load ptr, ptr %21, align 8
  %271 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %272 = load ptr, ptr %22, align 8
  %273 = load ptr, ptr %270, align 8, !alias.scope !22
  %274 = getelementptr i8, ptr %273, i64 72
  %275 = load ptr, ptr %274, align 8, !alias.scope !22
  %276 = call { i64, i64 } %275(ptr nocapture nofree nonnull readonly align 8 %270) #2, !alias.scope !22
  %277 = extractvalue { i64, i64 } %276, 0
  %278 = extractvalue { i64, i64 } %276, 1
  %279 = urem i64 20, %278
  %280 = icmp eq i64 %279, 0
  %281 = sub i64 %278, %279
  %282 = select i1 %280, i64 0, i64 %281
  %283 = add i64 %277, 20
  %284 = add i64 %283, %282
  %285 = load ptr, ptr %272, align 8, !alias.scope !22
  %286 = getelementptr i8, ptr %285, i64 72
  %287 = load ptr, ptr %286, align 8, !alias.scope !22
  %288 = call { i64, i64 } %287(ptr nocapture nofree nonnull readonly align 8 %272) #2, !alias.scope !22
  %289 = extractvalue { i64, i64 } %288, 0
  %290 = extractvalue { i64, i64 } %288, 1
  %291 = call i64 @llvm.umax.i64(i64 %278, i64 %290) #44
  %292 = call i64 @llvm.umax.i64(i64 %291, i64 noundef 8) #44, !range !18
  %293 = urem i64 %284, %290
  %294 = icmp eq i64 %293, 0
  %295 = sub i64 %290, %293
  %296 = select i1 %294, i64 0, i64 %295
  %297 = add i64 %289, %284
  %298 = add i64 %297, %296
  %299 = urem i64 %298, %292
  %300 = icmp eq i64 %299, 0
  %301 = sub i64 %292, %299
  %302 = select i1 %300, i64 0, i64 %301
  %303 = add i64 %302, %298
  %304 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %303, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %270, ptr %304, align 8
  %305 = getelementptr inbounds i8, ptr %304, i64 8
  store ptr %272, ptr %305, align 8
  %306 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %304)
  %307 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %308 = load ptr, ptr %270, align 8
  %309 = getelementptr i8, ptr %308, i64 72
  %310 = load ptr, ptr %309, align 8
  %311 = call { i64, i64 } %310(ptr nocapture nofree nonnull readonly align 8 %270) #2
  %312 = extractvalue { i64, i64 } %311, 1
  %313 = urem i64 20, %312
  %314 = icmp eq i64 %313, 0
  %315 = sub i64 %312, %313
  %316 = add i64 %315, 20
  %317 = select i1 %314, i64 20, i64 %316
  %318 = getelementptr i8, ptr %304, i64 %317
  %319 = getelementptr i8, ptr %308, i64 64
  %320 = load ptr, ptr %319, align 8
  call void %320({ ptr, i160 } %56, ptr nocapture nofree nonnull readonly align 8 %270, ptr nocapture nofree writeonly %318) #8
  %321 = load ptr, ptr %304, align 8
  %322 = load ptr, ptr %321, align 8
  %323 = getelementptr i8, ptr %322, i64 72
  %324 = load ptr, ptr %323, align 8
  %325 = call { i64, i64 } %324(ptr nocapture nofree nonnull readonly align 8 %321) #2
  %326 = extractvalue { i64, i64 } %325, 0
  %327 = extractvalue { i64, i64 } %325, 1
  %328 = urem i64 20, %327
  %329 = icmp eq i64 %328, 0
  %330 = sub i64 %327, %328
  %331 = select i1 %329, i64 0, i64 %330
  %332 = add i64 %326, 20
  %333 = add i64 %332, %331
  %334 = load ptr, ptr %305, align 8
  %335 = load ptr, ptr %334, align 8
  %336 = getelementptr i8, ptr %335, i64 72
  %337 = load ptr, ptr %336, align 8
  %338 = call { i64, i64 } %337(ptr nocapture nofree nonnull readonly align 8 %334) #2
  %339 = extractvalue { i64, i64 } %338, 1
  %340 = urem i64 %333, %339
  %341 = icmp eq i64 %340, 0
  %342 = sub i64 %339, %340
  %343 = select i1 %341, i64 0, i64 %342
  %344 = getelementptr i8, ptr %304, i64 %333
  %345 = getelementptr i8, ptr %344, i64 %343
  %346 = getelementptr i8, ptr %335, i64 64
  %347 = load ptr, ptr %346, align 8
  call void %347({ ptr, i160 } %58, ptr nocapture nofree nonnull readonly align 8 %334, ptr nocapture nofree writeonly %345) #8
  %348 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %349 = getelementptr inbounds i8, ptr %304, i64 16
  store i32 %60, ptr %349, align 8
  store ptr @Entry, ptr %223, align 8
  %350 = ptrtoint ptr %304 to i64
  store i64 %350, ptr %225, align 4
  %351 = getelementptr i8, ptr %223, i64 24
  store i32 10, ptr %351, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1328

352:                                              ; preds = %260, %229, %197
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %353 = load i32, ptr %44, align 4
  %354 = load i32, ptr %35, align 8
  %355 = icmp slt i32 %353, %354
  br i1 %355, label %442, label %356

356:                                              ; preds = %352
  %357 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %358 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %359 = load ptr, ptr %37, align 8
  %360 = load ptr, ptr %39, align 8
  %361 = shl i32 %354, 1
  %362 = call i32 @llvm.smax.i32(i32 %361, i32 noundef 16) #43
  store i32 %362, ptr %35, align 8
  %363 = zext nneg i32 %362 to i64
  %364 = shl nuw nsw i64 %363, 5
  %365 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %364, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %365, ptr %37, align 8
  %366 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %364, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %366, ptr %39, align 8
  store i32 0, ptr %44, align 4
  %367 = icmp sgt i32 %354, 0
  br i1 %367, label %368, label %442

368:                                              ; preds = %356
  %369 = zext nneg i32 %354 to i64
  br label %370

370:                                              ; preds = %403, %368
  %371 = phi i64 [ 0, %368 ], [ %404, %403 ]
  %372 = shl nuw nsw i64 %371, 5
  %373 = getelementptr i8, ptr %359, i64 %372
  %374 = load ptr, ptr %373, align 8
  %375 = icmp ne ptr %374, @nil_typ
  %376 = icmp ne ptr %374, null
  %377 = and i1 %375, %376
  br i1 %377, label %378, label %403

378:                                              ; preds = %370
  %379 = getelementptr i8, ptr %373, i64 8
  %380 = load i64, ptr %379, align 4
  %381 = getelementptr i8, ptr %373, i64 16
  %382 = load i64, ptr %381, align 4
  %383 = inttoptr i64 %380 to ptr
  %384 = inttoptr i64 %382 to ptr
  %385 = getelementptr i8, ptr %374, i64 8
  %386 = getelementptr i8, ptr %374, i64 16
  %387 = getelementptr i8, ptr %374, i64 40
  %388 = load i64, ptr %385, align 4, !noalias !25
  %389 = load i64, ptr %386, align 4, !noalias !25
  %390 = load ptr, ptr %387, align 8, !noalias !25
  %391 = mul i64 %388, 4015701072841558310
  %392 = lshr i64 %391, 32
  %393 = xor i64 %392, %391
  %394 = and i64 %393, %389
  %395 = getelementptr i32, ptr %390, i64 %394
  %396 = load i32, ptr %395, align 4, !noalias !26
  %397 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %374, 0
  %398 = insertvalue { ptr, ptr, ptr, i32 } %397, ptr %383, 1
  %399 = insertvalue { ptr, ptr, ptr, i32 } %398, ptr %384, 2
  %400 = insertvalue { ptr, ptr, ptr, i32 } %399, i32 %396, 3
  %401 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %402 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %400) #28
  br label %403

403:                                              ; preds = %378, %370
  %404 = add nuw nsw i64 %371, 1
  %405 = icmp eq i64 %404, %369
  br i1 %405, label %406, label %370

406:                                              ; preds = %439, %403
  %407 = phi i64 [ %440, %439 ], [ 0, %403 ]
  %408 = shl nuw nsw i64 %407, 5
  %409 = getelementptr i8, ptr %360, i64 %408
  %410 = load ptr, ptr %409, align 8
  %411 = icmp ne ptr %410, @nil_typ
  %412 = icmp ne ptr %410, null
  %413 = and i1 %411, %412
  br i1 %413, label %414, label %439

414:                                              ; preds = %406
  %415 = getelementptr i8, ptr %409, i64 8
  %416 = load i64, ptr %415, align 4
  %417 = getelementptr i8, ptr %409, i64 16
  %418 = load i64, ptr %417, align 4
  %419 = inttoptr i64 %416 to ptr
  %420 = inttoptr i64 %418 to ptr
  %421 = getelementptr i8, ptr %410, i64 8
  %422 = getelementptr i8, ptr %410, i64 16
  %423 = getelementptr i8, ptr %410, i64 40
  %424 = load i64, ptr %421, align 4, !noalias !25
  %425 = load i64, ptr %422, align 4, !noalias !25
  %426 = load ptr, ptr %423, align 8, !noalias !25
  %427 = mul i64 %424, 4015701072841558310
  %428 = lshr i64 %427, 32
  %429 = xor i64 %428, %427
  %430 = and i64 %429, %425
  %431 = getelementptr i32, ptr %426, i64 %430
  %432 = load i32, ptr %431, align 4, !noalias !29
  %433 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %410, 0
  %434 = insertvalue { ptr, ptr, ptr, i32 } %433, ptr %419, 1
  %435 = insertvalue { ptr, ptr, ptr, i32 } %434, ptr %420, 2
  %436 = insertvalue { ptr, ptr, ptr, i32 } %435, i32 %432, 3
  %437 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %438 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %436) #28
  br label %439

439:                                              ; preds = %414, %406
  %440 = add nuw nsw i64 %407, 1
  %441 = icmp eq i64 %440, %369
  br i1 %441, label %442, label %406

442:                                              ; preds = %439, %356, %352
  %443 = load ptr, ptr %21, align 8
  %444 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %445 = load ptr, ptr %22, align 8
  %446 = load ptr, ptr %443, align 8
  %447 = getelementptr i8, ptr %446, i64 72
  %448 = load ptr, ptr %447, align 8
  %449 = call { i64, i64 } %448(ptr nocapture nofree nonnull readonly align 8 %443) #2
  %450 = extractvalue { i64, i64 } %449, 0
  %451 = extractvalue { i64, i64 } %449, 1
  %452 = urem i64 20, %451
  %453 = icmp eq i64 %452, 0
  %454 = sub i64 %451, %452
  %455 = select i1 %453, i64 0, i64 %454
  %456 = add i64 %450, 20
  %457 = add i64 %456, %455
  %458 = load ptr, ptr %445, align 8
  %459 = getelementptr i8, ptr %458, i64 72
  %460 = load ptr, ptr %459, align 8
  %461 = call { i64, i64 } %460(ptr nocapture nofree nonnull readonly align 8 %445) #2
  %462 = extractvalue { i64, i64 } %461, 0
  %463 = extractvalue { i64, i64 } %461, 1
  %464 = call i64 @llvm.umax.i64(i64 %451, i64 %463) #44
  %465 = call i64 @llvm.umax.i64(i64 %464, i64 noundef 8) #44, !range !18
  %466 = urem i64 %457, %463
  %467 = icmp eq i64 %466, 0
  %468 = sub i64 %463, %466
  %469 = select i1 %467, i64 0, i64 %468
  %470 = add i64 %462, %457
  %471 = add i64 %470, %469
  %472 = urem i64 %471, %465
  %473 = icmp eq i64 %472, 0
  %474 = sub i64 %465, %472
  %475 = select i1 %473, i64 0, i64 %474
  %476 = add i64 %475, %471
  %477 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %476, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %443, ptr %477, align 8
  %478 = getelementptr inbounds i8, ptr %477, i64 8
  store ptr %445, ptr %478, align 8
  %479 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %477)
  %480 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %481 = load ptr, ptr %443, align 8
  %482 = getelementptr i8, ptr %481, i64 72
  %483 = load ptr, ptr %482, align 8
  %484 = call { i64, i64 } %483(ptr nocapture nofree nonnull readonly align 8 %443) #2
  %485 = extractvalue { i64, i64 } %484, 1
  %486 = urem i64 20, %485
  %487 = icmp eq i64 %486, 0
  %488 = sub i64 %485, %486
  %489 = add i64 %488, 20
  %490 = select i1 %487, i64 20, i64 %489
  %491 = getelementptr i8, ptr %477, i64 %490
  %492 = getelementptr i8, ptr %481, i64 64
  %493 = load ptr, ptr %492, align 8
  call void %493({ ptr, i160 } %56, ptr nocapture nofree nonnull readonly align 8 %443, ptr nocapture nofree writeonly %491) #8
  %494 = load ptr, ptr %477, align 8
  %495 = load ptr, ptr %494, align 8
  %496 = getelementptr i8, ptr %495, i64 72
  %497 = load ptr, ptr %496, align 8
  %498 = call { i64, i64 } %497(ptr nocapture nofree nonnull readonly align 8 %494) #2
  %499 = extractvalue { i64, i64 } %498, 0
  %500 = extractvalue { i64, i64 } %498, 1
  %501 = urem i64 20, %500
  %502 = icmp eq i64 %501, 0
  %503 = sub i64 %500, %501
  %504 = select i1 %502, i64 0, i64 %503
  %505 = add i64 %499, 20
  %506 = add i64 %505, %504
  %507 = load ptr, ptr %478, align 8
  %508 = load ptr, ptr %507, align 8
  %509 = getelementptr i8, ptr %508, i64 72
  %510 = load ptr, ptr %509, align 8
  %511 = call { i64, i64 } %510(ptr nocapture nofree nonnull readonly align 8 %507) #2
  %512 = extractvalue { i64, i64 } %511, 1
  %513 = urem i64 %506, %512
  %514 = icmp eq i64 %513, 0
  %515 = sub i64 %512, %513
  %516 = select i1 %514, i64 0, i64 %515
  %517 = getelementptr i8, ptr %477, i64 %506
  %518 = getelementptr i8, ptr %517, i64 %516
  %519 = getelementptr i8, ptr %508, i64 64
  %520 = load ptr, ptr %519, align 8
  call void %520({ ptr, i160 } %58, ptr nocapture nofree nonnull readonly align 8 %507, ptr nocapture nofree writeonly %518) #8
  %521 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %522 = getelementptr inbounds i8, ptr %477, i64 16
  store i32 %60, ptr %522, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %523 = ptrtoint ptr %477 to i64
  %524 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %525 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %526 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %527

527:                                              ; preds = %606, %442
  %528 = phi i64 [ undef, %442 ], [ %608, %606 ]
  %529 = phi i64 [ %523, %442 ], [ %607, %606 ]
  %530 = phi i32 [ 0, %442 ], [ %543, %606 ]
  %531 = phi i1 [ true, %442 ], [ %624, %606 ]
  %532 = phi ptr [ @Entry, %442 ], [ %609, %606 ]
  %533 = phi ptr [ %477, %442 ], [ %610, %606 ]
  %534 = phi ptr [ undef, %442 ], [ %611, %606 ]
  %535 = phi i32 [ 10, %442 ], [ %623, %606 ]
  %536 = sext i32 %535 to i64
  %537 = getelementptr ptr, ptr %532, i64 %536
  %538 = getelementptr i8, ptr %537, i64 64
  %539 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %532, 0
  %540 = insertvalue { ptr, ptr, ptr, i32 } %539, ptr %533, 1
  %541 = insertvalue { ptr, ptr, ptr, i32 } %540, ptr %534, 2
  %542 = insertvalue { ptr, ptr, ptr, i32 } %541, i32 %535, 3
  %543 = add nuw nsw i32 %530, 1
  %544 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %532)
  %545 = load ptr, ptr %538, align 8
  %546 = call align 4 ptr %545({ ptr, ptr, ptr, i32 } %542, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %547 = call i32 %546({ ptr, ptr, ptr, i32 } %542, { ptr, ptr, ptr, i32 } %542, ptr nonnull align 8 %2) #28
  br i1 %531, label %548, label %568

548:                                              ; preds = %527
  %549 = load i32, ptr %35, align 8
  %550 = add i32 %549, -1
  %551 = and i32 %550, %547
  %552 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %553 = load ptr, ptr %37, align 8
  %554 = sext i32 %551 to i64
  %555 = shl nsw i64 %554, 5
  %556 = getelementptr i8, ptr %553, i64 %555
  %557 = load ptr, ptr %556, align 8
  %558 = getelementptr i8, ptr %556, i64 8
  %559 = load i160, ptr %558, align 4
  store ptr %532, ptr %556, align 8
  store i64 %529, ptr %558, align 4
  %560 = getelementptr i8, ptr %556, i64 16
  store i64 %528, ptr %560, align 4
  %561 = getelementptr i8, ptr %556, i64 24
  store i32 %535, ptr %561, align 4
  %562 = icmp ne ptr %557, @nil_typ
  %563 = icmp ne ptr %557, null
  %564 = and i1 %562, %563
  %565 = trunc i160 %559 to i64
  %566 = lshr i160 %559, 64
  %567 = trunc i160 %566 to i64
  br i1 %564, label %606, label %628

568:                                              ; preds = %527
  %569 = add i32 %547, 2127912214
  %570 = shl i32 %547, 12
  %571 = add i32 %569, %570
  %572 = ashr i32 %571, 19
  %573 = xor i32 %571, %572
  %574 = xor i32 %573, -949894596
  %575 = add i32 %574, 374761393
  %576 = shl i32 %574, 5
  %577 = add i32 %575, %576
  %578 = add i32 %577, -744332180
  %579 = shl i32 %577, 9
  %580 = xor i32 %578, %579
  %581 = add i32 %580, -42973499
  %582 = shl i32 %580, 3
  %583 = add i32 %581, %582
  %584 = ashr i32 %583, 16
  %585 = xor i32 %583, %584
  %586 = xor i32 %585, -1252372727
  %587 = load i32, ptr %35, align 8
  %588 = add i32 %587, -1
  %589 = and i32 %588, %586
  %590 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %591 = load ptr, ptr %39, align 8
  %592 = sext i32 %589 to i64
  %593 = shl nsw i64 %592, 5
  %594 = getelementptr i8, ptr %591, i64 %593
  %595 = load ptr, ptr %594, align 8
  %596 = getelementptr i8, ptr %594, i64 8
  %597 = load i160, ptr %596, align 4
  store ptr %532, ptr %594, align 8
  store i64 %529, ptr %596, align 4
  %598 = getelementptr i8, ptr %594, i64 16
  store i64 %528, ptr %598, align 4
  %599 = getelementptr i8, ptr %594, i64 24
  store i32 %535, ptr %599, align 4
  %600 = icmp ne ptr %595, @nil_typ
  %601 = icmp ne ptr %595, null
  %602 = and i1 %600, %601
  %603 = trunc i160 %597 to i64
  %604 = lshr i160 %597, 64
  %605 = trunc i160 %604 to i64
  br i1 %602, label %606, label %628

606:                                              ; preds = %568, %548
  %607 = phi i64 [ %565, %548 ], [ %603, %568 ]
  %608 = phi i64 [ %567, %548 ], [ %605, %568 ]
  %609 = phi ptr [ %557, %548 ], [ %595, %568 ]
  %610 = inttoptr i64 %607 to ptr
  %611 = inttoptr i64 %608 to ptr
  %612 = getelementptr i8, ptr %609, i64 8
  %613 = getelementptr i8, ptr %609, i64 16
  %614 = getelementptr i8, ptr %609, i64 40
  %615 = load i64, ptr %612, align 4
  %616 = load i64, ptr %613, align 4
  %617 = load ptr, ptr %614, align 8
  %618 = mul i64 %615, 4015701072841558310
  %619 = lshr i64 %618, 32
  %620 = xor i64 %619, %618
  %621 = and i64 %620, %616
  %622 = getelementptr i32, ptr %617, i64 %621
  %623 = load i32, ptr %622, align 4
  %624 = xor i1 %531, true
  %625 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %626 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %627 = icmp eq i32 %543, 100
  br i1 %627, label %632, label %527

628:                                              ; preds = %568, %548
  %629 = load i32, ptr %44, align 4
  %630 = add i32 %629, 1
  %631 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %630, ptr %44, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1328

632:                                              ; preds = %606
  %633 = getelementptr i8, ptr %609, i64 8
  %634 = getelementptr i8, ptr %609, i64 16
  %635 = getelementptr i8, ptr %609, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %636 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %637 = load ptr, ptr %37, align 8
  %638 = load ptr, ptr %39, align 8
  %639 = load i32, ptr %35, align 8
  %640 = shl i32 %639, 1
  %641 = call i32 @llvm.smax.i32(i32 %640, i32 noundef 16) #43
  store i32 %641, ptr %35, align 8
  %642 = zext nneg i32 %641 to i64
  %643 = shl nuw nsw i64 %642, 5
  %644 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %643, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %644, ptr %37, align 8
  %645 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %643, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %645, ptr %39, align 8
  store i32 0, ptr %44, align 4
  %646 = icmp sgt i32 %639, 0
  br i1 %646, label %647, label %921

647:                                              ; preds = %632
  %648 = zext nneg i32 %639 to i64
  br label %649

649:                                              ; preds = %782, %647
  %650 = phi i64 [ 0, %647 ], [ %783, %782 ]
  %651 = shl nuw nsw i64 %650, 5
  %652 = getelementptr i8, ptr %637, i64 %651
  %653 = load ptr, ptr %652, align 8
  %654 = icmp ne ptr %653, @nil_typ
  %655 = icmp ne ptr %653, null
  %656 = and i1 %654, %655
  br i1 %656, label %657, label %782

657:                                              ; preds = %649
  %658 = getelementptr i8, ptr %652, i64 8
  %659 = load i64, ptr %658, align 4
  %660 = getelementptr i8, ptr %652, i64 16
  %661 = load i64, ptr %660, align 4
  %662 = getelementptr i8, ptr %653, i64 8
  %663 = getelementptr i8, ptr %653, i64 16
  %664 = getelementptr i8, ptr %653, i64 40
  %665 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %666 = load i64, ptr %662, align 4, !noalias !25
  %667 = load i64, ptr %663, align 4, !noalias !25
  %668 = load ptr, ptr %664, align 8, !noalias !25
  %669 = mul i64 %666, 4015701072841558310
  %670 = lshr i64 %669, 32
  %671 = xor i64 %670, %669
  %672 = and i64 %671, %667
  %673 = getelementptr i32, ptr %668, i64 %672
  %674 = load i32, ptr %673, align 4, !noalias !32
  %675 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %676 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %677 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %678

678:                                              ; preds = %757, %657
  %679 = phi i64 [ %661, %657 ], [ %759, %757 ]
  %680 = phi i64 [ %659, %657 ], [ %758, %757 ]
  %681 = phi i32 [ 0, %657 ], [ %694, %757 ]
  %682 = phi i1 [ true, %657 ], [ %773, %757 ]
  %683 = phi ptr [ %653, %657 ], [ %760, %757 ]
  %684 = phi i32 [ %674, %657 ], [ %772, %757 ]
  %685 = inttoptr i64 %679 to ptr
  %686 = inttoptr i64 %680 to ptr
  %687 = sext i32 %684 to i64
  %688 = getelementptr ptr, ptr %683, i64 %687
  %689 = getelementptr i8, ptr %688, i64 64
  %690 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %683, 0
  %691 = insertvalue { ptr, ptr, ptr, i32 } %690, ptr %686, 1
  %692 = insertvalue { ptr, ptr, ptr, i32 } %691, ptr %685, 2
  %693 = insertvalue { ptr, ptr, ptr, i32 } %692, i32 %684, 3
  %694 = add nuw nsw i32 %681, 1
  %695 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %683)
  %696 = load ptr, ptr %689, align 8
  %697 = call align 4 ptr %696({ ptr, ptr, ptr, i32 } %693, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %698 = call i32 %697({ ptr, ptr, ptr, i32 } %693, { ptr, ptr, ptr, i32 } %693, ptr nonnull align 8 %2) #28
  br i1 %682, label %699, label %719

699:                                              ; preds = %678
  %700 = load i32, ptr %35, align 8
  %701 = add i32 %700, -1
  %702 = and i32 %701, %698
  %703 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %704 = load ptr, ptr %37, align 8
  %705 = sext i32 %702 to i64
  %706 = shl nsw i64 %705, 5
  %707 = getelementptr i8, ptr %704, i64 %706
  %708 = load ptr, ptr %707, align 8
  %709 = getelementptr i8, ptr %707, i64 8
  %710 = load i160, ptr %709, align 4
  store ptr %683, ptr %707, align 8
  store i64 %680, ptr %709, align 4
  %711 = getelementptr i8, ptr %707, i64 16
  store i64 %679, ptr %711, align 4
  %712 = getelementptr i8, ptr %707, i64 24
  store i32 %684, ptr %712, align 4
  %713 = icmp ne ptr %708, @nil_typ
  %714 = icmp ne ptr %708, null
  %715 = and i1 %713, %714
  %716 = trunc i160 %710 to i64
  %717 = lshr i160 %710, 64
  %718 = trunc i160 %717 to i64
  br i1 %715, label %757, label %777

719:                                              ; preds = %678
  %720 = add i32 %698, 2127912214
  %721 = shl i32 %698, 12
  %722 = add i32 %720, %721
  %723 = ashr i32 %722, 19
  %724 = xor i32 %722, %723
  %725 = xor i32 %724, -949894596
  %726 = add i32 %725, 374761393
  %727 = shl i32 %725, 5
  %728 = add i32 %726, %727
  %729 = add i32 %728, -744332180
  %730 = shl i32 %728, 9
  %731 = xor i32 %729, %730
  %732 = add i32 %731, -42973499
  %733 = shl i32 %731, 3
  %734 = add i32 %732, %733
  %735 = ashr i32 %734, 16
  %736 = xor i32 %734, %735
  %737 = xor i32 %736, -1252372727
  %738 = load i32, ptr %35, align 8
  %739 = add i32 %738, -1
  %740 = and i32 %739, %737
  %741 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %742 = load ptr, ptr %39, align 8
  %743 = sext i32 %740 to i64
  %744 = shl nsw i64 %743, 5
  %745 = getelementptr i8, ptr %742, i64 %744
  %746 = load ptr, ptr %745, align 8
  %747 = getelementptr i8, ptr %745, i64 8
  %748 = load i160, ptr %747, align 4
  store ptr %683, ptr %745, align 8
  store i64 %680, ptr %747, align 4
  %749 = getelementptr i8, ptr %745, i64 16
  store i64 %679, ptr %749, align 4
  %750 = getelementptr i8, ptr %745, i64 24
  store i32 %684, ptr %750, align 4
  %751 = icmp ne ptr %746, @nil_typ
  %752 = icmp ne ptr %746, null
  %753 = and i1 %751, %752
  %754 = trunc i160 %748 to i64
  %755 = lshr i160 %748, 64
  %756 = trunc i160 %755 to i64
  br i1 %753, label %757, label %777

757:                                              ; preds = %719, %699
  %758 = phi i64 [ %716, %699 ], [ %754, %719 ]
  %759 = phi i64 [ %718, %699 ], [ %756, %719 ]
  %760 = phi ptr [ %708, %699 ], [ %746, %719 ]
  %761 = getelementptr i8, ptr %760, i64 8
  %762 = getelementptr i8, ptr %760, i64 16
  %763 = getelementptr i8, ptr %760, i64 40
  %764 = load i64, ptr %761, align 4
  %765 = load i64, ptr %762, align 4
  %766 = load ptr, ptr %763, align 8
  %767 = mul i64 %764, 4015701072841558310
  %768 = lshr i64 %767, 32
  %769 = xor i64 %768, %767
  %770 = and i64 %769, %765
  %771 = getelementptr i32, ptr %766, i64 %770
  %772 = load i32, ptr %771, align 4
  %773 = xor i1 %682, true
  %774 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %775 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %776 = icmp eq i32 %694, 100
  br i1 %776, label %781, label %678

777:                                              ; preds = %719, %699
  %778 = load i32, ptr %44, align 4
  %779 = add i32 %778, 1
  %780 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %779, ptr %44, align 4
  br label %781

781:                                              ; preds = %777, %757
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %782

782:                                              ; preds = %781, %649
  %783 = add nuw nsw i64 %650, 1
  %784 = icmp eq i64 %783, %648
  br i1 %784, label %785, label %649

785:                                              ; preds = %918, %782
  %786 = phi i64 [ %919, %918 ], [ 0, %782 ]
  %787 = shl nuw nsw i64 %786, 5
  %788 = getelementptr i8, ptr %638, i64 %787
  %789 = load ptr, ptr %788, align 8
  %790 = icmp ne ptr %789, @nil_typ
  %791 = icmp ne ptr %789, null
  %792 = and i1 %790, %791
  br i1 %792, label %793, label %918

793:                                              ; preds = %785
  %794 = getelementptr i8, ptr %788, i64 8
  %795 = load i64, ptr %794, align 4
  %796 = getelementptr i8, ptr %788, i64 16
  %797 = load i64, ptr %796, align 4
  %798 = getelementptr i8, ptr %789, i64 8
  %799 = getelementptr i8, ptr %789, i64 16
  %800 = getelementptr i8, ptr %789, i64 40
  %801 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %802 = load i64, ptr %798, align 4, !noalias !25
  %803 = load i64, ptr %799, align 4, !noalias !25
  %804 = load ptr, ptr %800, align 8, !noalias !25
  %805 = mul i64 %802, 4015701072841558310
  %806 = lshr i64 %805, 32
  %807 = xor i64 %806, %805
  %808 = and i64 %807, %803
  %809 = getelementptr i32, ptr %804, i64 %808
  %810 = load i32, ptr %809, align 4, !noalias !35
  %811 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %812 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %813 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %814

814:                                              ; preds = %893, %793
  %815 = phi i64 [ %797, %793 ], [ %895, %893 ]
  %816 = phi i64 [ %795, %793 ], [ %894, %893 ]
  %817 = phi i32 [ 0, %793 ], [ %830, %893 ]
  %818 = phi i1 [ true, %793 ], [ %909, %893 ]
  %819 = phi ptr [ %789, %793 ], [ %896, %893 ]
  %820 = phi i32 [ %810, %793 ], [ %908, %893 ]
  %821 = inttoptr i64 %815 to ptr
  %822 = inttoptr i64 %816 to ptr
  %823 = sext i32 %820 to i64
  %824 = getelementptr ptr, ptr %819, i64 %823
  %825 = getelementptr i8, ptr %824, i64 64
  %826 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %819, 0
  %827 = insertvalue { ptr, ptr, ptr, i32 } %826, ptr %822, 1
  %828 = insertvalue { ptr, ptr, ptr, i32 } %827, ptr %821, 2
  %829 = insertvalue { ptr, ptr, ptr, i32 } %828, i32 %820, 3
  %830 = add nuw nsw i32 %817, 1
  %831 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %819)
  %832 = load ptr, ptr %825, align 8
  %833 = call align 4 ptr %832({ ptr, ptr, ptr, i32 } %829, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %834 = call i32 %833({ ptr, ptr, ptr, i32 } %829, { ptr, ptr, ptr, i32 } %829, ptr nonnull align 8 %2) #28
  br i1 %818, label %835, label %855

835:                                              ; preds = %814
  %836 = load i32, ptr %35, align 8
  %837 = add i32 %836, -1
  %838 = and i32 %837, %834
  %839 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %840 = load ptr, ptr %37, align 8
  %841 = sext i32 %838 to i64
  %842 = shl nsw i64 %841, 5
  %843 = getelementptr i8, ptr %840, i64 %842
  %844 = load ptr, ptr %843, align 8
  %845 = getelementptr i8, ptr %843, i64 8
  %846 = load i160, ptr %845, align 4
  store ptr %819, ptr %843, align 8
  store i64 %816, ptr %845, align 4
  %847 = getelementptr i8, ptr %843, i64 16
  store i64 %815, ptr %847, align 4
  %848 = getelementptr i8, ptr %843, i64 24
  store i32 %820, ptr %848, align 4
  %849 = icmp ne ptr %844, @nil_typ
  %850 = icmp ne ptr %844, null
  %851 = and i1 %849, %850
  %852 = trunc i160 %846 to i64
  %853 = lshr i160 %846, 64
  %854 = trunc i160 %853 to i64
  br i1 %851, label %893, label %913

855:                                              ; preds = %814
  %856 = add i32 %834, 2127912214
  %857 = shl i32 %834, 12
  %858 = add i32 %856, %857
  %859 = ashr i32 %858, 19
  %860 = xor i32 %858, %859
  %861 = xor i32 %860, -949894596
  %862 = add i32 %861, 374761393
  %863 = shl i32 %861, 5
  %864 = add i32 %862, %863
  %865 = add i32 %864, -744332180
  %866 = shl i32 %864, 9
  %867 = xor i32 %865, %866
  %868 = add i32 %867, -42973499
  %869 = shl i32 %867, 3
  %870 = add i32 %868, %869
  %871 = ashr i32 %870, 16
  %872 = xor i32 %870, %871
  %873 = xor i32 %872, -1252372727
  %874 = load i32, ptr %35, align 8
  %875 = add i32 %874, -1
  %876 = and i32 %875, %873
  %877 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %878 = load ptr, ptr %39, align 8
  %879 = sext i32 %876 to i64
  %880 = shl nsw i64 %879, 5
  %881 = getelementptr i8, ptr %878, i64 %880
  %882 = load ptr, ptr %881, align 8
  %883 = getelementptr i8, ptr %881, i64 8
  %884 = load i160, ptr %883, align 4
  store ptr %819, ptr %881, align 8
  store i64 %816, ptr %883, align 4
  %885 = getelementptr i8, ptr %881, i64 16
  store i64 %815, ptr %885, align 4
  %886 = getelementptr i8, ptr %881, i64 24
  store i32 %820, ptr %886, align 4
  %887 = icmp ne ptr %882, @nil_typ
  %888 = icmp ne ptr %882, null
  %889 = and i1 %887, %888
  %890 = trunc i160 %884 to i64
  %891 = lshr i160 %884, 64
  %892 = trunc i160 %891 to i64
  br i1 %889, label %893, label %913

893:                                              ; preds = %855, %835
  %894 = phi i64 [ %852, %835 ], [ %890, %855 ]
  %895 = phi i64 [ %854, %835 ], [ %892, %855 ]
  %896 = phi ptr [ %844, %835 ], [ %882, %855 ]
  %897 = getelementptr i8, ptr %896, i64 8
  %898 = getelementptr i8, ptr %896, i64 16
  %899 = getelementptr i8, ptr %896, i64 40
  %900 = load i64, ptr %897, align 4
  %901 = load i64, ptr %898, align 4
  %902 = load ptr, ptr %899, align 8
  %903 = mul i64 %900, 4015701072841558310
  %904 = lshr i64 %903, 32
  %905 = xor i64 %904, %903
  %906 = and i64 %905, %901
  %907 = getelementptr i32, ptr %902, i64 %906
  %908 = load i32, ptr %907, align 4
  %909 = xor i1 %818, true
  %910 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %911 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %912 = icmp eq i32 %830, 100
  br i1 %912, label %917, label %814

913:                                              ; preds = %855, %835
  %914 = load i32, ptr %44, align 4
  %915 = add i32 %914, 1
  %916 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %915, ptr %44, align 4
  br label %917

917:                                              ; preds = %913, %893
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %918

918:                                              ; preds = %917, %785
  %919 = add nuw nsw i64 %786, 1
  %920 = icmp eq i64 %919, %648
  br i1 %920, label %921, label %785

921:                                              ; preds = %918, %632
  %922 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %923 = load i64, ptr %633, align 4, !noalias !25
  %924 = load i64, ptr %634, align 4, !noalias !25
  %925 = load ptr, ptr %635, align 8, !noalias !25
  %926 = mul i64 %923, 4015701072841558310
  %927 = lshr i64 %926, 32
  %928 = xor i64 %927, %926
  %929 = and i64 %928, %924
  %930 = getelementptr i32, ptr %925, i64 %929
  %931 = load i32, ptr %930, align 4, !noalias !38
  %932 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %933 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %934 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %935

935:                                              ; preds = %1014, %921
  %936 = phi i64 [ %608, %921 ], [ %1016, %1014 ]
  %937 = phi i64 [ %607, %921 ], [ %1015, %1014 ]
  %938 = phi i32 [ 0, %921 ], [ %951, %1014 ]
  %939 = phi i1 [ true, %921 ], [ %1030, %1014 ]
  %940 = phi ptr [ %609, %921 ], [ %1017, %1014 ]
  %941 = phi i32 [ %931, %921 ], [ %1029, %1014 ]
  %942 = inttoptr i64 %936 to ptr
  %943 = inttoptr i64 %937 to ptr
  %944 = sext i32 %941 to i64
  %945 = getelementptr ptr, ptr %940, i64 %944
  %946 = getelementptr i8, ptr %945, i64 64
  %947 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %940, 0
  %948 = insertvalue { ptr, ptr, ptr, i32 } %947, ptr %943, 1
  %949 = insertvalue { ptr, ptr, ptr, i32 } %948, ptr %942, 2
  %950 = insertvalue { ptr, ptr, ptr, i32 } %949, i32 %941, 3
  %951 = add nuw nsw i32 %938, 1
  %952 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %940)
  %953 = load ptr, ptr %946, align 8
  %954 = call align 4 ptr %953({ ptr, ptr, ptr, i32 } %950, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %955 = call i32 %954({ ptr, ptr, ptr, i32 } %950, { ptr, ptr, ptr, i32 } %950, ptr nonnull align 8 %2) #28
  br i1 %939, label %956, label %976

956:                                              ; preds = %935
  %957 = load i32, ptr %35, align 8
  %958 = add i32 %957, -1
  %959 = and i32 %958, %955
  %960 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %961 = load ptr, ptr %37, align 8
  %962 = sext i32 %959 to i64
  %963 = shl nsw i64 %962, 5
  %964 = getelementptr i8, ptr %961, i64 %963
  %965 = load ptr, ptr %964, align 8
  %966 = getelementptr i8, ptr %964, i64 8
  %967 = load i160, ptr %966, align 4
  store ptr %940, ptr %964, align 8
  store i64 %937, ptr %966, align 4
  %968 = getelementptr i8, ptr %964, i64 16
  store i64 %936, ptr %968, align 4
  %969 = getelementptr i8, ptr %964, i64 24
  store i32 %941, ptr %969, align 4
  %970 = icmp ne ptr %965, @nil_typ
  %971 = icmp ne ptr %965, null
  %972 = and i1 %970, %971
  %973 = trunc i160 %967 to i64
  %974 = lshr i160 %967, 64
  %975 = trunc i160 %974 to i64
  br i1 %972, label %1014, label %1034

976:                                              ; preds = %935
  %977 = add i32 %955, 2127912214
  %978 = shl i32 %955, 12
  %979 = add i32 %977, %978
  %980 = ashr i32 %979, 19
  %981 = xor i32 %979, %980
  %982 = xor i32 %981, -949894596
  %983 = add i32 %982, 374761393
  %984 = shl i32 %982, 5
  %985 = add i32 %983, %984
  %986 = add i32 %985, -744332180
  %987 = shl i32 %985, 9
  %988 = xor i32 %986, %987
  %989 = add i32 %988, -42973499
  %990 = shl i32 %988, 3
  %991 = add i32 %989, %990
  %992 = ashr i32 %991, 16
  %993 = xor i32 %991, %992
  %994 = xor i32 %993, -1252372727
  %995 = load i32, ptr %35, align 8
  %996 = add i32 %995, -1
  %997 = and i32 %996, %994
  %998 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %999 = load ptr, ptr %39, align 8
  %1000 = sext i32 %997 to i64
  %1001 = shl nsw i64 %1000, 5
  %1002 = getelementptr i8, ptr %999, i64 %1001
  %1003 = load ptr, ptr %1002, align 8
  %1004 = getelementptr i8, ptr %1002, i64 8
  %1005 = load i160, ptr %1004, align 4
  store ptr %940, ptr %1002, align 8
  store i64 %937, ptr %1004, align 4
  %1006 = getelementptr i8, ptr %1002, i64 16
  store i64 %936, ptr %1006, align 4
  %1007 = getelementptr i8, ptr %1002, i64 24
  store i32 %941, ptr %1007, align 4
  %1008 = icmp ne ptr %1003, @nil_typ
  %1009 = icmp ne ptr %1003, null
  %1010 = and i1 %1008, %1009
  %1011 = trunc i160 %1005 to i64
  %1012 = lshr i160 %1005, 64
  %1013 = trunc i160 %1012 to i64
  br i1 %1010, label %1014, label %1034

1014:                                             ; preds = %976, %956
  %1015 = phi i64 [ %973, %956 ], [ %1011, %976 ]
  %1016 = phi i64 [ %975, %956 ], [ %1013, %976 ]
  %1017 = phi ptr [ %965, %956 ], [ %1003, %976 ]
  %1018 = getelementptr i8, ptr %1017, i64 8
  %1019 = getelementptr i8, ptr %1017, i64 16
  %1020 = getelementptr i8, ptr %1017, i64 40
  %1021 = load i64, ptr %1018, align 4
  %1022 = load i64, ptr %1019, align 4
  %1023 = load ptr, ptr %1020, align 8
  %1024 = mul i64 %1021, 4015701072841558310
  %1025 = lshr i64 %1024, 32
  %1026 = xor i64 %1025, %1024
  %1027 = and i64 %1026, %1022
  %1028 = getelementptr i32, ptr %1023, i64 %1027
  %1029 = load i32, ptr %1028, align 4
  %1030 = xor i1 %939, true
  %1031 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1032 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1033 = icmp eq i32 %951, 100
  br i1 %1033, label %1038, label %935

1034:                                             ; preds = %976, %956
  %1035 = load i32, ptr %44, align 4
  %1036 = add i32 %1035, 1
  %1037 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1036, ptr %44, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1328

1038:                                             ; preds = %1014
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1039 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1040 = load ptr, ptr %37, align 8
  %1041 = load ptr, ptr %39, align 8
  %1042 = load i32, ptr %35, align 8
  %1043 = shl i32 %1042, 1
  %1044 = call i32 @llvm.smax.i32(i32 %1043, i32 noundef 16) #43
  store i32 %1044, ptr %35, align 8
  %1045 = zext nneg i32 %1044 to i64
  %1046 = shl nuw nsw i64 %1045, 5
  %1047 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1046, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1047, ptr %37, align 8
  %1048 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1046, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1048, ptr %39, align 8
  store i32 0, ptr %44, align 4
  %1049 = icmp sgt i32 %1042, 0
  br i1 %1049, label %1052, label %1050

1050:                                             ; preds = %1038
  %1051 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1328

1052:                                             ; preds = %1038
  %1053 = zext nneg i32 %1042 to i64
  br label %1054

1054:                                             ; preds = %1187, %1052
  %1055 = phi i64 [ 0, %1052 ], [ %1188, %1187 ]
  %1056 = shl nuw nsw i64 %1055, 5
  %1057 = getelementptr i8, ptr %1040, i64 %1056
  %1058 = load ptr, ptr %1057, align 8
  %1059 = icmp ne ptr %1058, @nil_typ
  %1060 = icmp ne ptr %1058, null
  %1061 = and i1 %1059, %1060
  br i1 %1061, label %1062, label %1187

1062:                                             ; preds = %1054
  %1063 = getelementptr i8, ptr %1057, i64 8
  %1064 = load i64, ptr %1063, align 4
  %1065 = getelementptr i8, ptr %1057, i64 16
  %1066 = load i64, ptr %1065, align 4
  %1067 = getelementptr i8, ptr %1058, i64 8
  %1068 = getelementptr i8, ptr %1058, i64 16
  %1069 = getelementptr i8, ptr %1058, i64 40
  %1070 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1071 = load i64, ptr %1067, align 4, !noalias !25
  %1072 = load i64, ptr %1068, align 4, !noalias !25
  %1073 = load ptr, ptr %1069, align 8, !noalias !25
  %1074 = mul i64 %1071, 4015701072841558310
  %1075 = lshr i64 %1074, 32
  %1076 = xor i64 %1075, %1074
  %1077 = and i64 %1076, %1072
  %1078 = getelementptr i32, ptr %1073, i64 %1077
  %1079 = load i32, ptr %1078, align 4, !noalias !41
  %1080 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1081 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1082 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1083

1083:                                             ; preds = %1162, %1062
  %1084 = phi i64 [ %1066, %1062 ], [ %1164, %1162 ]
  %1085 = phi i64 [ %1064, %1062 ], [ %1163, %1162 ]
  %1086 = phi i32 [ 0, %1062 ], [ %1099, %1162 ]
  %1087 = phi i1 [ true, %1062 ], [ %1178, %1162 ]
  %1088 = phi ptr [ %1058, %1062 ], [ %1165, %1162 ]
  %1089 = phi i32 [ %1079, %1062 ], [ %1177, %1162 ]
  %1090 = inttoptr i64 %1084 to ptr
  %1091 = inttoptr i64 %1085 to ptr
  %1092 = sext i32 %1089 to i64
  %1093 = getelementptr ptr, ptr %1088, i64 %1092
  %1094 = getelementptr i8, ptr %1093, i64 64
  %1095 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1088, 0
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1095, ptr %1091, 1
  %1097 = insertvalue { ptr, ptr, ptr, i32 } %1096, ptr %1090, 2
  %1098 = insertvalue { ptr, ptr, ptr, i32 } %1097, i32 %1089, 3
  %1099 = add nuw nsw i32 %1086, 1
  %1100 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1088)
  %1101 = load ptr, ptr %1094, align 8
  %1102 = call align 4 ptr %1101({ ptr, ptr, ptr, i32 } %1098, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1103 = call i32 %1102({ ptr, ptr, ptr, i32 } %1098, { ptr, ptr, ptr, i32 } %1098, ptr nonnull align 8 %2) #28
  br i1 %1087, label %1104, label %1124

1104:                                             ; preds = %1083
  %1105 = load i32, ptr %35, align 8
  %1106 = add i32 %1105, -1
  %1107 = and i32 %1106, %1103
  %1108 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1109 = load ptr, ptr %37, align 8
  %1110 = sext i32 %1107 to i64
  %1111 = shl nsw i64 %1110, 5
  %1112 = getelementptr i8, ptr %1109, i64 %1111
  %1113 = load ptr, ptr %1112, align 8
  %1114 = getelementptr i8, ptr %1112, i64 8
  %1115 = load i160, ptr %1114, align 4
  store ptr %1088, ptr %1112, align 8
  store i64 %1085, ptr %1114, align 4
  %1116 = getelementptr i8, ptr %1112, i64 16
  store i64 %1084, ptr %1116, align 4
  %1117 = getelementptr i8, ptr %1112, i64 24
  store i32 %1089, ptr %1117, align 4
  %1118 = icmp ne ptr %1113, @nil_typ
  %1119 = icmp ne ptr %1113, null
  %1120 = and i1 %1118, %1119
  %1121 = trunc i160 %1115 to i64
  %1122 = lshr i160 %1115, 64
  %1123 = trunc i160 %1122 to i64
  br i1 %1120, label %1162, label %1182

1124:                                             ; preds = %1083
  %1125 = add i32 %1103, 2127912214
  %1126 = shl i32 %1103, 12
  %1127 = add i32 %1125, %1126
  %1128 = ashr i32 %1127, 19
  %1129 = xor i32 %1127, %1128
  %1130 = xor i32 %1129, -949894596
  %1131 = add i32 %1130, 374761393
  %1132 = shl i32 %1130, 5
  %1133 = add i32 %1131, %1132
  %1134 = add i32 %1133, -744332180
  %1135 = shl i32 %1133, 9
  %1136 = xor i32 %1134, %1135
  %1137 = add i32 %1136, -42973499
  %1138 = shl i32 %1136, 3
  %1139 = add i32 %1137, %1138
  %1140 = ashr i32 %1139, 16
  %1141 = xor i32 %1139, %1140
  %1142 = xor i32 %1141, -1252372727
  %1143 = load i32, ptr %35, align 8
  %1144 = add i32 %1143, -1
  %1145 = and i32 %1144, %1142
  %1146 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1147 = load ptr, ptr %39, align 8
  %1148 = sext i32 %1145 to i64
  %1149 = shl nsw i64 %1148, 5
  %1150 = getelementptr i8, ptr %1147, i64 %1149
  %1151 = load ptr, ptr %1150, align 8
  %1152 = getelementptr i8, ptr %1150, i64 8
  %1153 = load i160, ptr %1152, align 4
  store ptr %1088, ptr %1150, align 8
  store i64 %1085, ptr %1152, align 4
  %1154 = getelementptr i8, ptr %1150, i64 16
  store i64 %1084, ptr %1154, align 4
  %1155 = getelementptr i8, ptr %1150, i64 24
  store i32 %1089, ptr %1155, align 4
  %1156 = icmp ne ptr %1151, @nil_typ
  %1157 = icmp ne ptr %1151, null
  %1158 = and i1 %1156, %1157
  %1159 = trunc i160 %1153 to i64
  %1160 = lshr i160 %1153, 64
  %1161 = trunc i160 %1160 to i64
  br i1 %1158, label %1162, label %1182

1162:                                             ; preds = %1124, %1104
  %1163 = phi i64 [ %1121, %1104 ], [ %1159, %1124 ]
  %1164 = phi i64 [ %1123, %1104 ], [ %1161, %1124 ]
  %1165 = phi ptr [ %1113, %1104 ], [ %1151, %1124 ]
  %1166 = getelementptr i8, ptr %1165, i64 8
  %1167 = getelementptr i8, ptr %1165, i64 16
  %1168 = getelementptr i8, ptr %1165, i64 40
  %1169 = load i64, ptr %1166, align 4
  %1170 = load i64, ptr %1167, align 4
  %1171 = load ptr, ptr %1168, align 8
  %1172 = mul i64 %1169, 4015701072841558310
  %1173 = lshr i64 %1172, 32
  %1174 = xor i64 %1173, %1172
  %1175 = and i64 %1174, %1170
  %1176 = getelementptr i32, ptr %1171, i64 %1175
  %1177 = load i32, ptr %1176, align 4
  %1178 = xor i1 %1087, true
  %1179 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1180 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1181 = icmp eq i32 %1099, 100
  br i1 %1181, label %1186, label %1083

1182:                                             ; preds = %1124, %1104
  %1183 = load i32, ptr %44, align 4
  %1184 = add i32 %1183, 1
  %1185 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1184, ptr %44, align 4
  br label %1186

1186:                                             ; preds = %1182, %1162
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1187

1187:                                             ; preds = %1186, %1054
  %1188 = add nuw nsw i64 %1055, 1
  %1189 = icmp eq i64 %1188, %1053
  br i1 %1189, label %1190, label %1054

1190:                                             ; preds = %1187
  %1191 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1192

1192:                                             ; preds = %1325, %1190
  %1193 = phi i64 [ 0, %1190 ], [ %1326, %1325 ]
  %1194 = shl nuw nsw i64 %1193, 5
  %1195 = getelementptr i8, ptr %1041, i64 %1194
  %1196 = load ptr, ptr %1195, align 8
  %1197 = icmp ne ptr %1196, @nil_typ
  %1198 = icmp ne ptr %1196, null
  %1199 = and i1 %1197, %1198
  br i1 %1199, label %1200, label %1325

1200:                                             ; preds = %1192
  %1201 = getelementptr i8, ptr %1195, i64 8
  %1202 = load i64, ptr %1201, align 4
  %1203 = getelementptr i8, ptr %1195, i64 16
  %1204 = load i64, ptr %1203, align 4
  %1205 = getelementptr i8, ptr %1196, i64 8
  %1206 = getelementptr i8, ptr %1196, i64 16
  %1207 = getelementptr i8, ptr %1196, i64 40
  %1208 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1209 = load i64, ptr %1205, align 4, !noalias !25
  %1210 = load i64, ptr %1206, align 4, !noalias !25
  %1211 = load ptr, ptr %1207, align 8, !noalias !25
  %1212 = mul i64 %1209, 4015701072841558310
  %1213 = lshr i64 %1212, 32
  %1214 = xor i64 %1213, %1212
  %1215 = and i64 %1214, %1210
  %1216 = getelementptr i32, ptr %1211, i64 %1215
  %1217 = load i32, ptr %1216, align 4, !noalias !44
  %1218 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1219 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1220 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1221

1221:                                             ; preds = %1300, %1200
  %1222 = phi i64 [ %1204, %1200 ], [ %1302, %1300 ]
  %1223 = phi i64 [ %1202, %1200 ], [ %1301, %1300 ]
  %1224 = phi i32 [ 0, %1200 ], [ %1237, %1300 ]
  %1225 = phi i1 [ true, %1200 ], [ %1316, %1300 ]
  %1226 = phi ptr [ %1196, %1200 ], [ %1303, %1300 ]
  %1227 = phi i32 [ %1217, %1200 ], [ %1315, %1300 ]
  %1228 = inttoptr i64 %1222 to ptr
  %1229 = inttoptr i64 %1223 to ptr
  %1230 = sext i32 %1227 to i64
  %1231 = getelementptr ptr, ptr %1226, i64 %1230
  %1232 = getelementptr i8, ptr %1231, i64 64
  %1233 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1226, 0
  %1234 = insertvalue { ptr, ptr, ptr, i32 } %1233, ptr %1229, 1
  %1235 = insertvalue { ptr, ptr, ptr, i32 } %1234, ptr %1228, 2
  %1236 = insertvalue { ptr, ptr, ptr, i32 } %1235, i32 %1227, 3
  %1237 = add nuw nsw i32 %1224, 1
  %1238 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1226)
  %1239 = load ptr, ptr %1232, align 8
  %1240 = call align 4 ptr %1239({ ptr, ptr, ptr, i32 } %1236, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1241 = call i32 %1240({ ptr, ptr, ptr, i32 } %1236, { ptr, ptr, ptr, i32 } %1236, ptr nonnull align 8 %2) #28
  br i1 %1225, label %1242, label %1262

1242:                                             ; preds = %1221
  %1243 = load i32, ptr %35, align 8
  %1244 = add i32 %1243, -1
  %1245 = and i32 %1244, %1241
  %1246 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1247 = load ptr, ptr %37, align 8
  %1248 = sext i32 %1245 to i64
  %1249 = shl nsw i64 %1248, 5
  %1250 = getelementptr i8, ptr %1247, i64 %1249
  %1251 = load ptr, ptr %1250, align 8
  %1252 = getelementptr i8, ptr %1250, i64 8
  %1253 = load i160, ptr %1252, align 4
  store ptr %1226, ptr %1250, align 8
  store i64 %1223, ptr %1252, align 4
  %1254 = getelementptr i8, ptr %1250, i64 16
  store i64 %1222, ptr %1254, align 4
  %1255 = getelementptr i8, ptr %1250, i64 24
  store i32 %1227, ptr %1255, align 4
  %1256 = icmp ne ptr %1251, @nil_typ
  %1257 = icmp ne ptr %1251, null
  %1258 = and i1 %1256, %1257
  %1259 = trunc i160 %1253 to i64
  %1260 = lshr i160 %1253, 64
  %1261 = trunc i160 %1260 to i64
  br i1 %1258, label %1300, label %1320

1262:                                             ; preds = %1221
  %1263 = add i32 %1241, 2127912214
  %1264 = shl i32 %1241, 12
  %1265 = add i32 %1263, %1264
  %1266 = ashr i32 %1265, 19
  %1267 = xor i32 %1265, %1266
  %1268 = xor i32 %1267, -949894596
  %1269 = add i32 %1268, 374761393
  %1270 = shl i32 %1268, 5
  %1271 = add i32 %1269, %1270
  %1272 = add i32 %1271, -744332180
  %1273 = shl i32 %1271, 9
  %1274 = xor i32 %1272, %1273
  %1275 = add i32 %1274, -42973499
  %1276 = shl i32 %1274, 3
  %1277 = add i32 %1275, %1276
  %1278 = ashr i32 %1277, 16
  %1279 = xor i32 %1277, %1278
  %1280 = xor i32 %1279, -1252372727
  %1281 = load i32, ptr %35, align 8
  %1282 = add i32 %1281, -1
  %1283 = and i32 %1282, %1280
  %1284 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1285 = load ptr, ptr %39, align 8
  %1286 = sext i32 %1283 to i64
  %1287 = shl nsw i64 %1286, 5
  %1288 = getelementptr i8, ptr %1285, i64 %1287
  %1289 = load ptr, ptr %1288, align 8
  %1290 = getelementptr i8, ptr %1288, i64 8
  %1291 = load i160, ptr %1290, align 4
  store ptr %1226, ptr %1288, align 8
  store i64 %1223, ptr %1290, align 4
  %1292 = getelementptr i8, ptr %1288, i64 16
  store i64 %1222, ptr %1292, align 4
  %1293 = getelementptr i8, ptr %1288, i64 24
  store i32 %1227, ptr %1293, align 4
  %1294 = icmp ne ptr %1289, @nil_typ
  %1295 = icmp ne ptr %1289, null
  %1296 = and i1 %1294, %1295
  %1297 = trunc i160 %1291 to i64
  %1298 = lshr i160 %1291, 64
  %1299 = trunc i160 %1298 to i64
  br i1 %1296, label %1300, label %1320

1300:                                             ; preds = %1262, %1242
  %1301 = phi i64 [ %1259, %1242 ], [ %1297, %1262 ]
  %1302 = phi i64 [ %1261, %1242 ], [ %1299, %1262 ]
  %1303 = phi ptr [ %1251, %1242 ], [ %1289, %1262 ]
  %1304 = getelementptr i8, ptr %1303, i64 8
  %1305 = getelementptr i8, ptr %1303, i64 16
  %1306 = getelementptr i8, ptr %1303, i64 40
  %1307 = load i64, ptr %1304, align 4
  %1308 = load i64, ptr %1305, align 4
  %1309 = load ptr, ptr %1306, align 8
  %1310 = mul i64 %1307, 4015701072841558310
  %1311 = lshr i64 %1310, 32
  %1312 = xor i64 %1311, %1310
  %1313 = and i64 %1312, %1308
  %1314 = getelementptr i32, ptr %1309, i64 %1313
  %1315 = load i32, ptr %1314, align 4
  %1316 = xor i1 %1225, true
  %1317 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1318 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1319 = icmp eq i32 %1237, 100
  br i1 %1319, label %1324, label %1221

1320:                                             ; preds = %1262, %1242
  %1321 = load i32, ptr %44, align 4
  %1322 = add i32 %1321, 1
  %1323 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1322, ptr %44, align 4
  br label %1324

1324:                                             ; preds = %1320, %1300
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1325

1325:                                             ; preds = %1324, %1192
  %1326 = add nuw nsw i64 %1193, 1
  %1327 = icmp eq i64 %1326, %1053
  br i1 %1327, label %1328, label %1192

1328:                                             ; preds = %1325, %1050, %1034, %628, %269, %114
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1329 = icmp eq i32 %54, %0
  br i1 %1329, label %1330, label %52

1330:                                             ; preds = %1328
  %1331 = call i64 @clock()
  %1332 = add nsw i32 %0, -1
  %1333 = zext nneg i32 %1332 to i160
  %1334 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %1333, 1
  %1335 = load ptr, ptr %33, align 8
  %1336 = call i32 %1335({ ptr, i160 } %1334) #28
  %1337 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1338 = load i32, ptr %35, align 8
  %1339 = add i32 %1338, -1
  %1340 = and i32 %1339, %1336
  %1341 = load ptr, ptr %37, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1342 = sext i32 %1340 to i64
  %1343 = shl nsw i64 %1342, 5
  %1344 = getelementptr i8, ptr %1341, i64 %1343
  %1345 = load ptr, ptr %1344, align 8
  %1346 = icmp ne ptr %1345, @nil_typ
  %1347 = icmp ne ptr %1345, null
  %1348 = and i1 %1346, %1347
  br i1 %1348, label %1349, label %1391

1349:                                             ; preds = %1330
  %1350 = getelementptr i8, ptr %1344, i64 8
  %1351 = load i64, ptr %1350, align 4
  %1352 = getelementptr i8, ptr %1344, i64 16
  %1353 = load i64, ptr %1352, align 4
  %1354 = inttoptr i64 %1351 to ptr
  %1355 = inttoptr i64 %1353 to ptr
  %1356 = getelementptr i8, ptr %1345, i64 8
  %1357 = getelementptr i8, ptr %1345, i64 16
  %1358 = getelementptr i8, ptr %1345, i64 40
  %1359 = load i64, ptr %1356, align 4, !noalias !47
  %1360 = load i64, ptr %1357, align 4, !noalias !47
  %1361 = load ptr, ptr %1358, align 8, !noalias !47
  %1362 = mul i64 %1359, 4015701072841558310
  %1363 = lshr i64 %1362, 32
  %1364 = xor i64 %1363, %1362
  %1365 = and i64 %1364, %1360
  %1366 = getelementptr i32, ptr %1361, i64 %1365
  %1367 = load i32, ptr %1366, align 4, !noalias !47
  %1368 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1345, 0
  %1369 = insertvalue { ptr, ptr, ptr, i32 } %1368, ptr %1354, 1
  %1370 = insertvalue { ptr, ptr, ptr, i32 } %1369, ptr %1355, 2
  %1371 = insertvalue { ptr, ptr, ptr, i32 } %1370, i32 %1367, 3
  %1372 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1373 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1345) #43
  %1374 = sext i32 %1367 to i64
  %1375 = getelementptr ptr, ptr %1345, i64 %1374
  %1376 = getelementptr i8, ptr %1375, i64 64
  %1377 = load ptr, ptr %1376, align 8
  %1378 = call align 4 ptr %1377({ ptr, ptr, ptr, i32 } %1371, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1379 = call i32 %1378({ ptr, ptr, ptr, i32 } %1371, { ptr, ptr, ptr, i32 } %1371, ptr nonnull align 8 %2) #28
  %1380 = icmp eq i32 %1379, %1336
  br i1 %1380, label %1381, label %1391

1381:                                             ; preds = %1349
  %1382 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1383 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1345)
  %1384 = getelementptr i8, ptr %1375, i64 48
  %1385 = load ptr, ptr %1384, align 8
  %1386 = call align 4 ptr %1385({ ptr, ptr, ptr, i32 } %1371, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1387 = call { ptr, i160 } %1386({ ptr, ptr, ptr, i32 } %1371, { ptr, ptr, ptr, i32 } %1371, ptr nonnull align 8 %2) #28
  %1388 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1389 = load ptr, ptr %34, align 8
  %1390 = call i1 %1389({ ptr, i160 } %1387, { ptr, i160 } %1334) #28
  br i1 %1390, label %1392, label %1391

1391:                                             ; preds = %1381, %1349, %1330
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1403

1392:                                             ; preds = %1381
  %1393 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1394 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1345)
  %1395 = getelementptr i8, ptr %1375, i64 56
  %1396 = load ptr, ptr %1395, align 8
  %1397 = call align 4 ptr %1396({ ptr, ptr, ptr, i32 } %1371, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1398 = call { ptr, i160 } %1397({ ptr, ptr, ptr, i32 } %1371, { ptr, ptr, ptr, i32 } %1371, ptr nonnull align 8 %2) #28
  %1399 = extractvalue { ptr, i160 } %1398, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1400 = icmp ne ptr %1399, @nil_typ
  %1401 = icmp ne ptr %1399, null
  %1402 = and i1 %1400, %1401
  br i1 %1402, label %1495, label %1403

1403:                                             ; preds = %1392, %1391
  %1404 = add i32 %1336, 2127912214
  %1405 = shl i32 %1336, 12
  %1406 = add i32 %1404, %1405
  %1407 = ashr i32 %1406, 19
  %1408 = xor i32 %1406, %1407
  %1409 = xor i32 %1408, -949894596
  %1410 = add i32 %1409, 374761393
  %1411 = shl i32 %1409, 5
  %1412 = add i32 %1410, %1411
  %1413 = add i32 %1412, -744332180
  %1414 = shl i32 %1412, 9
  %1415 = xor i32 %1413, %1414
  %1416 = add i32 %1415, -42973499
  %1417 = shl i32 %1415, 3
  %1418 = add i32 %1416, %1417
  %1419 = ashr i32 %1418, 16
  %1420 = xor i32 %1418, %1419
  %1421 = xor i32 %1420, -1252372727
  %1422 = load i32, ptr %35, align 8
  %1423 = add i32 %1422, -1
  %1424 = and i32 %1423, %1421
  %1425 = load ptr, ptr %39, align 8
  %1426 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1427 = sext i32 %1424 to i64
  %1428 = shl nsw i64 %1427, 5
  %1429 = getelementptr i8, ptr %1425, i64 %1428
  %1430 = load ptr, ptr %1429, align 8
  %1431 = icmp ne ptr %1430, @nil_typ
  %1432 = icmp ne ptr %1430, null
  %1433 = and i1 %1431, %1432
  br i1 %1433, label %1434, label %1485

1434:                                             ; preds = %1403
  %1435 = getelementptr i8, ptr %1429, i64 8
  %1436 = load i64, ptr %1435, align 4
  %1437 = getelementptr i8, ptr %1429, i64 16
  %1438 = load i64, ptr %1437, align 4
  %1439 = inttoptr i64 %1436 to ptr
  %1440 = inttoptr i64 %1438 to ptr
  %1441 = getelementptr i8, ptr %1430, i64 8
  %1442 = getelementptr i8, ptr %1430, i64 16
  %1443 = getelementptr i8, ptr %1430, i64 40
  %1444 = load i64, ptr %1441, align 4, !noalias !50
  %1445 = load i64, ptr %1442, align 4, !noalias !50
  %1446 = load ptr, ptr %1443, align 8, !noalias !50
  %1447 = mul i64 %1444, 4015701072841558310
  %1448 = lshr i64 %1447, 32
  %1449 = xor i64 %1448, %1447
  %1450 = and i64 %1449, %1445
  %1451 = getelementptr i32, ptr %1446, i64 %1450
  %1452 = load i32, ptr %1451, align 4, !noalias !50
  %1453 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1430, 0
  %1454 = insertvalue { ptr, ptr, ptr, i32 } %1453, ptr %1439, 1
  %1455 = insertvalue { ptr, ptr, ptr, i32 } %1454, ptr %1440, 2
  %1456 = insertvalue { ptr, ptr, ptr, i32 } %1455, i32 %1452, 3
  %1457 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1458 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1430) #43
  %1459 = sext i32 %1452 to i64
  %1460 = getelementptr ptr, ptr %1430, i64 %1459
  %1461 = getelementptr i8, ptr %1460, i64 64
  %1462 = load ptr, ptr %1461, align 8
  %1463 = call align 4 ptr %1462({ ptr, ptr, ptr, i32 } %1456, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1464 = call i32 %1463({ ptr, ptr, ptr, i32 } %1456, { ptr, ptr, ptr, i32 } %1456, ptr nonnull align 8 %2) #28
  %1465 = icmp eq i32 %1464, %1336
  br i1 %1465, label %1466, label %1485

1466:                                             ; preds = %1434
  %1467 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1468 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1430)
  %1469 = getelementptr i8, ptr %1460, i64 48
  %1470 = load ptr, ptr %1469, align 8
  %1471 = call align 4 ptr %1470({ ptr, ptr, ptr, i32 } %1456, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1472 = call { ptr, i160 } %1471({ ptr, ptr, ptr, i32 } %1456, { ptr, ptr, ptr, i32 } %1456, ptr nonnull align 8 %2) #28
  %1473 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1474 = load ptr, ptr %34, align 8
  %1475 = call i1 %1474({ ptr, i160 } %1472, { ptr, i160 } %1334) #28
  br i1 %1475, label %1476, label %1485

1476:                                             ; preds = %1466
  %1477 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1478 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1430)
  %1479 = getelementptr i8, ptr %1460, i64 56
  %1480 = load ptr, ptr %1479, align 8
  %1481 = call align 4 ptr %1480({ ptr, ptr, ptr, i32 } %1456, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1482 = call { ptr, i160 } %1481({ ptr, ptr, ptr, i32 } %1456, { ptr, ptr, ptr, i32 } %1456, ptr nonnull align 8 %2) #28
  %1483 = extractvalue { ptr, i160 } %1482, 0
  %1484 = extractvalue { ptr, i160 } %1482, 1
  br label %1485

1485:                                             ; preds = %1476, %1466, %1434, %1403
  %1486 = phi i160 [ %1484, %1476 ], [ poison, %1466 ], [ poison, %1403 ], [ poison, %1434 ]
  %1487 = phi ptr [ %1483, %1476 ], [ @nil_typ, %1466 ], [ @nil_typ, %1403 ], [ @nil_typ, %1434 ]
  %1488 = insertvalue { ptr, i160 } poison, ptr %1487, 0
  %1489 = insertvalue { ptr, i160 } %1488, i160 %1486, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1490 = icmp ne ptr %1487, @nil_typ
  %1491 = icmp ne ptr %1487, null
  %1492 = and i1 %1490, %1491
  %1493 = freeze i1 %1492
  %1494 = select i1 %1493, ptr %1487, ptr @nil_typ
  br label %1495

1495:                                             ; preds = %1485, %1392
  %1496 = phi { ptr, i160 } [ %1398, %1392 ], [ %1489, %1485 ]
  %1497 = phi ptr [ %1399, %1392 ], [ %1494, %1485 ]
  %1498 = icmp ne ptr %1497, @nil_typ
  %1499 = icmp ne ptr %1497, null
  %1500 = and i1 %1498, %1499
  br i1 %1500, label %1501, label %1505

1501:                                             ; preds = %1495
  %1502 = extractvalue { ptr, i160 } %1496, 1
  %1503 = trunc i160 %1502 to i32
  %1504 = icmp eq i32 %0, %1503
  br label %1505

1505:                                             ; preds = %1501, %1495
  %1506 = phi i1 [ %1504, %1501 ], [ false, %1495 ]
  %1507 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1508 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1509 = load i32, ptr %44, align 4
  %1510 = icmp eq i32 %1509, %0
  %1511 = select i1 %1510, i1 %1506, i1 false
  br label %1512

1512:                                             ; preds = %1505, %48
  %1513 = phi i64 [ %1331, %1505 ], [ %49, %48 ]
  %1514 = phi i1 [ %1511, %1505 ], [ true, %48 ]
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1515 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1516 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <17 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108>, ptr %10, align 4
  %1517 = sub i64 %1513, %41
  %1518 = getelementptr inbounds i8, ptr %10, i64 17
  store i8 0, ptr %1518, align 1
  %1519 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(18) %10) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %9, align 16
  %1520 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %9) #28
  %1521 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %0) #25
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %8, align 16
  %1522 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %8) #28
  %1523 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %1517) #25
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %7, align 4
  %1524 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %7) #28
  br i1 %42, label %1525, label %1538

1525:                                             ; preds = %1512
  %1526 = icmp sgt i64 %1517, 0
  br i1 %1526, label %1527, label %1531

1527:                                             ; preds = %1525
  %1528 = mul i64 %1517, 1000000
  %1529 = zext nneg i32 %0 to i64
  %1530 = sdiv i64 %1528, %1529
  br label %1531

1531:                                             ; preds = %1527, %1525
  %1532 = phi i64 [ %1530, %1527 ], [ 0, %1525 ]
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %6, align 16
  %1533 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %6) #28
  %1534 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %1532) #25
  %1535 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %5, align 4
  %1536 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1537 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %5) #28
  br label %1538

1538:                                             ; preds = %1531, %1512
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1539 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1540 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %4, align 4
  %1541 = getelementptr inbounds i8, ptr %4, i64 18
  store i8 0, ptr %1541, align 2
  %1542 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %4) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1543 = select i1 %1514, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %1544 = select i1 %1514, ptr %13, ptr %17
  %1545 = select i1 %1514, ptr %14, ptr %18
  %1546 = select i1 %1514, ptr %15, ptr %19
  %1547 = select i1 %1514, ptr %16, ptr %20
  store ptr @_parameterization_Bufferi8, ptr %1544, align 8
  %1548 = select i1 %1514, ptr %13, ptr %17
  %1549 = getelementptr inbounds i8, ptr %1548, i64 8
  store ptr @_parameterization_i32, ptr %1549, align 8
  %1550 = select i1 %1514, ptr %13, ptr %17
  %1551 = getelementptr inbounds i8, ptr %1550, i64 16
  store ptr @_parameterization_i32, ptr %1551, align 8
  %1552 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1544)
  store ptr @buffer_typ, ptr %1545, align 8
  %1553 = select i1 %1514, ptr %14, ptr %18
  %1554 = getelementptr inbounds i8, ptr %1553, i64 8
  store ptr @i32_typ, ptr %1554, align 8
  %1555 = select i1 %1514, ptr %14, ptr %18
  %1556 = getelementptr inbounds i8, ptr %1555, i64 16
  store ptr @i32_typ, ptr %1556, align 8
  %1557 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %1545) #43
  store ptr @_parameterization_String, ptr %1546, align 8
  %1558 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1546)
  %1559 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store ptr @String, ptr %1547, align 8
  %1560 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %1547) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1561 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1562 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <4 x i8> %1543, ptr %3, align 4
  %1563 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1564 = getelementptr inbounds i8, ptr %3, i64 4
  store i8 0, ptr %1564, align 4
  %1565 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %3) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #9

declare i64 @clock() local_unnamed_addr #30

define dso_local void @benchmark_insert_random(i32 %0) local_unnamed_addr #30 {
  %2 = alloca {}, align 8
  %3 = alloca [2 x i8], align 4
  store i16 0, ptr %3, align 4
  %4 = alloca [28 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(28) %4, i8 0, i64 28, i1 false)
  %5 = alloca [5 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(5) %5, i8 0, i64 5, i1 false)
  %6 = alloca [19 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(19) %6, i8 0, i64 19, i1 false)
  %7 = alloca [4 x i8], align 4
  store i32 0, ptr %7, align 4
  %8 = alloca [16 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %8, i8 0, i64 16, i1 false)
  %9 = alloca [4 x i8], align 4
  store i32 0, ptr %9, align 4
  %10 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %10, i8 0, i64 15, i1 false)
  %11 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %11, i8 0, i64 15, i1 false)
  %12 = alloca [14 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(14) %12, i8 0, i64 14, i1 false)
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 8
  %18 = alloca [3 x ptr], align 8
  %19 = alloca { ptr, ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  %22 = alloca [3 x ptr], align 8
  %23 = alloca { ptr, ptr, ptr }, align 8
  %24 = alloca [1 x ptr], align 8
  %25 = alloca { ptr }, align 8
  %26 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @_parameterization_i32, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %26) #43
  %30 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %16) #43
  %31 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %30, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %16) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %16) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %30, ptr noalias nofree noundef nonnull readnone align 4 @dqdnkdjhng, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %32 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %30) #47
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %30) #43
  %34 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %15) #43
  %35 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %34, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %15) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %15) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %34, ptr noalias nofree noundef nonnull readnone align 4 @xtbmzvyqyo, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %36 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %34) #47
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %34) #43
  %38 = getelementptr inbounds i8, ptr %26, i64 48
  store ptr %32, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %26, i64 56
  store ptr %36, ptr %39, align 8
  %40 = getelementptr inbounds i8, ptr %26, i64 40
  store i32 8, ptr %40, align 8
  %41 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %42 = getelementptr inbounds i8, ptr %26, i64 24
  store ptr %41, ptr %42, align 8
  %43 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %44 = getelementptr inbounds i8, ptr %26, i64 32
  store ptr %43, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  %46 = sext i32 %0 to i64
  %47 = shl nsw i64 %46, 2
  %48 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %47, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #43
  %50 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %50, align 8
  %51 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr @_parameterization_i1, ptr %51, align 8
  %52 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %50) #43
  %54 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %14) #43
  %55 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %54, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %14) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %14) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %54, ptr noalias nofree noundef nonnull readnone align 4 @goxfdsovrl, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %56 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %54) #47
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %54) #43
  %58 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %13) #43
  %59 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %58, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %13) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %13) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %58, ptr noalias nofree noundef nonnull readnone align 4 @cowrhrqqtx, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %60 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %58) #47
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %58) #43
  %62 = getelementptr inbounds i8, ptr %50, i64 48
  store ptr %56, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %50, i64 56
  store ptr %60, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %50, i64 40
  store i32 8, ptr %64, align 8
  %65 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %66 = getelementptr inbounds i8, ptr %50, i64 24
  store ptr %65, ptr %66, align 8
  %67 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %68 = getelementptr inbounds i8, ptr %50, i64 32
  store ptr %67, ptr %68, align 8
  %69 = icmp sgt i32 %0, 0
  br i1 %69, label %77, label %70

70:                                               ; preds = %1
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %73 = call i64 @clock()
  %74 = call i64 @clock()
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  br label %2851

77:                                               ; preds = %1
  %78 = add nsw i32 %0, -1
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %80 = zext nneg i32 %78 to i64
  %81 = zext nneg i32 %0 to i64
  %82 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %84 = getelementptr inbounds i8, ptr %50, i64 44
  %85 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %50, 1
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr undef, 2
  %87 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 10, 3
  br label %88

88:                                               ; preds = %1373, %77
  %89 = phi i32 [ %94, %1373 ], [ 123, %77 ]
  %90 = phi i64 [ %1374, %1373 ], [ 0, %77 ]
  %91 = phi i32 [ %100, %1373 ], [ -1, %77 ]
  %92 = mul i32 %89, 1103515245
  %93 = add i32 %92, 12345
  %94 = and i32 %93, 2147483647
  %95 = zext nneg i32 %94 to i160
  %96 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %95, 1
  %97 = shl i64 %90, 2
  %98 = getelementptr i8, ptr %48, i64 %97
  store i32 %94, ptr %98, align 4
  %99 = icmp eq i64 %90, %80
  %100 = select i1 %99, i32 %94, i32 %91
  store i1 true, ptr %17, align 8
  %101 = load i8, ptr %17, align 8
  %102 = zext i8 %101 to i160
  %103 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %102, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %104 = load ptr, ptr %62, align 8
  %105 = call i32 %104({ ptr, i160 } %96) #28
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %107 = load i32, ptr %64, align 8
  %108 = add i32 %107, -1
  %109 = and i32 %108, %105
  %110 = load ptr, ptr %66, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %111 = sext i32 %109 to i64
  %112 = shl nsw i64 %111, 5
  %113 = getelementptr i8, ptr %110, i64 %112
  %114 = load ptr, ptr %113, align 8
  %115 = getelementptr i8, ptr %113, i64 8
  %116 = icmp ne ptr %114, @nil_typ
  %117 = icmp ne ptr %114, null
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %242

119:                                              ; preds = %88
  %120 = load i64, ptr %115, align 4
  %121 = getelementptr i8, ptr %113, i64 16
  %122 = load i64, ptr %121, align 4
  %123 = inttoptr i64 %120 to ptr
  %124 = inttoptr i64 %122 to ptr
  %125 = getelementptr i8, ptr %114, i64 8
  %126 = getelementptr i8, ptr %114, i64 16
  %127 = getelementptr i8, ptr %114, i64 40
  %128 = load i64, ptr %125, align 4, !noalias !53
  %129 = load i64, ptr %126, align 4, !noalias !53
  %130 = load ptr, ptr %127, align 8, !noalias !53
  %131 = mul i64 %128, 4015701072841558310
  %132 = lshr i64 %131, 32
  %133 = xor i64 %132, %131
  %134 = and i64 %133, %129
  %135 = getelementptr i32, ptr %130, i64 %134
  %136 = load i32, ptr %135, align 4, !noalias !53
  %137 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %114, 0
  %138 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %123, 1
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr %124, 2
  %140 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %136, 3
  %141 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %142 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %114) #43
  %143 = sext i32 %136 to i64
  %144 = getelementptr ptr, ptr %114, i64 %143
  %145 = getelementptr i8, ptr %144, i64 64
  %146 = load ptr, ptr %145, align 8
  %147 = call align 4 ptr %146({ ptr, ptr, ptr, i32 } %140, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %148 = call i32 %147({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull align 8 %2) #28
  %149 = icmp eq i32 %148, %105
  br i1 %149, label %150, label %242

150:                                              ; preds = %119
  %151 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %152 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %114)
  %153 = getelementptr i8, ptr %144, i64 48
  %154 = load ptr, ptr %153, align 8
  %155 = call align 4 ptr %154({ ptr, ptr, ptr, i32 } %140, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %156 = call { ptr, i160 } %155({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull align 8 %2) #28
  %157 = load ptr, ptr %63, align 8
  %158 = call i1 %157({ ptr, i160 } %156, { ptr, i160 } %96) #28
  br i1 %158, label %159, label %242

159:                                              ; preds = %150
  %160 = load ptr, ptr %50, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %162 = load ptr, ptr %51, align 8
  %163 = load ptr, ptr %160, align 8, !alias.scope !56
  %164 = getelementptr i8, ptr %163, i64 72
  %165 = load ptr, ptr %164, align 8, !alias.scope !56
  %166 = call { i64, i64 } %165(ptr nocapture nofree nonnull readonly align 8 %160) #2, !alias.scope !56
  %167 = extractvalue { i64, i64 } %166, 0
  %168 = extractvalue { i64, i64 } %166, 1
  %169 = urem i64 20, %168
  %170 = icmp eq i64 %169, 0
  %171 = sub i64 %168, %169
  %172 = select i1 %170, i64 0, i64 %171
  %173 = add i64 %167, 20
  %174 = add i64 %173, %172
  %175 = load ptr, ptr %162, align 8, !alias.scope !56
  %176 = getelementptr i8, ptr %175, i64 72
  %177 = load ptr, ptr %176, align 8, !alias.scope !56
  %178 = call { i64, i64 } %177(ptr nocapture nofree nonnull readonly align 8 %162) #2, !alias.scope !56
  %179 = extractvalue { i64, i64 } %178, 0
  %180 = extractvalue { i64, i64 } %178, 1
  %181 = call i64 @llvm.umax.i64(i64 %168, i64 %180) #44
  %182 = call i64 @llvm.umax.i64(i64 %181, i64 noundef 8) #44, !range !18
  %183 = urem i64 %174, %180
  %184 = icmp eq i64 %183, 0
  %185 = sub i64 %180, %183
  %186 = select i1 %184, i64 0, i64 %185
  %187 = add i64 %179, %174
  %188 = add i64 %187, %186
  %189 = urem i64 %188, %182
  %190 = icmp eq i64 %189, 0
  %191 = sub i64 %182, %189
  %192 = select i1 %190, i64 0, i64 %191
  %193 = add i64 %192, %188
  %194 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %193, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %160, ptr %194, align 8
  %195 = getelementptr inbounds i8, ptr %194, i64 8
  store ptr %162, ptr %195, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %194)
  %197 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %198 = load ptr, ptr %160, align 8
  %199 = getelementptr i8, ptr %198, i64 72
  %200 = load ptr, ptr %199, align 8
  %201 = call { i64, i64 } %200(ptr nocapture nofree nonnull readonly align 8 %160) #2
  %202 = extractvalue { i64, i64 } %201, 1
  %203 = urem i64 20, %202
  %204 = icmp eq i64 %203, 0
  %205 = sub i64 %202, %203
  %206 = add i64 %205, 20
  %207 = select i1 %204, i64 20, i64 %206
  %208 = getelementptr i8, ptr %194, i64 %207
  %209 = getelementptr i8, ptr %198, i64 64
  %210 = load ptr, ptr %209, align 8
  call void %210({ ptr, i160 } %96, ptr nocapture nofree nonnull readonly align 8 %160, ptr nocapture nofree writeonly %208) #8
  %211 = load ptr, ptr %194, align 8
  %212 = load ptr, ptr %211, align 8
  %213 = getelementptr i8, ptr %212, i64 72
  %214 = load ptr, ptr %213, align 8
  %215 = call { i64, i64 } %214(ptr nocapture nofree nonnull readonly align 8 %211) #2
  %216 = extractvalue { i64, i64 } %215, 0
  %217 = extractvalue { i64, i64 } %215, 1
  %218 = urem i64 20, %217
  %219 = icmp eq i64 %218, 0
  %220 = sub i64 %217, %218
  %221 = select i1 %219, i64 0, i64 %220
  %222 = add i64 %216, 20
  %223 = add i64 %222, %221
  %224 = load ptr, ptr %195, align 8
  %225 = load ptr, ptr %224, align 8
  %226 = getelementptr i8, ptr %225, i64 72
  %227 = load ptr, ptr %226, align 8
  %228 = call { i64, i64 } %227(ptr nocapture nofree nonnull readonly align 8 %224) #2
  %229 = extractvalue { i64, i64 } %228, 1
  %230 = urem i64 %223, %229
  %231 = icmp eq i64 %230, 0
  %232 = sub i64 %229, %230
  %233 = select i1 %231, i64 0, i64 %232
  %234 = getelementptr i8, ptr %194, i64 %223
  %235 = getelementptr i8, ptr %234, i64 %233
  %236 = getelementptr i8, ptr %225, i64 64
  %237 = load ptr, ptr %236, align 8
  call void %237({ ptr, i160 } %103, ptr nocapture nofree nonnull readonly align 8 %224, ptr nocapture nofree writeonly %235) #8
  %238 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %239 = getelementptr inbounds i8, ptr %194, i64 16
  store i32 %105, ptr %239, align 8
  store ptr @Entry, ptr %113, align 8
  %240 = ptrtoint ptr %194 to i64
  store i64 %240, ptr %115, align 4
  %241 = getelementptr i8, ptr %113, i64 24
  store i32 10, ptr %241, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1373

242:                                              ; preds = %150, %119, %88
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %243 = add i32 %105, 2127912214
  %244 = shl i32 %105, 12
  %245 = add i32 %243, %244
  %246 = ashr i32 %245, 19
  %247 = xor i32 %245, %246
  %248 = xor i32 %247, -949894596
  %249 = add i32 %248, 374761393
  %250 = shl i32 %248, 5
  %251 = add i32 %249, %250
  %252 = add i32 %251, -744332180
  %253 = shl i32 %251, 9
  %254 = xor i32 %252, %253
  %255 = add i32 %254, -42973499
  %256 = shl i32 %254, 3
  %257 = add i32 %255, %256
  %258 = ashr i32 %257, 16
  %259 = xor i32 %257, %258
  %260 = xor i32 %259, -1252372727
  %261 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %262 = load i32, ptr %64, align 8
  %263 = add i32 %262, -1
  %264 = and i32 %263, %260
  %265 = load ptr, ptr %68, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %266 = sext i32 %264 to i64
  %267 = shl nsw i64 %266, 5
  %268 = getelementptr i8, ptr %265, i64 %267
  %269 = load ptr, ptr %268, align 8
  %270 = getelementptr i8, ptr %268, i64 8
  %271 = icmp ne ptr %269, @nil_typ
  %272 = icmp ne ptr %269, null
  %273 = and i1 %271, %272
  br i1 %273, label %274, label %397

274:                                              ; preds = %242
  %275 = load i64, ptr %270, align 4
  %276 = getelementptr i8, ptr %268, i64 16
  %277 = load i64, ptr %276, align 4
  %278 = inttoptr i64 %275 to ptr
  %279 = inttoptr i64 %277 to ptr
  %280 = getelementptr i8, ptr %269, i64 8
  %281 = getelementptr i8, ptr %269, i64 16
  %282 = getelementptr i8, ptr %269, i64 40
  %283 = load i64, ptr %280, align 4, !noalias !59
  %284 = load i64, ptr %281, align 4, !noalias !59
  %285 = load ptr, ptr %282, align 8, !noalias !59
  %286 = mul i64 %283, 4015701072841558310
  %287 = lshr i64 %286, 32
  %288 = xor i64 %287, %286
  %289 = and i64 %288, %284
  %290 = getelementptr i32, ptr %285, i64 %289
  %291 = load i32, ptr %290, align 4, !noalias !59
  %292 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %269, 0
  %293 = insertvalue { ptr, ptr, ptr, i32 } %292, ptr %278, 1
  %294 = insertvalue { ptr, ptr, ptr, i32 } %293, ptr %279, 2
  %295 = insertvalue { ptr, ptr, ptr, i32 } %294, i32 %291, 3
  %296 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %297 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %269) #43
  %298 = sext i32 %291 to i64
  %299 = getelementptr ptr, ptr %269, i64 %298
  %300 = getelementptr i8, ptr %299, i64 64
  %301 = load ptr, ptr %300, align 8
  %302 = call align 4 ptr %301({ ptr, ptr, ptr, i32 } %295, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %303 = call i32 %302({ ptr, ptr, ptr, i32 } %295, { ptr, ptr, ptr, i32 } %295, ptr nonnull align 8 %2) #28
  %304 = icmp eq i32 %303, %105
  br i1 %304, label %305, label %397

305:                                              ; preds = %274
  %306 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %307 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %269)
  %308 = getelementptr i8, ptr %299, i64 48
  %309 = load ptr, ptr %308, align 8
  %310 = call align 4 ptr %309({ ptr, ptr, ptr, i32 } %295, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %311 = call { ptr, i160 } %310({ ptr, ptr, ptr, i32 } %295, { ptr, ptr, ptr, i32 } %295, ptr nonnull align 8 %2) #28
  %312 = load ptr, ptr %63, align 8
  %313 = call i1 %312({ ptr, i160 } %311, { ptr, i160 } %96) #28
  br i1 %313, label %314, label %397

314:                                              ; preds = %305
  %315 = load ptr, ptr %50, align 8
  %316 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %317 = load ptr, ptr %51, align 8
  %318 = load ptr, ptr %315, align 8, !alias.scope !62
  %319 = getelementptr i8, ptr %318, i64 72
  %320 = load ptr, ptr %319, align 8, !alias.scope !62
  %321 = call { i64, i64 } %320(ptr nocapture nofree nonnull readonly align 8 %315) #2, !alias.scope !62
  %322 = extractvalue { i64, i64 } %321, 0
  %323 = extractvalue { i64, i64 } %321, 1
  %324 = urem i64 20, %323
  %325 = icmp eq i64 %324, 0
  %326 = sub i64 %323, %324
  %327 = select i1 %325, i64 0, i64 %326
  %328 = add i64 %322, 20
  %329 = add i64 %328, %327
  %330 = load ptr, ptr %317, align 8, !alias.scope !62
  %331 = getelementptr i8, ptr %330, i64 72
  %332 = load ptr, ptr %331, align 8, !alias.scope !62
  %333 = call { i64, i64 } %332(ptr nocapture nofree nonnull readonly align 8 %317) #2, !alias.scope !62
  %334 = extractvalue { i64, i64 } %333, 0
  %335 = extractvalue { i64, i64 } %333, 1
  %336 = call i64 @llvm.umax.i64(i64 %323, i64 %335) #44
  %337 = call i64 @llvm.umax.i64(i64 %336, i64 noundef 8) #44, !range !18
  %338 = urem i64 %329, %335
  %339 = icmp eq i64 %338, 0
  %340 = sub i64 %335, %338
  %341 = select i1 %339, i64 0, i64 %340
  %342 = add i64 %334, %329
  %343 = add i64 %342, %341
  %344 = urem i64 %343, %337
  %345 = icmp eq i64 %344, 0
  %346 = sub i64 %337, %344
  %347 = select i1 %345, i64 0, i64 %346
  %348 = add i64 %347, %343
  %349 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %348, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %315, ptr %349, align 8
  %350 = getelementptr inbounds i8, ptr %349, i64 8
  store ptr %317, ptr %350, align 8
  %351 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %349)
  %352 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %353 = load ptr, ptr %315, align 8
  %354 = getelementptr i8, ptr %353, i64 72
  %355 = load ptr, ptr %354, align 8
  %356 = call { i64, i64 } %355(ptr nocapture nofree nonnull readonly align 8 %315) #2
  %357 = extractvalue { i64, i64 } %356, 1
  %358 = urem i64 20, %357
  %359 = icmp eq i64 %358, 0
  %360 = sub i64 %357, %358
  %361 = add i64 %360, 20
  %362 = select i1 %359, i64 20, i64 %361
  %363 = getelementptr i8, ptr %349, i64 %362
  %364 = getelementptr i8, ptr %353, i64 64
  %365 = load ptr, ptr %364, align 8
  call void %365({ ptr, i160 } %96, ptr nocapture nofree nonnull readonly align 8 %315, ptr nocapture nofree writeonly %363) #8
  %366 = load ptr, ptr %349, align 8
  %367 = load ptr, ptr %366, align 8
  %368 = getelementptr i8, ptr %367, i64 72
  %369 = load ptr, ptr %368, align 8
  %370 = call { i64, i64 } %369(ptr nocapture nofree nonnull readonly align 8 %366) #2
  %371 = extractvalue { i64, i64 } %370, 0
  %372 = extractvalue { i64, i64 } %370, 1
  %373 = urem i64 20, %372
  %374 = icmp eq i64 %373, 0
  %375 = sub i64 %372, %373
  %376 = select i1 %374, i64 0, i64 %375
  %377 = add i64 %371, 20
  %378 = add i64 %377, %376
  %379 = load ptr, ptr %350, align 8
  %380 = load ptr, ptr %379, align 8
  %381 = getelementptr i8, ptr %380, i64 72
  %382 = load ptr, ptr %381, align 8
  %383 = call { i64, i64 } %382(ptr nocapture nofree nonnull readonly align 8 %379) #2
  %384 = extractvalue { i64, i64 } %383, 1
  %385 = urem i64 %378, %384
  %386 = icmp eq i64 %385, 0
  %387 = sub i64 %384, %385
  %388 = select i1 %386, i64 0, i64 %387
  %389 = getelementptr i8, ptr %349, i64 %378
  %390 = getelementptr i8, ptr %389, i64 %388
  %391 = getelementptr i8, ptr %380, i64 64
  %392 = load ptr, ptr %391, align 8
  call void %392({ ptr, i160 } %103, ptr nocapture nofree nonnull readonly align 8 %379, ptr nocapture nofree writeonly %390) #8
  %393 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %394 = getelementptr inbounds i8, ptr %349, i64 16
  store i32 %105, ptr %394, align 8
  store ptr @Entry, ptr %268, align 8
  %395 = ptrtoint ptr %349 to i64
  store i64 %395, ptr %270, align 4
  %396 = getelementptr i8, ptr %268, i64 24
  store i32 10, ptr %396, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1373

397:                                              ; preds = %305, %274, %242
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %398 = load i32, ptr %84, align 4
  %399 = load i32, ptr %64, align 8
  %400 = icmp slt i32 %398, %399
  br i1 %400, label %487, label %401

401:                                              ; preds = %397
  %402 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %403 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %404 = load ptr, ptr %66, align 8
  %405 = load ptr, ptr %68, align 8
  %406 = shl i32 %399, 1
  %407 = call i32 @llvm.smax.i32(i32 %406, i32 noundef 16) #43
  store i32 %407, ptr %64, align 8
  %408 = zext nneg i32 %407 to i64
  %409 = shl nuw nsw i64 %408, 5
  %410 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %409, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %410, ptr %66, align 8
  %411 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %409, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %411, ptr %68, align 8
  store i32 0, ptr %84, align 4
  %412 = icmp sgt i32 %399, 0
  br i1 %412, label %413, label %487

413:                                              ; preds = %401
  %414 = zext nneg i32 %399 to i64
  br label %415

415:                                              ; preds = %448, %413
  %416 = phi i64 [ 0, %413 ], [ %449, %448 ]
  %417 = shl nuw nsw i64 %416, 5
  %418 = getelementptr i8, ptr %404, i64 %417
  %419 = load ptr, ptr %418, align 8
  %420 = icmp ne ptr %419, @nil_typ
  %421 = icmp ne ptr %419, null
  %422 = and i1 %420, %421
  br i1 %422, label %423, label %448

423:                                              ; preds = %415
  %424 = getelementptr i8, ptr %418, i64 8
  %425 = load i64, ptr %424, align 4
  %426 = getelementptr i8, ptr %418, i64 16
  %427 = load i64, ptr %426, align 4
  %428 = inttoptr i64 %425 to ptr
  %429 = inttoptr i64 %427 to ptr
  %430 = getelementptr i8, ptr %419, i64 8
  %431 = getelementptr i8, ptr %419, i64 16
  %432 = getelementptr i8, ptr %419, i64 40
  %433 = load i64, ptr %430, align 4, !noalias !25
  %434 = load i64, ptr %431, align 4, !noalias !25
  %435 = load ptr, ptr %432, align 8, !noalias !25
  %436 = mul i64 %433, 4015701072841558310
  %437 = lshr i64 %436, 32
  %438 = xor i64 %437, %436
  %439 = and i64 %438, %434
  %440 = getelementptr i32, ptr %435, i64 %439
  %441 = load i32, ptr %440, align 4, !noalias !65
  %442 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %419, 0
  %443 = insertvalue { ptr, ptr, ptr, i32 } %442, ptr %428, 1
  %444 = insertvalue { ptr, ptr, ptr, i32 } %443, ptr %429, 2
  %445 = insertvalue { ptr, ptr, ptr, i32 } %444, i32 %441, 3
  %446 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %447 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %445) #28
  br label %448

448:                                              ; preds = %423, %415
  %449 = add nuw nsw i64 %416, 1
  %450 = icmp eq i64 %449, %414
  br i1 %450, label %451, label %415

451:                                              ; preds = %484, %448
  %452 = phi i64 [ %485, %484 ], [ 0, %448 ]
  %453 = shl nuw nsw i64 %452, 5
  %454 = getelementptr i8, ptr %405, i64 %453
  %455 = load ptr, ptr %454, align 8
  %456 = icmp ne ptr %455, @nil_typ
  %457 = icmp ne ptr %455, null
  %458 = and i1 %456, %457
  br i1 %458, label %459, label %484

459:                                              ; preds = %451
  %460 = getelementptr i8, ptr %454, i64 8
  %461 = load i64, ptr %460, align 4
  %462 = getelementptr i8, ptr %454, i64 16
  %463 = load i64, ptr %462, align 4
  %464 = inttoptr i64 %461 to ptr
  %465 = inttoptr i64 %463 to ptr
  %466 = getelementptr i8, ptr %455, i64 8
  %467 = getelementptr i8, ptr %455, i64 16
  %468 = getelementptr i8, ptr %455, i64 40
  %469 = load i64, ptr %466, align 4, !noalias !25
  %470 = load i64, ptr %467, align 4, !noalias !25
  %471 = load ptr, ptr %468, align 8, !noalias !25
  %472 = mul i64 %469, 4015701072841558310
  %473 = lshr i64 %472, 32
  %474 = xor i64 %473, %472
  %475 = and i64 %474, %470
  %476 = getelementptr i32, ptr %471, i64 %475
  %477 = load i32, ptr %476, align 4, !noalias !68
  %478 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %455, 0
  %479 = insertvalue { ptr, ptr, ptr, i32 } %478, ptr %464, 1
  %480 = insertvalue { ptr, ptr, ptr, i32 } %479, ptr %465, 2
  %481 = insertvalue { ptr, ptr, ptr, i32 } %480, i32 %477, 3
  %482 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %483 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %481) #28
  br label %484

484:                                              ; preds = %459, %451
  %485 = add nuw nsw i64 %452, 1
  %486 = icmp eq i64 %485, %414
  br i1 %486, label %487, label %451

487:                                              ; preds = %484, %401, %397
  %488 = load ptr, ptr %50, align 8
  %489 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %490 = load ptr, ptr %51, align 8
  %491 = load ptr, ptr %488, align 8
  %492 = getelementptr i8, ptr %491, i64 72
  %493 = load ptr, ptr %492, align 8
  %494 = call { i64, i64 } %493(ptr nocapture nofree nonnull readonly align 8 %488) #2
  %495 = extractvalue { i64, i64 } %494, 0
  %496 = extractvalue { i64, i64 } %494, 1
  %497 = urem i64 20, %496
  %498 = icmp eq i64 %497, 0
  %499 = sub i64 %496, %497
  %500 = select i1 %498, i64 0, i64 %499
  %501 = add i64 %495, 20
  %502 = add i64 %501, %500
  %503 = load ptr, ptr %490, align 8
  %504 = getelementptr i8, ptr %503, i64 72
  %505 = load ptr, ptr %504, align 8
  %506 = call { i64, i64 } %505(ptr nocapture nofree nonnull readonly align 8 %490) #2
  %507 = extractvalue { i64, i64 } %506, 0
  %508 = extractvalue { i64, i64 } %506, 1
  %509 = call i64 @llvm.umax.i64(i64 %496, i64 %508) #44
  %510 = call i64 @llvm.umax.i64(i64 %509, i64 noundef 8) #44, !range !18
  %511 = urem i64 %502, %508
  %512 = icmp eq i64 %511, 0
  %513 = sub i64 %508, %511
  %514 = select i1 %512, i64 0, i64 %513
  %515 = add i64 %507, %502
  %516 = add i64 %515, %514
  %517 = urem i64 %516, %510
  %518 = icmp eq i64 %517, 0
  %519 = sub i64 %510, %517
  %520 = select i1 %518, i64 0, i64 %519
  %521 = add i64 %520, %516
  %522 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %521, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %488, ptr %522, align 8
  %523 = getelementptr inbounds i8, ptr %522, i64 8
  store ptr %490, ptr %523, align 8
  %524 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %522)
  %525 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %526 = load ptr, ptr %488, align 8
  %527 = getelementptr i8, ptr %526, i64 72
  %528 = load ptr, ptr %527, align 8
  %529 = call { i64, i64 } %528(ptr nocapture nofree nonnull readonly align 8 %488) #2
  %530 = extractvalue { i64, i64 } %529, 1
  %531 = urem i64 20, %530
  %532 = icmp eq i64 %531, 0
  %533 = sub i64 %530, %531
  %534 = add i64 %533, 20
  %535 = select i1 %532, i64 20, i64 %534
  %536 = getelementptr i8, ptr %522, i64 %535
  %537 = getelementptr i8, ptr %526, i64 64
  %538 = load ptr, ptr %537, align 8
  call void %538({ ptr, i160 } %96, ptr nocapture nofree nonnull readonly align 8 %488, ptr nocapture nofree writeonly %536) #8
  %539 = load ptr, ptr %522, align 8
  %540 = load ptr, ptr %539, align 8
  %541 = getelementptr i8, ptr %540, i64 72
  %542 = load ptr, ptr %541, align 8
  %543 = call { i64, i64 } %542(ptr nocapture nofree nonnull readonly align 8 %539) #2
  %544 = extractvalue { i64, i64 } %543, 0
  %545 = extractvalue { i64, i64 } %543, 1
  %546 = urem i64 20, %545
  %547 = icmp eq i64 %546, 0
  %548 = sub i64 %545, %546
  %549 = select i1 %547, i64 0, i64 %548
  %550 = add i64 %544, 20
  %551 = add i64 %550, %549
  %552 = load ptr, ptr %523, align 8
  %553 = load ptr, ptr %552, align 8
  %554 = getelementptr i8, ptr %553, i64 72
  %555 = load ptr, ptr %554, align 8
  %556 = call { i64, i64 } %555(ptr nocapture nofree nonnull readonly align 8 %552) #2
  %557 = extractvalue { i64, i64 } %556, 1
  %558 = urem i64 %551, %557
  %559 = icmp eq i64 %558, 0
  %560 = sub i64 %557, %558
  %561 = select i1 %559, i64 0, i64 %560
  %562 = getelementptr i8, ptr %522, i64 %551
  %563 = getelementptr i8, ptr %562, i64 %561
  %564 = getelementptr i8, ptr %553, i64 64
  %565 = load ptr, ptr %564, align 8
  call void %565({ ptr, i160 } %103, ptr nocapture nofree nonnull readonly align 8 %552, ptr nocapture nofree writeonly %563) #8
  %566 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %567 = getelementptr inbounds i8, ptr %522, i64 16
  store i32 %105, ptr %567, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %568 = ptrtoint ptr %522 to i64
  %569 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %570 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %571 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %572

572:                                              ; preds = %651, %487
  %573 = phi i64 [ undef, %487 ], [ %653, %651 ]
  %574 = phi i64 [ %568, %487 ], [ %652, %651 ]
  %575 = phi i32 [ 0, %487 ], [ %588, %651 ]
  %576 = phi i1 [ true, %487 ], [ %669, %651 ]
  %577 = phi ptr [ @Entry, %487 ], [ %654, %651 ]
  %578 = phi ptr [ %522, %487 ], [ %655, %651 ]
  %579 = phi ptr [ undef, %487 ], [ %656, %651 ]
  %580 = phi i32 [ 10, %487 ], [ %668, %651 ]
  %581 = sext i32 %580 to i64
  %582 = getelementptr ptr, ptr %577, i64 %581
  %583 = getelementptr i8, ptr %582, i64 64
  %584 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %577, 0
  %585 = insertvalue { ptr, ptr, ptr, i32 } %584, ptr %578, 1
  %586 = insertvalue { ptr, ptr, ptr, i32 } %585, ptr %579, 2
  %587 = insertvalue { ptr, ptr, ptr, i32 } %586, i32 %580, 3
  %588 = add nuw nsw i32 %575, 1
  %589 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %577)
  %590 = load ptr, ptr %583, align 8
  %591 = call align 4 ptr %590({ ptr, ptr, ptr, i32 } %587, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %592 = call i32 %591({ ptr, ptr, ptr, i32 } %587, { ptr, ptr, ptr, i32 } %587, ptr nonnull align 8 %2) #28
  br i1 %576, label %593, label %613

593:                                              ; preds = %572
  %594 = load i32, ptr %64, align 8
  %595 = add i32 %594, -1
  %596 = and i32 %595, %592
  %597 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %598 = load ptr, ptr %66, align 8
  %599 = sext i32 %596 to i64
  %600 = shl nsw i64 %599, 5
  %601 = getelementptr i8, ptr %598, i64 %600
  %602 = load ptr, ptr %601, align 8
  %603 = getelementptr i8, ptr %601, i64 8
  %604 = load i160, ptr %603, align 4
  store ptr %577, ptr %601, align 8
  store i64 %574, ptr %603, align 4
  %605 = getelementptr i8, ptr %601, i64 16
  store i64 %573, ptr %605, align 4
  %606 = getelementptr i8, ptr %601, i64 24
  store i32 %580, ptr %606, align 4
  %607 = icmp ne ptr %602, @nil_typ
  %608 = icmp ne ptr %602, null
  %609 = and i1 %607, %608
  %610 = trunc i160 %604 to i64
  %611 = lshr i160 %604, 64
  %612 = trunc i160 %611 to i64
  br i1 %609, label %651, label %673

613:                                              ; preds = %572
  %614 = add i32 %592, 2127912214
  %615 = shl i32 %592, 12
  %616 = add i32 %614, %615
  %617 = ashr i32 %616, 19
  %618 = xor i32 %616, %617
  %619 = xor i32 %618, -949894596
  %620 = add i32 %619, 374761393
  %621 = shl i32 %619, 5
  %622 = add i32 %620, %621
  %623 = add i32 %622, -744332180
  %624 = shl i32 %622, 9
  %625 = xor i32 %623, %624
  %626 = add i32 %625, -42973499
  %627 = shl i32 %625, 3
  %628 = add i32 %626, %627
  %629 = ashr i32 %628, 16
  %630 = xor i32 %628, %629
  %631 = xor i32 %630, -1252372727
  %632 = load i32, ptr %64, align 8
  %633 = add i32 %632, -1
  %634 = and i32 %633, %631
  %635 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %636 = load ptr, ptr %68, align 8
  %637 = sext i32 %634 to i64
  %638 = shl nsw i64 %637, 5
  %639 = getelementptr i8, ptr %636, i64 %638
  %640 = load ptr, ptr %639, align 8
  %641 = getelementptr i8, ptr %639, i64 8
  %642 = load i160, ptr %641, align 4
  store ptr %577, ptr %639, align 8
  store i64 %574, ptr %641, align 4
  %643 = getelementptr i8, ptr %639, i64 16
  store i64 %573, ptr %643, align 4
  %644 = getelementptr i8, ptr %639, i64 24
  store i32 %580, ptr %644, align 4
  %645 = icmp ne ptr %640, @nil_typ
  %646 = icmp ne ptr %640, null
  %647 = and i1 %645, %646
  %648 = trunc i160 %642 to i64
  %649 = lshr i160 %642, 64
  %650 = trunc i160 %649 to i64
  br i1 %647, label %651, label %673

651:                                              ; preds = %613, %593
  %652 = phi i64 [ %610, %593 ], [ %648, %613 ]
  %653 = phi i64 [ %612, %593 ], [ %650, %613 ]
  %654 = phi ptr [ %602, %593 ], [ %640, %613 ]
  %655 = inttoptr i64 %652 to ptr
  %656 = inttoptr i64 %653 to ptr
  %657 = getelementptr i8, ptr %654, i64 8
  %658 = getelementptr i8, ptr %654, i64 16
  %659 = getelementptr i8, ptr %654, i64 40
  %660 = load i64, ptr %657, align 4
  %661 = load i64, ptr %658, align 4
  %662 = load ptr, ptr %659, align 8
  %663 = mul i64 %660, 4015701072841558310
  %664 = lshr i64 %663, 32
  %665 = xor i64 %664, %663
  %666 = and i64 %665, %661
  %667 = getelementptr i32, ptr %662, i64 %666
  %668 = load i32, ptr %667, align 4
  %669 = xor i1 %576, true
  %670 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %671 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %672 = icmp eq i32 %588, 100
  br i1 %672, label %677, label %572

673:                                              ; preds = %613, %593
  %674 = load i32, ptr %84, align 4
  %675 = add i32 %674, 1
  %676 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %675, ptr %84, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1373

677:                                              ; preds = %651
  %678 = getelementptr i8, ptr %654, i64 8
  %679 = getelementptr i8, ptr %654, i64 16
  %680 = getelementptr i8, ptr %654, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %681 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %682 = load ptr, ptr %66, align 8
  %683 = load ptr, ptr %68, align 8
  %684 = load i32, ptr %64, align 8
  %685 = shl i32 %684, 1
  %686 = call i32 @llvm.smax.i32(i32 %685, i32 noundef 16) #43
  store i32 %686, ptr %64, align 8
  %687 = zext nneg i32 %686 to i64
  %688 = shl nuw nsw i64 %687, 5
  %689 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %688, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %689, ptr %66, align 8
  %690 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %688, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %690, ptr %68, align 8
  store i32 0, ptr %84, align 4
  %691 = icmp sgt i32 %684, 0
  br i1 %691, label %692, label %966

692:                                              ; preds = %677
  %693 = zext nneg i32 %684 to i64
  br label %694

694:                                              ; preds = %827, %692
  %695 = phi i64 [ 0, %692 ], [ %828, %827 ]
  %696 = shl nuw nsw i64 %695, 5
  %697 = getelementptr i8, ptr %682, i64 %696
  %698 = load ptr, ptr %697, align 8
  %699 = icmp ne ptr %698, @nil_typ
  %700 = icmp ne ptr %698, null
  %701 = and i1 %699, %700
  br i1 %701, label %702, label %827

702:                                              ; preds = %694
  %703 = getelementptr i8, ptr %697, i64 8
  %704 = load i64, ptr %703, align 4
  %705 = getelementptr i8, ptr %697, i64 16
  %706 = load i64, ptr %705, align 4
  %707 = getelementptr i8, ptr %698, i64 8
  %708 = getelementptr i8, ptr %698, i64 16
  %709 = getelementptr i8, ptr %698, i64 40
  %710 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %711 = load i64, ptr %707, align 4, !noalias !25
  %712 = load i64, ptr %708, align 4, !noalias !25
  %713 = load ptr, ptr %709, align 8, !noalias !25
  %714 = mul i64 %711, 4015701072841558310
  %715 = lshr i64 %714, 32
  %716 = xor i64 %715, %714
  %717 = and i64 %716, %712
  %718 = getelementptr i32, ptr %713, i64 %717
  %719 = load i32, ptr %718, align 4, !noalias !71
  %720 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %721 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %722 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %723

723:                                              ; preds = %802, %702
  %724 = phi i64 [ %706, %702 ], [ %804, %802 ]
  %725 = phi i64 [ %704, %702 ], [ %803, %802 ]
  %726 = phi i32 [ 0, %702 ], [ %739, %802 ]
  %727 = phi i1 [ true, %702 ], [ %818, %802 ]
  %728 = phi ptr [ %698, %702 ], [ %805, %802 ]
  %729 = phi i32 [ %719, %702 ], [ %817, %802 ]
  %730 = inttoptr i64 %724 to ptr
  %731 = inttoptr i64 %725 to ptr
  %732 = sext i32 %729 to i64
  %733 = getelementptr ptr, ptr %728, i64 %732
  %734 = getelementptr i8, ptr %733, i64 64
  %735 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %728, 0
  %736 = insertvalue { ptr, ptr, ptr, i32 } %735, ptr %731, 1
  %737 = insertvalue { ptr, ptr, ptr, i32 } %736, ptr %730, 2
  %738 = insertvalue { ptr, ptr, ptr, i32 } %737, i32 %729, 3
  %739 = add nuw nsw i32 %726, 1
  %740 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %728)
  %741 = load ptr, ptr %734, align 8
  %742 = call align 4 ptr %741({ ptr, ptr, ptr, i32 } %738, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %743 = call i32 %742({ ptr, ptr, ptr, i32 } %738, { ptr, ptr, ptr, i32 } %738, ptr nonnull align 8 %2) #28
  br i1 %727, label %744, label %764

744:                                              ; preds = %723
  %745 = load i32, ptr %64, align 8
  %746 = add i32 %745, -1
  %747 = and i32 %746, %743
  %748 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %749 = load ptr, ptr %66, align 8
  %750 = sext i32 %747 to i64
  %751 = shl nsw i64 %750, 5
  %752 = getelementptr i8, ptr %749, i64 %751
  %753 = load ptr, ptr %752, align 8
  %754 = getelementptr i8, ptr %752, i64 8
  %755 = load i160, ptr %754, align 4
  store ptr %728, ptr %752, align 8
  store i64 %725, ptr %754, align 4
  %756 = getelementptr i8, ptr %752, i64 16
  store i64 %724, ptr %756, align 4
  %757 = getelementptr i8, ptr %752, i64 24
  store i32 %729, ptr %757, align 4
  %758 = icmp ne ptr %753, @nil_typ
  %759 = icmp ne ptr %753, null
  %760 = and i1 %758, %759
  %761 = trunc i160 %755 to i64
  %762 = lshr i160 %755, 64
  %763 = trunc i160 %762 to i64
  br i1 %760, label %802, label %822

764:                                              ; preds = %723
  %765 = add i32 %743, 2127912214
  %766 = shl i32 %743, 12
  %767 = add i32 %765, %766
  %768 = ashr i32 %767, 19
  %769 = xor i32 %767, %768
  %770 = xor i32 %769, -949894596
  %771 = add i32 %770, 374761393
  %772 = shl i32 %770, 5
  %773 = add i32 %771, %772
  %774 = add i32 %773, -744332180
  %775 = shl i32 %773, 9
  %776 = xor i32 %774, %775
  %777 = add i32 %776, -42973499
  %778 = shl i32 %776, 3
  %779 = add i32 %777, %778
  %780 = ashr i32 %779, 16
  %781 = xor i32 %779, %780
  %782 = xor i32 %781, -1252372727
  %783 = load i32, ptr %64, align 8
  %784 = add i32 %783, -1
  %785 = and i32 %784, %782
  %786 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %787 = load ptr, ptr %68, align 8
  %788 = sext i32 %785 to i64
  %789 = shl nsw i64 %788, 5
  %790 = getelementptr i8, ptr %787, i64 %789
  %791 = load ptr, ptr %790, align 8
  %792 = getelementptr i8, ptr %790, i64 8
  %793 = load i160, ptr %792, align 4
  store ptr %728, ptr %790, align 8
  store i64 %725, ptr %792, align 4
  %794 = getelementptr i8, ptr %790, i64 16
  store i64 %724, ptr %794, align 4
  %795 = getelementptr i8, ptr %790, i64 24
  store i32 %729, ptr %795, align 4
  %796 = icmp ne ptr %791, @nil_typ
  %797 = icmp ne ptr %791, null
  %798 = and i1 %796, %797
  %799 = trunc i160 %793 to i64
  %800 = lshr i160 %793, 64
  %801 = trunc i160 %800 to i64
  br i1 %798, label %802, label %822

802:                                              ; preds = %764, %744
  %803 = phi i64 [ %761, %744 ], [ %799, %764 ]
  %804 = phi i64 [ %763, %744 ], [ %801, %764 ]
  %805 = phi ptr [ %753, %744 ], [ %791, %764 ]
  %806 = getelementptr i8, ptr %805, i64 8
  %807 = getelementptr i8, ptr %805, i64 16
  %808 = getelementptr i8, ptr %805, i64 40
  %809 = load i64, ptr %806, align 4
  %810 = load i64, ptr %807, align 4
  %811 = load ptr, ptr %808, align 8
  %812 = mul i64 %809, 4015701072841558310
  %813 = lshr i64 %812, 32
  %814 = xor i64 %813, %812
  %815 = and i64 %814, %810
  %816 = getelementptr i32, ptr %811, i64 %815
  %817 = load i32, ptr %816, align 4
  %818 = xor i1 %727, true
  %819 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %820 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %821 = icmp eq i32 %739, 100
  br i1 %821, label %826, label %723

822:                                              ; preds = %764, %744
  %823 = load i32, ptr %84, align 4
  %824 = add i32 %823, 1
  %825 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %824, ptr %84, align 4
  br label %826

826:                                              ; preds = %822, %802
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %827

827:                                              ; preds = %826, %694
  %828 = add nuw nsw i64 %695, 1
  %829 = icmp eq i64 %828, %693
  br i1 %829, label %830, label %694

830:                                              ; preds = %963, %827
  %831 = phi i64 [ %964, %963 ], [ 0, %827 ]
  %832 = shl nuw nsw i64 %831, 5
  %833 = getelementptr i8, ptr %683, i64 %832
  %834 = load ptr, ptr %833, align 8
  %835 = icmp ne ptr %834, @nil_typ
  %836 = icmp ne ptr %834, null
  %837 = and i1 %835, %836
  br i1 %837, label %838, label %963

838:                                              ; preds = %830
  %839 = getelementptr i8, ptr %833, i64 8
  %840 = load i64, ptr %839, align 4
  %841 = getelementptr i8, ptr %833, i64 16
  %842 = load i64, ptr %841, align 4
  %843 = getelementptr i8, ptr %834, i64 8
  %844 = getelementptr i8, ptr %834, i64 16
  %845 = getelementptr i8, ptr %834, i64 40
  %846 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %847 = load i64, ptr %843, align 4, !noalias !25
  %848 = load i64, ptr %844, align 4, !noalias !25
  %849 = load ptr, ptr %845, align 8, !noalias !25
  %850 = mul i64 %847, 4015701072841558310
  %851 = lshr i64 %850, 32
  %852 = xor i64 %851, %850
  %853 = and i64 %852, %848
  %854 = getelementptr i32, ptr %849, i64 %853
  %855 = load i32, ptr %854, align 4, !noalias !74
  %856 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %857 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %858 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %859

859:                                              ; preds = %938, %838
  %860 = phi i64 [ %842, %838 ], [ %940, %938 ]
  %861 = phi i64 [ %840, %838 ], [ %939, %938 ]
  %862 = phi i32 [ 0, %838 ], [ %875, %938 ]
  %863 = phi i1 [ true, %838 ], [ %954, %938 ]
  %864 = phi ptr [ %834, %838 ], [ %941, %938 ]
  %865 = phi i32 [ %855, %838 ], [ %953, %938 ]
  %866 = inttoptr i64 %860 to ptr
  %867 = inttoptr i64 %861 to ptr
  %868 = sext i32 %865 to i64
  %869 = getelementptr ptr, ptr %864, i64 %868
  %870 = getelementptr i8, ptr %869, i64 64
  %871 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %864, 0
  %872 = insertvalue { ptr, ptr, ptr, i32 } %871, ptr %867, 1
  %873 = insertvalue { ptr, ptr, ptr, i32 } %872, ptr %866, 2
  %874 = insertvalue { ptr, ptr, ptr, i32 } %873, i32 %865, 3
  %875 = add nuw nsw i32 %862, 1
  %876 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %864)
  %877 = load ptr, ptr %870, align 8
  %878 = call align 4 ptr %877({ ptr, ptr, ptr, i32 } %874, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %879 = call i32 %878({ ptr, ptr, ptr, i32 } %874, { ptr, ptr, ptr, i32 } %874, ptr nonnull align 8 %2) #28
  br i1 %863, label %880, label %900

880:                                              ; preds = %859
  %881 = load i32, ptr %64, align 8
  %882 = add i32 %881, -1
  %883 = and i32 %882, %879
  %884 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %885 = load ptr, ptr %66, align 8
  %886 = sext i32 %883 to i64
  %887 = shl nsw i64 %886, 5
  %888 = getelementptr i8, ptr %885, i64 %887
  %889 = load ptr, ptr %888, align 8
  %890 = getelementptr i8, ptr %888, i64 8
  %891 = load i160, ptr %890, align 4
  store ptr %864, ptr %888, align 8
  store i64 %861, ptr %890, align 4
  %892 = getelementptr i8, ptr %888, i64 16
  store i64 %860, ptr %892, align 4
  %893 = getelementptr i8, ptr %888, i64 24
  store i32 %865, ptr %893, align 4
  %894 = icmp ne ptr %889, @nil_typ
  %895 = icmp ne ptr %889, null
  %896 = and i1 %894, %895
  %897 = trunc i160 %891 to i64
  %898 = lshr i160 %891, 64
  %899 = trunc i160 %898 to i64
  br i1 %896, label %938, label %958

900:                                              ; preds = %859
  %901 = add i32 %879, 2127912214
  %902 = shl i32 %879, 12
  %903 = add i32 %901, %902
  %904 = ashr i32 %903, 19
  %905 = xor i32 %903, %904
  %906 = xor i32 %905, -949894596
  %907 = add i32 %906, 374761393
  %908 = shl i32 %906, 5
  %909 = add i32 %907, %908
  %910 = add i32 %909, -744332180
  %911 = shl i32 %909, 9
  %912 = xor i32 %910, %911
  %913 = add i32 %912, -42973499
  %914 = shl i32 %912, 3
  %915 = add i32 %913, %914
  %916 = ashr i32 %915, 16
  %917 = xor i32 %915, %916
  %918 = xor i32 %917, -1252372727
  %919 = load i32, ptr %64, align 8
  %920 = add i32 %919, -1
  %921 = and i32 %920, %918
  %922 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %923 = load ptr, ptr %68, align 8
  %924 = sext i32 %921 to i64
  %925 = shl nsw i64 %924, 5
  %926 = getelementptr i8, ptr %923, i64 %925
  %927 = load ptr, ptr %926, align 8
  %928 = getelementptr i8, ptr %926, i64 8
  %929 = load i160, ptr %928, align 4
  store ptr %864, ptr %926, align 8
  store i64 %861, ptr %928, align 4
  %930 = getelementptr i8, ptr %926, i64 16
  store i64 %860, ptr %930, align 4
  %931 = getelementptr i8, ptr %926, i64 24
  store i32 %865, ptr %931, align 4
  %932 = icmp ne ptr %927, @nil_typ
  %933 = icmp ne ptr %927, null
  %934 = and i1 %932, %933
  %935 = trunc i160 %929 to i64
  %936 = lshr i160 %929, 64
  %937 = trunc i160 %936 to i64
  br i1 %934, label %938, label %958

938:                                              ; preds = %900, %880
  %939 = phi i64 [ %897, %880 ], [ %935, %900 ]
  %940 = phi i64 [ %899, %880 ], [ %937, %900 ]
  %941 = phi ptr [ %889, %880 ], [ %927, %900 ]
  %942 = getelementptr i8, ptr %941, i64 8
  %943 = getelementptr i8, ptr %941, i64 16
  %944 = getelementptr i8, ptr %941, i64 40
  %945 = load i64, ptr %942, align 4
  %946 = load i64, ptr %943, align 4
  %947 = load ptr, ptr %944, align 8
  %948 = mul i64 %945, 4015701072841558310
  %949 = lshr i64 %948, 32
  %950 = xor i64 %949, %948
  %951 = and i64 %950, %946
  %952 = getelementptr i32, ptr %947, i64 %951
  %953 = load i32, ptr %952, align 4
  %954 = xor i1 %863, true
  %955 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %956 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %957 = icmp eq i32 %875, 100
  br i1 %957, label %962, label %859

958:                                              ; preds = %900, %880
  %959 = load i32, ptr %84, align 4
  %960 = add i32 %959, 1
  %961 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %960, ptr %84, align 4
  br label %962

962:                                              ; preds = %958, %938
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %963

963:                                              ; preds = %962, %830
  %964 = add nuw nsw i64 %831, 1
  %965 = icmp eq i64 %964, %693
  br i1 %965, label %966, label %830

966:                                              ; preds = %963, %677
  %967 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %968 = load i64, ptr %678, align 4, !noalias !25
  %969 = load i64, ptr %679, align 4, !noalias !25
  %970 = load ptr, ptr %680, align 8, !noalias !25
  %971 = mul i64 %968, 4015701072841558310
  %972 = lshr i64 %971, 32
  %973 = xor i64 %972, %971
  %974 = and i64 %973, %969
  %975 = getelementptr i32, ptr %970, i64 %974
  %976 = load i32, ptr %975, align 4, !noalias !77
  %977 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %978 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %979 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %980

980:                                              ; preds = %1059, %966
  %981 = phi i64 [ %653, %966 ], [ %1061, %1059 ]
  %982 = phi i64 [ %652, %966 ], [ %1060, %1059 ]
  %983 = phi i32 [ 0, %966 ], [ %996, %1059 ]
  %984 = phi i1 [ true, %966 ], [ %1075, %1059 ]
  %985 = phi ptr [ %654, %966 ], [ %1062, %1059 ]
  %986 = phi i32 [ %976, %966 ], [ %1074, %1059 ]
  %987 = inttoptr i64 %981 to ptr
  %988 = inttoptr i64 %982 to ptr
  %989 = sext i32 %986 to i64
  %990 = getelementptr ptr, ptr %985, i64 %989
  %991 = getelementptr i8, ptr %990, i64 64
  %992 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %985, 0
  %993 = insertvalue { ptr, ptr, ptr, i32 } %992, ptr %988, 1
  %994 = insertvalue { ptr, ptr, ptr, i32 } %993, ptr %987, 2
  %995 = insertvalue { ptr, ptr, ptr, i32 } %994, i32 %986, 3
  %996 = add nuw nsw i32 %983, 1
  %997 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %985)
  %998 = load ptr, ptr %991, align 8
  %999 = call align 4 ptr %998({ ptr, ptr, ptr, i32 } %995, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1000 = call i32 %999({ ptr, ptr, ptr, i32 } %995, { ptr, ptr, ptr, i32 } %995, ptr nonnull align 8 %2) #28
  br i1 %984, label %1001, label %1021

1001:                                             ; preds = %980
  %1002 = load i32, ptr %64, align 8
  %1003 = add i32 %1002, -1
  %1004 = and i32 %1003, %1000
  %1005 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1006 = load ptr, ptr %66, align 8
  %1007 = sext i32 %1004 to i64
  %1008 = shl nsw i64 %1007, 5
  %1009 = getelementptr i8, ptr %1006, i64 %1008
  %1010 = load ptr, ptr %1009, align 8
  %1011 = getelementptr i8, ptr %1009, i64 8
  %1012 = load i160, ptr %1011, align 4
  store ptr %985, ptr %1009, align 8
  store i64 %982, ptr %1011, align 4
  %1013 = getelementptr i8, ptr %1009, i64 16
  store i64 %981, ptr %1013, align 4
  %1014 = getelementptr i8, ptr %1009, i64 24
  store i32 %986, ptr %1014, align 4
  %1015 = icmp ne ptr %1010, @nil_typ
  %1016 = icmp ne ptr %1010, null
  %1017 = and i1 %1015, %1016
  %1018 = trunc i160 %1012 to i64
  %1019 = lshr i160 %1012, 64
  %1020 = trunc i160 %1019 to i64
  br i1 %1017, label %1059, label %1079

1021:                                             ; preds = %980
  %1022 = add i32 %1000, 2127912214
  %1023 = shl i32 %1000, 12
  %1024 = add i32 %1022, %1023
  %1025 = ashr i32 %1024, 19
  %1026 = xor i32 %1024, %1025
  %1027 = xor i32 %1026, -949894596
  %1028 = add i32 %1027, 374761393
  %1029 = shl i32 %1027, 5
  %1030 = add i32 %1028, %1029
  %1031 = add i32 %1030, -744332180
  %1032 = shl i32 %1030, 9
  %1033 = xor i32 %1031, %1032
  %1034 = add i32 %1033, -42973499
  %1035 = shl i32 %1033, 3
  %1036 = add i32 %1034, %1035
  %1037 = ashr i32 %1036, 16
  %1038 = xor i32 %1036, %1037
  %1039 = xor i32 %1038, -1252372727
  %1040 = load i32, ptr %64, align 8
  %1041 = add i32 %1040, -1
  %1042 = and i32 %1041, %1039
  %1043 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1044 = load ptr, ptr %68, align 8
  %1045 = sext i32 %1042 to i64
  %1046 = shl nsw i64 %1045, 5
  %1047 = getelementptr i8, ptr %1044, i64 %1046
  %1048 = load ptr, ptr %1047, align 8
  %1049 = getelementptr i8, ptr %1047, i64 8
  %1050 = load i160, ptr %1049, align 4
  store ptr %985, ptr %1047, align 8
  store i64 %982, ptr %1049, align 4
  %1051 = getelementptr i8, ptr %1047, i64 16
  store i64 %981, ptr %1051, align 4
  %1052 = getelementptr i8, ptr %1047, i64 24
  store i32 %986, ptr %1052, align 4
  %1053 = icmp ne ptr %1048, @nil_typ
  %1054 = icmp ne ptr %1048, null
  %1055 = and i1 %1053, %1054
  %1056 = trunc i160 %1050 to i64
  %1057 = lshr i160 %1050, 64
  %1058 = trunc i160 %1057 to i64
  br i1 %1055, label %1059, label %1079

1059:                                             ; preds = %1021, %1001
  %1060 = phi i64 [ %1018, %1001 ], [ %1056, %1021 ]
  %1061 = phi i64 [ %1020, %1001 ], [ %1058, %1021 ]
  %1062 = phi ptr [ %1010, %1001 ], [ %1048, %1021 ]
  %1063 = getelementptr i8, ptr %1062, i64 8
  %1064 = getelementptr i8, ptr %1062, i64 16
  %1065 = getelementptr i8, ptr %1062, i64 40
  %1066 = load i64, ptr %1063, align 4
  %1067 = load i64, ptr %1064, align 4
  %1068 = load ptr, ptr %1065, align 8
  %1069 = mul i64 %1066, 4015701072841558310
  %1070 = lshr i64 %1069, 32
  %1071 = xor i64 %1070, %1069
  %1072 = and i64 %1071, %1067
  %1073 = getelementptr i32, ptr %1068, i64 %1072
  %1074 = load i32, ptr %1073, align 4
  %1075 = xor i1 %984, true
  %1076 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1077 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1078 = icmp eq i32 %996, 100
  br i1 %1078, label %1083, label %980

1079:                                             ; preds = %1021, %1001
  %1080 = load i32, ptr %84, align 4
  %1081 = add i32 %1080, 1
  %1082 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1081, ptr %84, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1373

1083:                                             ; preds = %1059
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1084 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1085 = load ptr, ptr %66, align 8
  %1086 = load ptr, ptr %68, align 8
  %1087 = load i32, ptr %64, align 8
  %1088 = shl i32 %1087, 1
  %1089 = call i32 @llvm.smax.i32(i32 %1088, i32 noundef 16) #43
  store i32 %1089, ptr %64, align 8
  %1090 = zext nneg i32 %1089 to i64
  %1091 = shl nuw nsw i64 %1090, 5
  %1092 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1091, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1092, ptr %66, align 8
  %1093 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1091, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1093, ptr %68, align 8
  store i32 0, ptr %84, align 4
  %1094 = icmp sgt i32 %1087, 0
  br i1 %1094, label %1097, label %1095

1095:                                             ; preds = %1083
  %1096 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1373

1097:                                             ; preds = %1083
  %1098 = zext nneg i32 %1087 to i64
  br label %1099

1099:                                             ; preds = %1232, %1097
  %1100 = phi i64 [ 0, %1097 ], [ %1233, %1232 ]
  %1101 = shl nuw nsw i64 %1100, 5
  %1102 = getelementptr i8, ptr %1085, i64 %1101
  %1103 = load ptr, ptr %1102, align 8
  %1104 = icmp ne ptr %1103, @nil_typ
  %1105 = icmp ne ptr %1103, null
  %1106 = and i1 %1104, %1105
  br i1 %1106, label %1107, label %1232

1107:                                             ; preds = %1099
  %1108 = getelementptr i8, ptr %1102, i64 8
  %1109 = load i64, ptr %1108, align 4
  %1110 = getelementptr i8, ptr %1102, i64 16
  %1111 = load i64, ptr %1110, align 4
  %1112 = getelementptr i8, ptr %1103, i64 8
  %1113 = getelementptr i8, ptr %1103, i64 16
  %1114 = getelementptr i8, ptr %1103, i64 40
  %1115 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1116 = load i64, ptr %1112, align 4, !noalias !25
  %1117 = load i64, ptr %1113, align 4, !noalias !25
  %1118 = load ptr, ptr %1114, align 8, !noalias !25
  %1119 = mul i64 %1116, 4015701072841558310
  %1120 = lshr i64 %1119, 32
  %1121 = xor i64 %1120, %1119
  %1122 = and i64 %1121, %1117
  %1123 = getelementptr i32, ptr %1118, i64 %1122
  %1124 = load i32, ptr %1123, align 4, !noalias !80
  %1125 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1126 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1127 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1128

1128:                                             ; preds = %1207, %1107
  %1129 = phi i64 [ %1111, %1107 ], [ %1209, %1207 ]
  %1130 = phi i64 [ %1109, %1107 ], [ %1208, %1207 ]
  %1131 = phi i32 [ 0, %1107 ], [ %1144, %1207 ]
  %1132 = phi i1 [ true, %1107 ], [ %1223, %1207 ]
  %1133 = phi ptr [ %1103, %1107 ], [ %1210, %1207 ]
  %1134 = phi i32 [ %1124, %1107 ], [ %1222, %1207 ]
  %1135 = inttoptr i64 %1129 to ptr
  %1136 = inttoptr i64 %1130 to ptr
  %1137 = sext i32 %1134 to i64
  %1138 = getelementptr ptr, ptr %1133, i64 %1137
  %1139 = getelementptr i8, ptr %1138, i64 64
  %1140 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1133, 0
  %1141 = insertvalue { ptr, ptr, ptr, i32 } %1140, ptr %1136, 1
  %1142 = insertvalue { ptr, ptr, ptr, i32 } %1141, ptr %1135, 2
  %1143 = insertvalue { ptr, ptr, ptr, i32 } %1142, i32 %1134, 3
  %1144 = add nuw nsw i32 %1131, 1
  %1145 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1133)
  %1146 = load ptr, ptr %1139, align 8
  %1147 = call align 4 ptr %1146({ ptr, ptr, ptr, i32 } %1143, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1148 = call i32 %1147({ ptr, ptr, ptr, i32 } %1143, { ptr, ptr, ptr, i32 } %1143, ptr nonnull align 8 %2) #28
  br i1 %1132, label %1149, label %1169

1149:                                             ; preds = %1128
  %1150 = load i32, ptr %64, align 8
  %1151 = add i32 %1150, -1
  %1152 = and i32 %1151, %1148
  %1153 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1154 = load ptr, ptr %66, align 8
  %1155 = sext i32 %1152 to i64
  %1156 = shl nsw i64 %1155, 5
  %1157 = getelementptr i8, ptr %1154, i64 %1156
  %1158 = load ptr, ptr %1157, align 8
  %1159 = getelementptr i8, ptr %1157, i64 8
  %1160 = load i160, ptr %1159, align 4
  store ptr %1133, ptr %1157, align 8
  store i64 %1130, ptr %1159, align 4
  %1161 = getelementptr i8, ptr %1157, i64 16
  store i64 %1129, ptr %1161, align 4
  %1162 = getelementptr i8, ptr %1157, i64 24
  store i32 %1134, ptr %1162, align 4
  %1163 = icmp ne ptr %1158, @nil_typ
  %1164 = icmp ne ptr %1158, null
  %1165 = and i1 %1163, %1164
  %1166 = trunc i160 %1160 to i64
  %1167 = lshr i160 %1160, 64
  %1168 = trunc i160 %1167 to i64
  br i1 %1165, label %1207, label %1227

1169:                                             ; preds = %1128
  %1170 = add i32 %1148, 2127912214
  %1171 = shl i32 %1148, 12
  %1172 = add i32 %1170, %1171
  %1173 = ashr i32 %1172, 19
  %1174 = xor i32 %1172, %1173
  %1175 = xor i32 %1174, -949894596
  %1176 = add i32 %1175, 374761393
  %1177 = shl i32 %1175, 5
  %1178 = add i32 %1176, %1177
  %1179 = add i32 %1178, -744332180
  %1180 = shl i32 %1178, 9
  %1181 = xor i32 %1179, %1180
  %1182 = add i32 %1181, -42973499
  %1183 = shl i32 %1181, 3
  %1184 = add i32 %1182, %1183
  %1185 = ashr i32 %1184, 16
  %1186 = xor i32 %1184, %1185
  %1187 = xor i32 %1186, -1252372727
  %1188 = load i32, ptr %64, align 8
  %1189 = add i32 %1188, -1
  %1190 = and i32 %1189, %1187
  %1191 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1192 = load ptr, ptr %68, align 8
  %1193 = sext i32 %1190 to i64
  %1194 = shl nsw i64 %1193, 5
  %1195 = getelementptr i8, ptr %1192, i64 %1194
  %1196 = load ptr, ptr %1195, align 8
  %1197 = getelementptr i8, ptr %1195, i64 8
  %1198 = load i160, ptr %1197, align 4
  store ptr %1133, ptr %1195, align 8
  store i64 %1130, ptr %1197, align 4
  %1199 = getelementptr i8, ptr %1195, i64 16
  store i64 %1129, ptr %1199, align 4
  %1200 = getelementptr i8, ptr %1195, i64 24
  store i32 %1134, ptr %1200, align 4
  %1201 = icmp ne ptr %1196, @nil_typ
  %1202 = icmp ne ptr %1196, null
  %1203 = and i1 %1201, %1202
  %1204 = trunc i160 %1198 to i64
  %1205 = lshr i160 %1198, 64
  %1206 = trunc i160 %1205 to i64
  br i1 %1203, label %1207, label %1227

1207:                                             ; preds = %1169, %1149
  %1208 = phi i64 [ %1166, %1149 ], [ %1204, %1169 ]
  %1209 = phi i64 [ %1168, %1149 ], [ %1206, %1169 ]
  %1210 = phi ptr [ %1158, %1149 ], [ %1196, %1169 ]
  %1211 = getelementptr i8, ptr %1210, i64 8
  %1212 = getelementptr i8, ptr %1210, i64 16
  %1213 = getelementptr i8, ptr %1210, i64 40
  %1214 = load i64, ptr %1211, align 4
  %1215 = load i64, ptr %1212, align 4
  %1216 = load ptr, ptr %1213, align 8
  %1217 = mul i64 %1214, 4015701072841558310
  %1218 = lshr i64 %1217, 32
  %1219 = xor i64 %1218, %1217
  %1220 = and i64 %1219, %1215
  %1221 = getelementptr i32, ptr %1216, i64 %1220
  %1222 = load i32, ptr %1221, align 4
  %1223 = xor i1 %1132, true
  %1224 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1225 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1226 = icmp eq i32 %1144, 100
  br i1 %1226, label %1231, label %1128

1227:                                             ; preds = %1169, %1149
  %1228 = load i32, ptr %84, align 4
  %1229 = add i32 %1228, 1
  %1230 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1229, ptr %84, align 4
  br label %1231

1231:                                             ; preds = %1227, %1207
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1232

1232:                                             ; preds = %1231, %1099
  %1233 = add nuw nsw i64 %1100, 1
  %1234 = icmp eq i64 %1233, %1098
  br i1 %1234, label %1235, label %1099

1235:                                             ; preds = %1232
  %1236 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1237

1237:                                             ; preds = %1370, %1235
  %1238 = phi i64 [ 0, %1235 ], [ %1371, %1370 ]
  %1239 = shl nuw nsw i64 %1238, 5
  %1240 = getelementptr i8, ptr %1086, i64 %1239
  %1241 = load ptr, ptr %1240, align 8
  %1242 = icmp ne ptr %1241, @nil_typ
  %1243 = icmp ne ptr %1241, null
  %1244 = and i1 %1242, %1243
  br i1 %1244, label %1245, label %1370

1245:                                             ; preds = %1237
  %1246 = getelementptr i8, ptr %1240, i64 8
  %1247 = load i64, ptr %1246, align 4
  %1248 = getelementptr i8, ptr %1240, i64 16
  %1249 = load i64, ptr %1248, align 4
  %1250 = getelementptr i8, ptr %1241, i64 8
  %1251 = getelementptr i8, ptr %1241, i64 16
  %1252 = getelementptr i8, ptr %1241, i64 40
  %1253 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1254 = load i64, ptr %1250, align 4, !noalias !25
  %1255 = load i64, ptr %1251, align 4, !noalias !25
  %1256 = load ptr, ptr %1252, align 8, !noalias !25
  %1257 = mul i64 %1254, 4015701072841558310
  %1258 = lshr i64 %1257, 32
  %1259 = xor i64 %1258, %1257
  %1260 = and i64 %1259, %1255
  %1261 = getelementptr i32, ptr %1256, i64 %1260
  %1262 = load i32, ptr %1261, align 4, !noalias !83
  %1263 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1264 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1265 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1266

1266:                                             ; preds = %1345, %1245
  %1267 = phi i64 [ %1249, %1245 ], [ %1347, %1345 ]
  %1268 = phi i64 [ %1247, %1245 ], [ %1346, %1345 ]
  %1269 = phi i32 [ 0, %1245 ], [ %1282, %1345 ]
  %1270 = phi i1 [ true, %1245 ], [ %1361, %1345 ]
  %1271 = phi ptr [ %1241, %1245 ], [ %1348, %1345 ]
  %1272 = phi i32 [ %1262, %1245 ], [ %1360, %1345 ]
  %1273 = inttoptr i64 %1267 to ptr
  %1274 = inttoptr i64 %1268 to ptr
  %1275 = sext i32 %1272 to i64
  %1276 = getelementptr ptr, ptr %1271, i64 %1275
  %1277 = getelementptr i8, ptr %1276, i64 64
  %1278 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1271, 0
  %1279 = insertvalue { ptr, ptr, ptr, i32 } %1278, ptr %1274, 1
  %1280 = insertvalue { ptr, ptr, ptr, i32 } %1279, ptr %1273, 2
  %1281 = insertvalue { ptr, ptr, ptr, i32 } %1280, i32 %1272, 3
  %1282 = add nuw nsw i32 %1269, 1
  %1283 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1271)
  %1284 = load ptr, ptr %1277, align 8
  %1285 = call align 4 ptr %1284({ ptr, ptr, ptr, i32 } %1281, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1286 = call i32 %1285({ ptr, ptr, ptr, i32 } %1281, { ptr, ptr, ptr, i32 } %1281, ptr nonnull align 8 %2) #28
  br i1 %1270, label %1287, label %1307

1287:                                             ; preds = %1266
  %1288 = load i32, ptr %64, align 8
  %1289 = add i32 %1288, -1
  %1290 = and i32 %1289, %1286
  %1291 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1292 = load ptr, ptr %66, align 8
  %1293 = sext i32 %1290 to i64
  %1294 = shl nsw i64 %1293, 5
  %1295 = getelementptr i8, ptr %1292, i64 %1294
  %1296 = load ptr, ptr %1295, align 8
  %1297 = getelementptr i8, ptr %1295, i64 8
  %1298 = load i160, ptr %1297, align 4
  store ptr %1271, ptr %1295, align 8
  store i64 %1268, ptr %1297, align 4
  %1299 = getelementptr i8, ptr %1295, i64 16
  store i64 %1267, ptr %1299, align 4
  %1300 = getelementptr i8, ptr %1295, i64 24
  store i32 %1272, ptr %1300, align 4
  %1301 = icmp ne ptr %1296, @nil_typ
  %1302 = icmp ne ptr %1296, null
  %1303 = and i1 %1301, %1302
  %1304 = trunc i160 %1298 to i64
  %1305 = lshr i160 %1298, 64
  %1306 = trunc i160 %1305 to i64
  br i1 %1303, label %1345, label %1365

1307:                                             ; preds = %1266
  %1308 = add i32 %1286, 2127912214
  %1309 = shl i32 %1286, 12
  %1310 = add i32 %1308, %1309
  %1311 = ashr i32 %1310, 19
  %1312 = xor i32 %1310, %1311
  %1313 = xor i32 %1312, -949894596
  %1314 = add i32 %1313, 374761393
  %1315 = shl i32 %1313, 5
  %1316 = add i32 %1314, %1315
  %1317 = add i32 %1316, -744332180
  %1318 = shl i32 %1316, 9
  %1319 = xor i32 %1317, %1318
  %1320 = add i32 %1319, -42973499
  %1321 = shl i32 %1319, 3
  %1322 = add i32 %1320, %1321
  %1323 = ashr i32 %1322, 16
  %1324 = xor i32 %1322, %1323
  %1325 = xor i32 %1324, -1252372727
  %1326 = load i32, ptr %64, align 8
  %1327 = add i32 %1326, -1
  %1328 = and i32 %1327, %1325
  %1329 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1330 = load ptr, ptr %68, align 8
  %1331 = sext i32 %1328 to i64
  %1332 = shl nsw i64 %1331, 5
  %1333 = getelementptr i8, ptr %1330, i64 %1332
  %1334 = load ptr, ptr %1333, align 8
  %1335 = getelementptr i8, ptr %1333, i64 8
  %1336 = load i160, ptr %1335, align 4
  store ptr %1271, ptr %1333, align 8
  store i64 %1268, ptr %1335, align 4
  %1337 = getelementptr i8, ptr %1333, i64 16
  store i64 %1267, ptr %1337, align 4
  %1338 = getelementptr i8, ptr %1333, i64 24
  store i32 %1272, ptr %1338, align 4
  %1339 = icmp ne ptr %1334, @nil_typ
  %1340 = icmp ne ptr %1334, null
  %1341 = and i1 %1339, %1340
  %1342 = trunc i160 %1336 to i64
  %1343 = lshr i160 %1336, 64
  %1344 = trunc i160 %1343 to i64
  br i1 %1341, label %1345, label %1365

1345:                                             ; preds = %1307, %1287
  %1346 = phi i64 [ %1304, %1287 ], [ %1342, %1307 ]
  %1347 = phi i64 [ %1306, %1287 ], [ %1344, %1307 ]
  %1348 = phi ptr [ %1296, %1287 ], [ %1334, %1307 ]
  %1349 = getelementptr i8, ptr %1348, i64 8
  %1350 = getelementptr i8, ptr %1348, i64 16
  %1351 = getelementptr i8, ptr %1348, i64 40
  %1352 = load i64, ptr %1349, align 4
  %1353 = load i64, ptr %1350, align 4
  %1354 = load ptr, ptr %1351, align 8
  %1355 = mul i64 %1352, 4015701072841558310
  %1356 = lshr i64 %1355, 32
  %1357 = xor i64 %1356, %1355
  %1358 = and i64 %1357, %1353
  %1359 = getelementptr i32, ptr %1354, i64 %1358
  %1360 = load i32, ptr %1359, align 4
  %1361 = xor i1 %1270, true
  %1362 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1363 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1364 = icmp eq i32 %1282, 100
  br i1 %1364, label %1369, label %1266

1365:                                             ; preds = %1307, %1287
  %1366 = load i32, ptr %84, align 4
  %1367 = add i32 %1366, 1
  %1368 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1367, ptr %84, align 4
  br label %1369

1369:                                             ; preds = %1365, %1345
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1370

1370:                                             ; preds = %1369, %1237
  %1371 = add nuw nsw i64 %1238, 1
  %1372 = icmp eq i64 %1371, %1098
  br i1 %1372, label %1373, label %1237

1373:                                             ; preds = %1370, %1095, %1079, %673, %314, %159
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1374 = add nuw nsw i64 %90, 1
  %1375 = icmp eq i64 %1374, %81
  br i1 %1375, label %1376, label %88

1376:                                             ; preds = %1373
  %1377 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1378 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1379 = load i32, ptr %84, align 4
  %1380 = call i64 @clock()
  %1381 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %1382 = getelementptr inbounds i8, ptr %26, i64 44
  %1383 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %26, 1
  %1384 = insertvalue { ptr, ptr, ptr, i32 } %1383, ptr undef, 2
  %1385 = insertvalue { ptr, ptr, ptr, i32 } %1384, i32 10, 3
  br label %1386

1386:                                             ; preds = %2666, %1376
  %1387 = phi i64 [ 0, %1376 ], [ %2667, %2666 ]
  %1388 = shl i64 %1387, 2
  %1389 = getelementptr i8, ptr %48, i64 %1388
  %1390 = load i32, ptr %1389, align 4
  %1391 = zext i32 %1390 to i160
  %1392 = add i32 %1390, 1
  %1393 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %1391, 1
  %1394 = zext i32 %1392 to i160
  %1395 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %1394, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1396 = load ptr, ptr %38, align 8
  %1397 = call i32 %1396({ ptr, i160 } %1393) #28
  %1398 = load i32, ptr %40, align 8
  %1399 = add i32 %1398, -1
  %1400 = and i32 %1399, %1397
  %1401 = load ptr, ptr %42, align 8
  %1402 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1403 = sext i32 %1400 to i64
  %1404 = shl nsw i64 %1403, 5
  %1405 = getelementptr i8, ptr %1401, i64 %1404
  %1406 = load ptr, ptr %1405, align 8
  %1407 = getelementptr i8, ptr %1405, i64 8
  %1408 = icmp ne ptr %1406, @nil_typ
  %1409 = icmp ne ptr %1406, null
  %1410 = and i1 %1408, %1409
  br i1 %1410, label %1411, label %1534

1411:                                             ; preds = %1386
  %1412 = load i64, ptr %1407, align 4
  %1413 = getelementptr i8, ptr %1405, i64 16
  %1414 = load i64, ptr %1413, align 4
  %1415 = inttoptr i64 %1412 to ptr
  %1416 = inttoptr i64 %1414 to ptr
  %1417 = getelementptr i8, ptr %1406, i64 8
  %1418 = getelementptr i8, ptr %1406, i64 16
  %1419 = getelementptr i8, ptr %1406, i64 40
  %1420 = load i64, ptr %1417, align 4, !noalias !86
  %1421 = load i64, ptr %1418, align 4, !noalias !86
  %1422 = load ptr, ptr %1419, align 8, !noalias !86
  %1423 = mul i64 %1420, 4015701072841558310
  %1424 = lshr i64 %1423, 32
  %1425 = xor i64 %1424, %1423
  %1426 = and i64 %1425, %1421
  %1427 = getelementptr i32, ptr %1422, i64 %1426
  %1428 = load i32, ptr %1427, align 4, !noalias !86
  %1429 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1406, 0
  %1430 = insertvalue { ptr, ptr, ptr, i32 } %1429, ptr %1415, 1
  %1431 = insertvalue { ptr, ptr, ptr, i32 } %1430, ptr %1416, 2
  %1432 = insertvalue { ptr, ptr, ptr, i32 } %1431, i32 %1428, 3
  %1433 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1434 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1406) #43
  %1435 = sext i32 %1428 to i64
  %1436 = getelementptr ptr, ptr %1406, i64 %1435
  %1437 = getelementptr i8, ptr %1436, i64 64
  %1438 = load ptr, ptr %1437, align 8
  %1439 = call align 4 ptr %1438({ ptr, ptr, ptr, i32 } %1432, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1440 = call i32 %1439({ ptr, ptr, ptr, i32 } %1432, { ptr, ptr, ptr, i32 } %1432, ptr nonnull align 8 %2) #28
  %1441 = icmp eq i32 %1440, %1397
  br i1 %1441, label %1442, label %1534

1442:                                             ; preds = %1411
  %1443 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1444 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1406)
  %1445 = getelementptr i8, ptr %1436, i64 48
  %1446 = load ptr, ptr %1445, align 8
  %1447 = call align 4 ptr %1446({ ptr, ptr, ptr, i32 } %1432, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1448 = call { ptr, i160 } %1447({ ptr, ptr, ptr, i32 } %1432, { ptr, ptr, ptr, i32 } %1432, ptr nonnull align 8 %2) #28
  %1449 = load ptr, ptr %39, align 8
  %1450 = call i1 %1449({ ptr, i160 } %1448, { ptr, i160 } %1393) #28
  br i1 %1450, label %1451, label %1534

1451:                                             ; preds = %1442
  %1452 = load ptr, ptr %26, align 8
  %1453 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1454 = load ptr, ptr %27, align 8
  %1455 = load ptr, ptr %1452, align 8, !alias.scope !89
  %1456 = getelementptr i8, ptr %1455, i64 72
  %1457 = load ptr, ptr %1456, align 8, !alias.scope !89
  %1458 = call { i64, i64 } %1457(ptr nocapture nofree nonnull readonly align 8 %1452) #2, !alias.scope !89
  %1459 = extractvalue { i64, i64 } %1458, 0
  %1460 = extractvalue { i64, i64 } %1458, 1
  %1461 = urem i64 20, %1460
  %1462 = icmp eq i64 %1461, 0
  %1463 = sub i64 %1460, %1461
  %1464 = select i1 %1462, i64 0, i64 %1463
  %1465 = add i64 %1459, 20
  %1466 = add i64 %1465, %1464
  %1467 = load ptr, ptr %1454, align 8, !alias.scope !89
  %1468 = getelementptr i8, ptr %1467, i64 72
  %1469 = load ptr, ptr %1468, align 8, !alias.scope !89
  %1470 = call { i64, i64 } %1469(ptr nocapture nofree nonnull readonly align 8 %1454) #2, !alias.scope !89
  %1471 = extractvalue { i64, i64 } %1470, 0
  %1472 = extractvalue { i64, i64 } %1470, 1
  %1473 = call i64 @llvm.umax.i64(i64 %1460, i64 %1472) #44
  %1474 = call i64 @llvm.umax.i64(i64 %1473, i64 noundef 8) #44, !range !18
  %1475 = urem i64 %1466, %1472
  %1476 = icmp eq i64 %1475, 0
  %1477 = sub i64 %1472, %1475
  %1478 = select i1 %1476, i64 0, i64 %1477
  %1479 = add i64 %1471, %1466
  %1480 = add i64 %1479, %1478
  %1481 = urem i64 %1480, %1474
  %1482 = icmp eq i64 %1481, 0
  %1483 = sub i64 %1474, %1481
  %1484 = select i1 %1482, i64 0, i64 %1483
  %1485 = add i64 %1484, %1480
  %1486 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1485, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1452, ptr %1486, align 8
  %1487 = getelementptr inbounds i8, ptr %1486, i64 8
  store ptr %1454, ptr %1487, align 8
  %1488 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1486)
  %1489 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1490 = load ptr, ptr %1452, align 8
  %1491 = getelementptr i8, ptr %1490, i64 72
  %1492 = load ptr, ptr %1491, align 8
  %1493 = call { i64, i64 } %1492(ptr nocapture nofree nonnull readonly align 8 %1452) #2
  %1494 = extractvalue { i64, i64 } %1493, 1
  %1495 = urem i64 20, %1494
  %1496 = icmp eq i64 %1495, 0
  %1497 = sub i64 %1494, %1495
  %1498 = add i64 %1497, 20
  %1499 = select i1 %1496, i64 20, i64 %1498
  %1500 = getelementptr i8, ptr %1486, i64 %1499
  %1501 = getelementptr i8, ptr %1490, i64 64
  %1502 = load ptr, ptr %1501, align 8
  call void %1502({ ptr, i160 } %1393, ptr nocapture nofree nonnull readonly align 8 %1452, ptr nocapture nofree writeonly %1500) #8
  %1503 = load ptr, ptr %1486, align 8
  %1504 = load ptr, ptr %1503, align 8
  %1505 = getelementptr i8, ptr %1504, i64 72
  %1506 = load ptr, ptr %1505, align 8
  %1507 = call { i64, i64 } %1506(ptr nocapture nofree nonnull readonly align 8 %1503) #2
  %1508 = extractvalue { i64, i64 } %1507, 0
  %1509 = extractvalue { i64, i64 } %1507, 1
  %1510 = urem i64 20, %1509
  %1511 = icmp eq i64 %1510, 0
  %1512 = sub i64 %1509, %1510
  %1513 = select i1 %1511, i64 0, i64 %1512
  %1514 = add i64 %1508, 20
  %1515 = add i64 %1514, %1513
  %1516 = load ptr, ptr %1487, align 8
  %1517 = load ptr, ptr %1516, align 8
  %1518 = getelementptr i8, ptr %1517, i64 72
  %1519 = load ptr, ptr %1518, align 8
  %1520 = call { i64, i64 } %1519(ptr nocapture nofree nonnull readonly align 8 %1516) #2
  %1521 = extractvalue { i64, i64 } %1520, 1
  %1522 = urem i64 %1515, %1521
  %1523 = icmp eq i64 %1522, 0
  %1524 = sub i64 %1521, %1522
  %1525 = select i1 %1523, i64 0, i64 %1524
  %1526 = getelementptr i8, ptr %1486, i64 %1515
  %1527 = getelementptr i8, ptr %1526, i64 %1525
  %1528 = getelementptr i8, ptr %1517, i64 64
  %1529 = load ptr, ptr %1528, align 8
  call void %1529({ ptr, i160 } %1395, ptr nocapture nofree nonnull readonly align 8 %1516, ptr nocapture nofree writeonly %1527) #8
  %1530 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1531 = getelementptr inbounds i8, ptr %1486, i64 16
  store i32 %1397, ptr %1531, align 8
  store ptr @Entry, ptr %1405, align 8
  %1532 = ptrtoint ptr %1486 to i64
  store i64 %1532, ptr %1407, align 4
  %1533 = getelementptr i8, ptr %1405, i64 24
  store i32 10, ptr %1533, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2666

1534:                                             ; preds = %1442, %1411, %1386
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1535 = add i32 %1397, 2127912214
  %1536 = shl i32 %1397, 12
  %1537 = add i32 %1535, %1536
  %1538 = ashr i32 %1537, 19
  %1539 = xor i32 %1537, %1538
  %1540 = xor i32 %1539, -949894596
  %1541 = add i32 %1540, 374761393
  %1542 = shl i32 %1540, 5
  %1543 = add i32 %1541, %1542
  %1544 = add i32 %1543, -744332180
  %1545 = shl i32 %1543, 9
  %1546 = xor i32 %1544, %1545
  %1547 = add i32 %1546, -42973499
  %1548 = shl i32 %1546, 3
  %1549 = add i32 %1547, %1548
  %1550 = ashr i32 %1549, 16
  %1551 = xor i32 %1549, %1550
  %1552 = xor i32 %1551, -1252372727
  %1553 = load i32, ptr %40, align 8
  %1554 = add i32 %1553, -1
  %1555 = and i32 %1554, %1552
  %1556 = load ptr, ptr %44, align 8
  %1557 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1558 = sext i32 %1555 to i64
  %1559 = shl nsw i64 %1558, 5
  %1560 = getelementptr i8, ptr %1556, i64 %1559
  %1561 = load ptr, ptr %1560, align 8
  %1562 = getelementptr i8, ptr %1560, i64 8
  %1563 = icmp ne ptr %1561, @nil_typ
  %1564 = icmp ne ptr %1561, null
  %1565 = and i1 %1563, %1564
  br i1 %1565, label %1566, label %1690

1566:                                             ; preds = %1534
  %1567 = load i64, ptr %1562, align 4
  %1568 = getelementptr i8, ptr %1560, i64 16
  %1569 = load i64, ptr %1568, align 4
  %1570 = inttoptr i64 %1567 to ptr
  %1571 = inttoptr i64 %1569 to ptr
  %1572 = getelementptr i8, ptr %1561, i64 8
  %1573 = getelementptr i8, ptr %1561, i64 16
  %1574 = getelementptr i8, ptr %1561, i64 40
  %1575 = load i64, ptr %1572, align 4, !noalias !92
  %1576 = load i64, ptr %1573, align 4, !noalias !92
  %1577 = load ptr, ptr %1574, align 8, !noalias !92
  %1578 = mul i64 %1575, 4015701072841558310
  %1579 = lshr i64 %1578, 32
  %1580 = xor i64 %1579, %1578
  %1581 = and i64 %1580, %1576
  %1582 = getelementptr i32, ptr %1577, i64 %1581
  %1583 = load i32, ptr %1582, align 4, !noalias !92
  %1584 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1561, 0
  %1585 = insertvalue { ptr, ptr, ptr, i32 } %1584, ptr %1570, 1
  %1586 = insertvalue { ptr, ptr, ptr, i32 } %1585, ptr %1571, 2
  %1587 = insertvalue { ptr, ptr, ptr, i32 } %1586, i32 %1583, 3
  %1588 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1589 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1561) #43
  %1590 = sext i32 %1583 to i64
  %1591 = getelementptr ptr, ptr %1561, i64 %1590
  %1592 = getelementptr i8, ptr %1591, i64 64
  %1593 = load ptr, ptr %1592, align 8
  %1594 = call align 4 ptr %1593({ ptr, ptr, ptr, i32 } %1587, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1595 = call i32 %1594({ ptr, ptr, ptr, i32 } %1587, { ptr, ptr, ptr, i32 } %1587, ptr nonnull align 8 %2) #28
  %1596 = icmp eq i32 %1595, %1397
  br i1 %1596, label %1597, label %1690

1597:                                             ; preds = %1566
  %1598 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1599 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1561)
  %1600 = getelementptr i8, ptr %1591, i64 48
  %1601 = load ptr, ptr %1600, align 8
  %1602 = call align 4 ptr %1601({ ptr, ptr, ptr, i32 } %1587, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1603 = call { ptr, i160 } %1602({ ptr, ptr, ptr, i32 } %1587, { ptr, ptr, ptr, i32 } %1587, ptr nonnull align 8 %2) #28
  %1604 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1605 = load ptr, ptr %39, align 8
  %1606 = call i1 %1605({ ptr, i160 } %1603, { ptr, i160 } %1393) #28
  br i1 %1606, label %1607, label %1690

1607:                                             ; preds = %1597
  %1608 = load ptr, ptr %26, align 8
  %1609 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1610 = load ptr, ptr %27, align 8
  %1611 = load ptr, ptr %1608, align 8, !alias.scope !95
  %1612 = getelementptr i8, ptr %1611, i64 72
  %1613 = load ptr, ptr %1612, align 8, !alias.scope !95
  %1614 = call { i64, i64 } %1613(ptr nocapture nofree nonnull readonly align 8 %1608) #2, !alias.scope !95
  %1615 = extractvalue { i64, i64 } %1614, 0
  %1616 = extractvalue { i64, i64 } %1614, 1
  %1617 = urem i64 20, %1616
  %1618 = icmp eq i64 %1617, 0
  %1619 = sub i64 %1616, %1617
  %1620 = select i1 %1618, i64 0, i64 %1619
  %1621 = add i64 %1615, 20
  %1622 = add i64 %1621, %1620
  %1623 = load ptr, ptr %1610, align 8, !alias.scope !95
  %1624 = getelementptr i8, ptr %1623, i64 72
  %1625 = load ptr, ptr %1624, align 8, !alias.scope !95
  %1626 = call { i64, i64 } %1625(ptr nocapture nofree nonnull readonly align 8 %1610) #2, !alias.scope !95
  %1627 = extractvalue { i64, i64 } %1626, 0
  %1628 = extractvalue { i64, i64 } %1626, 1
  %1629 = call i64 @llvm.umax.i64(i64 %1616, i64 %1628) #44
  %1630 = call i64 @llvm.umax.i64(i64 %1629, i64 noundef 8) #44, !range !18
  %1631 = urem i64 %1622, %1628
  %1632 = icmp eq i64 %1631, 0
  %1633 = sub i64 %1628, %1631
  %1634 = select i1 %1632, i64 0, i64 %1633
  %1635 = add i64 %1627, %1622
  %1636 = add i64 %1635, %1634
  %1637 = urem i64 %1636, %1630
  %1638 = icmp eq i64 %1637, 0
  %1639 = sub i64 %1630, %1637
  %1640 = select i1 %1638, i64 0, i64 %1639
  %1641 = add i64 %1640, %1636
  %1642 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1641, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1608, ptr %1642, align 8
  %1643 = getelementptr inbounds i8, ptr %1642, i64 8
  store ptr %1610, ptr %1643, align 8
  %1644 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1642)
  %1645 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1646 = load ptr, ptr %1608, align 8
  %1647 = getelementptr i8, ptr %1646, i64 72
  %1648 = load ptr, ptr %1647, align 8
  %1649 = call { i64, i64 } %1648(ptr nocapture nofree nonnull readonly align 8 %1608) #2
  %1650 = extractvalue { i64, i64 } %1649, 1
  %1651 = urem i64 20, %1650
  %1652 = icmp eq i64 %1651, 0
  %1653 = sub i64 %1650, %1651
  %1654 = add i64 %1653, 20
  %1655 = select i1 %1652, i64 20, i64 %1654
  %1656 = getelementptr i8, ptr %1642, i64 %1655
  %1657 = getelementptr i8, ptr %1646, i64 64
  %1658 = load ptr, ptr %1657, align 8
  call void %1658({ ptr, i160 } %1393, ptr nocapture nofree nonnull readonly align 8 %1608, ptr nocapture nofree writeonly %1656) #8
  %1659 = load ptr, ptr %1642, align 8
  %1660 = load ptr, ptr %1659, align 8
  %1661 = getelementptr i8, ptr %1660, i64 72
  %1662 = load ptr, ptr %1661, align 8
  %1663 = call { i64, i64 } %1662(ptr nocapture nofree nonnull readonly align 8 %1659) #2
  %1664 = extractvalue { i64, i64 } %1663, 0
  %1665 = extractvalue { i64, i64 } %1663, 1
  %1666 = urem i64 20, %1665
  %1667 = icmp eq i64 %1666, 0
  %1668 = sub i64 %1665, %1666
  %1669 = select i1 %1667, i64 0, i64 %1668
  %1670 = add i64 %1664, 20
  %1671 = add i64 %1670, %1669
  %1672 = load ptr, ptr %1643, align 8
  %1673 = load ptr, ptr %1672, align 8
  %1674 = getelementptr i8, ptr %1673, i64 72
  %1675 = load ptr, ptr %1674, align 8
  %1676 = call { i64, i64 } %1675(ptr nocapture nofree nonnull readonly align 8 %1672) #2
  %1677 = extractvalue { i64, i64 } %1676, 1
  %1678 = urem i64 %1671, %1677
  %1679 = icmp eq i64 %1678, 0
  %1680 = sub i64 %1677, %1678
  %1681 = select i1 %1679, i64 0, i64 %1680
  %1682 = getelementptr i8, ptr %1642, i64 %1671
  %1683 = getelementptr i8, ptr %1682, i64 %1681
  %1684 = getelementptr i8, ptr %1673, i64 64
  %1685 = load ptr, ptr %1684, align 8
  call void %1685({ ptr, i160 } %1395, ptr nocapture nofree nonnull readonly align 8 %1672, ptr nocapture nofree writeonly %1683) #8
  %1686 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1687 = getelementptr inbounds i8, ptr %1642, i64 16
  store i32 %1397, ptr %1687, align 8
  store ptr @Entry, ptr %1560, align 8
  %1688 = ptrtoint ptr %1642 to i64
  store i64 %1688, ptr %1562, align 4
  %1689 = getelementptr i8, ptr %1560, i64 24
  store i32 10, ptr %1689, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2666

1690:                                             ; preds = %1597, %1566, %1534
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1691 = load i32, ptr %1382, align 4
  %1692 = load i32, ptr %40, align 8
  %1693 = icmp slt i32 %1691, %1692
  br i1 %1693, label %1780, label %1694

1694:                                             ; preds = %1690
  %1695 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1696 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1697 = load ptr, ptr %42, align 8
  %1698 = load ptr, ptr %44, align 8
  %1699 = shl i32 %1692, 1
  %1700 = call i32 @llvm.smax.i32(i32 %1699, i32 noundef 16) #43
  store i32 %1700, ptr %40, align 8
  %1701 = zext nneg i32 %1700 to i64
  %1702 = shl nuw nsw i64 %1701, 5
  %1703 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1702, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1703, ptr %42, align 8
  %1704 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1702, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1704, ptr %44, align 8
  store i32 0, ptr %1382, align 4
  %1705 = icmp sgt i32 %1692, 0
  br i1 %1705, label %1706, label %1780

1706:                                             ; preds = %1694
  %1707 = zext nneg i32 %1692 to i64
  br label %1708

1708:                                             ; preds = %1741, %1706
  %1709 = phi i64 [ 0, %1706 ], [ %1742, %1741 ]
  %1710 = shl nuw nsw i64 %1709, 5
  %1711 = getelementptr i8, ptr %1697, i64 %1710
  %1712 = load ptr, ptr %1711, align 8
  %1713 = icmp ne ptr %1712, @nil_typ
  %1714 = icmp ne ptr %1712, null
  %1715 = and i1 %1713, %1714
  br i1 %1715, label %1716, label %1741

1716:                                             ; preds = %1708
  %1717 = getelementptr i8, ptr %1711, i64 8
  %1718 = load i64, ptr %1717, align 4
  %1719 = getelementptr i8, ptr %1711, i64 16
  %1720 = load i64, ptr %1719, align 4
  %1721 = inttoptr i64 %1718 to ptr
  %1722 = inttoptr i64 %1720 to ptr
  %1723 = getelementptr i8, ptr %1712, i64 8
  %1724 = getelementptr i8, ptr %1712, i64 16
  %1725 = getelementptr i8, ptr %1712, i64 40
  %1726 = load i64, ptr %1723, align 4, !noalias !25
  %1727 = load i64, ptr %1724, align 4, !noalias !25
  %1728 = load ptr, ptr %1725, align 8, !noalias !25
  %1729 = mul i64 %1726, 4015701072841558310
  %1730 = lshr i64 %1729, 32
  %1731 = xor i64 %1730, %1729
  %1732 = and i64 %1731, %1727
  %1733 = getelementptr i32, ptr %1728, i64 %1732
  %1734 = load i32, ptr %1733, align 4, !noalias !98
  %1735 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1712, 0
  %1736 = insertvalue { ptr, ptr, ptr, i32 } %1735, ptr %1721, 1
  %1737 = insertvalue { ptr, ptr, ptr, i32 } %1736, ptr %1722, 2
  %1738 = insertvalue { ptr, ptr, ptr, i32 } %1737, i32 %1734, 3
  %1739 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1740 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1385, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %1738) #28
  br label %1741

1741:                                             ; preds = %1716, %1708
  %1742 = add nuw nsw i64 %1709, 1
  %1743 = icmp eq i64 %1742, %1707
  br i1 %1743, label %1744, label %1708

1744:                                             ; preds = %1777, %1741
  %1745 = phi i64 [ %1778, %1777 ], [ 0, %1741 ]
  %1746 = shl nuw nsw i64 %1745, 5
  %1747 = getelementptr i8, ptr %1698, i64 %1746
  %1748 = load ptr, ptr %1747, align 8
  %1749 = icmp ne ptr %1748, @nil_typ
  %1750 = icmp ne ptr %1748, null
  %1751 = and i1 %1749, %1750
  br i1 %1751, label %1752, label %1777

1752:                                             ; preds = %1744
  %1753 = getelementptr i8, ptr %1747, i64 8
  %1754 = load i64, ptr %1753, align 4
  %1755 = getelementptr i8, ptr %1747, i64 16
  %1756 = load i64, ptr %1755, align 4
  %1757 = inttoptr i64 %1754 to ptr
  %1758 = inttoptr i64 %1756 to ptr
  %1759 = getelementptr i8, ptr %1748, i64 8
  %1760 = getelementptr i8, ptr %1748, i64 16
  %1761 = getelementptr i8, ptr %1748, i64 40
  %1762 = load i64, ptr %1759, align 4, !noalias !25
  %1763 = load i64, ptr %1760, align 4, !noalias !25
  %1764 = load ptr, ptr %1761, align 8, !noalias !25
  %1765 = mul i64 %1762, 4015701072841558310
  %1766 = lshr i64 %1765, 32
  %1767 = xor i64 %1766, %1765
  %1768 = and i64 %1767, %1763
  %1769 = getelementptr i32, ptr %1764, i64 %1768
  %1770 = load i32, ptr %1769, align 4, !noalias !101
  %1771 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1748, 0
  %1772 = insertvalue { ptr, ptr, ptr, i32 } %1771, ptr %1757, 1
  %1773 = insertvalue { ptr, ptr, ptr, i32 } %1772, ptr %1758, 2
  %1774 = insertvalue { ptr, ptr, ptr, i32 } %1773, i32 %1770, 3
  %1775 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1776 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1385, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %1774) #28
  br label %1777

1777:                                             ; preds = %1752, %1744
  %1778 = add nuw nsw i64 %1745, 1
  %1779 = icmp eq i64 %1778, %1707
  br i1 %1779, label %1780, label %1744

1780:                                             ; preds = %1777, %1694, %1690
  %1781 = load ptr, ptr %26, align 8
  %1782 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1783 = load ptr, ptr %27, align 8
  %1784 = load ptr, ptr %1781, align 8
  %1785 = getelementptr i8, ptr %1784, i64 72
  %1786 = load ptr, ptr %1785, align 8
  %1787 = call { i64, i64 } %1786(ptr nocapture nofree nonnull readonly align 8 %1781) #2
  %1788 = extractvalue { i64, i64 } %1787, 0
  %1789 = extractvalue { i64, i64 } %1787, 1
  %1790 = urem i64 20, %1789
  %1791 = icmp eq i64 %1790, 0
  %1792 = sub i64 %1789, %1790
  %1793 = select i1 %1791, i64 0, i64 %1792
  %1794 = add i64 %1788, 20
  %1795 = add i64 %1794, %1793
  %1796 = load ptr, ptr %1783, align 8
  %1797 = getelementptr i8, ptr %1796, i64 72
  %1798 = load ptr, ptr %1797, align 8
  %1799 = call { i64, i64 } %1798(ptr nocapture nofree nonnull readonly align 8 %1783) #2
  %1800 = extractvalue { i64, i64 } %1799, 0
  %1801 = extractvalue { i64, i64 } %1799, 1
  %1802 = call i64 @llvm.umax.i64(i64 %1789, i64 %1801) #44
  %1803 = call i64 @llvm.umax.i64(i64 %1802, i64 noundef 8) #44, !range !18
  %1804 = urem i64 %1795, %1801
  %1805 = icmp eq i64 %1804, 0
  %1806 = sub i64 %1801, %1804
  %1807 = select i1 %1805, i64 0, i64 %1806
  %1808 = add i64 %1800, %1795
  %1809 = add i64 %1808, %1807
  %1810 = urem i64 %1809, %1803
  %1811 = icmp eq i64 %1810, 0
  %1812 = sub i64 %1803, %1810
  %1813 = select i1 %1811, i64 0, i64 %1812
  %1814 = add i64 %1813, %1809
  %1815 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1814, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1781, ptr %1815, align 8
  %1816 = getelementptr inbounds i8, ptr %1815, i64 8
  store ptr %1783, ptr %1816, align 8
  %1817 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1815)
  %1818 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1819 = load ptr, ptr %1781, align 8
  %1820 = getelementptr i8, ptr %1819, i64 72
  %1821 = load ptr, ptr %1820, align 8
  %1822 = call { i64, i64 } %1821(ptr nocapture nofree nonnull readonly align 8 %1781) #2
  %1823 = extractvalue { i64, i64 } %1822, 1
  %1824 = urem i64 20, %1823
  %1825 = icmp eq i64 %1824, 0
  %1826 = sub i64 %1823, %1824
  %1827 = add i64 %1826, 20
  %1828 = select i1 %1825, i64 20, i64 %1827
  %1829 = getelementptr i8, ptr %1815, i64 %1828
  %1830 = getelementptr i8, ptr %1819, i64 64
  %1831 = load ptr, ptr %1830, align 8
  call void %1831({ ptr, i160 } %1393, ptr nocapture nofree nonnull readonly align 8 %1781, ptr nocapture nofree writeonly %1829) #8
  %1832 = load ptr, ptr %1815, align 8
  %1833 = load ptr, ptr %1832, align 8
  %1834 = getelementptr i8, ptr %1833, i64 72
  %1835 = load ptr, ptr %1834, align 8
  %1836 = call { i64, i64 } %1835(ptr nocapture nofree nonnull readonly align 8 %1832) #2
  %1837 = extractvalue { i64, i64 } %1836, 0
  %1838 = extractvalue { i64, i64 } %1836, 1
  %1839 = urem i64 20, %1838
  %1840 = icmp eq i64 %1839, 0
  %1841 = sub i64 %1838, %1839
  %1842 = select i1 %1840, i64 0, i64 %1841
  %1843 = add i64 %1837, 20
  %1844 = add i64 %1843, %1842
  %1845 = load ptr, ptr %1816, align 8
  %1846 = load ptr, ptr %1845, align 8
  %1847 = getelementptr i8, ptr %1846, i64 72
  %1848 = load ptr, ptr %1847, align 8
  %1849 = call { i64, i64 } %1848(ptr nocapture nofree nonnull readonly align 8 %1845) #2
  %1850 = extractvalue { i64, i64 } %1849, 1
  %1851 = urem i64 %1844, %1850
  %1852 = icmp eq i64 %1851, 0
  %1853 = sub i64 %1850, %1851
  %1854 = select i1 %1852, i64 0, i64 %1853
  %1855 = getelementptr i8, ptr %1815, i64 %1844
  %1856 = getelementptr i8, ptr %1855, i64 %1854
  %1857 = getelementptr i8, ptr %1846, i64 64
  %1858 = load ptr, ptr %1857, align 8
  call void %1858({ ptr, i160 } %1395, ptr nocapture nofree nonnull readonly align 8 %1845, ptr nocapture nofree writeonly %1856) #8
  %1859 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1860 = getelementptr inbounds i8, ptr %1815, i64 16
  store i32 %1397, ptr %1860, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1861 = ptrtoint ptr %1815 to i64
  %1862 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1863 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1864 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1865

1865:                                             ; preds = %1944, %1780
  %1866 = phi i64 [ undef, %1780 ], [ %1946, %1944 ]
  %1867 = phi i64 [ %1861, %1780 ], [ %1945, %1944 ]
  %1868 = phi i32 [ 0, %1780 ], [ %1881, %1944 ]
  %1869 = phi i1 [ true, %1780 ], [ %1962, %1944 ]
  %1870 = phi ptr [ @Entry, %1780 ], [ %1947, %1944 ]
  %1871 = phi ptr [ %1815, %1780 ], [ %1948, %1944 ]
  %1872 = phi ptr [ undef, %1780 ], [ %1949, %1944 ]
  %1873 = phi i32 [ 10, %1780 ], [ %1961, %1944 ]
  %1874 = sext i32 %1873 to i64
  %1875 = getelementptr ptr, ptr %1870, i64 %1874
  %1876 = getelementptr i8, ptr %1875, i64 64
  %1877 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1870, 0
  %1878 = insertvalue { ptr, ptr, ptr, i32 } %1877, ptr %1871, 1
  %1879 = insertvalue { ptr, ptr, ptr, i32 } %1878, ptr %1872, 2
  %1880 = insertvalue { ptr, ptr, ptr, i32 } %1879, i32 %1873, 3
  %1881 = add nuw nsw i32 %1868, 1
  %1882 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1870)
  %1883 = load ptr, ptr %1876, align 8
  %1884 = call align 4 ptr %1883({ ptr, ptr, ptr, i32 } %1880, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1885 = call i32 %1884({ ptr, ptr, ptr, i32 } %1880, { ptr, ptr, ptr, i32 } %1880, ptr nonnull align 8 %2) #28
  br i1 %1869, label %1886, label %1906

1886:                                             ; preds = %1865
  %1887 = load i32, ptr %40, align 8
  %1888 = add i32 %1887, -1
  %1889 = and i32 %1888, %1885
  %1890 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1891 = load ptr, ptr %42, align 8
  %1892 = sext i32 %1889 to i64
  %1893 = shl nsw i64 %1892, 5
  %1894 = getelementptr i8, ptr %1891, i64 %1893
  %1895 = load ptr, ptr %1894, align 8
  %1896 = getelementptr i8, ptr %1894, i64 8
  %1897 = load i160, ptr %1896, align 4
  store ptr %1870, ptr %1894, align 8
  store i64 %1867, ptr %1896, align 4
  %1898 = getelementptr i8, ptr %1894, i64 16
  store i64 %1866, ptr %1898, align 4
  %1899 = getelementptr i8, ptr %1894, i64 24
  store i32 %1873, ptr %1899, align 4
  %1900 = icmp ne ptr %1895, @nil_typ
  %1901 = icmp ne ptr %1895, null
  %1902 = and i1 %1900, %1901
  %1903 = trunc i160 %1897 to i64
  %1904 = lshr i160 %1897, 64
  %1905 = trunc i160 %1904 to i64
  br i1 %1902, label %1944, label %1966

1906:                                             ; preds = %1865
  %1907 = add i32 %1885, 2127912214
  %1908 = shl i32 %1885, 12
  %1909 = add i32 %1907, %1908
  %1910 = ashr i32 %1909, 19
  %1911 = xor i32 %1909, %1910
  %1912 = xor i32 %1911, -949894596
  %1913 = add i32 %1912, 374761393
  %1914 = shl i32 %1912, 5
  %1915 = add i32 %1913, %1914
  %1916 = add i32 %1915, -744332180
  %1917 = shl i32 %1915, 9
  %1918 = xor i32 %1916, %1917
  %1919 = add i32 %1918, -42973499
  %1920 = shl i32 %1918, 3
  %1921 = add i32 %1919, %1920
  %1922 = ashr i32 %1921, 16
  %1923 = xor i32 %1921, %1922
  %1924 = xor i32 %1923, -1252372727
  %1925 = load i32, ptr %40, align 8
  %1926 = add i32 %1925, -1
  %1927 = and i32 %1926, %1924
  %1928 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1929 = load ptr, ptr %44, align 8
  %1930 = sext i32 %1927 to i64
  %1931 = shl nsw i64 %1930, 5
  %1932 = getelementptr i8, ptr %1929, i64 %1931
  %1933 = load ptr, ptr %1932, align 8
  %1934 = getelementptr i8, ptr %1932, i64 8
  %1935 = load i160, ptr %1934, align 4
  store ptr %1870, ptr %1932, align 8
  store i64 %1867, ptr %1934, align 4
  %1936 = getelementptr i8, ptr %1932, i64 16
  store i64 %1866, ptr %1936, align 4
  %1937 = getelementptr i8, ptr %1932, i64 24
  store i32 %1873, ptr %1937, align 4
  %1938 = icmp ne ptr %1933, @nil_typ
  %1939 = icmp ne ptr %1933, null
  %1940 = and i1 %1938, %1939
  %1941 = trunc i160 %1935 to i64
  %1942 = lshr i160 %1935, 64
  %1943 = trunc i160 %1942 to i64
  br i1 %1940, label %1944, label %1966

1944:                                             ; preds = %1906, %1886
  %1945 = phi i64 [ %1903, %1886 ], [ %1941, %1906 ]
  %1946 = phi i64 [ %1905, %1886 ], [ %1943, %1906 ]
  %1947 = phi ptr [ %1895, %1886 ], [ %1933, %1906 ]
  %1948 = inttoptr i64 %1945 to ptr
  %1949 = inttoptr i64 %1946 to ptr
  %1950 = getelementptr i8, ptr %1947, i64 8
  %1951 = getelementptr i8, ptr %1947, i64 16
  %1952 = getelementptr i8, ptr %1947, i64 40
  %1953 = load i64, ptr %1950, align 4
  %1954 = load i64, ptr %1951, align 4
  %1955 = load ptr, ptr %1952, align 8
  %1956 = mul i64 %1953, 4015701072841558310
  %1957 = lshr i64 %1956, 32
  %1958 = xor i64 %1957, %1956
  %1959 = and i64 %1958, %1954
  %1960 = getelementptr i32, ptr %1955, i64 %1959
  %1961 = load i32, ptr %1960, align 4
  %1962 = xor i1 %1869, true
  %1963 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1964 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1965 = icmp eq i32 %1881, 100
  br i1 %1965, label %1970, label %1865

1966:                                             ; preds = %1906, %1886
  %1967 = load i32, ptr %1382, align 4
  %1968 = add i32 %1967, 1
  %1969 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1968, ptr %1382, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2666

1970:                                             ; preds = %1944
  %1971 = getelementptr i8, ptr %1947, i64 8
  %1972 = getelementptr i8, ptr %1947, i64 16
  %1973 = getelementptr i8, ptr %1947, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1974 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1975 = load ptr, ptr %42, align 8
  %1976 = load ptr, ptr %44, align 8
  %1977 = load i32, ptr %40, align 8
  %1978 = shl i32 %1977, 1
  %1979 = call i32 @llvm.smax.i32(i32 %1978, i32 noundef 16) #43
  store i32 %1979, ptr %40, align 8
  %1980 = zext nneg i32 %1979 to i64
  %1981 = shl nuw nsw i64 %1980, 5
  %1982 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1981, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1982, ptr %42, align 8
  %1983 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1981, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1983, ptr %44, align 8
  store i32 0, ptr %1382, align 4
  %1984 = icmp sgt i32 %1977, 0
  br i1 %1984, label %1985, label %2259

1985:                                             ; preds = %1970
  %1986 = zext nneg i32 %1977 to i64
  br label %1987

1987:                                             ; preds = %2120, %1985
  %1988 = phi i64 [ 0, %1985 ], [ %2121, %2120 ]
  %1989 = shl nuw nsw i64 %1988, 5
  %1990 = getelementptr i8, ptr %1975, i64 %1989
  %1991 = load ptr, ptr %1990, align 8
  %1992 = icmp ne ptr %1991, @nil_typ
  %1993 = icmp ne ptr %1991, null
  %1994 = and i1 %1992, %1993
  br i1 %1994, label %1995, label %2120

1995:                                             ; preds = %1987
  %1996 = getelementptr i8, ptr %1990, i64 8
  %1997 = load i64, ptr %1996, align 4
  %1998 = getelementptr i8, ptr %1990, i64 16
  %1999 = load i64, ptr %1998, align 4
  %2000 = getelementptr i8, ptr %1991, i64 8
  %2001 = getelementptr i8, ptr %1991, i64 16
  %2002 = getelementptr i8, ptr %1991, i64 40
  %2003 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2004 = load i64, ptr %2000, align 4, !noalias !25
  %2005 = load i64, ptr %2001, align 4, !noalias !25
  %2006 = load ptr, ptr %2002, align 8, !noalias !25
  %2007 = mul i64 %2004, 4015701072841558310
  %2008 = lshr i64 %2007, 32
  %2009 = xor i64 %2008, %2007
  %2010 = and i64 %2009, %2005
  %2011 = getelementptr i32, ptr %2006, i64 %2010
  %2012 = load i32, ptr %2011, align 4, !noalias !104
  %2013 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2014 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2015 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2016

2016:                                             ; preds = %2095, %1995
  %2017 = phi i64 [ %1999, %1995 ], [ %2097, %2095 ]
  %2018 = phi i64 [ %1997, %1995 ], [ %2096, %2095 ]
  %2019 = phi i32 [ 0, %1995 ], [ %2032, %2095 ]
  %2020 = phi i1 [ true, %1995 ], [ %2111, %2095 ]
  %2021 = phi ptr [ %1991, %1995 ], [ %2098, %2095 ]
  %2022 = phi i32 [ %2012, %1995 ], [ %2110, %2095 ]
  %2023 = inttoptr i64 %2017 to ptr
  %2024 = inttoptr i64 %2018 to ptr
  %2025 = sext i32 %2022 to i64
  %2026 = getelementptr ptr, ptr %2021, i64 %2025
  %2027 = getelementptr i8, ptr %2026, i64 64
  %2028 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2021, 0
  %2029 = insertvalue { ptr, ptr, ptr, i32 } %2028, ptr %2024, 1
  %2030 = insertvalue { ptr, ptr, ptr, i32 } %2029, ptr %2023, 2
  %2031 = insertvalue { ptr, ptr, ptr, i32 } %2030, i32 %2022, 3
  %2032 = add nuw nsw i32 %2019, 1
  %2033 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2021)
  %2034 = load ptr, ptr %2027, align 8
  %2035 = call align 4 ptr %2034({ ptr, ptr, ptr, i32 } %2031, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2036 = call i32 %2035({ ptr, ptr, ptr, i32 } %2031, { ptr, ptr, ptr, i32 } %2031, ptr nonnull align 8 %2) #28
  br i1 %2020, label %2037, label %2057

2037:                                             ; preds = %2016
  %2038 = load i32, ptr %40, align 8
  %2039 = add i32 %2038, -1
  %2040 = and i32 %2039, %2036
  %2041 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2042 = load ptr, ptr %42, align 8
  %2043 = sext i32 %2040 to i64
  %2044 = shl nsw i64 %2043, 5
  %2045 = getelementptr i8, ptr %2042, i64 %2044
  %2046 = load ptr, ptr %2045, align 8
  %2047 = getelementptr i8, ptr %2045, i64 8
  %2048 = load i160, ptr %2047, align 4
  store ptr %2021, ptr %2045, align 8
  store i64 %2018, ptr %2047, align 4
  %2049 = getelementptr i8, ptr %2045, i64 16
  store i64 %2017, ptr %2049, align 4
  %2050 = getelementptr i8, ptr %2045, i64 24
  store i32 %2022, ptr %2050, align 4
  %2051 = icmp ne ptr %2046, @nil_typ
  %2052 = icmp ne ptr %2046, null
  %2053 = and i1 %2051, %2052
  %2054 = trunc i160 %2048 to i64
  %2055 = lshr i160 %2048, 64
  %2056 = trunc i160 %2055 to i64
  br i1 %2053, label %2095, label %2115

2057:                                             ; preds = %2016
  %2058 = add i32 %2036, 2127912214
  %2059 = shl i32 %2036, 12
  %2060 = add i32 %2058, %2059
  %2061 = ashr i32 %2060, 19
  %2062 = xor i32 %2060, %2061
  %2063 = xor i32 %2062, -949894596
  %2064 = add i32 %2063, 374761393
  %2065 = shl i32 %2063, 5
  %2066 = add i32 %2064, %2065
  %2067 = add i32 %2066, -744332180
  %2068 = shl i32 %2066, 9
  %2069 = xor i32 %2067, %2068
  %2070 = add i32 %2069, -42973499
  %2071 = shl i32 %2069, 3
  %2072 = add i32 %2070, %2071
  %2073 = ashr i32 %2072, 16
  %2074 = xor i32 %2072, %2073
  %2075 = xor i32 %2074, -1252372727
  %2076 = load i32, ptr %40, align 8
  %2077 = add i32 %2076, -1
  %2078 = and i32 %2077, %2075
  %2079 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2080 = load ptr, ptr %44, align 8
  %2081 = sext i32 %2078 to i64
  %2082 = shl nsw i64 %2081, 5
  %2083 = getelementptr i8, ptr %2080, i64 %2082
  %2084 = load ptr, ptr %2083, align 8
  %2085 = getelementptr i8, ptr %2083, i64 8
  %2086 = load i160, ptr %2085, align 4
  store ptr %2021, ptr %2083, align 8
  store i64 %2018, ptr %2085, align 4
  %2087 = getelementptr i8, ptr %2083, i64 16
  store i64 %2017, ptr %2087, align 4
  %2088 = getelementptr i8, ptr %2083, i64 24
  store i32 %2022, ptr %2088, align 4
  %2089 = icmp ne ptr %2084, @nil_typ
  %2090 = icmp ne ptr %2084, null
  %2091 = and i1 %2089, %2090
  %2092 = trunc i160 %2086 to i64
  %2093 = lshr i160 %2086, 64
  %2094 = trunc i160 %2093 to i64
  br i1 %2091, label %2095, label %2115

2095:                                             ; preds = %2057, %2037
  %2096 = phi i64 [ %2054, %2037 ], [ %2092, %2057 ]
  %2097 = phi i64 [ %2056, %2037 ], [ %2094, %2057 ]
  %2098 = phi ptr [ %2046, %2037 ], [ %2084, %2057 ]
  %2099 = getelementptr i8, ptr %2098, i64 8
  %2100 = getelementptr i8, ptr %2098, i64 16
  %2101 = getelementptr i8, ptr %2098, i64 40
  %2102 = load i64, ptr %2099, align 4
  %2103 = load i64, ptr %2100, align 4
  %2104 = load ptr, ptr %2101, align 8
  %2105 = mul i64 %2102, 4015701072841558310
  %2106 = lshr i64 %2105, 32
  %2107 = xor i64 %2106, %2105
  %2108 = and i64 %2107, %2103
  %2109 = getelementptr i32, ptr %2104, i64 %2108
  %2110 = load i32, ptr %2109, align 4
  %2111 = xor i1 %2020, true
  %2112 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2113 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2114 = icmp eq i32 %2032, 100
  br i1 %2114, label %2119, label %2016

2115:                                             ; preds = %2057, %2037
  %2116 = load i32, ptr %1382, align 4
  %2117 = add i32 %2116, 1
  %2118 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2117, ptr %1382, align 4
  br label %2119

2119:                                             ; preds = %2115, %2095
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2120

2120:                                             ; preds = %2119, %1987
  %2121 = add nuw nsw i64 %1988, 1
  %2122 = icmp eq i64 %2121, %1986
  br i1 %2122, label %2123, label %1987

2123:                                             ; preds = %2256, %2120
  %2124 = phi i64 [ %2257, %2256 ], [ 0, %2120 ]
  %2125 = shl nuw nsw i64 %2124, 5
  %2126 = getelementptr i8, ptr %1976, i64 %2125
  %2127 = load ptr, ptr %2126, align 8
  %2128 = icmp ne ptr %2127, @nil_typ
  %2129 = icmp ne ptr %2127, null
  %2130 = and i1 %2128, %2129
  br i1 %2130, label %2131, label %2256

2131:                                             ; preds = %2123
  %2132 = getelementptr i8, ptr %2126, i64 8
  %2133 = load i64, ptr %2132, align 4
  %2134 = getelementptr i8, ptr %2126, i64 16
  %2135 = load i64, ptr %2134, align 4
  %2136 = getelementptr i8, ptr %2127, i64 8
  %2137 = getelementptr i8, ptr %2127, i64 16
  %2138 = getelementptr i8, ptr %2127, i64 40
  %2139 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2140 = load i64, ptr %2136, align 4, !noalias !25
  %2141 = load i64, ptr %2137, align 4, !noalias !25
  %2142 = load ptr, ptr %2138, align 8, !noalias !25
  %2143 = mul i64 %2140, 4015701072841558310
  %2144 = lshr i64 %2143, 32
  %2145 = xor i64 %2144, %2143
  %2146 = and i64 %2145, %2141
  %2147 = getelementptr i32, ptr %2142, i64 %2146
  %2148 = load i32, ptr %2147, align 4, !noalias !107
  %2149 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2150 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2151 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2152

2152:                                             ; preds = %2231, %2131
  %2153 = phi i64 [ %2135, %2131 ], [ %2233, %2231 ]
  %2154 = phi i64 [ %2133, %2131 ], [ %2232, %2231 ]
  %2155 = phi i32 [ 0, %2131 ], [ %2168, %2231 ]
  %2156 = phi i1 [ true, %2131 ], [ %2247, %2231 ]
  %2157 = phi ptr [ %2127, %2131 ], [ %2234, %2231 ]
  %2158 = phi i32 [ %2148, %2131 ], [ %2246, %2231 ]
  %2159 = inttoptr i64 %2153 to ptr
  %2160 = inttoptr i64 %2154 to ptr
  %2161 = sext i32 %2158 to i64
  %2162 = getelementptr ptr, ptr %2157, i64 %2161
  %2163 = getelementptr i8, ptr %2162, i64 64
  %2164 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2157, 0
  %2165 = insertvalue { ptr, ptr, ptr, i32 } %2164, ptr %2160, 1
  %2166 = insertvalue { ptr, ptr, ptr, i32 } %2165, ptr %2159, 2
  %2167 = insertvalue { ptr, ptr, ptr, i32 } %2166, i32 %2158, 3
  %2168 = add nuw nsw i32 %2155, 1
  %2169 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2157)
  %2170 = load ptr, ptr %2163, align 8
  %2171 = call align 4 ptr %2170({ ptr, ptr, ptr, i32 } %2167, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2172 = call i32 %2171({ ptr, ptr, ptr, i32 } %2167, { ptr, ptr, ptr, i32 } %2167, ptr nonnull align 8 %2) #28
  br i1 %2156, label %2173, label %2193

2173:                                             ; preds = %2152
  %2174 = load i32, ptr %40, align 8
  %2175 = add i32 %2174, -1
  %2176 = and i32 %2175, %2172
  %2177 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2178 = load ptr, ptr %42, align 8
  %2179 = sext i32 %2176 to i64
  %2180 = shl nsw i64 %2179, 5
  %2181 = getelementptr i8, ptr %2178, i64 %2180
  %2182 = load ptr, ptr %2181, align 8
  %2183 = getelementptr i8, ptr %2181, i64 8
  %2184 = load i160, ptr %2183, align 4
  store ptr %2157, ptr %2181, align 8
  store i64 %2154, ptr %2183, align 4
  %2185 = getelementptr i8, ptr %2181, i64 16
  store i64 %2153, ptr %2185, align 4
  %2186 = getelementptr i8, ptr %2181, i64 24
  store i32 %2158, ptr %2186, align 4
  %2187 = icmp ne ptr %2182, @nil_typ
  %2188 = icmp ne ptr %2182, null
  %2189 = and i1 %2187, %2188
  %2190 = trunc i160 %2184 to i64
  %2191 = lshr i160 %2184, 64
  %2192 = trunc i160 %2191 to i64
  br i1 %2189, label %2231, label %2251

2193:                                             ; preds = %2152
  %2194 = add i32 %2172, 2127912214
  %2195 = shl i32 %2172, 12
  %2196 = add i32 %2194, %2195
  %2197 = ashr i32 %2196, 19
  %2198 = xor i32 %2196, %2197
  %2199 = xor i32 %2198, -949894596
  %2200 = add i32 %2199, 374761393
  %2201 = shl i32 %2199, 5
  %2202 = add i32 %2200, %2201
  %2203 = add i32 %2202, -744332180
  %2204 = shl i32 %2202, 9
  %2205 = xor i32 %2203, %2204
  %2206 = add i32 %2205, -42973499
  %2207 = shl i32 %2205, 3
  %2208 = add i32 %2206, %2207
  %2209 = ashr i32 %2208, 16
  %2210 = xor i32 %2208, %2209
  %2211 = xor i32 %2210, -1252372727
  %2212 = load i32, ptr %40, align 8
  %2213 = add i32 %2212, -1
  %2214 = and i32 %2213, %2211
  %2215 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2216 = load ptr, ptr %44, align 8
  %2217 = sext i32 %2214 to i64
  %2218 = shl nsw i64 %2217, 5
  %2219 = getelementptr i8, ptr %2216, i64 %2218
  %2220 = load ptr, ptr %2219, align 8
  %2221 = getelementptr i8, ptr %2219, i64 8
  %2222 = load i160, ptr %2221, align 4
  store ptr %2157, ptr %2219, align 8
  store i64 %2154, ptr %2221, align 4
  %2223 = getelementptr i8, ptr %2219, i64 16
  store i64 %2153, ptr %2223, align 4
  %2224 = getelementptr i8, ptr %2219, i64 24
  store i32 %2158, ptr %2224, align 4
  %2225 = icmp ne ptr %2220, @nil_typ
  %2226 = icmp ne ptr %2220, null
  %2227 = and i1 %2225, %2226
  %2228 = trunc i160 %2222 to i64
  %2229 = lshr i160 %2222, 64
  %2230 = trunc i160 %2229 to i64
  br i1 %2227, label %2231, label %2251

2231:                                             ; preds = %2193, %2173
  %2232 = phi i64 [ %2190, %2173 ], [ %2228, %2193 ]
  %2233 = phi i64 [ %2192, %2173 ], [ %2230, %2193 ]
  %2234 = phi ptr [ %2182, %2173 ], [ %2220, %2193 ]
  %2235 = getelementptr i8, ptr %2234, i64 8
  %2236 = getelementptr i8, ptr %2234, i64 16
  %2237 = getelementptr i8, ptr %2234, i64 40
  %2238 = load i64, ptr %2235, align 4
  %2239 = load i64, ptr %2236, align 4
  %2240 = load ptr, ptr %2237, align 8
  %2241 = mul i64 %2238, 4015701072841558310
  %2242 = lshr i64 %2241, 32
  %2243 = xor i64 %2242, %2241
  %2244 = and i64 %2243, %2239
  %2245 = getelementptr i32, ptr %2240, i64 %2244
  %2246 = load i32, ptr %2245, align 4
  %2247 = xor i1 %2156, true
  %2248 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2249 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2250 = icmp eq i32 %2168, 100
  br i1 %2250, label %2255, label %2152

2251:                                             ; preds = %2193, %2173
  %2252 = load i32, ptr %1382, align 4
  %2253 = add i32 %2252, 1
  %2254 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2253, ptr %1382, align 4
  br label %2255

2255:                                             ; preds = %2251, %2231
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2256

2256:                                             ; preds = %2255, %2123
  %2257 = add nuw nsw i64 %2124, 1
  %2258 = icmp eq i64 %2257, %1986
  br i1 %2258, label %2259, label %2123

2259:                                             ; preds = %2256, %1970
  %2260 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2261 = load i64, ptr %1971, align 4, !noalias !25
  %2262 = load i64, ptr %1972, align 4, !noalias !25
  %2263 = load ptr, ptr %1973, align 8, !noalias !25
  %2264 = mul i64 %2261, 4015701072841558310
  %2265 = lshr i64 %2264, 32
  %2266 = xor i64 %2265, %2264
  %2267 = and i64 %2266, %2262
  %2268 = getelementptr i32, ptr %2263, i64 %2267
  %2269 = load i32, ptr %2268, align 4, !noalias !110
  %2270 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2271 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2272 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2273

2273:                                             ; preds = %2352, %2259
  %2274 = phi i64 [ %1946, %2259 ], [ %2354, %2352 ]
  %2275 = phi i64 [ %1945, %2259 ], [ %2353, %2352 ]
  %2276 = phi i32 [ 0, %2259 ], [ %2289, %2352 ]
  %2277 = phi i1 [ true, %2259 ], [ %2368, %2352 ]
  %2278 = phi ptr [ %1947, %2259 ], [ %2355, %2352 ]
  %2279 = phi i32 [ %2269, %2259 ], [ %2367, %2352 ]
  %2280 = inttoptr i64 %2274 to ptr
  %2281 = inttoptr i64 %2275 to ptr
  %2282 = sext i32 %2279 to i64
  %2283 = getelementptr ptr, ptr %2278, i64 %2282
  %2284 = getelementptr i8, ptr %2283, i64 64
  %2285 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2278, 0
  %2286 = insertvalue { ptr, ptr, ptr, i32 } %2285, ptr %2281, 1
  %2287 = insertvalue { ptr, ptr, ptr, i32 } %2286, ptr %2280, 2
  %2288 = insertvalue { ptr, ptr, ptr, i32 } %2287, i32 %2279, 3
  %2289 = add nuw nsw i32 %2276, 1
  %2290 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2278)
  %2291 = load ptr, ptr %2284, align 8
  %2292 = call align 4 ptr %2291({ ptr, ptr, ptr, i32 } %2288, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2293 = call i32 %2292({ ptr, ptr, ptr, i32 } %2288, { ptr, ptr, ptr, i32 } %2288, ptr nonnull align 8 %2) #28
  br i1 %2277, label %2294, label %2314

2294:                                             ; preds = %2273
  %2295 = load i32, ptr %40, align 8
  %2296 = add i32 %2295, -1
  %2297 = and i32 %2296, %2293
  %2298 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2299 = load ptr, ptr %42, align 8
  %2300 = sext i32 %2297 to i64
  %2301 = shl nsw i64 %2300, 5
  %2302 = getelementptr i8, ptr %2299, i64 %2301
  %2303 = load ptr, ptr %2302, align 8
  %2304 = getelementptr i8, ptr %2302, i64 8
  %2305 = load i160, ptr %2304, align 4
  store ptr %2278, ptr %2302, align 8
  store i64 %2275, ptr %2304, align 4
  %2306 = getelementptr i8, ptr %2302, i64 16
  store i64 %2274, ptr %2306, align 4
  %2307 = getelementptr i8, ptr %2302, i64 24
  store i32 %2279, ptr %2307, align 4
  %2308 = icmp ne ptr %2303, @nil_typ
  %2309 = icmp ne ptr %2303, null
  %2310 = and i1 %2308, %2309
  %2311 = trunc i160 %2305 to i64
  %2312 = lshr i160 %2305, 64
  %2313 = trunc i160 %2312 to i64
  br i1 %2310, label %2352, label %2372

2314:                                             ; preds = %2273
  %2315 = add i32 %2293, 2127912214
  %2316 = shl i32 %2293, 12
  %2317 = add i32 %2315, %2316
  %2318 = ashr i32 %2317, 19
  %2319 = xor i32 %2317, %2318
  %2320 = xor i32 %2319, -949894596
  %2321 = add i32 %2320, 374761393
  %2322 = shl i32 %2320, 5
  %2323 = add i32 %2321, %2322
  %2324 = add i32 %2323, -744332180
  %2325 = shl i32 %2323, 9
  %2326 = xor i32 %2324, %2325
  %2327 = add i32 %2326, -42973499
  %2328 = shl i32 %2326, 3
  %2329 = add i32 %2327, %2328
  %2330 = ashr i32 %2329, 16
  %2331 = xor i32 %2329, %2330
  %2332 = xor i32 %2331, -1252372727
  %2333 = load i32, ptr %40, align 8
  %2334 = add i32 %2333, -1
  %2335 = and i32 %2334, %2332
  %2336 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2337 = load ptr, ptr %44, align 8
  %2338 = sext i32 %2335 to i64
  %2339 = shl nsw i64 %2338, 5
  %2340 = getelementptr i8, ptr %2337, i64 %2339
  %2341 = load ptr, ptr %2340, align 8
  %2342 = getelementptr i8, ptr %2340, i64 8
  %2343 = load i160, ptr %2342, align 4
  store ptr %2278, ptr %2340, align 8
  store i64 %2275, ptr %2342, align 4
  %2344 = getelementptr i8, ptr %2340, i64 16
  store i64 %2274, ptr %2344, align 4
  %2345 = getelementptr i8, ptr %2340, i64 24
  store i32 %2279, ptr %2345, align 4
  %2346 = icmp ne ptr %2341, @nil_typ
  %2347 = icmp ne ptr %2341, null
  %2348 = and i1 %2346, %2347
  %2349 = trunc i160 %2343 to i64
  %2350 = lshr i160 %2343, 64
  %2351 = trunc i160 %2350 to i64
  br i1 %2348, label %2352, label %2372

2352:                                             ; preds = %2314, %2294
  %2353 = phi i64 [ %2311, %2294 ], [ %2349, %2314 ]
  %2354 = phi i64 [ %2313, %2294 ], [ %2351, %2314 ]
  %2355 = phi ptr [ %2303, %2294 ], [ %2341, %2314 ]
  %2356 = getelementptr i8, ptr %2355, i64 8
  %2357 = getelementptr i8, ptr %2355, i64 16
  %2358 = getelementptr i8, ptr %2355, i64 40
  %2359 = load i64, ptr %2356, align 4
  %2360 = load i64, ptr %2357, align 4
  %2361 = load ptr, ptr %2358, align 8
  %2362 = mul i64 %2359, 4015701072841558310
  %2363 = lshr i64 %2362, 32
  %2364 = xor i64 %2363, %2362
  %2365 = and i64 %2364, %2360
  %2366 = getelementptr i32, ptr %2361, i64 %2365
  %2367 = load i32, ptr %2366, align 4
  %2368 = xor i1 %2277, true
  %2369 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2370 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2371 = icmp eq i32 %2289, 100
  br i1 %2371, label %2376, label %2273

2372:                                             ; preds = %2314, %2294
  %2373 = load i32, ptr %1382, align 4
  %2374 = add i32 %2373, 1
  %2375 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2374, ptr %1382, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2666

2376:                                             ; preds = %2352
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2377 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2378 = load ptr, ptr %42, align 8
  %2379 = load ptr, ptr %44, align 8
  %2380 = load i32, ptr %40, align 8
  %2381 = shl i32 %2380, 1
  %2382 = call i32 @llvm.smax.i32(i32 %2381, i32 noundef 16) #43
  store i32 %2382, ptr %40, align 8
  %2383 = zext nneg i32 %2382 to i64
  %2384 = shl nuw nsw i64 %2383, 5
  %2385 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2384, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2385, ptr %42, align 8
  %2386 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2384, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2386, ptr %44, align 8
  store i32 0, ptr %1382, align 4
  %2387 = icmp sgt i32 %2380, 0
  br i1 %2387, label %2390, label %2388

2388:                                             ; preds = %2376
  %2389 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %2666

2390:                                             ; preds = %2376
  %2391 = zext nneg i32 %2380 to i64
  br label %2392

2392:                                             ; preds = %2525, %2390
  %2393 = phi i64 [ 0, %2390 ], [ %2526, %2525 ]
  %2394 = shl nuw nsw i64 %2393, 5
  %2395 = getelementptr i8, ptr %2378, i64 %2394
  %2396 = load ptr, ptr %2395, align 8
  %2397 = icmp ne ptr %2396, @nil_typ
  %2398 = icmp ne ptr %2396, null
  %2399 = and i1 %2397, %2398
  br i1 %2399, label %2400, label %2525

2400:                                             ; preds = %2392
  %2401 = getelementptr i8, ptr %2395, i64 8
  %2402 = load i64, ptr %2401, align 4
  %2403 = getelementptr i8, ptr %2395, i64 16
  %2404 = load i64, ptr %2403, align 4
  %2405 = getelementptr i8, ptr %2396, i64 8
  %2406 = getelementptr i8, ptr %2396, i64 16
  %2407 = getelementptr i8, ptr %2396, i64 40
  %2408 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2409 = load i64, ptr %2405, align 4, !noalias !25
  %2410 = load i64, ptr %2406, align 4, !noalias !25
  %2411 = load ptr, ptr %2407, align 8, !noalias !25
  %2412 = mul i64 %2409, 4015701072841558310
  %2413 = lshr i64 %2412, 32
  %2414 = xor i64 %2413, %2412
  %2415 = and i64 %2414, %2410
  %2416 = getelementptr i32, ptr %2411, i64 %2415
  %2417 = load i32, ptr %2416, align 4, !noalias !113
  %2418 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2419 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2420 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2421

2421:                                             ; preds = %2500, %2400
  %2422 = phi i64 [ %2404, %2400 ], [ %2502, %2500 ]
  %2423 = phi i64 [ %2402, %2400 ], [ %2501, %2500 ]
  %2424 = phi i32 [ 0, %2400 ], [ %2437, %2500 ]
  %2425 = phi i1 [ true, %2400 ], [ %2516, %2500 ]
  %2426 = phi ptr [ %2396, %2400 ], [ %2503, %2500 ]
  %2427 = phi i32 [ %2417, %2400 ], [ %2515, %2500 ]
  %2428 = inttoptr i64 %2422 to ptr
  %2429 = inttoptr i64 %2423 to ptr
  %2430 = sext i32 %2427 to i64
  %2431 = getelementptr ptr, ptr %2426, i64 %2430
  %2432 = getelementptr i8, ptr %2431, i64 64
  %2433 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2426, 0
  %2434 = insertvalue { ptr, ptr, ptr, i32 } %2433, ptr %2429, 1
  %2435 = insertvalue { ptr, ptr, ptr, i32 } %2434, ptr %2428, 2
  %2436 = insertvalue { ptr, ptr, ptr, i32 } %2435, i32 %2427, 3
  %2437 = add nuw nsw i32 %2424, 1
  %2438 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2426)
  %2439 = load ptr, ptr %2432, align 8
  %2440 = call align 4 ptr %2439({ ptr, ptr, ptr, i32 } %2436, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2441 = call i32 %2440({ ptr, ptr, ptr, i32 } %2436, { ptr, ptr, ptr, i32 } %2436, ptr nonnull align 8 %2) #28
  br i1 %2425, label %2442, label %2462

2442:                                             ; preds = %2421
  %2443 = load i32, ptr %40, align 8
  %2444 = add i32 %2443, -1
  %2445 = and i32 %2444, %2441
  %2446 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2447 = load ptr, ptr %42, align 8
  %2448 = sext i32 %2445 to i64
  %2449 = shl nsw i64 %2448, 5
  %2450 = getelementptr i8, ptr %2447, i64 %2449
  %2451 = load ptr, ptr %2450, align 8
  %2452 = getelementptr i8, ptr %2450, i64 8
  %2453 = load i160, ptr %2452, align 4
  store ptr %2426, ptr %2450, align 8
  store i64 %2423, ptr %2452, align 4
  %2454 = getelementptr i8, ptr %2450, i64 16
  store i64 %2422, ptr %2454, align 4
  %2455 = getelementptr i8, ptr %2450, i64 24
  store i32 %2427, ptr %2455, align 4
  %2456 = icmp ne ptr %2451, @nil_typ
  %2457 = icmp ne ptr %2451, null
  %2458 = and i1 %2456, %2457
  %2459 = trunc i160 %2453 to i64
  %2460 = lshr i160 %2453, 64
  %2461 = trunc i160 %2460 to i64
  br i1 %2458, label %2500, label %2520

2462:                                             ; preds = %2421
  %2463 = add i32 %2441, 2127912214
  %2464 = shl i32 %2441, 12
  %2465 = add i32 %2463, %2464
  %2466 = ashr i32 %2465, 19
  %2467 = xor i32 %2465, %2466
  %2468 = xor i32 %2467, -949894596
  %2469 = add i32 %2468, 374761393
  %2470 = shl i32 %2468, 5
  %2471 = add i32 %2469, %2470
  %2472 = add i32 %2471, -744332180
  %2473 = shl i32 %2471, 9
  %2474 = xor i32 %2472, %2473
  %2475 = add i32 %2474, -42973499
  %2476 = shl i32 %2474, 3
  %2477 = add i32 %2475, %2476
  %2478 = ashr i32 %2477, 16
  %2479 = xor i32 %2477, %2478
  %2480 = xor i32 %2479, -1252372727
  %2481 = load i32, ptr %40, align 8
  %2482 = add i32 %2481, -1
  %2483 = and i32 %2482, %2480
  %2484 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2485 = load ptr, ptr %44, align 8
  %2486 = sext i32 %2483 to i64
  %2487 = shl nsw i64 %2486, 5
  %2488 = getelementptr i8, ptr %2485, i64 %2487
  %2489 = load ptr, ptr %2488, align 8
  %2490 = getelementptr i8, ptr %2488, i64 8
  %2491 = load i160, ptr %2490, align 4
  store ptr %2426, ptr %2488, align 8
  store i64 %2423, ptr %2490, align 4
  %2492 = getelementptr i8, ptr %2488, i64 16
  store i64 %2422, ptr %2492, align 4
  %2493 = getelementptr i8, ptr %2488, i64 24
  store i32 %2427, ptr %2493, align 4
  %2494 = icmp ne ptr %2489, @nil_typ
  %2495 = icmp ne ptr %2489, null
  %2496 = and i1 %2494, %2495
  %2497 = trunc i160 %2491 to i64
  %2498 = lshr i160 %2491, 64
  %2499 = trunc i160 %2498 to i64
  br i1 %2496, label %2500, label %2520

2500:                                             ; preds = %2462, %2442
  %2501 = phi i64 [ %2459, %2442 ], [ %2497, %2462 ]
  %2502 = phi i64 [ %2461, %2442 ], [ %2499, %2462 ]
  %2503 = phi ptr [ %2451, %2442 ], [ %2489, %2462 ]
  %2504 = getelementptr i8, ptr %2503, i64 8
  %2505 = getelementptr i8, ptr %2503, i64 16
  %2506 = getelementptr i8, ptr %2503, i64 40
  %2507 = load i64, ptr %2504, align 4
  %2508 = load i64, ptr %2505, align 4
  %2509 = load ptr, ptr %2506, align 8
  %2510 = mul i64 %2507, 4015701072841558310
  %2511 = lshr i64 %2510, 32
  %2512 = xor i64 %2511, %2510
  %2513 = and i64 %2512, %2508
  %2514 = getelementptr i32, ptr %2509, i64 %2513
  %2515 = load i32, ptr %2514, align 4
  %2516 = xor i1 %2425, true
  %2517 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2518 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2519 = icmp eq i32 %2437, 100
  br i1 %2519, label %2524, label %2421

2520:                                             ; preds = %2462, %2442
  %2521 = load i32, ptr %1382, align 4
  %2522 = add i32 %2521, 1
  %2523 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2522, ptr %1382, align 4
  br label %2524

2524:                                             ; preds = %2520, %2500
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2525

2525:                                             ; preds = %2524, %2392
  %2526 = add nuw nsw i64 %2393, 1
  %2527 = icmp eq i64 %2526, %2391
  br i1 %2527, label %2528, label %2392

2528:                                             ; preds = %2525
  %2529 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %2530

2530:                                             ; preds = %2663, %2528
  %2531 = phi i64 [ 0, %2528 ], [ %2664, %2663 ]
  %2532 = shl nuw nsw i64 %2531, 5
  %2533 = getelementptr i8, ptr %2379, i64 %2532
  %2534 = load ptr, ptr %2533, align 8
  %2535 = icmp ne ptr %2534, @nil_typ
  %2536 = icmp ne ptr %2534, null
  %2537 = and i1 %2535, %2536
  br i1 %2537, label %2538, label %2663

2538:                                             ; preds = %2530
  %2539 = getelementptr i8, ptr %2533, i64 8
  %2540 = load i64, ptr %2539, align 4
  %2541 = getelementptr i8, ptr %2533, i64 16
  %2542 = load i64, ptr %2541, align 4
  %2543 = getelementptr i8, ptr %2534, i64 8
  %2544 = getelementptr i8, ptr %2534, i64 16
  %2545 = getelementptr i8, ptr %2534, i64 40
  %2546 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2547 = load i64, ptr %2543, align 4, !noalias !25
  %2548 = load i64, ptr %2544, align 4, !noalias !25
  %2549 = load ptr, ptr %2545, align 8, !noalias !25
  %2550 = mul i64 %2547, 4015701072841558310
  %2551 = lshr i64 %2550, 32
  %2552 = xor i64 %2551, %2550
  %2553 = and i64 %2552, %2548
  %2554 = getelementptr i32, ptr %2549, i64 %2553
  %2555 = load i32, ptr %2554, align 4, !noalias !116
  %2556 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2557 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2558 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2559

2559:                                             ; preds = %2638, %2538
  %2560 = phi i64 [ %2542, %2538 ], [ %2640, %2638 ]
  %2561 = phi i64 [ %2540, %2538 ], [ %2639, %2638 ]
  %2562 = phi i32 [ 0, %2538 ], [ %2575, %2638 ]
  %2563 = phi i1 [ true, %2538 ], [ %2654, %2638 ]
  %2564 = phi ptr [ %2534, %2538 ], [ %2641, %2638 ]
  %2565 = phi i32 [ %2555, %2538 ], [ %2653, %2638 ]
  %2566 = inttoptr i64 %2560 to ptr
  %2567 = inttoptr i64 %2561 to ptr
  %2568 = sext i32 %2565 to i64
  %2569 = getelementptr ptr, ptr %2564, i64 %2568
  %2570 = getelementptr i8, ptr %2569, i64 64
  %2571 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2564, 0
  %2572 = insertvalue { ptr, ptr, ptr, i32 } %2571, ptr %2567, 1
  %2573 = insertvalue { ptr, ptr, ptr, i32 } %2572, ptr %2566, 2
  %2574 = insertvalue { ptr, ptr, ptr, i32 } %2573, i32 %2565, 3
  %2575 = add nuw nsw i32 %2562, 1
  %2576 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2564)
  %2577 = load ptr, ptr %2570, align 8
  %2578 = call align 4 ptr %2577({ ptr, ptr, ptr, i32 } %2574, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2579 = call i32 %2578({ ptr, ptr, ptr, i32 } %2574, { ptr, ptr, ptr, i32 } %2574, ptr nonnull align 8 %2) #28
  br i1 %2563, label %2580, label %2600

2580:                                             ; preds = %2559
  %2581 = load i32, ptr %40, align 8
  %2582 = add i32 %2581, -1
  %2583 = and i32 %2582, %2579
  %2584 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2585 = load ptr, ptr %42, align 8
  %2586 = sext i32 %2583 to i64
  %2587 = shl nsw i64 %2586, 5
  %2588 = getelementptr i8, ptr %2585, i64 %2587
  %2589 = load ptr, ptr %2588, align 8
  %2590 = getelementptr i8, ptr %2588, i64 8
  %2591 = load i160, ptr %2590, align 4
  store ptr %2564, ptr %2588, align 8
  store i64 %2561, ptr %2590, align 4
  %2592 = getelementptr i8, ptr %2588, i64 16
  store i64 %2560, ptr %2592, align 4
  %2593 = getelementptr i8, ptr %2588, i64 24
  store i32 %2565, ptr %2593, align 4
  %2594 = icmp ne ptr %2589, @nil_typ
  %2595 = icmp ne ptr %2589, null
  %2596 = and i1 %2594, %2595
  %2597 = trunc i160 %2591 to i64
  %2598 = lshr i160 %2591, 64
  %2599 = trunc i160 %2598 to i64
  br i1 %2596, label %2638, label %2658

2600:                                             ; preds = %2559
  %2601 = add i32 %2579, 2127912214
  %2602 = shl i32 %2579, 12
  %2603 = add i32 %2601, %2602
  %2604 = ashr i32 %2603, 19
  %2605 = xor i32 %2603, %2604
  %2606 = xor i32 %2605, -949894596
  %2607 = add i32 %2606, 374761393
  %2608 = shl i32 %2606, 5
  %2609 = add i32 %2607, %2608
  %2610 = add i32 %2609, -744332180
  %2611 = shl i32 %2609, 9
  %2612 = xor i32 %2610, %2611
  %2613 = add i32 %2612, -42973499
  %2614 = shl i32 %2612, 3
  %2615 = add i32 %2613, %2614
  %2616 = ashr i32 %2615, 16
  %2617 = xor i32 %2615, %2616
  %2618 = xor i32 %2617, -1252372727
  %2619 = load i32, ptr %40, align 8
  %2620 = add i32 %2619, -1
  %2621 = and i32 %2620, %2618
  %2622 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2623 = load ptr, ptr %44, align 8
  %2624 = sext i32 %2621 to i64
  %2625 = shl nsw i64 %2624, 5
  %2626 = getelementptr i8, ptr %2623, i64 %2625
  %2627 = load ptr, ptr %2626, align 8
  %2628 = getelementptr i8, ptr %2626, i64 8
  %2629 = load i160, ptr %2628, align 4
  store ptr %2564, ptr %2626, align 8
  store i64 %2561, ptr %2628, align 4
  %2630 = getelementptr i8, ptr %2626, i64 16
  store i64 %2560, ptr %2630, align 4
  %2631 = getelementptr i8, ptr %2626, i64 24
  store i32 %2565, ptr %2631, align 4
  %2632 = icmp ne ptr %2627, @nil_typ
  %2633 = icmp ne ptr %2627, null
  %2634 = and i1 %2632, %2633
  %2635 = trunc i160 %2629 to i64
  %2636 = lshr i160 %2629, 64
  %2637 = trunc i160 %2636 to i64
  br i1 %2634, label %2638, label %2658

2638:                                             ; preds = %2600, %2580
  %2639 = phi i64 [ %2597, %2580 ], [ %2635, %2600 ]
  %2640 = phi i64 [ %2599, %2580 ], [ %2637, %2600 ]
  %2641 = phi ptr [ %2589, %2580 ], [ %2627, %2600 ]
  %2642 = getelementptr i8, ptr %2641, i64 8
  %2643 = getelementptr i8, ptr %2641, i64 16
  %2644 = getelementptr i8, ptr %2641, i64 40
  %2645 = load i64, ptr %2642, align 4
  %2646 = load i64, ptr %2643, align 4
  %2647 = load ptr, ptr %2644, align 8
  %2648 = mul i64 %2645, 4015701072841558310
  %2649 = lshr i64 %2648, 32
  %2650 = xor i64 %2649, %2648
  %2651 = and i64 %2650, %2646
  %2652 = getelementptr i32, ptr %2647, i64 %2651
  %2653 = load i32, ptr %2652, align 4
  %2654 = xor i1 %2563, true
  %2655 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2656 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2657 = icmp eq i32 %2575, 100
  br i1 %2657, label %2662, label %2559

2658:                                             ; preds = %2600, %2580
  %2659 = load i32, ptr %1382, align 4
  %2660 = add i32 %2659, 1
  %2661 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2660, ptr %1382, align 4
  br label %2662

2662:                                             ; preds = %2658, %2638
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2663

2663:                                             ; preds = %2662, %2530
  %2664 = add nuw nsw i64 %2531, 1
  %2665 = icmp eq i64 %2664, %2391
  br i1 %2665, label %2666, label %2530

2666:                                             ; preds = %2663, %2388, %2372, %1966, %1607, %1451
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2667 = add nuw nsw i64 %1387, 1
  %2668 = icmp eq i64 %2667, %81
  br i1 %2668, label %2669, label %1386

2669:                                             ; preds = %2666
  %2670 = call i64 @clock()
  %2671 = zext i32 %100 to i160
  %2672 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %2671, 1
  %2673 = load ptr, ptr %38, align 8
  %2674 = call i32 %2673({ ptr, i160 } %2672) #28
  %2675 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %2676 = load i32, ptr %40, align 8
  %2677 = add i32 %2676, -1
  %2678 = and i32 %2677, %2674
  %2679 = load ptr, ptr %42, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2680 = sext i32 %2678 to i64
  %2681 = shl nsw i64 %2680, 5
  %2682 = getelementptr i8, ptr %2679, i64 %2681
  %2683 = load ptr, ptr %2682, align 8
  %2684 = icmp ne ptr %2683, @nil_typ
  %2685 = icmp ne ptr %2683, null
  %2686 = and i1 %2684, %2685
  br i1 %2686, label %2687, label %2729

2687:                                             ; preds = %2669
  %2688 = getelementptr i8, ptr %2682, i64 8
  %2689 = load i64, ptr %2688, align 4
  %2690 = getelementptr i8, ptr %2682, i64 16
  %2691 = load i64, ptr %2690, align 4
  %2692 = inttoptr i64 %2689 to ptr
  %2693 = inttoptr i64 %2691 to ptr
  %2694 = getelementptr i8, ptr %2683, i64 8
  %2695 = getelementptr i8, ptr %2683, i64 16
  %2696 = getelementptr i8, ptr %2683, i64 40
  %2697 = load i64, ptr %2694, align 4, !noalias !119
  %2698 = load i64, ptr %2695, align 4, !noalias !119
  %2699 = load ptr, ptr %2696, align 8, !noalias !119
  %2700 = mul i64 %2697, 4015701072841558310
  %2701 = lshr i64 %2700, 32
  %2702 = xor i64 %2701, %2700
  %2703 = and i64 %2702, %2698
  %2704 = getelementptr i32, ptr %2699, i64 %2703
  %2705 = load i32, ptr %2704, align 4, !noalias !119
  %2706 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2683, 0
  %2707 = insertvalue { ptr, ptr, ptr, i32 } %2706, ptr %2692, 1
  %2708 = insertvalue { ptr, ptr, ptr, i32 } %2707, ptr %2693, 2
  %2709 = insertvalue { ptr, ptr, ptr, i32 } %2708, i32 %2705, 3
  %2710 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2711 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2683) #43
  %2712 = sext i32 %2705 to i64
  %2713 = getelementptr ptr, ptr %2683, i64 %2712
  %2714 = getelementptr i8, ptr %2713, i64 64
  %2715 = load ptr, ptr %2714, align 8
  %2716 = call align 4 ptr %2715({ ptr, ptr, ptr, i32 } %2709, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2717 = call i32 %2716({ ptr, ptr, ptr, i32 } %2709, { ptr, ptr, ptr, i32 } %2709, ptr nonnull align 8 %2) #28
  %2718 = icmp eq i32 %2717, %2674
  br i1 %2718, label %2719, label %2729

2719:                                             ; preds = %2687
  %2720 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2721 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2683)
  %2722 = getelementptr i8, ptr %2713, i64 48
  %2723 = load ptr, ptr %2722, align 8
  %2724 = call align 4 ptr %2723({ ptr, ptr, ptr, i32 } %2709, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2725 = call { ptr, i160 } %2724({ ptr, ptr, ptr, i32 } %2709, { ptr, ptr, ptr, i32 } %2709, ptr nonnull align 8 %2) #28
  %2726 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2727 = load ptr, ptr %39, align 8
  %2728 = call i1 %2727({ ptr, i160 } %2725, { ptr, i160 } %2672) #28
  br i1 %2728, label %2730, label %2729

2729:                                             ; preds = %2719, %2687, %2669
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2741

2730:                                             ; preds = %2719
  %2731 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2732 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2683)
  %2733 = getelementptr i8, ptr %2713, i64 56
  %2734 = load ptr, ptr %2733, align 8
  %2735 = call align 4 ptr %2734({ ptr, ptr, ptr, i32 } %2709, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2736 = call { ptr, i160 } %2735({ ptr, ptr, ptr, i32 } %2709, { ptr, ptr, ptr, i32 } %2709, ptr nonnull align 8 %2) #28
  %2737 = extractvalue { ptr, i160 } %2736, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2738 = icmp ne ptr %2737, @nil_typ
  %2739 = icmp ne ptr %2737, null
  %2740 = and i1 %2738, %2739
  br i1 %2740, label %2833, label %2741

2741:                                             ; preds = %2730, %2729
  %2742 = add i32 %2674, 2127912214
  %2743 = shl i32 %2674, 12
  %2744 = add i32 %2742, %2743
  %2745 = ashr i32 %2744, 19
  %2746 = xor i32 %2744, %2745
  %2747 = xor i32 %2746, -949894596
  %2748 = add i32 %2747, 374761393
  %2749 = shl i32 %2747, 5
  %2750 = add i32 %2748, %2749
  %2751 = add i32 %2750, -744332180
  %2752 = shl i32 %2750, 9
  %2753 = xor i32 %2751, %2752
  %2754 = add i32 %2753, -42973499
  %2755 = shl i32 %2753, 3
  %2756 = add i32 %2754, %2755
  %2757 = ashr i32 %2756, 16
  %2758 = xor i32 %2756, %2757
  %2759 = xor i32 %2758, -1252372727
  %2760 = load i32, ptr %40, align 8
  %2761 = add i32 %2760, -1
  %2762 = and i32 %2761, %2759
  %2763 = load ptr, ptr %44, align 8
  %2764 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2765 = sext i32 %2762 to i64
  %2766 = shl nsw i64 %2765, 5
  %2767 = getelementptr i8, ptr %2763, i64 %2766
  %2768 = load ptr, ptr %2767, align 8
  %2769 = icmp ne ptr %2768, @nil_typ
  %2770 = icmp ne ptr %2768, null
  %2771 = and i1 %2769, %2770
  br i1 %2771, label %2772, label %2823

2772:                                             ; preds = %2741
  %2773 = getelementptr i8, ptr %2767, i64 8
  %2774 = load i64, ptr %2773, align 4
  %2775 = getelementptr i8, ptr %2767, i64 16
  %2776 = load i64, ptr %2775, align 4
  %2777 = inttoptr i64 %2774 to ptr
  %2778 = inttoptr i64 %2776 to ptr
  %2779 = getelementptr i8, ptr %2768, i64 8
  %2780 = getelementptr i8, ptr %2768, i64 16
  %2781 = getelementptr i8, ptr %2768, i64 40
  %2782 = load i64, ptr %2779, align 4, !noalias !122
  %2783 = load i64, ptr %2780, align 4, !noalias !122
  %2784 = load ptr, ptr %2781, align 8, !noalias !122
  %2785 = mul i64 %2782, 4015701072841558310
  %2786 = lshr i64 %2785, 32
  %2787 = xor i64 %2786, %2785
  %2788 = and i64 %2787, %2783
  %2789 = getelementptr i32, ptr %2784, i64 %2788
  %2790 = load i32, ptr %2789, align 4, !noalias !122
  %2791 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2768, 0
  %2792 = insertvalue { ptr, ptr, ptr, i32 } %2791, ptr %2777, 1
  %2793 = insertvalue { ptr, ptr, ptr, i32 } %2792, ptr %2778, 2
  %2794 = insertvalue { ptr, ptr, ptr, i32 } %2793, i32 %2790, 3
  %2795 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2796 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2768) #43
  %2797 = sext i32 %2790 to i64
  %2798 = getelementptr ptr, ptr %2768, i64 %2797
  %2799 = getelementptr i8, ptr %2798, i64 64
  %2800 = load ptr, ptr %2799, align 8
  %2801 = call align 4 ptr %2800({ ptr, ptr, ptr, i32 } %2794, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2802 = call i32 %2801({ ptr, ptr, ptr, i32 } %2794, { ptr, ptr, ptr, i32 } %2794, ptr nonnull align 8 %2) #28
  %2803 = icmp eq i32 %2802, %2674
  br i1 %2803, label %2804, label %2823

2804:                                             ; preds = %2772
  %2805 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2806 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2768)
  %2807 = getelementptr i8, ptr %2798, i64 48
  %2808 = load ptr, ptr %2807, align 8
  %2809 = call align 4 ptr %2808({ ptr, ptr, ptr, i32 } %2794, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2810 = call { ptr, i160 } %2809({ ptr, ptr, ptr, i32 } %2794, { ptr, ptr, ptr, i32 } %2794, ptr nonnull align 8 %2) #28
  %2811 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2812 = load ptr, ptr %39, align 8
  %2813 = call i1 %2812({ ptr, i160 } %2810, { ptr, i160 } %2672) #28
  br i1 %2813, label %2814, label %2823

2814:                                             ; preds = %2804
  %2815 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2816 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2768)
  %2817 = getelementptr i8, ptr %2798, i64 56
  %2818 = load ptr, ptr %2817, align 8
  %2819 = call align 4 ptr %2818({ ptr, ptr, ptr, i32 } %2794, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2820 = call { ptr, i160 } %2819({ ptr, ptr, ptr, i32 } %2794, { ptr, ptr, ptr, i32 } %2794, ptr nonnull align 8 %2) #28
  %2821 = extractvalue { ptr, i160 } %2820, 0
  %2822 = extractvalue { ptr, i160 } %2820, 1
  br label %2823

2823:                                             ; preds = %2814, %2804, %2772, %2741
  %2824 = phi i160 [ %2822, %2814 ], [ poison, %2804 ], [ poison, %2741 ], [ poison, %2772 ]
  %2825 = phi ptr [ %2821, %2814 ], [ @nil_typ, %2804 ], [ @nil_typ, %2741 ], [ @nil_typ, %2772 ]
  %2826 = insertvalue { ptr, i160 } poison, ptr %2825, 0
  %2827 = insertvalue { ptr, i160 } %2826, i160 %2824, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2828 = icmp ne ptr %2825, @nil_typ
  %2829 = icmp ne ptr %2825, null
  %2830 = and i1 %2828, %2829
  %2831 = freeze i1 %2830
  %2832 = select i1 %2831, ptr %2825, ptr @nil_typ
  br label %2833

2833:                                             ; preds = %2823, %2730
  %2834 = phi { ptr, i160 } [ %2736, %2730 ], [ %2827, %2823 ]
  %2835 = phi ptr [ %2737, %2730 ], [ %2832, %2823 ]
  %2836 = icmp ne ptr %2835, @nil_typ
  %2837 = icmp ne ptr %2835, null
  %2838 = and i1 %2836, %2837
  br i1 %2838, label %2839, label %2844

2839:                                             ; preds = %2833
  %2840 = extractvalue { ptr, i160 } %2834, 1
  %2841 = trunc i160 %2840 to i32
  %2842 = add i32 %100, 1
  %2843 = icmp eq i32 %2842, %2841
  br label %2844

2844:                                             ; preds = %2839, %2833
  %2845 = phi i1 [ %2843, %2839 ], [ false, %2833 ]
  %2846 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2847 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %2848 = load i32, ptr %1382, align 4
  %2849 = icmp eq i32 %2848, %1379
  %2850 = select i1 %2849, i1 %2845, i1 false
  br label %2851

2851:                                             ; preds = %2844, %70
  %2852 = phi i64 [ %1380, %2844 ], [ %73, %70 ]
  %2853 = phi i32 [ %1379, %2844 ], [ 0, %70 ]
  %2854 = phi i64 [ %2670, %2844 ], [ %74, %70 ]
  %2855 = phi i1 [ %2850, %2844 ], [ true, %70 ]
  %2856 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2857 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2858 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <13 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %12, align 16
  %2859 = sub i64 %2854, %2852
  %2860 = getelementptr inbounds i8, ptr %12, i64 13
  store i8 0, ptr %2860, align 1
  %2861 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(14) %12) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %11, align 16
  %2862 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %11) #28
  %2863 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %0) #25
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %10, align 16
  %2864 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %10) #28
  %2865 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %2859) #25
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %9, align 4
  %2866 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %9) #28
  br i1 %69, label %2867, label %2879

2867:                                             ; preds = %2851
  %2868 = icmp sgt i64 %2859, 0
  br i1 %2868, label %2869, label %2873

2869:                                             ; preds = %2867
  %2870 = mul i64 %2859, 1000000
  %2871 = zext nneg i32 %0 to i64
  %2872 = sdiv i64 %2870, %2871
  br label %2873

2873:                                             ; preds = %2869, %2867
  %2874 = phi i64 [ %2872, %2869 ], [ 0, %2867 ]
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %8, align 16
  %2875 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %8) #28
  %2876 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %2874) #25
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %7, align 4
  %2877 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %2878 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %7) #28
  br label %2879

2879:                                             ; preds = %2873, %2851
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2880 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2881 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %6, align 4
  %2882 = getelementptr inbounds i8, ptr %6, i64 18
  store i8 0, ptr %2882, align 2
  %2883 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %6) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2884 = select i1 %2855, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %2885 = select i1 %2855, ptr %18, ptr %22
  %2886 = select i1 %2855, ptr %19, ptr %23
  %2887 = select i1 %2855, ptr %20, ptr %24
  %2888 = select i1 %2855, ptr %21, ptr %25
  store ptr @_parameterization_Bufferi8, ptr %2885, align 8
  %2889 = select i1 %2855, ptr %18, ptr %22
  %2890 = getelementptr inbounds i8, ptr %2889, i64 8
  store ptr @_parameterization_i32, ptr %2890, align 8
  %2891 = select i1 %2855, ptr %18, ptr %22
  %2892 = getelementptr inbounds i8, ptr %2891, i64 16
  store ptr @_parameterization_i32, ptr %2892, align 8
  %2893 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %2885)
  store ptr @buffer_typ, ptr %2886, align 8
  %2894 = select i1 %2855, ptr %19, ptr %23
  %2895 = getelementptr inbounds i8, ptr %2894, i64 8
  store ptr @i32_typ, ptr %2895, align 8
  %2896 = select i1 %2855, ptr %19, ptr %23
  %2897 = getelementptr inbounds i8, ptr %2896, i64 16
  store ptr @i32_typ, ptr %2897, align 8
  %2898 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %2886) #43
  store ptr @_parameterization_String, ptr %2887, align 8
  %2899 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %2887)
  store ptr @String, ptr %2888, align 8
  %2900 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2888) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2901 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2902 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <4 x i8> %2884, ptr %5, align 4
  %2903 = getelementptr inbounds i8, ptr %5, i64 4
  store i8 0, ptr %2903, align 4
  %2904 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %5) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2905 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2906 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <27 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 69, i8 120, i8 112, i8 101, i8 99, i8 116, i8 101, i8 100, i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 115, i8 105, i8 122, i8 101, i8 58, i8 32>, ptr %4, align 4
  %2907 = getelementptr inbounds i8, ptr %4, i64 27
  store i8 0, ptr %2907, align 1
  %2908 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(28) %4) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2909 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %2853) #25
  %2910 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2911 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %2912 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store i8 41, ptr %3, align 4
  %2913 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %2914 = getelementptr inbounds i8, ptr %3, i64 1
  store i8 0, ptr %2914, align 1
  %2915 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(2) %3) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  ret void
}

define dso_local void @benchmark_get_sequential_hit(i32 %0) local_unnamed_addr #30 {
  %2 = alloca {}, align 8
  %3 = alloca [5 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(5) %3, i8 0, i64 5, i1 false)
  %4 = alloca [19 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(19) %4, i8 0, i64 19, i1 false)
  %5 = alloca [4 x i8], align 4
  store i32 0, ptr %5, align 4
  %6 = alloca [16 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(16) %6, i8 0, i64 16, i1 false)
  %7 = alloca [4 x i8], align 4
  store i32 0, ptr %7, align 4
  %8 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %8, i8 0, i64 15, i1 false)
  %9 = alloca [15 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(15) %9, i8 0, i64 15, i1 false)
  %10 = alloca [19 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(19) %10, i8 0, i64 19, i1 false)
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [3 x ptr], align 8
  %14 = alloca { ptr, ptr, ptr }, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [3 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr }, align 8
  %19 = alloca [1 x ptr], align 8
  %20 = alloca { ptr }, align 8
  %21 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %21) #43
  %25 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %12) #43
  %26 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %25, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %12) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %12) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %25, ptr noalias nofree noundef nonnull readnone align 4 @ryesqrruad, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %27 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %25) #47
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %25) #43
  %29 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %11) #43
  %30 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %29, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %11) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %11) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %29, ptr noalias nofree noundef nonnull readnone align 4 @elwawarosi, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %31 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %29) #47
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %29) #43
  %33 = getelementptr inbounds i8, ptr %21, i64 48
  store ptr %27, ptr %33, align 8
  %34 = getelementptr inbounds i8, ptr %21, i64 56
  store ptr %31, ptr %34, align 8
  %35 = getelementptr inbounds i8, ptr %21, i64 40
  store i32 8, ptr %35, align 8
  %36 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %37 = getelementptr inbounds i8, ptr %21, i64 24
  store ptr %36, ptr %37, align 8
  %38 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %39 = getelementptr inbounds i8, ptr %21, i64 32
  store ptr %38, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %41 = icmp sgt i32 %0, 0
  br i1 %41, label %44, label %42

42:                                               ; preds = %1
  %43 = call i64 @clock()
  br label %1528

44:                                               ; preds = %1
  %45 = zext nneg i32 %0 to i64
  %46 = getelementptr inbounds i8, ptr %21, i64 44
  %47 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr undef, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 10, 3
  br label %50

50:                                               ; preds = %1327, %44
  %51 = phi i64 [ %53, %1327 ], [ 0, %44 ]
  %52 = phi i64 [ %1328, %1327 ], [ 0, %44 ]
  %53 = add nuw nsw i64 %51, 1
  %54 = zext nneg i64 %51 to i160
  %55 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %54, 1
  %56 = zext nneg i64 %53 to i160
  %57 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %56, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %58 = load ptr, ptr %33, align 8
  %59 = call i32 %58({ ptr, i160 } %55) #28
  %60 = load i32, ptr %35, align 8
  %61 = add i32 %60, -1
  %62 = and i32 %61, %59
  %63 = load ptr, ptr %37, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %65 = sext i32 %62 to i64
  %66 = shl nsw i64 %65, 5
  %67 = getelementptr i8, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr i8, ptr %67, i64 8
  %70 = icmp ne ptr %68, @nil_typ
  %71 = icmp ne ptr %68, null
  %72 = and i1 %70, %71
  br i1 %72, label %73, label %196

73:                                               ; preds = %50
  %74 = load i64, ptr %69, align 4
  %75 = getelementptr i8, ptr %67, i64 16
  %76 = load i64, ptr %75, align 4
  %77 = inttoptr i64 %74 to ptr
  %78 = inttoptr i64 %76 to ptr
  %79 = getelementptr i8, ptr %68, i64 8
  %80 = getelementptr i8, ptr %68, i64 16
  %81 = getelementptr i8, ptr %68, i64 40
  %82 = load i64, ptr %79, align 4, !noalias !125
  %83 = load i64, ptr %80, align 4, !noalias !125
  %84 = load ptr, ptr %81, align 8, !noalias !125
  %85 = mul i64 %82, 4015701072841558310
  %86 = lshr i64 %85, 32
  %87 = xor i64 %86, %85
  %88 = and i64 %87, %83
  %89 = getelementptr i32, ptr %84, i64 %88
  %90 = load i32, ptr %89, align 4, !noalias !125
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %92 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %77, 1
  %93 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %78, 2
  %94 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 %90, 3
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %68) #43
  %97 = sext i32 %90 to i64
  %98 = getelementptr ptr, ptr %68, i64 %97
  %99 = getelementptr i8, ptr %98, i64 64
  %100 = load ptr, ptr %99, align 8
  %101 = call align 4 ptr %100({ ptr, ptr, ptr, i32 } %94, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %102 = call i32 %101({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr nonnull align 8 %2) #28
  %103 = icmp eq i32 %102, %59
  br i1 %103, label %104, label %196

104:                                              ; preds = %73
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %68)
  %107 = getelementptr i8, ptr %98, i64 48
  %108 = load ptr, ptr %107, align 8
  %109 = call align 4 ptr %108({ ptr, ptr, ptr, i32 } %94, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %110 = call { ptr, i160 } %109({ ptr, ptr, ptr, i32 } %94, { ptr, ptr, ptr, i32 } %94, ptr nonnull align 8 %2) #28
  %111 = load ptr, ptr %34, align 8
  %112 = call i1 %111({ ptr, i160 } %110, { ptr, i160 } %55) #28
  br i1 %112, label %113, label %196

113:                                              ; preds = %104
  %114 = load ptr, ptr %21, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %116 = load ptr, ptr %22, align 8
  %117 = load ptr, ptr %114, align 8, !alias.scope !128
  %118 = getelementptr i8, ptr %117, i64 72
  %119 = load ptr, ptr %118, align 8, !alias.scope !128
  %120 = call { i64, i64 } %119(ptr nocapture nofree nonnull readonly align 8 %114) #2, !alias.scope !128
  %121 = extractvalue { i64, i64 } %120, 0
  %122 = extractvalue { i64, i64 } %120, 1
  %123 = urem i64 20, %122
  %124 = icmp eq i64 %123, 0
  %125 = sub i64 %122, %123
  %126 = select i1 %124, i64 0, i64 %125
  %127 = add i64 %121, 20
  %128 = add i64 %127, %126
  %129 = load ptr, ptr %116, align 8, !alias.scope !128
  %130 = getelementptr i8, ptr %129, i64 72
  %131 = load ptr, ptr %130, align 8, !alias.scope !128
  %132 = call { i64, i64 } %131(ptr nocapture nofree nonnull readonly align 8 %116) #2, !alias.scope !128
  %133 = extractvalue { i64, i64 } %132, 0
  %134 = extractvalue { i64, i64 } %132, 1
  %135 = call i64 @llvm.umax.i64(i64 %122, i64 %134) #44
  %136 = call i64 @llvm.umax.i64(i64 %135, i64 noundef 8) #44, !range !18
  %137 = urem i64 %128, %134
  %138 = icmp eq i64 %137, 0
  %139 = sub i64 %134, %137
  %140 = select i1 %138, i64 0, i64 %139
  %141 = add i64 %133, %128
  %142 = add i64 %141, %140
  %143 = urem i64 %142, %136
  %144 = icmp eq i64 %143, 0
  %145 = sub i64 %136, %143
  %146 = select i1 %144, i64 0, i64 %145
  %147 = add i64 %146, %142
  %148 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %147, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %114, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  store ptr %116, ptr %149, align 8
  %150 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %148)
  %151 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %152 = load ptr, ptr %114, align 8
  %153 = getelementptr i8, ptr %152, i64 72
  %154 = load ptr, ptr %153, align 8
  %155 = call { i64, i64 } %154(ptr nocapture nofree nonnull readonly align 8 %114) #2
  %156 = extractvalue { i64, i64 } %155, 1
  %157 = urem i64 20, %156
  %158 = icmp eq i64 %157, 0
  %159 = sub i64 %156, %157
  %160 = add i64 %159, 20
  %161 = select i1 %158, i64 20, i64 %160
  %162 = getelementptr i8, ptr %148, i64 %161
  %163 = getelementptr i8, ptr %152, i64 64
  %164 = load ptr, ptr %163, align 8
  call void %164({ ptr, i160 } %55, ptr nocapture nofree nonnull readonly align 8 %114, ptr nocapture nofree writeonly %162) #8
  %165 = load ptr, ptr %148, align 8
  %166 = load ptr, ptr %165, align 8
  %167 = getelementptr i8, ptr %166, i64 72
  %168 = load ptr, ptr %167, align 8
  %169 = call { i64, i64 } %168(ptr nocapture nofree nonnull readonly align 8 %165) #2
  %170 = extractvalue { i64, i64 } %169, 0
  %171 = extractvalue { i64, i64 } %169, 1
  %172 = urem i64 20, %171
  %173 = icmp eq i64 %172, 0
  %174 = sub i64 %171, %172
  %175 = select i1 %173, i64 0, i64 %174
  %176 = add i64 %170, 20
  %177 = add i64 %176, %175
  %178 = load ptr, ptr %149, align 8
  %179 = load ptr, ptr %178, align 8
  %180 = getelementptr i8, ptr %179, i64 72
  %181 = load ptr, ptr %180, align 8
  %182 = call { i64, i64 } %181(ptr nocapture nofree nonnull readonly align 8 %178) #2
  %183 = extractvalue { i64, i64 } %182, 1
  %184 = urem i64 %177, %183
  %185 = icmp eq i64 %184, 0
  %186 = sub i64 %183, %184
  %187 = select i1 %185, i64 0, i64 %186
  %188 = getelementptr i8, ptr %148, i64 %177
  %189 = getelementptr i8, ptr %188, i64 %187
  %190 = getelementptr i8, ptr %179, i64 64
  %191 = load ptr, ptr %190, align 8
  call void %191({ ptr, i160 } %57, ptr nocapture nofree nonnull readonly align 8 %178, ptr nocapture nofree writeonly %189) #8
  %192 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %193 = getelementptr inbounds i8, ptr %148, i64 16
  store i32 %59, ptr %193, align 8
  store ptr @Entry, ptr %67, align 8
  %194 = ptrtoint ptr %148 to i64
  store i64 %194, ptr %69, align 4
  %195 = getelementptr i8, ptr %67, i64 24
  store i32 10, ptr %195, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1327

196:                                              ; preds = %104, %73, %50
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %197 = add i32 %59, 2127912214
  %198 = shl i32 %59, 12
  %199 = add i32 %197, %198
  %200 = ashr i32 %199, 19
  %201 = xor i32 %199, %200
  %202 = xor i32 %201, -949894596
  %203 = add i32 %202, 374761393
  %204 = shl i32 %202, 5
  %205 = add i32 %203, %204
  %206 = add i32 %205, -744332180
  %207 = shl i32 %205, 9
  %208 = xor i32 %206, %207
  %209 = add i32 %208, -42973499
  %210 = shl i32 %208, 3
  %211 = add i32 %209, %210
  %212 = ashr i32 %211, 16
  %213 = xor i32 %211, %212
  %214 = xor i32 %213, -1252372727
  %215 = load i32, ptr %35, align 8
  %216 = add i32 %215, -1
  %217 = and i32 %216, %214
  %218 = load ptr, ptr %39, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %220 = sext i32 %217 to i64
  %221 = shl nsw i64 %220, 5
  %222 = getelementptr i8, ptr %218, i64 %221
  %223 = load ptr, ptr %222, align 8
  %224 = getelementptr i8, ptr %222, i64 8
  %225 = icmp ne ptr %223, @nil_typ
  %226 = icmp ne ptr %223, null
  %227 = and i1 %225, %226
  br i1 %227, label %228, label %351

228:                                              ; preds = %196
  %229 = load i64, ptr %224, align 4
  %230 = getelementptr i8, ptr %222, i64 16
  %231 = load i64, ptr %230, align 4
  %232 = inttoptr i64 %229 to ptr
  %233 = inttoptr i64 %231 to ptr
  %234 = getelementptr i8, ptr %223, i64 8
  %235 = getelementptr i8, ptr %223, i64 16
  %236 = getelementptr i8, ptr %223, i64 40
  %237 = load i64, ptr %234, align 4, !noalias !131
  %238 = load i64, ptr %235, align 4, !noalias !131
  %239 = load ptr, ptr %236, align 8, !noalias !131
  %240 = mul i64 %237, 4015701072841558310
  %241 = lshr i64 %240, 32
  %242 = xor i64 %241, %240
  %243 = and i64 %242, %238
  %244 = getelementptr i32, ptr %239, i64 %243
  %245 = load i32, ptr %244, align 4, !noalias !131
  %246 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %223, 0
  %247 = insertvalue { ptr, ptr, ptr, i32 } %246, ptr %232, 1
  %248 = insertvalue { ptr, ptr, ptr, i32 } %247, ptr %233, 2
  %249 = insertvalue { ptr, ptr, ptr, i32 } %248, i32 %245, 3
  %250 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %251 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %223) #43
  %252 = sext i32 %245 to i64
  %253 = getelementptr ptr, ptr %223, i64 %252
  %254 = getelementptr i8, ptr %253, i64 64
  %255 = load ptr, ptr %254, align 8
  %256 = call align 4 ptr %255({ ptr, ptr, ptr, i32 } %249, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %257 = call i32 %256({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull align 8 %2) #28
  %258 = icmp eq i32 %257, %59
  br i1 %258, label %259, label %351

259:                                              ; preds = %228
  %260 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %261 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %223)
  %262 = getelementptr i8, ptr %253, i64 48
  %263 = load ptr, ptr %262, align 8
  %264 = call align 4 ptr %263({ ptr, ptr, ptr, i32 } %249, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %265 = call { ptr, i160 } %264({ ptr, ptr, ptr, i32 } %249, { ptr, ptr, ptr, i32 } %249, ptr nonnull align 8 %2) #28
  %266 = load ptr, ptr %34, align 8
  %267 = call i1 %266({ ptr, i160 } %265, { ptr, i160 } %55) #28
  br i1 %267, label %268, label %351

268:                                              ; preds = %259
  %269 = load ptr, ptr %21, align 8
  %270 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %271 = load ptr, ptr %22, align 8
  %272 = load ptr, ptr %269, align 8, !alias.scope !134
  %273 = getelementptr i8, ptr %272, i64 72
  %274 = load ptr, ptr %273, align 8, !alias.scope !134
  %275 = call { i64, i64 } %274(ptr nocapture nofree nonnull readonly align 8 %269) #2, !alias.scope !134
  %276 = extractvalue { i64, i64 } %275, 0
  %277 = extractvalue { i64, i64 } %275, 1
  %278 = urem i64 20, %277
  %279 = icmp eq i64 %278, 0
  %280 = sub i64 %277, %278
  %281 = select i1 %279, i64 0, i64 %280
  %282 = add i64 %276, 20
  %283 = add i64 %282, %281
  %284 = load ptr, ptr %271, align 8, !alias.scope !134
  %285 = getelementptr i8, ptr %284, i64 72
  %286 = load ptr, ptr %285, align 8, !alias.scope !134
  %287 = call { i64, i64 } %286(ptr nocapture nofree nonnull readonly align 8 %271) #2, !alias.scope !134
  %288 = extractvalue { i64, i64 } %287, 0
  %289 = extractvalue { i64, i64 } %287, 1
  %290 = call i64 @llvm.umax.i64(i64 %277, i64 %289) #44
  %291 = call i64 @llvm.umax.i64(i64 %290, i64 noundef 8) #44, !range !18
  %292 = urem i64 %283, %289
  %293 = icmp eq i64 %292, 0
  %294 = sub i64 %289, %292
  %295 = select i1 %293, i64 0, i64 %294
  %296 = add i64 %288, %283
  %297 = add i64 %296, %295
  %298 = urem i64 %297, %291
  %299 = icmp eq i64 %298, 0
  %300 = sub i64 %291, %298
  %301 = select i1 %299, i64 0, i64 %300
  %302 = add i64 %301, %297
  %303 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %302, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %269, ptr %303, align 8
  %304 = getelementptr inbounds i8, ptr %303, i64 8
  store ptr %271, ptr %304, align 8
  %305 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %303)
  %306 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %307 = load ptr, ptr %269, align 8
  %308 = getelementptr i8, ptr %307, i64 72
  %309 = load ptr, ptr %308, align 8
  %310 = call { i64, i64 } %309(ptr nocapture nofree nonnull readonly align 8 %269) #2
  %311 = extractvalue { i64, i64 } %310, 1
  %312 = urem i64 20, %311
  %313 = icmp eq i64 %312, 0
  %314 = sub i64 %311, %312
  %315 = add i64 %314, 20
  %316 = select i1 %313, i64 20, i64 %315
  %317 = getelementptr i8, ptr %303, i64 %316
  %318 = getelementptr i8, ptr %307, i64 64
  %319 = load ptr, ptr %318, align 8
  call void %319({ ptr, i160 } %55, ptr nocapture nofree nonnull readonly align 8 %269, ptr nocapture nofree writeonly %317) #8
  %320 = load ptr, ptr %303, align 8
  %321 = load ptr, ptr %320, align 8
  %322 = getelementptr i8, ptr %321, i64 72
  %323 = load ptr, ptr %322, align 8
  %324 = call { i64, i64 } %323(ptr nocapture nofree nonnull readonly align 8 %320) #2
  %325 = extractvalue { i64, i64 } %324, 0
  %326 = extractvalue { i64, i64 } %324, 1
  %327 = urem i64 20, %326
  %328 = icmp eq i64 %327, 0
  %329 = sub i64 %326, %327
  %330 = select i1 %328, i64 0, i64 %329
  %331 = add i64 %325, 20
  %332 = add i64 %331, %330
  %333 = load ptr, ptr %304, align 8
  %334 = load ptr, ptr %333, align 8
  %335 = getelementptr i8, ptr %334, i64 72
  %336 = load ptr, ptr %335, align 8
  %337 = call { i64, i64 } %336(ptr nocapture nofree nonnull readonly align 8 %333) #2
  %338 = extractvalue { i64, i64 } %337, 1
  %339 = urem i64 %332, %338
  %340 = icmp eq i64 %339, 0
  %341 = sub i64 %338, %339
  %342 = select i1 %340, i64 0, i64 %341
  %343 = getelementptr i8, ptr %303, i64 %332
  %344 = getelementptr i8, ptr %343, i64 %342
  %345 = getelementptr i8, ptr %334, i64 64
  %346 = load ptr, ptr %345, align 8
  call void %346({ ptr, i160 } %57, ptr nocapture nofree nonnull readonly align 8 %333, ptr nocapture nofree writeonly %344) #8
  %347 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %348 = getelementptr inbounds i8, ptr %303, i64 16
  store i32 %59, ptr %348, align 8
  store ptr @Entry, ptr %222, align 8
  %349 = ptrtoint ptr %303 to i64
  store i64 %349, ptr %224, align 4
  %350 = getelementptr i8, ptr %222, i64 24
  store i32 10, ptr %350, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1327

351:                                              ; preds = %259, %228, %196
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %352 = load i32, ptr %46, align 4
  %353 = load i32, ptr %35, align 8
  %354 = icmp slt i32 %352, %353
  br i1 %354, label %441, label %355

355:                                              ; preds = %351
  %356 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %357 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %358 = load ptr, ptr %37, align 8
  %359 = load ptr, ptr %39, align 8
  %360 = shl i32 %353, 1
  %361 = call i32 @llvm.smax.i32(i32 %360, i32 noundef 16) #43
  store i32 %361, ptr %35, align 8
  %362 = zext nneg i32 %361 to i64
  %363 = shl nuw nsw i64 %362, 5
  %364 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %363, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %364, ptr %37, align 8
  %365 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %363, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %365, ptr %39, align 8
  store i32 0, ptr %46, align 4
  %366 = icmp sgt i32 %353, 0
  br i1 %366, label %367, label %441

367:                                              ; preds = %355
  %368 = zext nneg i32 %353 to i64
  br label %369

369:                                              ; preds = %402, %367
  %370 = phi i64 [ 0, %367 ], [ %403, %402 ]
  %371 = shl nuw nsw i64 %370, 5
  %372 = getelementptr i8, ptr %358, i64 %371
  %373 = load ptr, ptr %372, align 8
  %374 = icmp ne ptr %373, @nil_typ
  %375 = icmp ne ptr %373, null
  %376 = and i1 %374, %375
  br i1 %376, label %377, label %402

377:                                              ; preds = %369
  %378 = getelementptr i8, ptr %372, i64 8
  %379 = load i64, ptr %378, align 4
  %380 = getelementptr i8, ptr %372, i64 16
  %381 = load i64, ptr %380, align 4
  %382 = inttoptr i64 %379 to ptr
  %383 = inttoptr i64 %381 to ptr
  %384 = getelementptr i8, ptr %373, i64 8
  %385 = getelementptr i8, ptr %373, i64 16
  %386 = getelementptr i8, ptr %373, i64 40
  %387 = load i64, ptr %384, align 4, !noalias !25
  %388 = load i64, ptr %385, align 4, !noalias !25
  %389 = load ptr, ptr %386, align 8, !noalias !25
  %390 = mul i64 %387, 4015701072841558310
  %391 = lshr i64 %390, 32
  %392 = xor i64 %391, %390
  %393 = and i64 %392, %388
  %394 = getelementptr i32, ptr %389, i64 %393
  %395 = load i32, ptr %394, align 4, !noalias !137
  %396 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %373, 0
  %397 = insertvalue { ptr, ptr, ptr, i32 } %396, ptr %382, 1
  %398 = insertvalue { ptr, ptr, ptr, i32 } %397, ptr %383, 2
  %399 = insertvalue { ptr, ptr, ptr, i32 } %398, i32 %395, 3
  %400 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %401 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %399) #28
  br label %402

402:                                              ; preds = %377, %369
  %403 = add nuw nsw i64 %370, 1
  %404 = icmp eq i64 %403, %368
  br i1 %404, label %405, label %369

405:                                              ; preds = %438, %402
  %406 = phi i64 [ %439, %438 ], [ 0, %402 ]
  %407 = shl nuw nsw i64 %406, 5
  %408 = getelementptr i8, ptr %359, i64 %407
  %409 = load ptr, ptr %408, align 8
  %410 = icmp ne ptr %409, @nil_typ
  %411 = icmp ne ptr %409, null
  %412 = and i1 %410, %411
  br i1 %412, label %413, label %438

413:                                              ; preds = %405
  %414 = getelementptr i8, ptr %408, i64 8
  %415 = load i64, ptr %414, align 4
  %416 = getelementptr i8, ptr %408, i64 16
  %417 = load i64, ptr %416, align 4
  %418 = inttoptr i64 %415 to ptr
  %419 = inttoptr i64 %417 to ptr
  %420 = getelementptr i8, ptr %409, i64 8
  %421 = getelementptr i8, ptr %409, i64 16
  %422 = getelementptr i8, ptr %409, i64 40
  %423 = load i64, ptr %420, align 4, !noalias !25
  %424 = load i64, ptr %421, align 4, !noalias !25
  %425 = load ptr, ptr %422, align 8, !noalias !25
  %426 = mul i64 %423, 4015701072841558310
  %427 = lshr i64 %426, 32
  %428 = xor i64 %427, %426
  %429 = and i64 %428, %424
  %430 = getelementptr i32, ptr %425, i64 %429
  %431 = load i32, ptr %430, align 4, !noalias !140
  %432 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %409, 0
  %433 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr %418, 1
  %434 = insertvalue { ptr, ptr, ptr, i32 } %433, ptr %419, 2
  %435 = insertvalue { ptr, ptr, ptr, i32 } %434, i32 %431, 3
  %436 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %437 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %435) #28
  br label %438

438:                                              ; preds = %413, %405
  %439 = add nuw nsw i64 %406, 1
  %440 = icmp eq i64 %439, %368
  br i1 %440, label %441, label %405

441:                                              ; preds = %438, %355, %351
  %442 = load ptr, ptr %21, align 8
  %443 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %444 = load ptr, ptr %22, align 8
  %445 = load ptr, ptr %442, align 8
  %446 = getelementptr i8, ptr %445, i64 72
  %447 = load ptr, ptr %446, align 8
  %448 = call { i64, i64 } %447(ptr nocapture nofree nonnull readonly align 8 %442) #2
  %449 = extractvalue { i64, i64 } %448, 0
  %450 = extractvalue { i64, i64 } %448, 1
  %451 = urem i64 20, %450
  %452 = icmp eq i64 %451, 0
  %453 = sub i64 %450, %451
  %454 = select i1 %452, i64 0, i64 %453
  %455 = add i64 %449, 20
  %456 = add i64 %455, %454
  %457 = load ptr, ptr %444, align 8
  %458 = getelementptr i8, ptr %457, i64 72
  %459 = load ptr, ptr %458, align 8
  %460 = call { i64, i64 } %459(ptr nocapture nofree nonnull readonly align 8 %444) #2
  %461 = extractvalue { i64, i64 } %460, 0
  %462 = extractvalue { i64, i64 } %460, 1
  %463 = call i64 @llvm.umax.i64(i64 %450, i64 %462) #44
  %464 = call i64 @llvm.umax.i64(i64 %463, i64 noundef 8) #44, !range !18
  %465 = urem i64 %456, %462
  %466 = icmp eq i64 %465, 0
  %467 = sub i64 %462, %465
  %468 = select i1 %466, i64 0, i64 %467
  %469 = add i64 %461, %456
  %470 = add i64 %469, %468
  %471 = urem i64 %470, %464
  %472 = icmp eq i64 %471, 0
  %473 = sub i64 %464, %471
  %474 = select i1 %472, i64 0, i64 %473
  %475 = add i64 %474, %470
  %476 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %475, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %442, ptr %476, align 8
  %477 = getelementptr inbounds i8, ptr %476, i64 8
  store ptr %444, ptr %477, align 8
  %478 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %476)
  %479 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %480 = load ptr, ptr %442, align 8
  %481 = getelementptr i8, ptr %480, i64 72
  %482 = load ptr, ptr %481, align 8
  %483 = call { i64, i64 } %482(ptr nocapture nofree nonnull readonly align 8 %442) #2
  %484 = extractvalue { i64, i64 } %483, 1
  %485 = urem i64 20, %484
  %486 = icmp eq i64 %485, 0
  %487 = sub i64 %484, %485
  %488 = add i64 %487, 20
  %489 = select i1 %486, i64 20, i64 %488
  %490 = getelementptr i8, ptr %476, i64 %489
  %491 = getelementptr i8, ptr %480, i64 64
  %492 = load ptr, ptr %491, align 8
  call void %492({ ptr, i160 } %55, ptr nocapture nofree nonnull readonly align 8 %442, ptr nocapture nofree writeonly %490) #8
  %493 = load ptr, ptr %476, align 8
  %494 = load ptr, ptr %493, align 8
  %495 = getelementptr i8, ptr %494, i64 72
  %496 = load ptr, ptr %495, align 8
  %497 = call { i64, i64 } %496(ptr nocapture nofree nonnull readonly align 8 %493) #2
  %498 = extractvalue { i64, i64 } %497, 0
  %499 = extractvalue { i64, i64 } %497, 1
  %500 = urem i64 20, %499
  %501 = icmp eq i64 %500, 0
  %502 = sub i64 %499, %500
  %503 = select i1 %501, i64 0, i64 %502
  %504 = add i64 %498, 20
  %505 = add i64 %504, %503
  %506 = load ptr, ptr %477, align 8
  %507 = load ptr, ptr %506, align 8
  %508 = getelementptr i8, ptr %507, i64 72
  %509 = load ptr, ptr %508, align 8
  %510 = call { i64, i64 } %509(ptr nocapture nofree nonnull readonly align 8 %506) #2
  %511 = extractvalue { i64, i64 } %510, 1
  %512 = urem i64 %505, %511
  %513 = icmp eq i64 %512, 0
  %514 = sub i64 %511, %512
  %515 = select i1 %513, i64 0, i64 %514
  %516 = getelementptr i8, ptr %476, i64 %505
  %517 = getelementptr i8, ptr %516, i64 %515
  %518 = getelementptr i8, ptr %507, i64 64
  %519 = load ptr, ptr %518, align 8
  call void %519({ ptr, i160 } %57, ptr nocapture nofree nonnull readonly align 8 %506, ptr nocapture nofree writeonly %517) #8
  %520 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %521 = getelementptr inbounds i8, ptr %476, i64 16
  store i32 %59, ptr %521, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %522 = ptrtoint ptr %476 to i64
  %523 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %524 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %525 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %526

526:                                              ; preds = %605, %441
  %527 = phi i64 [ undef, %441 ], [ %607, %605 ]
  %528 = phi i64 [ %522, %441 ], [ %606, %605 ]
  %529 = phi i32 [ 0, %441 ], [ %542, %605 ]
  %530 = phi i1 [ true, %441 ], [ %623, %605 ]
  %531 = phi ptr [ @Entry, %441 ], [ %608, %605 ]
  %532 = phi ptr [ %476, %441 ], [ %609, %605 ]
  %533 = phi ptr [ undef, %441 ], [ %610, %605 ]
  %534 = phi i32 [ 10, %441 ], [ %622, %605 ]
  %535 = sext i32 %534 to i64
  %536 = getelementptr ptr, ptr %531, i64 %535
  %537 = getelementptr i8, ptr %536, i64 64
  %538 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %531, 0
  %539 = insertvalue { ptr, ptr, ptr, i32 } %538, ptr %532, 1
  %540 = insertvalue { ptr, ptr, ptr, i32 } %539, ptr %533, 2
  %541 = insertvalue { ptr, ptr, ptr, i32 } %540, i32 %534, 3
  %542 = add nuw nsw i32 %529, 1
  %543 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %531)
  %544 = load ptr, ptr %537, align 8
  %545 = call align 4 ptr %544({ ptr, ptr, ptr, i32 } %541, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %546 = call i32 %545({ ptr, ptr, ptr, i32 } %541, { ptr, ptr, ptr, i32 } %541, ptr nonnull align 8 %2) #28
  br i1 %530, label %547, label %567

547:                                              ; preds = %526
  %548 = load i32, ptr %35, align 8
  %549 = add i32 %548, -1
  %550 = and i32 %549, %546
  %551 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %552 = load ptr, ptr %37, align 8
  %553 = sext i32 %550 to i64
  %554 = shl nsw i64 %553, 5
  %555 = getelementptr i8, ptr %552, i64 %554
  %556 = load ptr, ptr %555, align 8
  %557 = getelementptr i8, ptr %555, i64 8
  %558 = load i160, ptr %557, align 4
  store ptr %531, ptr %555, align 8
  store i64 %528, ptr %557, align 4
  %559 = getelementptr i8, ptr %555, i64 16
  store i64 %527, ptr %559, align 4
  %560 = getelementptr i8, ptr %555, i64 24
  store i32 %534, ptr %560, align 4
  %561 = icmp ne ptr %556, @nil_typ
  %562 = icmp ne ptr %556, null
  %563 = and i1 %561, %562
  %564 = trunc i160 %558 to i64
  %565 = lshr i160 %558, 64
  %566 = trunc i160 %565 to i64
  br i1 %563, label %605, label %627

567:                                              ; preds = %526
  %568 = add i32 %546, 2127912214
  %569 = shl i32 %546, 12
  %570 = add i32 %568, %569
  %571 = ashr i32 %570, 19
  %572 = xor i32 %570, %571
  %573 = xor i32 %572, -949894596
  %574 = add i32 %573, 374761393
  %575 = shl i32 %573, 5
  %576 = add i32 %574, %575
  %577 = add i32 %576, -744332180
  %578 = shl i32 %576, 9
  %579 = xor i32 %577, %578
  %580 = add i32 %579, -42973499
  %581 = shl i32 %579, 3
  %582 = add i32 %580, %581
  %583 = ashr i32 %582, 16
  %584 = xor i32 %582, %583
  %585 = xor i32 %584, -1252372727
  %586 = load i32, ptr %35, align 8
  %587 = add i32 %586, -1
  %588 = and i32 %587, %585
  %589 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %590 = load ptr, ptr %39, align 8
  %591 = sext i32 %588 to i64
  %592 = shl nsw i64 %591, 5
  %593 = getelementptr i8, ptr %590, i64 %592
  %594 = load ptr, ptr %593, align 8
  %595 = getelementptr i8, ptr %593, i64 8
  %596 = load i160, ptr %595, align 4
  store ptr %531, ptr %593, align 8
  store i64 %528, ptr %595, align 4
  %597 = getelementptr i8, ptr %593, i64 16
  store i64 %527, ptr %597, align 4
  %598 = getelementptr i8, ptr %593, i64 24
  store i32 %534, ptr %598, align 4
  %599 = icmp ne ptr %594, @nil_typ
  %600 = icmp ne ptr %594, null
  %601 = and i1 %599, %600
  %602 = trunc i160 %596 to i64
  %603 = lshr i160 %596, 64
  %604 = trunc i160 %603 to i64
  br i1 %601, label %605, label %627

605:                                              ; preds = %567, %547
  %606 = phi i64 [ %564, %547 ], [ %602, %567 ]
  %607 = phi i64 [ %566, %547 ], [ %604, %567 ]
  %608 = phi ptr [ %556, %547 ], [ %594, %567 ]
  %609 = inttoptr i64 %606 to ptr
  %610 = inttoptr i64 %607 to ptr
  %611 = getelementptr i8, ptr %608, i64 8
  %612 = getelementptr i8, ptr %608, i64 16
  %613 = getelementptr i8, ptr %608, i64 40
  %614 = load i64, ptr %611, align 4
  %615 = load i64, ptr %612, align 4
  %616 = load ptr, ptr %613, align 8
  %617 = mul i64 %614, 4015701072841558310
  %618 = lshr i64 %617, 32
  %619 = xor i64 %618, %617
  %620 = and i64 %619, %615
  %621 = getelementptr i32, ptr %616, i64 %620
  %622 = load i32, ptr %621, align 4
  %623 = xor i1 %530, true
  %624 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %625 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %626 = icmp eq i32 %542, 100
  br i1 %626, label %631, label %526

627:                                              ; preds = %567, %547
  %628 = load i32, ptr %46, align 4
  %629 = add i32 %628, 1
  %630 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %629, ptr %46, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1327

631:                                              ; preds = %605
  %632 = getelementptr i8, ptr %608, i64 8
  %633 = getelementptr i8, ptr %608, i64 16
  %634 = getelementptr i8, ptr %608, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %635 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %636 = load ptr, ptr %37, align 8
  %637 = load ptr, ptr %39, align 8
  %638 = load i32, ptr %35, align 8
  %639 = shl i32 %638, 1
  %640 = call i32 @llvm.smax.i32(i32 %639, i32 noundef 16) #43
  store i32 %640, ptr %35, align 8
  %641 = zext nneg i32 %640 to i64
  %642 = shl nuw nsw i64 %641, 5
  %643 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %642, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %643, ptr %37, align 8
  %644 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %642, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %644, ptr %39, align 8
  store i32 0, ptr %46, align 4
  %645 = icmp sgt i32 %638, 0
  br i1 %645, label %646, label %920

646:                                              ; preds = %631
  %647 = zext nneg i32 %638 to i64
  br label %648

648:                                              ; preds = %781, %646
  %649 = phi i64 [ 0, %646 ], [ %782, %781 ]
  %650 = shl nuw nsw i64 %649, 5
  %651 = getelementptr i8, ptr %636, i64 %650
  %652 = load ptr, ptr %651, align 8
  %653 = icmp ne ptr %652, @nil_typ
  %654 = icmp ne ptr %652, null
  %655 = and i1 %653, %654
  br i1 %655, label %656, label %781

656:                                              ; preds = %648
  %657 = getelementptr i8, ptr %651, i64 8
  %658 = load i64, ptr %657, align 4
  %659 = getelementptr i8, ptr %651, i64 16
  %660 = load i64, ptr %659, align 4
  %661 = getelementptr i8, ptr %652, i64 8
  %662 = getelementptr i8, ptr %652, i64 16
  %663 = getelementptr i8, ptr %652, i64 40
  %664 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %665 = load i64, ptr %661, align 4, !noalias !25
  %666 = load i64, ptr %662, align 4, !noalias !25
  %667 = load ptr, ptr %663, align 8, !noalias !25
  %668 = mul i64 %665, 4015701072841558310
  %669 = lshr i64 %668, 32
  %670 = xor i64 %669, %668
  %671 = and i64 %670, %666
  %672 = getelementptr i32, ptr %667, i64 %671
  %673 = load i32, ptr %672, align 4, !noalias !143
  %674 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %675 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %676 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %677

677:                                              ; preds = %756, %656
  %678 = phi i64 [ %660, %656 ], [ %758, %756 ]
  %679 = phi i64 [ %658, %656 ], [ %757, %756 ]
  %680 = phi i32 [ 0, %656 ], [ %693, %756 ]
  %681 = phi i1 [ true, %656 ], [ %772, %756 ]
  %682 = phi ptr [ %652, %656 ], [ %759, %756 ]
  %683 = phi i32 [ %673, %656 ], [ %771, %756 ]
  %684 = inttoptr i64 %678 to ptr
  %685 = inttoptr i64 %679 to ptr
  %686 = sext i32 %683 to i64
  %687 = getelementptr ptr, ptr %682, i64 %686
  %688 = getelementptr i8, ptr %687, i64 64
  %689 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %682, 0
  %690 = insertvalue { ptr, ptr, ptr, i32 } %689, ptr %685, 1
  %691 = insertvalue { ptr, ptr, ptr, i32 } %690, ptr %684, 2
  %692 = insertvalue { ptr, ptr, ptr, i32 } %691, i32 %683, 3
  %693 = add nuw nsw i32 %680, 1
  %694 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %682)
  %695 = load ptr, ptr %688, align 8
  %696 = call align 4 ptr %695({ ptr, ptr, ptr, i32 } %692, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %697 = call i32 %696({ ptr, ptr, ptr, i32 } %692, { ptr, ptr, ptr, i32 } %692, ptr nonnull align 8 %2) #28
  br i1 %681, label %698, label %718

698:                                              ; preds = %677
  %699 = load i32, ptr %35, align 8
  %700 = add i32 %699, -1
  %701 = and i32 %700, %697
  %702 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %703 = load ptr, ptr %37, align 8
  %704 = sext i32 %701 to i64
  %705 = shl nsw i64 %704, 5
  %706 = getelementptr i8, ptr %703, i64 %705
  %707 = load ptr, ptr %706, align 8
  %708 = getelementptr i8, ptr %706, i64 8
  %709 = load i160, ptr %708, align 4
  store ptr %682, ptr %706, align 8
  store i64 %679, ptr %708, align 4
  %710 = getelementptr i8, ptr %706, i64 16
  store i64 %678, ptr %710, align 4
  %711 = getelementptr i8, ptr %706, i64 24
  store i32 %683, ptr %711, align 4
  %712 = icmp ne ptr %707, @nil_typ
  %713 = icmp ne ptr %707, null
  %714 = and i1 %712, %713
  %715 = trunc i160 %709 to i64
  %716 = lshr i160 %709, 64
  %717 = trunc i160 %716 to i64
  br i1 %714, label %756, label %776

718:                                              ; preds = %677
  %719 = add i32 %697, 2127912214
  %720 = shl i32 %697, 12
  %721 = add i32 %719, %720
  %722 = ashr i32 %721, 19
  %723 = xor i32 %721, %722
  %724 = xor i32 %723, -949894596
  %725 = add i32 %724, 374761393
  %726 = shl i32 %724, 5
  %727 = add i32 %725, %726
  %728 = add i32 %727, -744332180
  %729 = shl i32 %727, 9
  %730 = xor i32 %728, %729
  %731 = add i32 %730, -42973499
  %732 = shl i32 %730, 3
  %733 = add i32 %731, %732
  %734 = ashr i32 %733, 16
  %735 = xor i32 %733, %734
  %736 = xor i32 %735, -1252372727
  %737 = load i32, ptr %35, align 8
  %738 = add i32 %737, -1
  %739 = and i32 %738, %736
  %740 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %741 = load ptr, ptr %39, align 8
  %742 = sext i32 %739 to i64
  %743 = shl nsw i64 %742, 5
  %744 = getelementptr i8, ptr %741, i64 %743
  %745 = load ptr, ptr %744, align 8
  %746 = getelementptr i8, ptr %744, i64 8
  %747 = load i160, ptr %746, align 4
  store ptr %682, ptr %744, align 8
  store i64 %679, ptr %746, align 4
  %748 = getelementptr i8, ptr %744, i64 16
  store i64 %678, ptr %748, align 4
  %749 = getelementptr i8, ptr %744, i64 24
  store i32 %683, ptr %749, align 4
  %750 = icmp ne ptr %745, @nil_typ
  %751 = icmp ne ptr %745, null
  %752 = and i1 %750, %751
  %753 = trunc i160 %747 to i64
  %754 = lshr i160 %747, 64
  %755 = trunc i160 %754 to i64
  br i1 %752, label %756, label %776

756:                                              ; preds = %718, %698
  %757 = phi i64 [ %715, %698 ], [ %753, %718 ]
  %758 = phi i64 [ %717, %698 ], [ %755, %718 ]
  %759 = phi ptr [ %707, %698 ], [ %745, %718 ]
  %760 = getelementptr i8, ptr %759, i64 8
  %761 = getelementptr i8, ptr %759, i64 16
  %762 = getelementptr i8, ptr %759, i64 40
  %763 = load i64, ptr %760, align 4
  %764 = load i64, ptr %761, align 4
  %765 = load ptr, ptr %762, align 8
  %766 = mul i64 %763, 4015701072841558310
  %767 = lshr i64 %766, 32
  %768 = xor i64 %767, %766
  %769 = and i64 %768, %764
  %770 = getelementptr i32, ptr %765, i64 %769
  %771 = load i32, ptr %770, align 4
  %772 = xor i1 %681, true
  %773 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %774 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %775 = icmp eq i32 %693, 100
  br i1 %775, label %780, label %677

776:                                              ; preds = %718, %698
  %777 = load i32, ptr %46, align 4
  %778 = add i32 %777, 1
  %779 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %778, ptr %46, align 4
  br label %780

780:                                              ; preds = %776, %756
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %781

781:                                              ; preds = %780, %648
  %782 = add nuw nsw i64 %649, 1
  %783 = icmp eq i64 %782, %647
  br i1 %783, label %784, label %648

784:                                              ; preds = %917, %781
  %785 = phi i64 [ %918, %917 ], [ 0, %781 ]
  %786 = shl nuw nsw i64 %785, 5
  %787 = getelementptr i8, ptr %637, i64 %786
  %788 = load ptr, ptr %787, align 8
  %789 = icmp ne ptr %788, @nil_typ
  %790 = icmp ne ptr %788, null
  %791 = and i1 %789, %790
  br i1 %791, label %792, label %917

792:                                              ; preds = %784
  %793 = getelementptr i8, ptr %787, i64 8
  %794 = load i64, ptr %793, align 4
  %795 = getelementptr i8, ptr %787, i64 16
  %796 = load i64, ptr %795, align 4
  %797 = getelementptr i8, ptr %788, i64 8
  %798 = getelementptr i8, ptr %788, i64 16
  %799 = getelementptr i8, ptr %788, i64 40
  %800 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %801 = load i64, ptr %797, align 4, !noalias !25
  %802 = load i64, ptr %798, align 4, !noalias !25
  %803 = load ptr, ptr %799, align 8, !noalias !25
  %804 = mul i64 %801, 4015701072841558310
  %805 = lshr i64 %804, 32
  %806 = xor i64 %805, %804
  %807 = and i64 %806, %802
  %808 = getelementptr i32, ptr %803, i64 %807
  %809 = load i32, ptr %808, align 4, !noalias !146
  %810 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %811 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %812 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %813

813:                                              ; preds = %892, %792
  %814 = phi i64 [ %796, %792 ], [ %894, %892 ]
  %815 = phi i64 [ %794, %792 ], [ %893, %892 ]
  %816 = phi i32 [ 0, %792 ], [ %829, %892 ]
  %817 = phi i1 [ true, %792 ], [ %908, %892 ]
  %818 = phi ptr [ %788, %792 ], [ %895, %892 ]
  %819 = phi i32 [ %809, %792 ], [ %907, %892 ]
  %820 = inttoptr i64 %814 to ptr
  %821 = inttoptr i64 %815 to ptr
  %822 = sext i32 %819 to i64
  %823 = getelementptr ptr, ptr %818, i64 %822
  %824 = getelementptr i8, ptr %823, i64 64
  %825 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %818, 0
  %826 = insertvalue { ptr, ptr, ptr, i32 } %825, ptr %821, 1
  %827 = insertvalue { ptr, ptr, ptr, i32 } %826, ptr %820, 2
  %828 = insertvalue { ptr, ptr, ptr, i32 } %827, i32 %819, 3
  %829 = add nuw nsw i32 %816, 1
  %830 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %818)
  %831 = load ptr, ptr %824, align 8
  %832 = call align 4 ptr %831({ ptr, ptr, ptr, i32 } %828, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %833 = call i32 %832({ ptr, ptr, ptr, i32 } %828, { ptr, ptr, ptr, i32 } %828, ptr nonnull align 8 %2) #28
  br i1 %817, label %834, label %854

834:                                              ; preds = %813
  %835 = load i32, ptr %35, align 8
  %836 = add i32 %835, -1
  %837 = and i32 %836, %833
  %838 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %839 = load ptr, ptr %37, align 8
  %840 = sext i32 %837 to i64
  %841 = shl nsw i64 %840, 5
  %842 = getelementptr i8, ptr %839, i64 %841
  %843 = load ptr, ptr %842, align 8
  %844 = getelementptr i8, ptr %842, i64 8
  %845 = load i160, ptr %844, align 4
  store ptr %818, ptr %842, align 8
  store i64 %815, ptr %844, align 4
  %846 = getelementptr i8, ptr %842, i64 16
  store i64 %814, ptr %846, align 4
  %847 = getelementptr i8, ptr %842, i64 24
  store i32 %819, ptr %847, align 4
  %848 = icmp ne ptr %843, @nil_typ
  %849 = icmp ne ptr %843, null
  %850 = and i1 %848, %849
  %851 = trunc i160 %845 to i64
  %852 = lshr i160 %845, 64
  %853 = trunc i160 %852 to i64
  br i1 %850, label %892, label %912

854:                                              ; preds = %813
  %855 = add i32 %833, 2127912214
  %856 = shl i32 %833, 12
  %857 = add i32 %855, %856
  %858 = ashr i32 %857, 19
  %859 = xor i32 %857, %858
  %860 = xor i32 %859, -949894596
  %861 = add i32 %860, 374761393
  %862 = shl i32 %860, 5
  %863 = add i32 %861, %862
  %864 = add i32 %863, -744332180
  %865 = shl i32 %863, 9
  %866 = xor i32 %864, %865
  %867 = add i32 %866, -42973499
  %868 = shl i32 %866, 3
  %869 = add i32 %867, %868
  %870 = ashr i32 %869, 16
  %871 = xor i32 %869, %870
  %872 = xor i32 %871, -1252372727
  %873 = load i32, ptr %35, align 8
  %874 = add i32 %873, -1
  %875 = and i32 %874, %872
  %876 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %877 = load ptr, ptr %39, align 8
  %878 = sext i32 %875 to i64
  %879 = shl nsw i64 %878, 5
  %880 = getelementptr i8, ptr %877, i64 %879
  %881 = load ptr, ptr %880, align 8
  %882 = getelementptr i8, ptr %880, i64 8
  %883 = load i160, ptr %882, align 4
  store ptr %818, ptr %880, align 8
  store i64 %815, ptr %882, align 4
  %884 = getelementptr i8, ptr %880, i64 16
  store i64 %814, ptr %884, align 4
  %885 = getelementptr i8, ptr %880, i64 24
  store i32 %819, ptr %885, align 4
  %886 = icmp ne ptr %881, @nil_typ
  %887 = icmp ne ptr %881, null
  %888 = and i1 %886, %887
  %889 = trunc i160 %883 to i64
  %890 = lshr i160 %883, 64
  %891 = trunc i160 %890 to i64
  br i1 %888, label %892, label %912

892:                                              ; preds = %854, %834
  %893 = phi i64 [ %851, %834 ], [ %889, %854 ]
  %894 = phi i64 [ %853, %834 ], [ %891, %854 ]
  %895 = phi ptr [ %843, %834 ], [ %881, %854 ]
  %896 = getelementptr i8, ptr %895, i64 8
  %897 = getelementptr i8, ptr %895, i64 16
  %898 = getelementptr i8, ptr %895, i64 40
  %899 = load i64, ptr %896, align 4
  %900 = load i64, ptr %897, align 4
  %901 = load ptr, ptr %898, align 8
  %902 = mul i64 %899, 4015701072841558310
  %903 = lshr i64 %902, 32
  %904 = xor i64 %903, %902
  %905 = and i64 %904, %900
  %906 = getelementptr i32, ptr %901, i64 %905
  %907 = load i32, ptr %906, align 4
  %908 = xor i1 %817, true
  %909 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %910 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %911 = icmp eq i32 %829, 100
  br i1 %911, label %916, label %813

912:                                              ; preds = %854, %834
  %913 = load i32, ptr %46, align 4
  %914 = add i32 %913, 1
  %915 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %914, ptr %46, align 4
  br label %916

916:                                              ; preds = %912, %892
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %917

917:                                              ; preds = %916, %784
  %918 = add nuw nsw i64 %785, 1
  %919 = icmp eq i64 %918, %647
  br i1 %919, label %920, label %784

920:                                              ; preds = %917, %631
  %921 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %922 = load i64, ptr %632, align 4, !noalias !25
  %923 = load i64, ptr %633, align 4, !noalias !25
  %924 = load ptr, ptr %634, align 8, !noalias !25
  %925 = mul i64 %922, 4015701072841558310
  %926 = lshr i64 %925, 32
  %927 = xor i64 %926, %925
  %928 = and i64 %927, %923
  %929 = getelementptr i32, ptr %924, i64 %928
  %930 = load i32, ptr %929, align 4, !noalias !149
  %931 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %932 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %933 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %934

934:                                              ; preds = %1013, %920
  %935 = phi i64 [ %607, %920 ], [ %1015, %1013 ]
  %936 = phi i64 [ %606, %920 ], [ %1014, %1013 ]
  %937 = phi i32 [ 0, %920 ], [ %950, %1013 ]
  %938 = phi i1 [ true, %920 ], [ %1029, %1013 ]
  %939 = phi ptr [ %608, %920 ], [ %1016, %1013 ]
  %940 = phi i32 [ %930, %920 ], [ %1028, %1013 ]
  %941 = inttoptr i64 %935 to ptr
  %942 = inttoptr i64 %936 to ptr
  %943 = sext i32 %940 to i64
  %944 = getelementptr ptr, ptr %939, i64 %943
  %945 = getelementptr i8, ptr %944, i64 64
  %946 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %939, 0
  %947 = insertvalue { ptr, ptr, ptr, i32 } %946, ptr %942, 1
  %948 = insertvalue { ptr, ptr, ptr, i32 } %947, ptr %941, 2
  %949 = insertvalue { ptr, ptr, ptr, i32 } %948, i32 %940, 3
  %950 = add nuw nsw i32 %937, 1
  %951 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %939)
  %952 = load ptr, ptr %945, align 8
  %953 = call align 4 ptr %952({ ptr, ptr, ptr, i32 } %949, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %954 = call i32 %953({ ptr, ptr, ptr, i32 } %949, { ptr, ptr, ptr, i32 } %949, ptr nonnull align 8 %2) #28
  br i1 %938, label %955, label %975

955:                                              ; preds = %934
  %956 = load i32, ptr %35, align 8
  %957 = add i32 %956, -1
  %958 = and i32 %957, %954
  %959 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %960 = load ptr, ptr %37, align 8
  %961 = sext i32 %958 to i64
  %962 = shl nsw i64 %961, 5
  %963 = getelementptr i8, ptr %960, i64 %962
  %964 = load ptr, ptr %963, align 8
  %965 = getelementptr i8, ptr %963, i64 8
  %966 = load i160, ptr %965, align 4
  store ptr %939, ptr %963, align 8
  store i64 %936, ptr %965, align 4
  %967 = getelementptr i8, ptr %963, i64 16
  store i64 %935, ptr %967, align 4
  %968 = getelementptr i8, ptr %963, i64 24
  store i32 %940, ptr %968, align 4
  %969 = icmp ne ptr %964, @nil_typ
  %970 = icmp ne ptr %964, null
  %971 = and i1 %969, %970
  %972 = trunc i160 %966 to i64
  %973 = lshr i160 %966, 64
  %974 = trunc i160 %973 to i64
  br i1 %971, label %1013, label %1033

975:                                              ; preds = %934
  %976 = add i32 %954, 2127912214
  %977 = shl i32 %954, 12
  %978 = add i32 %976, %977
  %979 = ashr i32 %978, 19
  %980 = xor i32 %978, %979
  %981 = xor i32 %980, -949894596
  %982 = add i32 %981, 374761393
  %983 = shl i32 %981, 5
  %984 = add i32 %982, %983
  %985 = add i32 %984, -744332180
  %986 = shl i32 %984, 9
  %987 = xor i32 %985, %986
  %988 = add i32 %987, -42973499
  %989 = shl i32 %987, 3
  %990 = add i32 %988, %989
  %991 = ashr i32 %990, 16
  %992 = xor i32 %990, %991
  %993 = xor i32 %992, -1252372727
  %994 = load i32, ptr %35, align 8
  %995 = add i32 %994, -1
  %996 = and i32 %995, %993
  %997 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %998 = load ptr, ptr %39, align 8
  %999 = sext i32 %996 to i64
  %1000 = shl nsw i64 %999, 5
  %1001 = getelementptr i8, ptr %998, i64 %1000
  %1002 = load ptr, ptr %1001, align 8
  %1003 = getelementptr i8, ptr %1001, i64 8
  %1004 = load i160, ptr %1003, align 4
  store ptr %939, ptr %1001, align 8
  store i64 %936, ptr %1003, align 4
  %1005 = getelementptr i8, ptr %1001, i64 16
  store i64 %935, ptr %1005, align 4
  %1006 = getelementptr i8, ptr %1001, i64 24
  store i32 %940, ptr %1006, align 4
  %1007 = icmp ne ptr %1002, @nil_typ
  %1008 = icmp ne ptr %1002, null
  %1009 = and i1 %1007, %1008
  %1010 = trunc i160 %1004 to i64
  %1011 = lshr i160 %1004, 64
  %1012 = trunc i160 %1011 to i64
  br i1 %1009, label %1013, label %1033

1013:                                             ; preds = %975, %955
  %1014 = phi i64 [ %972, %955 ], [ %1010, %975 ]
  %1015 = phi i64 [ %974, %955 ], [ %1012, %975 ]
  %1016 = phi ptr [ %964, %955 ], [ %1002, %975 ]
  %1017 = getelementptr i8, ptr %1016, i64 8
  %1018 = getelementptr i8, ptr %1016, i64 16
  %1019 = getelementptr i8, ptr %1016, i64 40
  %1020 = load i64, ptr %1017, align 4
  %1021 = load i64, ptr %1018, align 4
  %1022 = load ptr, ptr %1019, align 8
  %1023 = mul i64 %1020, 4015701072841558310
  %1024 = lshr i64 %1023, 32
  %1025 = xor i64 %1024, %1023
  %1026 = and i64 %1025, %1021
  %1027 = getelementptr i32, ptr %1022, i64 %1026
  %1028 = load i32, ptr %1027, align 4
  %1029 = xor i1 %938, true
  %1030 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1031 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1032 = icmp eq i32 %950, 100
  br i1 %1032, label %1037, label %934

1033:                                             ; preds = %975, %955
  %1034 = load i32, ptr %46, align 4
  %1035 = add i32 %1034, 1
  %1036 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1035, ptr %46, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1327

1037:                                             ; preds = %1013
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1038 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1039 = load ptr, ptr %37, align 8
  %1040 = load ptr, ptr %39, align 8
  %1041 = load i32, ptr %35, align 8
  %1042 = shl i32 %1041, 1
  %1043 = call i32 @llvm.smax.i32(i32 %1042, i32 noundef 16) #43
  store i32 %1043, ptr %35, align 8
  %1044 = zext nneg i32 %1043 to i64
  %1045 = shl nuw nsw i64 %1044, 5
  %1046 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1045, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1046, ptr %37, align 8
  %1047 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1045, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1047, ptr %39, align 8
  store i32 0, ptr %46, align 4
  %1048 = icmp sgt i32 %1041, 0
  br i1 %1048, label %1051, label %1049

1049:                                             ; preds = %1037
  %1050 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1327

1051:                                             ; preds = %1037
  %1052 = zext nneg i32 %1041 to i64
  br label %1053

1053:                                             ; preds = %1186, %1051
  %1054 = phi i64 [ 0, %1051 ], [ %1187, %1186 ]
  %1055 = shl nuw nsw i64 %1054, 5
  %1056 = getelementptr i8, ptr %1039, i64 %1055
  %1057 = load ptr, ptr %1056, align 8
  %1058 = icmp ne ptr %1057, @nil_typ
  %1059 = icmp ne ptr %1057, null
  %1060 = and i1 %1058, %1059
  br i1 %1060, label %1061, label %1186

1061:                                             ; preds = %1053
  %1062 = getelementptr i8, ptr %1056, i64 8
  %1063 = load i64, ptr %1062, align 4
  %1064 = getelementptr i8, ptr %1056, i64 16
  %1065 = load i64, ptr %1064, align 4
  %1066 = getelementptr i8, ptr %1057, i64 8
  %1067 = getelementptr i8, ptr %1057, i64 16
  %1068 = getelementptr i8, ptr %1057, i64 40
  %1069 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1070 = load i64, ptr %1066, align 4, !noalias !25
  %1071 = load i64, ptr %1067, align 4, !noalias !25
  %1072 = load ptr, ptr %1068, align 8, !noalias !25
  %1073 = mul i64 %1070, 4015701072841558310
  %1074 = lshr i64 %1073, 32
  %1075 = xor i64 %1074, %1073
  %1076 = and i64 %1075, %1071
  %1077 = getelementptr i32, ptr %1072, i64 %1076
  %1078 = load i32, ptr %1077, align 4, !noalias !152
  %1079 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1080 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1081 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1082

1082:                                             ; preds = %1161, %1061
  %1083 = phi i64 [ %1065, %1061 ], [ %1163, %1161 ]
  %1084 = phi i64 [ %1063, %1061 ], [ %1162, %1161 ]
  %1085 = phi i32 [ 0, %1061 ], [ %1098, %1161 ]
  %1086 = phi i1 [ true, %1061 ], [ %1177, %1161 ]
  %1087 = phi ptr [ %1057, %1061 ], [ %1164, %1161 ]
  %1088 = phi i32 [ %1078, %1061 ], [ %1176, %1161 ]
  %1089 = inttoptr i64 %1083 to ptr
  %1090 = inttoptr i64 %1084 to ptr
  %1091 = sext i32 %1088 to i64
  %1092 = getelementptr ptr, ptr %1087, i64 %1091
  %1093 = getelementptr i8, ptr %1092, i64 64
  %1094 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1087, 0
  %1095 = insertvalue { ptr, ptr, ptr, i32 } %1094, ptr %1090, 1
  %1096 = insertvalue { ptr, ptr, ptr, i32 } %1095, ptr %1089, 2
  %1097 = insertvalue { ptr, ptr, ptr, i32 } %1096, i32 %1088, 3
  %1098 = add nuw nsw i32 %1085, 1
  %1099 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1087)
  %1100 = load ptr, ptr %1093, align 8
  %1101 = call align 4 ptr %1100({ ptr, ptr, ptr, i32 } %1097, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1102 = call i32 %1101({ ptr, ptr, ptr, i32 } %1097, { ptr, ptr, ptr, i32 } %1097, ptr nonnull align 8 %2) #28
  br i1 %1086, label %1103, label %1123

1103:                                             ; preds = %1082
  %1104 = load i32, ptr %35, align 8
  %1105 = add i32 %1104, -1
  %1106 = and i32 %1105, %1102
  %1107 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1108 = load ptr, ptr %37, align 8
  %1109 = sext i32 %1106 to i64
  %1110 = shl nsw i64 %1109, 5
  %1111 = getelementptr i8, ptr %1108, i64 %1110
  %1112 = load ptr, ptr %1111, align 8
  %1113 = getelementptr i8, ptr %1111, i64 8
  %1114 = load i160, ptr %1113, align 4
  store ptr %1087, ptr %1111, align 8
  store i64 %1084, ptr %1113, align 4
  %1115 = getelementptr i8, ptr %1111, i64 16
  store i64 %1083, ptr %1115, align 4
  %1116 = getelementptr i8, ptr %1111, i64 24
  store i32 %1088, ptr %1116, align 4
  %1117 = icmp ne ptr %1112, @nil_typ
  %1118 = icmp ne ptr %1112, null
  %1119 = and i1 %1117, %1118
  %1120 = trunc i160 %1114 to i64
  %1121 = lshr i160 %1114, 64
  %1122 = trunc i160 %1121 to i64
  br i1 %1119, label %1161, label %1181

1123:                                             ; preds = %1082
  %1124 = add i32 %1102, 2127912214
  %1125 = shl i32 %1102, 12
  %1126 = add i32 %1124, %1125
  %1127 = ashr i32 %1126, 19
  %1128 = xor i32 %1126, %1127
  %1129 = xor i32 %1128, -949894596
  %1130 = add i32 %1129, 374761393
  %1131 = shl i32 %1129, 5
  %1132 = add i32 %1130, %1131
  %1133 = add i32 %1132, -744332180
  %1134 = shl i32 %1132, 9
  %1135 = xor i32 %1133, %1134
  %1136 = add i32 %1135, -42973499
  %1137 = shl i32 %1135, 3
  %1138 = add i32 %1136, %1137
  %1139 = ashr i32 %1138, 16
  %1140 = xor i32 %1138, %1139
  %1141 = xor i32 %1140, -1252372727
  %1142 = load i32, ptr %35, align 8
  %1143 = add i32 %1142, -1
  %1144 = and i32 %1143, %1141
  %1145 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1146 = load ptr, ptr %39, align 8
  %1147 = sext i32 %1144 to i64
  %1148 = shl nsw i64 %1147, 5
  %1149 = getelementptr i8, ptr %1146, i64 %1148
  %1150 = load ptr, ptr %1149, align 8
  %1151 = getelementptr i8, ptr %1149, i64 8
  %1152 = load i160, ptr %1151, align 4
  store ptr %1087, ptr %1149, align 8
  store i64 %1084, ptr %1151, align 4
  %1153 = getelementptr i8, ptr %1149, i64 16
  store i64 %1083, ptr %1153, align 4
  %1154 = getelementptr i8, ptr %1149, i64 24
  store i32 %1088, ptr %1154, align 4
  %1155 = icmp ne ptr %1150, @nil_typ
  %1156 = icmp ne ptr %1150, null
  %1157 = and i1 %1155, %1156
  %1158 = trunc i160 %1152 to i64
  %1159 = lshr i160 %1152, 64
  %1160 = trunc i160 %1159 to i64
  br i1 %1157, label %1161, label %1181

1161:                                             ; preds = %1123, %1103
  %1162 = phi i64 [ %1120, %1103 ], [ %1158, %1123 ]
  %1163 = phi i64 [ %1122, %1103 ], [ %1160, %1123 ]
  %1164 = phi ptr [ %1112, %1103 ], [ %1150, %1123 ]
  %1165 = getelementptr i8, ptr %1164, i64 8
  %1166 = getelementptr i8, ptr %1164, i64 16
  %1167 = getelementptr i8, ptr %1164, i64 40
  %1168 = load i64, ptr %1165, align 4
  %1169 = load i64, ptr %1166, align 4
  %1170 = load ptr, ptr %1167, align 8
  %1171 = mul i64 %1168, 4015701072841558310
  %1172 = lshr i64 %1171, 32
  %1173 = xor i64 %1172, %1171
  %1174 = and i64 %1173, %1169
  %1175 = getelementptr i32, ptr %1170, i64 %1174
  %1176 = load i32, ptr %1175, align 4
  %1177 = xor i1 %1086, true
  %1178 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1179 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1180 = icmp eq i32 %1098, 100
  br i1 %1180, label %1185, label %1082

1181:                                             ; preds = %1123, %1103
  %1182 = load i32, ptr %46, align 4
  %1183 = add i32 %1182, 1
  %1184 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1183, ptr %46, align 4
  br label %1185

1185:                                             ; preds = %1181, %1161
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1186

1186:                                             ; preds = %1185, %1053
  %1187 = add nuw nsw i64 %1054, 1
  %1188 = icmp eq i64 %1187, %1052
  br i1 %1188, label %1189, label %1053

1189:                                             ; preds = %1186
  %1190 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1191

1191:                                             ; preds = %1324, %1189
  %1192 = phi i64 [ 0, %1189 ], [ %1325, %1324 ]
  %1193 = shl nuw nsw i64 %1192, 5
  %1194 = getelementptr i8, ptr %1040, i64 %1193
  %1195 = load ptr, ptr %1194, align 8
  %1196 = icmp ne ptr %1195, @nil_typ
  %1197 = icmp ne ptr %1195, null
  %1198 = and i1 %1196, %1197
  br i1 %1198, label %1199, label %1324

1199:                                             ; preds = %1191
  %1200 = getelementptr i8, ptr %1194, i64 8
  %1201 = load i64, ptr %1200, align 4
  %1202 = getelementptr i8, ptr %1194, i64 16
  %1203 = load i64, ptr %1202, align 4
  %1204 = getelementptr i8, ptr %1195, i64 8
  %1205 = getelementptr i8, ptr %1195, i64 16
  %1206 = getelementptr i8, ptr %1195, i64 40
  %1207 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1208 = load i64, ptr %1204, align 4, !noalias !25
  %1209 = load i64, ptr %1205, align 4, !noalias !25
  %1210 = load ptr, ptr %1206, align 8, !noalias !25
  %1211 = mul i64 %1208, 4015701072841558310
  %1212 = lshr i64 %1211, 32
  %1213 = xor i64 %1212, %1211
  %1214 = and i64 %1213, %1209
  %1215 = getelementptr i32, ptr %1210, i64 %1214
  %1216 = load i32, ptr %1215, align 4, !noalias !155
  %1217 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1218 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1219 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1220

1220:                                             ; preds = %1299, %1199
  %1221 = phi i64 [ %1203, %1199 ], [ %1301, %1299 ]
  %1222 = phi i64 [ %1201, %1199 ], [ %1300, %1299 ]
  %1223 = phi i32 [ 0, %1199 ], [ %1236, %1299 ]
  %1224 = phi i1 [ true, %1199 ], [ %1315, %1299 ]
  %1225 = phi ptr [ %1195, %1199 ], [ %1302, %1299 ]
  %1226 = phi i32 [ %1216, %1199 ], [ %1314, %1299 ]
  %1227 = inttoptr i64 %1221 to ptr
  %1228 = inttoptr i64 %1222 to ptr
  %1229 = sext i32 %1226 to i64
  %1230 = getelementptr ptr, ptr %1225, i64 %1229
  %1231 = getelementptr i8, ptr %1230, i64 64
  %1232 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1225, 0
  %1233 = insertvalue { ptr, ptr, ptr, i32 } %1232, ptr %1228, 1
  %1234 = insertvalue { ptr, ptr, ptr, i32 } %1233, ptr %1227, 2
  %1235 = insertvalue { ptr, ptr, ptr, i32 } %1234, i32 %1226, 3
  %1236 = add nuw nsw i32 %1223, 1
  %1237 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1225)
  %1238 = load ptr, ptr %1231, align 8
  %1239 = call align 4 ptr %1238({ ptr, ptr, ptr, i32 } %1235, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1240 = call i32 %1239({ ptr, ptr, ptr, i32 } %1235, { ptr, ptr, ptr, i32 } %1235, ptr nonnull align 8 %2) #28
  br i1 %1224, label %1241, label %1261

1241:                                             ; preds = %1220
  %1242 = load i32, ptr %35, align 8
  %1243 = add i32 %1242, -1
  %1244 = and i32 %1243, %1240
  %1245 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1246 = load ptr, ptr %37, align 8
  %1247 = sext i32 %1244 to i64
  %1248 = shl nsw i64 %1247, 5
  %1249 = getelementptr i8, ptr %1246, i64 %1248
  %1250 = load ptr, ptr %1249, align 8
  %1251 = getelementptr i8, ptr %1249, i64 8
  %1252 = load i160, ptr %1251, align 4
  store ptr %1225, ptr %1249, align 8
  store i64 %1222, ptr %1251, align 4
  %1253 = getelementptr i8, ptr %1249, i64 16
  store i64 %1221, ptr %1253, align 4
  %1254 = getelementptr i8, ptr %1249, i64 24
  store i32 %1226, ptr %1254, align 4
  %1255 = icmp ne ptr %1250, @nil_typ
  %1256 = icmp ne ptr %1250, null
  %1257 = and i1 %1255, %1256
  %1258 = trunc i160 %1252 to i64
  %1259 = lshr i160 %1252, 64
  %1260 = trunc i160 %1259 to i64
  br i1 %1257, label %1299, label %1319

1261:                                             ; preds = %1220
  %1262 = add i32 %1240, 2127912214
  %1263 = shl i32 %1240, 12
  %1264 = add i32 %1262, %1263
  %1265 = ashr i32 %1264, 19
  %1266 = xor i32 %1264, %1265
  %1267 = xor i32 %1266, -949894596
  %1268 = add i32 %1267, 374761393
  %1269 = shl i32 %1267, 5
  %1270 = add i32 %1268, %1269
  %1271 = add i32 %1270, -744332180
  %1272 = shl i32 %1270, 9
  %1273 = xor i32 %1271, %1272
  %1274 = add i32 %1273, -42973499
  %1275 = shl i32 %1273, 3
  %1276 = add i32 %1274, %1275
  %1277 = ashr i32 %1276, 16
  %1278 = xor i32 %1276, %1277
  %1279 = xor i32 %1278, -1252372727
  %1280 = load i32, ptr %35, align 8
  %1281 = add i32 %1280, -1
  %1282 = and i32 %1281, %1279
  %1283 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1284 = load ptr, ptr %39, align 8
  %1285 = sext i32 %1282 to i64
  %1286 = shl nsw i64 %1285, 5
  %1287 = getelementptr i8, ptr %1284, i64 %1286
  %1288 = load ptr, ptr %1287, align 8
  %1289 = getelementptr i8, ptr %1287, i64 8
  %1290 = load i160, ptr %1289, align 4
  store ptr %1225, ptr %1287, align 8
  store i64 %1222, ptr %1289, align 4
  %1291 = getelementptr i8, ptr %1287, i64 16
  store i64 %1221, ptr %1291, align 4
  %1292 = getelementptr i8, ptr %1287, i64 24
  store i32 %1226, ptr %1292, align 4
  %1293 = icmp ne ptr %1288, @nil_typ
  %1294 = icmp ne ptr %1288, null
  %1295 = and i1 %1293, %1294
  %1296 = trunc i160 %1290 to i64
  %1297 = lshr i160 %1290, 64
  %1298 = trunc i160 %1297 to i64
  br i1 %1295, label %1299, label %1319

1299:                                             ; preds = %1261, %1241
  %1300 = phi i64 [ %1258, %1241 ], [ %1296, %1261 ]
  %1301 = phi i64 [ %1260, %1241 ], [ %1298, %1261 ]
  %1302 = phi ptr [ %1250, %1241 ], [ %1288, %1261 ]
  %1303 = getelementptr i8, ptr %1302, i64 8
  %1304 = getelementptr i8, ptr %1302, i64 16
  %1305 = getelementptr i8, ptr %1302, i64 40
  %1306 = load i64, ptr %1303, align 4
  %1307 = load i64, ptr %1304, align 4
  %1308 = load ptr, ptr %1305, align 8
  %1309 = mul i64 %1306, 4015701072841558310
  %1310 = lshr i64 %1309, 32
  %1311 = xor i64 %1310, %1309
  %1312 = and i64 %1311, %1307
  %1313 = getelementptr i32, ptr %1308, i64 %1312
  %1314 = load i32, ptr %1313, align 4
  %1315 = xor i1 %1224, true
  %1316 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1317 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1318 = icmp eq i32 %1236, 100
  br i1 %1318, label %1323, label %1220

1319:                                             ; preds = %1261, %1241
  %1320 = load i32, ptr %46, align 4
  %1321 = add i32 %1320, 1
  %1322 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1321, ptr %46, align 4
  br label %1323

1323:                                             ; preds = %1319, %1299
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1324

1324:                                             ; preds = %1323, %1191
  %1325 = add nuw nsw i64 %1192, 1
  %1326 = icmp eq i64 %1325, %1052
  br i1 %1326, label %1327, label %1191

1327:                                             ; preds = %1324, %1049, %1033, %627, %268, %113
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1328 = add i64 %52, %53
  %1329 = icmp eq i64 %53, %45
  br i1 %1329, label %1330, label %50

1330:                                             ; preds = %1327
  %1331 = call i64 @clock()
  br label %1332

1332:                                             ; preds = %1523, %1330
  %1333 = phi i32 [ 0, %1330 ], [ %1526, %1523 ]
  %1334 = phi i64 [ 0, %1330 ], [ %1525, %1523 ]
  %1335 = phi i1 [ true, %1330 ], [ %1524, %1523 ]
  %1336 = zext nneg i32 %1333 to i160
  %1337 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %1336, 1
  %1338 = load ptr, ptr %33, align 8
  %1339 = call i32 %1338({ ptr, i160 } %1337) #28
  %1340 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1341 = load i32, ptr %35, align 8
  %1342 = add i32 %1341, -1
  %1343 = and i32 %1342, %1339
  %1344 = load ptr, ptr %37, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1345 = sext i32 %1343 to i64
  %1346 = shl nsw i64 %1345, 5
  %1347 = getelementptr i8, ptr %1344, i64 %1346
  %1348 = load ptr, ptr %1347, align 8
  %1349 = icmp ne ptr %1348, @nil_typ
  %1350 = icmp ne ptr %1348, null
  %1351 = and i1 %1349, %1350
  br i1 %1351, label %1352, label %1394

1352:                                             ; preds = %1332
  %1353 = getelementptr i8, ptr %1347, i64 8
  %1354 = load i64, ptr %1353, align 4
  %1355 = getelementptr i8, ptr %1347, i64 16
  %1356 = load i64, ptr %1355, align 4
  %1357 = inttoptr i64 %1354 to ptr
  %1358 = inttoptr i64 %1356 to ptr
  %1359 = getelementptr i8, ptr %1348, i64 8
  %1360 = getelementptr i8, ptr %1348, i64 16
  %1361 = getelementptr i8, ptr %1348, i64 40
  %1362 = load i64, ptr %1359, align 4, !noalias !158
  %1363 = load i64, ptr %1360, align 4, !noalias !158
  %1364 = load ptr, ptr %1361, align 8, !noalias !158
  %1365 = mul i64 %1362, 4015701072841558310
  %1366 = lshr i64 %1365, 32
  %1367 = xor i64 %1366, %1365
  %1368 = and i64 %1367, %1363
  %1369 = getelementptr i32, ptr %1364, i64 %1368
  %1370 = load i32, ptr %1369, align 4, !noalias !158
  %1371 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1348, 0
  %1372 = insertvalue { ptr, ptr, ptr, i32 } %1371, ptr %1357, 1
  %1373 = insertvalue { ptr, ptr, ptr, i32 } %1372, ptr %1358, 2
  %1374 = insertvalue { ptr, ptr, ptr, i32 } %1373, i32 %1370, 3
  %1375 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1376 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1348) #43
  %1377 = sext i32 %1370 to i64
  %1378 = getelementptr ptr, ptr %1348, i64 %1377
  %1379 = getelementptr i8, ptr %1378, i64 64
  %1380 = load ptr, ptr %1379, align 8
  %1381 = call align 4 ptr %1380({ ptr, ptr, ptr, i32 } %1374, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1382 = call i32 %1381({ ptr, ptr, ptr, i32 } %1374, { ptr, ptr, ptr, i32 } %1374, ptr nonnull align 8 %2) #28
  %1383 = icmp eq i32 %1382, %1339
  br i1 %1383, label %1384, label %1394

1384:                                             ; preds = %1352
  %1385 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1386 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1348)
  %1387 = getelementptr i8, ptr %1378, i64 48
  %1388 = load ptr, ptr %1387, align 8
  %1389 = call align 4 ptr %1388({ ptr, ptr, ptr, i32 } %1374, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1390 = call { ptr, i160 } %1389({ ptr, ptr, ptr, i32 } %1374, { ptr, ptr, ptr, i32 } %1374, ptr nonnull align 8 %2) #28
  %1391 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1392 = load ptr, ptr %34, align 8
  %1393 = call i1 %1392({ ptr, i160 } %1390, { ptr, i160 } %1337) #28
  br i1 %1393, label %1395, label %1394

1394:                                             ; preds = %1384, %1352, %1332
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1407

1395:                                             ; preds = %1384
  %1396 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1397 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1348)
  %1398 = getelementptr i8, ptr %1378, i64 56
  %1399 = load ptr, ptr %1398, align 8
  %1400 = call align 4 ptr %1399({ ptr, ptr, ptr, i32 } %1374, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1401 = call { ptr, i160 } %1400({ ptr, ptr, ptr, i32 } %1374, { ptr, ptr, ptr, i32 } %1374, ptr nonnull align 8 %2) #28
  %1402 = extractvalue { ptr, i160 } %1401, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1403 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1404 = icmp ne ptr %1402, @nil_typ
  %1405 = icmp ne ptr %1402, null
  %1406 = and i1 %1404, %1405
  br i1 %1406, label %1500, label %1407

1407:                                             ; preds = %1395, %1394
  %1408 = add i32 %1339, 2127912214
  %1409 = shl i32 %1339, 12
  %1410 = add i32 %1408, %1409
  %1411 = ashr i32 %1410, 19
  %1412 = xor i32 %1410, %1411
  %1413 = xor i32 %1412, -949894596
  %1414 = add i32 %1413, 374761393
  %1415 = shl i32 %1413, 5
  %1416 = add i32 %1414, %1415
  %1417 = add i32 %1416, -744332180
  %1418 = shl i32 %1416, 9
  %1419 = xor i32 %1417, %1418
  %1420 = add i32 %1419, -42973499
  %1421 = shl i32 %1419, 3
  %1422 = add i32 %1420, %1421
  %1423 = ashr i32 %1422, 16
  %1424 = xor i32 %1422, %1423
  %1425 = xor i32 %1424, -1252372727
  %1426 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1427 = load i32, ptr %35, align 8
  %1428 = add i32 %1427, -1
  %1429 = and i32 %1428, %1425
  %1430 = load ptr, ptr %39, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1431 = sext i32 %1429 to i64
  %1432 = shl nsw i64 %1431, 5
  %1433 = getelementptr i8, ptr %1430, i64 %1432
  %1434 = load ptr, ptr %1433, align 8
  %1435 = icmp ne ptr %1434, @nil_typ
  %1436 = icmp ne ptr %1434, null
  %1437 = and i1 %1435, %1436
  br i1 %1437, label %1438, label %1489

1438:                                             ; preds = %1407
  %1439 = getelementptr i8, ptr %1433, i64 8
  %1440 = load i64, ptr %1439, align 4
  %1441 = getelementptr i8, ptr %1433, i64 16
  %1442 = load i64, ptr %1441, align 4
  %1443 = inttoptr i64 %1440 to ptr
  %1444 = inttoptr i64 %1442 to ptr
  %1445 = getelementptr i8, ptr %1434, i64 8
  %1446 = getelementptr i8, ptr %1434, i64 16
  %1447 = getelementptr i8, ptr %1434, i64 40
  %1448 = load i64, ptr %1445, align 4, !noalias !161
  %1449 = load i64, ptr %1446, align 4, !noalias !161
  %1450 = load ptr, ptr %1447, align 8, !noalias !161
  %1451 = mul i64 %1448, 4015701072841558310
  %1452 = lshr i64 %1451, 32
  %1453 = xor i64 %1452, %1451
  %1454 = and i64 %1453, %1449
  %1455 = getelementptr i32, ptr %1450, i64 %1454
  %1456 = load i32, ptr %1455, align 4, !noalias !161
  %1457 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1434, 0
  %1458 = insertvalue { ptr, ptr, ptr, i32 } %1457, ptr %1443, 1
  %1459 = insertvalue { ptr, ptr, ptr, i32 } %1458, ptr %1444, 2
  %1460 = insertvalue { ptr, ptr, ptr, i32 } %1459, i32 %1456, 3
  %1461 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1462 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1434) #43
  %1463 = sext i32 %1456 to i64
  %1464 = getelementptr ptr, ptr %1434, i64 %1463
  %1465 = getelementptr i8, ptr %1464, i64 64
  %1466 = load ptr, ptr %1465, align 8
  %1467 = call align 4 ptr %1466({ ptr, ptr, ptr, i32 } %1460, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1468 = call i32 %1467({ ptr, ptr, ptr, i32 } %1460, { ptr, ptr, ptr, i32 } %1460, ptr nonnull align 8 %2) #28
  %1469 = icmp eq i32 %1468, %1339
  br i1 %1469, label %1470, label %1489

1470:                                             ; preds = %1438
  %1471 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1472 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1434)
  %1473 = getelementptr i8, ptr %1464, i64 48
  %1474 = load ptr, ptr %1473, align 8
  %1475 = call align 4 ptr %1474({ ptr, ptr, ptr, i32 } %1460, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1476 = call { ptr, i160 } %1475({ ptr, ptr, ptr, i32 } %1460, { ptr, ptr, ptr, i32 } %1460, ptr nonnull align 8 %2) #28
  %1477 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1478 = load ptr, ptr %34, align 8
  %1479 = call i1 %1478({ ptr, i160 } %1476, { ptr, i160 } %1337) #28
  br i1 %1479, label %1480, label %1489

1480:                                             ; preds = %1470
  %1481 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1482 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1434)
  %1483 = getelementptr i8, ptr %1464, i64 56
  %1484 = load ptr, ptr %1483, align 8
  %1485 = call align 4 ptr %1484({ ptr, ptr, ptr, i32 } %1460, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1486 = call { ptr, i160 } %1485({ ptr, ptr, ptr, i32 } %1460, { ptr, ptr, ptr, i32 } %1460, ptr nonnull align 8 %2) #28
  %1487 = extractvalue { ptr, i160 } %1486, 0
  %1488 = extractvalue { ptr, i160 } %1486, 1
  br label %1489

1489:                                             ; preds = %1480, %1470, %1438, %1407
  %1490 = phi i160 [ %1488, %1480 ], [ poison, %1470 ], [ poison, %1407 ], [ poison, %1438 ]
  %1491 = phi ptr [ %1487, %1480 ], [ @nil_typ, %1470 ], [ @nil_typ, %1407 ], [ @nil_typ, %1438 ]
  %1492 = insertvalue { ptr, i160 } poison, ptr %1491, 0
  %1493 = insertvalue { ptr, i160 } %1492, i160 %1490, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1494 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1495 = icmp ne ptr %1491, @nil_typ
  %1496 = icmp ne ptr %1491, null
  %1497 = and i1 %1495, %1496
  %1498 = freeze i1 %1497
  %1499 = select i1 %1498, ptr %1491, ptr @nil_typ
  br label %1500

1500:                                             ; preds = %1489, %1395
  %1501 = phi { ptr, i160 } [ %1401, %1395 ], [ %1493, %1489 ]
  %1502 = phi ptr [ %1402, %1395 ], [ %1499, %1489 ]
  %1503 = icmp ne ptr %1502, @nil_typ
  %1504 = icmp ne ptr %1502, null
  %1505 = and i1 %1503, %1504
  br i1 %1505, label %1506, label %1512

1506:                                             ; preds = %1500
  %1507 = extractvalue { ptr, i160 } %1501, 1
  %1508 = trunc i160 %1507 to i64
  %1509 = shl i64 %1508, 32
  %1510 = ashr exact i64 %1509, 32
  %1511 = add i64 %1510, %1334
  br label %1523

1512:                                             ; preds = %1500
  %1513 = alloca [56 x i8], align 64
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 64 dereferenceable(56) %1513, i8 0, i64 56, i1 false)
  %1514 = load <55 x i8>, ptr @rwhsb_Error_Nil_returned_during_sequential_hit_test_for_key_, align 64
  store <55 x i8> %1514, ptr %1513, align 64
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1515 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1516 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1517 = alloca [56 x i8], align 4
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(56) %1517, ptr noalias nocapture nofree noundef nonnull readonly align 64 dereferenceable(56) %1513, i64 noundef 55, i1 noundef false)
  %1518 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1519 = getelementptr inbounds i8, ptr %1517, i64 55
  store i8 0, ptr %1519, align 1
  %1520 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(56) %1517) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1521 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  %1522 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %1333) #25
  br label %1523

1523:                                             ; preds = %1512, %1506
  %1524 = phi i1 [ %1335, %1506 ], [ false, %1512 ]
  %1525 = phi i64 [ %1511, %1506 ], [ %1334, %1512 ]
  %1526 = add nuw nsw i32 %1333, 1
  %1527 = icmp eq i32 %1526, %0
  br i1 %1527, label %1528, label %1332

1528:                                             ; preds = %1523, %42
  %1529 = phi i64 [ %43, %42 ], [ %1331, %1523 ]
  %1530 = phi i64 [ 0, %42 ], [ %1328, %1523 ]
  %1531 = phi i1 [ true, %42 ], [ %1524, %1523 ]
  %1532 = phi i64 [ 0, %42 ], [ %1525, %1523 ]
  %1533 = call i64 @clock()
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1534 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1535 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <18 x i8> <i8 71, i8 101, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108, i8 32, i8 72, i8 105, i8 116>, ptr %10, align 4
  %1536 = sub i64 %1533, %1529
  %1537 = getelementptr inbounds i8, ptr %10, i64 18
  store i8 0, ptr %1537, align 2
  %1538 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %10) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %9, align 16
  %1539 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %9) #28
  %1540 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %0) #25
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %8, align 16
  %1541 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %8) #28
  %1542 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %1536) #25
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %7, align 4
  %1543 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %7) #28
  br i1 %41, label %1544, label %1557

1544:                                             ; preds = %1528
  %1545 = icmp sgt i64 %1536, 0
  br i1 %1545, label %1546, label %1550

1546:                                             ; preds = %1544
  %1547 = mul i64 %1536, 1000000
  %1548 = zext nneg i32 %0 to i64
  %1549 = sdiv i64 %1547, %1548
  br label %1550

1550:                                             ; preds = %1546, %1544
  %1551 = phi i64 [ %1549, %1546 ], [ 0, %1544 ]
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %6, align 16
  %1552 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %6) #28
  %1553 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %1551) #25
  %1554 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %5, align 4
  %1555 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1556 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %5) #28
  br label %1557

1557:                                             ; preds = %1550, %1528
  %1558 = icmp eq i64 %1532, %1530
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1559 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1560 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %4, align 4
  %1561 = select i1 %1558, i1 %1531, i1 false
  %1562 = getelementptr inbounds i8, ptr %4, i64 18
  store i8 0, ptr %1562, align 2
  %1563 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %4) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1564 = select i1 %1561, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %1565 = select i1 %1561, ptr %13, ptr %17
  %1566 = select i1 %1561, ptr %14, ptr %18
  %1567 = select i1 %1561, ptr %15, ptr %19
  %1568 = select i1 %1561, ptr %16, ptr %20
  store ptr @_parameterization_Bufferi8, ptr %1565, align 8
  %1569 = select i1 %1561, ptr %13, ptr %17
  %1570 = getelementptr inbounds i8, ptr %1569, i64 8
  store ptr @_parameterization_i32, ptr %1570, align 8
  %1571 = select i1 %1561, ptr %13, ptr %17
  %1572 = getelementptr inbounds i8, ptr %1571, i64 16
  store ptr @_parameterization_i32, ptr %1572, align 8
  %1573 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1565)
  store ptr @buffer_typ, ptr %1566, align 8
  %1574 = select i1 %1561, ptr %14, ptr %18
  %1575 = getelementptr inbounds i8, ptr %1574, i64 8
  store ptr @i32_typ, ptr %1575, align 8
  %1576 = select i1 %1561, ptr %14, ptr %18
  %1577 = getelementptr inbounds i8, ptr %1576, i64 16
  store ptr @i32_typ, ptr %1577, align 8
  %1578 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %1566) #43
  store ptr @_parameterization_String, ptr %1567, align 8
  %1579 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1567)
  %1580 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store ptr @String, ptr %1568, align 8
  %1581 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %1568) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1582 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1583 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  store <4 x i8> %1564, ptr %3, align 4
  %1584 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1585 = getelementptr inbounds i8, ptr %3, i64 4
  store i8 0, ptr %1585, align 4
  %1586 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %3) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  ret void
}

define dso_local void @benchmark_get_random_hit(i32 %0) local_unnamed_addr #30 {
  %2 = alloca {}, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %16) #43
  %20 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %6) #43
  %21 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %20, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %6) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %6) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %20, ptr noalias nofree noundef nonnull readnone align 4 @byginoovye, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %22 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %20) #47
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %20) #43
  %24 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %5) #43
  %25 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %24, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %5) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %5) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %24, ptr noalias nofree noundef nonnull readnone align 4 @dbpurprsxk, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %26 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %24) #47
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %24) #43
  %28 = getelementptr inbounds i8, ptr %16, i64 48
  store ptr %22, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %16, i64 56
  store ptr %26, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %16, i64 40
  store i32 8, ptr %30, align 8
  %31 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %32 = getelementptr inbounds i8, ptr %16, i64 24
  store ptr %31, ptr %32, align 8
  %33 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %34 = getelementptr inbounds i8, ptr %16, i64 32
  store ptr %33, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  %36 = sext i32 %0 to i64
  %37 = shl nsw i64 %36, 2
  %38 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %37, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #43
  %40 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @_parameterization_i1, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %40) #43
  %44 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %4) #43
  %45 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %44, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %4) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %4) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %44, ptr noalias nofree noundef nonnull readnone align 4 @ygrdseesna, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %46 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %44) #47
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %44) #43
  %48 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3) #43
  %49 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %48, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %3) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %48, ptr noalias nofree noundef nonnull readnone align 4 @qkztifquoh, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %50 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %48) #47
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %48) #43
  %52 = getelementptr inbounds i8, ptr %40, i64 48
  store ptr %46, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %40, i64 56
  store ptr %50, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %40, i64 40
  store i32 8, ptr %54, align 8
  %55 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %56 = getelementptr inbounds i8, ptr %40, i64 24
  store ptr %55, ptr %56, align 8
  %57 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %58 = getelementptr inbounds i8, ptr %40, i64 32
  store ptr %57, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %60 = mul i32 %0, 10
  %61 = icmp sgt i32 %0, 0
  %62 = icmp sgt i32 %60, 0
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %3209

64:                                               ; preds = %1
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %67 = getelementptr inbounds i8, ptr %16, i64 44
  %68 = getelementptr inbounds i8, ptr %40, i64 44
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  br label %70

70:                                               ; preds = %3202, %64
  %71 = phi i32 [ 456, %64 ], [ %77, %3202 ]
  %72 = phi i32 [ 0, %64 ], [ %3205, %3202 ]
  %73 = phi i32 [ 0, %64 ], [ %3204, %3202 ]
  %74 = phi i64 [ 0, %64 ], [ %3203, %3202 ]
  %75 = mul i32 %71, 1103515245
  %76 = add i32 %75, 12345
  %77 = and i32 %76, 2147483647
  %78 = zext nneg i32 %77 to i160
  %79 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %78, 1
  %80 = load ptr, ptr %52, align 8
  %81 = call i32 %80({ ptr, i160 } %79) #28
  %82 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %83 = load i32, ptr %54, align 8
  %84 = add i32 %83, -1
  %85 = and i32 %84, %81
  %86 = load ptr, ptr %56, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %87 = sext i32 %85 to i64
  %88 = shl nsw i64 %87, 5
  %89 = getelementptr i8, ptr %86, i64 %88
  %90 = load ptr, ptr %89, align 8
  %91 = icmp ne ptr %90, @nil_typ
  %92 = icmp ne ptr %90, null
  %93 = and i1 %91, %92
  br i1 %93, label %94, label %136

94:                                               ; preds = %70
  %95 = getelementptr i8, ptr %89, i64 8
  %96 = load i64, ptr %95, align 4
  %97 = getelementptr i8, ptr %89, i64 16
  %98 = load i64, ptr %97, align 4
  %99 = inttoptr i64 %96 to ptr
  %100 = inttoptr i64 %98 to ptr
  %101 = getelementptr i8, ptr %90, i64 8
  %102 = getelementptr i8, ptr %90, i64 16
  %103 = getelementptr i8, ptr %90, i64 40
  %104 = load i64, ptr %101, align 4, !noalias !164
  %105 = load i64, ptr %102, align 4, !noalias !164
  %106 = load ptr, ptr %103, align 8, !noalias !164
  %107 = mul i64 %104, 4015701072841558310
  %108 = lshr i64 %107, 32
  %109 = xor i64 %108, %107
  %110 = and i64 %109, %105
  %111 = getelementptr i32, ptr %106, i64 %110
  %112 = load i32, ptr %111, align 4, !noalias !164
  %113 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %99, 1
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %100, 2
  %116 = insertvalue { ptr, ptr, ptr, i32 } %115, i32 %112, 3
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %118 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %90) #43
  %119 = sext i32 %112 to i64
  %120 = getelementptr ptr, ptr %90, i64 %119
  %121 = getelementptr i8, ptr %120, i64 64
  %122 = load ptr, ptr %121, align 8
  %123 = call align 4 ptr %122({ ptr, ptr, ptr, i32 } %116, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %124 = call i32 %123({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr nonnull align 8 %2) #28
  %125 = icmp eq i32 %124, %81
  br i1 %125, label %126, label %136

126:                                              ; preds = %94
  %127 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %128 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %90)
  %129 = getelementptr i8, ptr %120, i64 48
  %130 = load ptr, ptr %129, align 8
  %131 = call align 4 ptr %130({ ptr, ptr, ptr, i32 } %116, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %132 = call { ptr, i160 } %131({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr nonnull align 8 %2) #28
  %133 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %134 = load ptr, ptr %53, align 8
  %135 = call i1 %134({ ptr, i160 } %132, { ptr, i160 } %79) #28
  br i1 %135, label %137, label %136

136:                                              ; preds = %126, %94, %70
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %149

137:                                              ; preds = %126
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %139 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %90)
  %140 = getelementptr i8, ptr %120, i64 56
  %141 = load ptr, ptr %140, align 8
  %142 = call align 4 ptr %141({ ptr, ptr, ptr, i32 } %116, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %143 = call { ptr, i160 } %142({ ptr, ptr, ptr, i32 } %116, { ptr, ptr, ptr, i32 } %116, ptr nonnull align 8 %2) #28
  %144 = extractvalue { ptr, i160 } %143, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %145 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %146 = icmp ne ptr %144, @nil_typ
  %147 = icmp ne ptr %144, null
  %148 = and i1 %146, %147
  br i1 %148, label %238, label %149

149:                                              ; preds = %137, %136
  %150 = add i32 %81, 2127912214
  %151 = shl i32 %81, 12
  %152 = add i32 %150, %151
  %153 = ashr i32 %152, 19
  %154 = xor i32 %152, %153
  %155 = xor i32 %154, -949894596
  %156 = add i32 %155, 374761393
  %157 = shl i32 %155, 5
  %158 = add i32 %156, %157
  %159 = add i32 %158, -744332180
  %160 = shl i32 %158, 9
  %161 = xor i32 %159, %160
  %162 = add i32 %161, -42973499
  %163 = shl i32 %161, 3
  %164 = add i32 %162, %163
  %165 = ashr i32 %164, 16
  %166 = xor i32 %164, %165
  %167 = xor i32 %166, -1252372727
  %168 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %169 = load i32, ptr %54, align 8
  %170 = add i32 %169, -1
  %171 = and i32 %170, %167
  %172 = load ptr, ptr %58, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %173 = sext i32 %171 to i64
  %174 = shl nsw i64 %173, 5
  %175 = getelementptr i8, ptr %172, i64 %174
  %176 = load ptr, ptr %175, align 8
  %177 = icmp ne ptr %176, @nil_typ
  %178 = icmp ne ptr %176, null
  %179 = and i1 %177, %178
  br i1 %179, label %180, label %230

180:                                              ; preds = %149
  %181 = getelementptr i8, ptr %175, i64 8
  %182 = load i64, ptr %181, align 4
  %183 = getelementptr i8, ptr %175, i64 16
  %184 = load i64, ptr %183, align 4
  %185 = inttoptr i64 %182 to ptr
  %186 = inttoptr i64 %184 to ptr
  %187 = getelementptr i8, ptr %176, i64 8
  %188 = getelementptr i8, ptr %176, i64 16
  %189 = getelementptr i8, ptr %176, i64 40
  %190 = load i64, ptr %187, align 4, !noalias !167
  %191 = load i64, ptr %188, align 4, !noalias !167
  %192 = load ptr, ptr %189, align 8, !noalias !167
  %193 = mul i64 %190, 4015701072841558310
  %194 = lshr i64 %193, 32
  %195 = xor i64 %194, %193
  %196 = and i64 %195, %191
  %197 = getelementptr i32, ptr %192, i64 %196
  %198 = load i32, ptr %197, align 4, !noalias !167
  %199 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %176, 0
  %200 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %185, 1
  %201 = insertvalue { ptr, ptr, ptr, i32 } %200, ptr %186, 2
  %202 = insertvalue { ptr, ptr, ptr, i32 } %201, i32 %198, 3
  %203 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %204 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %176) #43
  %205 = sext i32 %198 to i64
  %206 = getelementptr ptr, ptr %176, i64 %205
  %207 = getelementptr i8, ptr %206, i64 64
  %208 = load ptr, ptr %207, align 8
  %209 = call align 4 ptr %208({ ptr, ptr, ptr, i32 } %202, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %210 = call i32 %209({ ptr, ptr, ptr, i32 } %202, { ptr, ptr, ptr, i32 } %202, ptr nonnull align 8 %2) #28
  %211 = icmp eq i32 %210, %81
  br i1 %211, label %212, label %230

212:                                              ; preds = %180
  %213 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %214 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %176)
  %215 = getelementptr i8, ptr %206, i64 48
  %216 = load ptr, ptr %215, align 8
  %217 = call align 4 ptr %216({ ptr, ptr, ptr, i32 } %202, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %218 = call { ptr, i160 } %217({ ptr, ptr, ptr, i32 } %202, { ptr, ptr, ptr, i32 } %202, ptr nonnull align 8 %2) #28
  %219 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %220 = load ptr, ptr %53, align 8
  %221 = call i1 %220({ ptr, i160 } %218, { ptr, i160 } %79) #28
  br i1 %221, label %222, label %230

222:                                              ; preds = %212
  %223 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %224 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %176)
  %225 = getelementptr i8, ptr %206, i64 56
  %226 = load ptr, ptr %225, align 8
  %227 = call align 4 ptr %226({ ptr, ptr, ptr, i32 } %202, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %228 = call { ptr, i160 } %227({ ptr, ptr, ptr, i32 } %202, { ptr, ptr, ptr, i32 } %202, ptr nonnull align 8 %2) #28
  %229 = extractvalue { ptr, i160 } %228, 0
  br label %230

230:                                              ; preds = %222, %212, %180, %149
  %231 = phi ptr [ %229, %222 ], [ @nil_typ, %212 ], [ @nil_typ, %149 ], [ @nil_typ, %180 ]
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %232 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %233 = icmp ne ptr %231, @nil_typ
  %234 = icmp ne ptr %231, null
  %235 = and i1 %233, %234
  %236 = freeze i1 %235
  %237 = select i1 %236, ptr %231, ptr @nil_typ
  br label %238

238:                                              ; preds = %230, %137
  %239 = phi ptr [ %144, %137 ], [ %237, %230 ]
  %240 = icmp eq ptr %239, @nil_typ
  %241 = icmp eq ptr %239, null
  %242 = or i1 %240, %241
  br i1 %242, label %243, label %3202

243:                                              ; preds = %238
  %244 = add nuw i32 %77, 1
  %245 = zext i32 %244 to i160
  %246 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %245, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %247 = load ptr, ptr %28, align 8
  %248 = call i32 %247({ ptr, i160 } %79) #28
  %249 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %250 = load i32, ptr %30, align 8
  %251 = add i32 %250, -1
  %252 = and i32 %251, %248
  %253 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %254 = sext i32 %252 to i64
  %255 = shl nsw i64 %254, 5
  %256 = getelementptr i8, ptr %253, i64 %255
  %257 = load ptr, ptr %256, align 8
  %258 = getelementptr i8, ptr %256, i64 8
  %259 = icmp ne ptr %257, @nil_typ
  %260 = icmp ne ptr %257, null
  %261 = and i1 %259, %260
  br i1 %261, label %262, label %385

262:                                              ; preds = %243
  %263 = load i64, ptr %258, align 4
  %264 = getelementptr i8, ptr %256, i64 16
  %265 = load i64, ptr %264, align 4
  %266 = inttoptr i64 %263 to ptr
  %267 = inttoptr i64 %265 to ptr
  %268 = getelementptr i8, ptr %257, i64 8
  %269 = getelementptr i8, ptr %257, i64 16
  %270 = getelementptr i8, ptr %257, i64 40
  %271 = load i64, ptr %268, align 4, !noalias !170
  %272 = load i64, ptr %269, align 4, !noalias !170
  %273 = load ptr, ptr %270, align 8, !noalias !170
  %274 = mul i64 %271, 4015701072841558310
  %275 = lshr i64 %274, 32
  %276 = xor i64 %275, %274
  %277 = and i64 %276, %272
  %278 = getelementptr i32, ptr %273, i64 %277
  %279 = load i32, ptr %278, align 4, !noalias !170
  %280 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %257, 0
  %281 = insertvalue { ptr, ptr, ptr, i32 } %280, ptr %266, 1
  %282 = insertvalue { ptr, ptr, ptr, i32 } %281, ptr %267, 2
  %283 = insertvalue { ptr, ptr, ptr, i32 } %282, i32 %279, 3
  %284 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %285 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %257) #43
  %286 = sext i32 %279 to i64
  %287 = getelementptr ptr, ptr %257, i64 %286
  %288 = getelementptr i8, ptr %287, i64 64
  %289 = load ptr, ptr %288, align 8
  %290 = call align 4 ptr %289({ ptr, ptr, ptr, i32 } %283, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %291 = call i32 %290({ ptr, ptr, ptr, i32 } %283, { ptr, ptr, ptr, i32 } %283, ptr nonnull align 8 %2) #28
  %292 = icmp eq i32 %291, %248
  br i1 %292, label %293, label %385

293:                                              ; preds = %262
  %294 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %295 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %257)
  %296 = getelementptr i8, ptr %287, i64 48
  %297 = load ptr, ptr %296, align 8
  %298 = call align 4 ptr %297({ ptr, ptr, ptr, i32 } %283, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %299 = call { ptr, i160 } %298({ ptr, ptr, ptr, i32 } %283, { ptr, ptr, ptr, i32 } %283, ptr nonnull align 8 %2) #28
  %300 = load ptr, ptr %29, align 8
  %301 = call i1 %300({ ptr, i160 } %299, { ptr, i160 } %79) #28
  br i1 %301, label %302, label %385

302:                                              ; preds = %293
  %303 = load ptr, ptr %16, align 8
  %304 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %305 = load ptr, ptr %17, align 8
  %306 = load ptr, ptr %303, align 8, !alias.scope !173
  %307 = getelementptr i8, ptr %306, i64 72
  %308 = load ptr, ptr %307, align 8, !alias.scope !173
  %309 = call { i64, i64 } %308(ptr nocapture nofree nonnull readonly align 8 %303) #2, !alias.scope !173
  %310 = extractvalue { i64, i64 } %309, 0
  %311 = extractvalue { i64, i64 } %309, 1
  %312 = urem i64 20, %311
  %313 = icmp eq i64 %312, 0
  %314 = sub i64 %311, %312
  %315 = select i1 %313, i64 0, i64 %314
  %316 = add i64 %310, 20
  %317 = add i64 %316, %315
  %318 = load ptr, ptr %305, align 8, !alias.scope !173
  %319 = getelementptr i8, ptr %318, i64 72
  %320 = load ptr, ptr %319, align 8, !alias.scope !173
  %321 = call { i64, i64 } %320(ptr nocapture nofree nonnull readonly align 8 %305) #2, !alias.scope !173
  %322 = extractvalue { i64, i64 } %321, 0
  %323 = extractvalue { i64, i64 } %321, 1
  %324 = call i64 @llvm.umax.i64(i64 %311, i64 %323) #44
  %325 = call i64 @llvm.umax.i64(i64 %324, i64 noundef 8) #44, !range !18
  %326 = urem i64 %317, %323
  %327 = icmp eq i64 %326, 0
  %328 = sub i64 %323, %326
  %329 = select i1 %327, i64 0, i64 %328
  %330 = add i64 %322, %317
  %331 = add i64 %330, %329
  %332 = urem i64 %331, %325
  %333 = icmp eq i64 %332, 0
  %334 = sub i64 %325, %332
  %335 = select i1 %333, i64 0, i64 %334
  %336 = add i64 %335, %331
  %337 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %336, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %303, ptr %337, align 8
  %338 = getelementptr inbounds i8, ptr %337, i64 8
  store ptr %305, ptr %338, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %337)
  %340 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %341 = load ptr, ptr %303, align 8
  %342 = getelementptr i8, ptr %341, i64 72
  %343 = load ptr, ptr %342, align 8
  %344 = call { i64, i64 } %343(ptr nocapture nofree nonnull readonly align 8 %303) #2
  %345 = extractvalue { i64, i64 } %344, 1
  %346 = urem i64 20, %345
  %347 = icmp eq i64 %346, 0
  %348 = sub i64 %345, %346
  %349 = add i64 %348, 20
  %350 = select i1 %347, i64 20, i64 %349
  %351 = getelementptr i8, ptr %337, i64 %350
  %352 = getelementptr i8, ptr %341, i64 64
  %353 = load ptr, ptr %352, align 8
  call void %353({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %303, ptr nocapture nofree writeonly %351) #8
  %354 = load ptr, ptr %337, align 8
  %355 = load ptr, ptr %354, align 8
  %356 = getelementptr i8, ptr %355, i64 72
  %357 = load ptr, ptr %356, align 8
  %358 = call { i64, i64 } %357(ptr nocapture nofree nonnull readonly align 8 %354) #2
  %359 = extractvalue { i64, i64 } %358, 0
  %360 = extractvalue { i64, i64 } %358, 1
  %361 = urem i64 20, %360
  %362 = icmp eq i64 %361, 0
  %363 = sub i64 %360, %361
  %364 = select i1 %362, i64 0, i64 %363
  %365 = add i64 %359, 20
  %366 = add i64 %365, %364
  %367 = load ptr, ptr %338, align 8
  %368 = load ptr, ptr %367, align 8
  %369 = getelementptr i8, ptr %368, i64 72
  %370 = load ptr, ptr %369, align 8
  %371 = call { i64, i64 } %370(ptr nocapture nofree nonnull readonly align 8 %367) #2
  %372 = extractvalue { i64, i64 } %371, 1
  %373 = urem i64 %366, %372
  %374 = icmp eq i64 %373, 0
  %375 = sub i64 %372, %373
  %376 = select i1 %374, i64 0, i64 %375
  %377 = getelementptr i8, ptr %337, i64 %366
  %378 = getelementptr i8, ptr %377, i64 %376
  %379 = getelementptr i8, ptr %368, i64 64
  %380 = load ptr, ptr %379, align 8
  call void %380({ ptr, i160 } %246, ptr nocapture nofree nonnull readonly align 8 %367, ptr nocapture nofree writeonly %378) #8
  %381 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %382 = getelementptr inbounds i8, ptr %337, i64 16
  store i32 %248, ptr %382, align 8
  store ptr @Entry, ptr %256, align 8
  %383 = ptrtoint ptr %337 to i64
  store i64 %383, ptr %258, align 4
  %384 = getelementptr i8, ptr %256, i64 24
  store i32 10, ptr %384, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1720

385:                                              ; preds = %293, %262, %243
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %386 = add i32 %248, 2127912214
  %387 = shl i32 %248, 12
  %388 = add i32 %386, %387
  %389 = ashr i32 %388, 19
  %390 = xor i32 %388, %389
  %391 = xor i32 %390, -949894596
  %392 = add i32 %391, 374761393
  %393 = shl i32 %391, 5
  %394 = add i32 %392, %393
  %395 = add i32 %394, -744332180
  %396 = shl i32 %394, 9
  %397 = xor i32 %395, %396
  %398 = add i32 %397, -42973499
  %399 = shl i32 %397, 3
  %400 = add i32 %398, %399
  %401 = ashr i32 %400, 16
  %402 = xor i32 %400, %401
  %403 = xor i32 %402, -1252372727
  %404 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %405 = load i32, ptr %30, align 8
  %406 = add i32 %405, -1
  %407 = and i32 %406, %403
  %408 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %409 = sext i32 %407 to i64
  %410 = shl nsw i64 %409, 5
  %411 = getelementptr i8, ptr %408, i64 %410
  %412 = load ptr, ptr %411, align 8
  %413 = getelementptr i8, ptr %411, i64 8
  %414 = icmp ne ptr %412, @nil_typ
  %415 = icmp ne ptr %412, null
  %416 = and i1 %414, %415
  br i1 %416, label %417, label %541

417:                                              ; preds = %385
  %418 = load i64, ptr %413, align 4
  %419 = getelementptr i8, ptr %411, i64 16
  %420 = load i64, ptr %419, align 4
  %421 = inttoptr i64 %418 to ptr
  %422 = inttoptr i64 %420 to ptr
  %423 = getelementptr i8, ptr %412, i64 8
  %424 = getelementptr i8, ptr %412, i64 16
  %425 = getelementptr i8, ptr %412, i64 40
  %426 = load i64, ptr %423, align 4, !noalias !176
  %427 = load i64, ptr %424, align 4, !noalias !176
  %428 = load ptr, ptr %425, align 8, !noalias !176
  %429 = mul i64 %426, 4015701072841558310
  %430 = lshr i64 %429, 32
  %431 = xor i64 %430, %429
  %432 = and i64 %431, %427
  %433 = getelementptr i32, ptr %428, i64 %432
  %434 = load i32, ptr %433, align 4, !noalias !176
  %435 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %412, 0
  %436 = insertvalue { ptr, ptr, ptr, i32 } %435, ptr %421, 1
  %437 = insertvalue { ptr, ptr, ptr, i32 } %436, ptr %422, 2
  %438 = insertvalue { ptr, ptr, ptr, i32 } %437, i32 %434, 3
  %439 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %440 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %412) #43
  %441 = sext i32 %434 to i64
  %442 = getelementptr ptr, ptr %412, i64 %441
  %443 = getelementptr i8, ptr %442, i64 64
  %444 = load ptr, ptr %443, align 8
  %445 = call align 4 ptr %444({ ptr, ptr, ptr, i32 } %438, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %446 = call i32 %445({ ptr, ptr, ptr, i32 } %438, { ptr, ptr, ptr, i32 } %438, ptr nonnull align 8 %2) #28
  %447 = icmp eq i32 %446, %248
  br i1 %447, label %448, label %541

448:                                              ; preds = %417
  %449 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %450 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %412)
  %451 = getelementptr i8, ptr %442, i64 48
  %452 = load ptr, ptr %451, align 8
  %453 = call align 4 ptr %452({ ptr, ptr, ptr, i32 } %438, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %454 = call { ptr, i160 } %453({ ptr, ptr, ptr, i32 } %438, { ptr, ptr, ptr, i32 } %438, ptr nonnull align 8 %2) #28
  %455 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %456 = load ptr, ptr %29, align 8
  %457 = call i1 %456({ ptr, i160 } %454, { ptr, i160 } %79) #28
  br i1 %457, label %458, label %541

458:                                              ; preds = %448
  %459 = load ptr, ptr %16, align 8
  %460 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %461 = load ptr, ptr %17, align 8
  %462 = load ptr, ptr %459, align 8, !alias.scope !179
  %463 = getelementptr i8, ptr %462, i64 72
  %464 = load ptr, ptr %463, align 8, !alias.scope !179
  %465 = call { i64, i64 } %464(ptr nocapture nofree nonnull readonly align 8 %459) #2, !alias.scope !179
  %466 = extractvalue { i64, i64 } %465, 0
  %467 = extractvalue { i64, i64 } %465, 1
  %468 = urem i64 20, %467
  %469 = icmp eq i64 %468, 0
  %470 = sub i64 %467, %468
  %471 = select i1 %469, i64 0, i64 %470
  %472 = add i64 %466, 20
  %473 = add i64 %472, %471
  %474 = load ptr, ptr %461, align 8, !alias.scope !179
  %475 = getelementptr i8, ptr %474, i64 72
  %476 = load ptr, ptr %475, align 8, !alias.scope !179
  %477 = call { i64, i64 } %476(ptr nocapture nofree nonnull readonly align 8 %461) #2, !alias.scope !179
  %478 = extractvalue { i64, i64 } %477, 0
  %479 = extractvalue { i64, i64 } %477, 1
  %480 = call i64 @llvm.umax.i64(i64 %467, i64 %479) #44
  %481 = call i64 @llvm.umax.i64(i64 %480, i64 noundef 8) #44, !range !18
  %482 = urem i64 %473, %479
  %483 = icmp eq i64 %482, 0
  %484 = sub i64 %479, %482
  %485 = select i1 %483, i64 0, i64 %484
  %486 = add i64 %478, %473
  %487 = add i64 %486, %485
  %488 = urem i64 %487, %481
  %489 = icmp eq i64 %488, 0
  %490 = sub i64 %481, %488
  %491 = select i1 %489, i64 0, i64 %490
  %492 = add i64 %491, %487
  %493 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %492, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %459, ptr %493, align 8
  %494 = getelementptr inbounds i8, ptr %493, i64 8
  store ptr %461, ptr %494, align 8
  %495 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %493)
  %496 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %497 = load ptr, ptr %459, align 8
  %498 = getelementptr i8, ptr %497, i64 72
  %499 = load ptr, ptr %498, align 8
  %500 = call { i64, i64 } %499(ptr nocapture nofree nonnull readonly align 8 %459) #2
  %501 = extractvalue { i64, i64 } %500, 1
  %502 = urem i64 20, %501
  %503 = icmp eq i64 %502, 0
  %504 = sub i64 %501, %502
  %505 = add i64 %504, 20
  %506 = select i1 %503, i64 20, i64 %505
  %507 = getelementptr i8, ptr %493, i64 %506
  %508 = getelementptr i8, ptr %497, i64 64
  %509 = load ptr, ptr %508, align 8
  call void %509({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %459, ptr nocapture nofree writeonly %507) #8
  %510 = load ptr, ptr %493, align 8
  %511 = load ptr, ptr %510, align 8
  %512 = getelementptr i8, ptr %511, i64 72
  %513 = load ptr, ptr %512, align 8
  %514 = call { i64, i64 } %513(ptr nocapture nofree nonnull readonly align 8 %510) #2
  %515 = extractvalue { i64, i64 } %514, 0
  %516 = extractvalue { i64, i64 } %514, 1
  %517 = urem i64 20, %516
  %518 = icmp eq i64 %517, 0
  %519 = sub i64 %516, %517
  %520 = select i1 %518, i64 0, i64 %519
  %521 = add i64 %515, 20
  %522 = add i64 %521, %520
  %523 = load ptr, ptr %494, align 8
  %524 = load ptr, ptr %523, align 8
  %525 = getelementptr i8, ptr %524, i64 72
  %526 = load ptr, ptr %525, align 8
  %527 = call { i64, i64 } %526(ptr nocapture nofree nonnull readonly align 8 %523) #2
  %528 = extractvalue { i64, i64 } %527, 1
  %529 = urem i64 %522, %528
  %530 = icmp eq i64 %529, 0
  %531 = sub i64 %528, %529
  %532 = select i1 %530, i64 0, i64 %531
  %533 = getelementptr i8, ptr %493, i64 %522
  %534 = getelementptr i8, ptr %533, i64 %532
  %535 = getelementptr i8, ptr %524, i64 64
  %536 = load ptr, ptr %535, align 8
  call void %536({ ptr, i160 } %246, ptr nocapture nofree nonnull readonly align 8 %523, ptr nocapture nofree writeonly %534) #8
  %537 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %538 = getelementptr inbounds i8, ptr %493, i64 16
  store i32 %248, ptr %538, align 8
  store ptr @Entry, ptr %411, align 8
  %539 = ptrtoint ptr %493 to i64
  store i64 %539, ptr %413, align 4
  %540 = getelementptr i8, ptr %411, i64 24
  store i32 10, ptr %540, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1720

541:                                              ; preds = %448, %417, %385
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %542 = load i32, ptr %67, align 4
  %543 = load i32, ptr %30, align 8
  %544 = icmp slt i32 %542, %543
  br i1 %544, label %831, label %545

545:                                              ; preds = %541
  %546 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %547 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %548 = load ptr, ptr %32, align 8
  %549 = load ptr, ptr %34, align 8
  %550 = shl i32 %543, 1
  %551 = call i32 @llvm.smax.i32(i32 %550, i32 noundef 16) #43
  store i32 %551, ptr %30, align 8
  %552 = zext nneg i32 %551 to i64
  %553 = shl nuw nsw i64 %552, 5
  %554 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %553, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %554, ptr %32, align 8
  %555 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %553, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %555, ptr %34, align 8
  store i32 0, ptr %67, align 4
  %556 = icmp sgt i32 %543, 0
  br i1 %556, label %557, label %831

557:                                              ; preds = %545
  %558 = zext nneg i32 %543 to i64
  br label %559

559:                                              ; preds = %692, %557
  %560 = phi i64 [ 0, %557 ], [ %693, %692 ]
  %561 = shl nuw nsw i64 %560, 5
  %562 = getelementptr i8, ptr %548, i64 %561
  %563 = load ptr, ptr %562, align 8
  %564 = icmp ne ptr %563, @nil_typ
  %565 = icmp ne ptr %563, null
  %566 = and i1 %564, %565
  br i1 %566, label %567, label %692

567:                                              ; preds = %559
  %568 = getelementptr i8, ptr %562, i64 8
  %569 = load i64, ptr %568, align 4
  %570 = getelementptr i8, ptr %562, i64 16
  %571 = load i64, ptr %570, align 4
  %572 = getelementptr i8, ptr %563, i64 8
  %573 = getelementptr i8, ptr %563, i64 16
  %574 = getelementptr i8, ptr %563, i64 40
  %575 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %576 = load i64, ptr %572, align 4, !noalias !25
  %577 = load i64, ptr %573, align 4, !noalias !25
  %578 = load ptr, ptr %574, align 8, !noalias !25
  %579 = mul i64 %576, 4015701072841558310
  %580 = lshr i64 %579, 32
  %581 = xor i64 %580, %579
  %582 = and i64 %581, %577
  %583 = getelementptr i32, ptr %578, i64 %582
  %584 = load i32, ptr %583, align 4, !noalias !182
  %585 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %586 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %587 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %588

588:                                              ; preds = %667, %567
  %589 = phi i64 [ %571, %567 ], [ %669, %667 ]
  %590 = phi i64 [ %569, %567 ], [ %668, %667 ]
  %591 = phi i32 [ 0, %567 ], [ %604, %667 ]
  %592 = phi i1 [ true, %567 ], [ %683, %667 ]
  %593 = phi ptr [ %563, %567 ], [ %670, %667 ]
  %594 = phi i32 [ %584, %567 ], [ %682, %667 ]
  %595 = inttoptr i64 %589 to ptr
  %596 = inttoptr i64 %590 to ptr
  %597 = sext i32 %594 to i64
  %598 = getelementptr ptr, ptr %593, i64 %597
  %599 = getelementptr i8, ptr %598, i64 64
  %600 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %593, 0
  %601 = insertvalue { ptr, ptr, ptr, i32 } %600, ptr %596, 1
  %602 = insertvalue { ptr, ptr, ptr, i32 } %601, ptr %595, 2
  %603 = insertvalue { ptr, ptr, ptr, i32 } %602, i32 %594, 3
  %604 = add nuw nsw i32 %591, 1
  %605 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %593)
  %606 = load ptr, ptr %599, align 8
  %607 = call align 4 ptr %606({ ptr, ptr, ptr, i32 } %603, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %608 = call i32 %607({ ptr, ptr, ptr, i32 } %603, { ptr, ptr, ptr, i32 } %603, ptr nonnull align 8 %2) #28
  br i1 %592, label %609, label %629

609:                                              ; preds = %588
  %610 = load i32, ptr %30, align 8
  %611 = add i32 %610, -1
  %612 = and i32 %611, %608
  %613 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %614 = load ptr, ptr %32, align 8
  %615 = sext i32 %612 to i64
  %616 = shl nsw i64 %615, 5
  %617 = getelementptr i8, ptr %614, i64 %616
  %618 = load ptr, ptr %617, align 8
  %619 = getelementptr i8, ptr %617, i64 8
  %620 = load i160, ptr %619, align 4
  store ptr %593, ptr %617, align 8
  store i64 %590, ptr %619, align 4
  %621 = getelementptr i8, ptr %617, i64 16
  store i64 %589, ptr %621, align 4
  %622 = getelementptr i8, ptr %617, i64 24
  store i32 %594, ptr %622, align 4
  %623 = icmp ne ptr %618, @nil_typ
  %624 = icmp ne ptr %618, null
  %625 = and i1 %623, %624
  %626 = trunc i160 %620 to i64
  %627 = lshr i160 %620, 64
  %628 = trunc i160 %627 to i64
  br i1 %625, label %667, label %687

629:                                              ; preds = %588
  %630 = add i32 %608, 2127912214
  %631 = shl i32 %608, 12
  %632 = add i32 %630, %631
  %633 = ashr i32 %632, 19
  %634 = xor i32 %632, %633
  %635 = xor i32 %634, -949894596
  %636 = add i32 %635, 374761393
  %637 = shl i32 %635, 5
  %638 = add i32 %636, %637
  %639 = add i32 %638, -744332180
  %640 = shl i32 %638, 9
  %641 = xor i32 %639, %640
  %642 = add i32 %641, -42973499
  %643 = shl i32 %641, 3
  %644 = add i32 %642, %643
  %645 = ashr i32 %644, 16
  %646 = xor i32 %644, %645
  %647 = xor i32 %646, -1252372727
  %648 = load i32, ptr %30, align 8
  %649 = add i32 %648, -1
  %650 = and i32 %649, %647
  %651 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %652 = load ptr, ptr %34, align 8
  %653 = sext i32 %650 to i64
  %654 = shl nsw i64 %653, 5
  %655 = getelementptr i8, ptr %652, i64 %654
  %656 = load ptr, ptr %655, align 8
  %657 = getelementptr i8, ptr %655, i64 8
  %658 = load i160, ptr %657, align 4
  store ptr %593, ptr %655, align 8
  store i64 %590, ptr %657, align 4
  %659 = getelementptr i8, ptr %655, i64 16
  store i64 %589, ptr %659, align 4
  %660 = getelementptr i8, ptr %655, i64 24
  store i32 %594, ptr %660, align 4
  %661 = icmp ne ptr %656, @nil_typ
  %662 = icmp ne ptr %656, null
  %663 = and i1 %661, %662
  %664 = trunc i160 %658 to i64
  %665 = lshr i160 %658, 64
  %666 = trunc i160 %665 to i64
  br i1 %663, label %667, label %687

667:                                              ; preds = %629, %609
  %668 = phi i64 [ %626, %609 ], [ %664, %629 ]
  %669 = phi i64 [ %628, %609 ], [ %666, %629 ]
  %670 = phi ptr [ %618, %609 ], [ %656, %629 ]
  %671 = getelementptr i8, ptr %670, i64 8
  %672 = getelementptr i8, ptr %670, i64 16
  %673 = getelementptr i8, ptr %670, i64 40
  %674 = load i64, ptr %671, align 4
  %675 = load i64, ptr %672, align 4
  %676 = load ptr, ptr %673, align 8
  %677 = mul i64 %674, 4015701072841558310
  %678 = lshr i64 %677, 32
  %679 = xor i64 %678, %677
  %680 = and i64 %679, %675
  %681 = getelementptr i32, ptr %676, i64 %680
  %682 = load i32, ptr %681, align 4
  %683 = xor i1 %592, true
  %684 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %685 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %686 = icmp eq i32 %604, 100
  br i1 %686, label %691, label %588

687:                                              ; preds = %629, %609
  %688 = load i32, ptr %67, align 4
  %689 = add i32 %688, 1
  %690 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %689, ptr %67, align 4
  br label %691

691:                                              ; preds = %687, %667
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %692

692:                                              ; preds = %691, %559
  %693 = add nuw nsw i64 %560, 1
  %694 = icmp eq i64 %693, %558
  br i1 %694, label %695, label %559

695:                                              ; preds = %828, %692
  %696 = phi i64 [ %829, %828 ], [ 0, %692 ]
  %697 = shl nuw nsw i64 %696, 5
  %698 = getelementptr i8, ptr %549, i64 %697
  %699 = load ptr, ptr %698, align 8
  %700 = icmp ne ptr %699, @nil_typ
  %701 = icmp ne ptr %699, null
  %702 = and i1 %700, %701
  br i1 %702, label %703, label %828

703:                                              ; preds = %695
  %704 = getelementptr i8, ptr %698, i64 8
  %705 = load i64, ptr %704, align 4
  %706 = getelementptr i8, ptr %698, i64 16
  %707 = load i64, ptr %706, align 4
  %708 = getelementptr i8, ptr %699, i64 8
  %709 = getelementptr i8, ptr %699, i64 16
  %710 = getelementptr i8, ptr %699, i64 40
  %711 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %712 = load i64, ptr %708, align 4, !noalias !25
  %713 = load i64, ptr %709, align 4, !noalias !25
  %714 = load ptr, ptr %710, align 8, !noalias !25
  %715 = mul i64 %712, 4015701072841558310
  %716 = lshr i64 %715, 32
  %717 = xor i64 %716, %715
  %718 = and i64 %717, %713
  %719 = getelementptr i32, ptr %714, i64 %718
  %720 = load i32, ptr %719, align 4, !noalias !185
  %721 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %722 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %723 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %724

724:                                              ; preds = %803, %703
  %725 = phi i64 [ %707, %703 ], [ %805, %803 ]
  %726 = phi i64 [ %705, %703 ], [ %804, %803 ]
  %727 = phi i32 [ 0, %703 ], [ %740, %803 ]
  %728 = phi i1 [ true, %703 ], [ %819, %803 ]
  %729 = phi ptr [ %699, %703 ], [ %806, %803 ]
  %730 = phi i32 [ %720, %703 ], [ %818, %803 ]
  %731 = inttoptr i64 %725 to ptr
  %732 = inttoptr i64 %726 to ptr
  %733 = sext i32 %730 to i64
  %734 = getelementptr ptr, ptr %729, i64 %733
  %735 = getelementptr i8, ptr %734, i64 64
  %736 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %729, 0
  %737 = insertvalue { ptr, ptr, ptr, i32 } %736, ptr %732, 1
  %738 = insertvalue { ptr, ptr, ptr, i32 } %737, ptr %731, 2
  %739 = insertvalue { ptr, ptr, ptr, i32 } %738, i32 %730, 3
  %740 = add nuw nsw i32 %727, 1
  %741 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %729)
  %742 = load ptr, ptr %735, align 8
  %743 = call align 4 ptr %742({ ptr, ptr, ptr, i32 } %739, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %744 = call i32 %743({ ptr, ptr, ptr, i32 } %739, { ptr, ptr, ptr, i32 } %739, ptr nonnull align 8 %2) #28
  br i1 %728, label %745, label %765

745:                                              ; preds = %724
  %746 = load i32, ptr %30, align 8
  %747 = add i32 %746, -1
  %748 = and i32 %747, %744
  %749 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %750 = load ptr, ptr %32, align 8
  %751 = sext i32 %748 to i64
  %752 = shl nsw i64 %751, 5
  %753 = getelementptr i8, ptr %750, i64 %752
  %754 = load ptr, ptr %753, align 8
  %755 = getelementptr i8, ptr %753, i64 8
  %756 = load i160, ptr %755, align 4
  store ptr %729, ptr %753, align 8
  store i64 %726, ptr %755, align 4
  %757 = getelementptr i8, ptr %753, i64 16
  store i64 %725, ptr %757, align 4
  %758 = getelementptr i8, ptr %753, i64 24
  store i32 %730, ptr %758, align 4
  %759 = icmp ne ptr %754, @nil_typ
  %760 = icmp ne ptr %754, null
  %761 = and i1 %759, %760
  %762 = trunc i160 %756 to i64
  %763 = lshr i160 %756, 64
  %764 = trunc i160 %763 to i64
  br i1 %761, label %803, label %823

765:                                              ; preds = %724
  %766 = add i32 %744, 2127912214
  %767 = shl i32 %744, 12
  %768 = add i32 %766, %767
  %769 = ashr i32 %768, 19
  %770 = xor i32 %768, %769
  %771 = xor i32 %770, -949894596
  %772 = add i32 %771, 374761393
  %773 = shl i32 %771, 5
  %774 = add i32 %772, %773
  %775 = add i32 %774, -744332180
  %776 = shl i32 %774, 9
  %777 = xor i32 %775, %776
  %778 = add i32 %777, -42973499
  %779 = shl i32 %777, 3
  %780 = add i32 %778, %779
  %781 = ashr i32 %780, 16
  %782 = xor i32 %780, %781
  %783 = xor i32 %782, -1252372727
  %784 = load i32, ptr %30, align 8
  %785 = add i32 %784, -1
  %786 = and i32 %785, %783
  %787 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %788 = load ptr, ptr %34, align 8
  %789 = sext i32 %786 to i64
  %790 = shl nsw i64 %789, 5
  %791 = getelementptr i8, ptr %788, i64 %790
  %792 = load ptr, ptr %791, align 8
  %793 = getelementptr i8, ptr %791, i64 8
  %794 = load i160, ptr %793, align 4
  store ptr %729, ptr %791, align 8
  store i64 %726, ptr %793, align 4
  %795 = getelementptr i8, ptr %791, i64 16
  store i64 %725, ptr %795, align 4
  %796 = getelementptr i8, ptr %791, i64 24
  store i32 %730, ptr %796, align 4
  %797 = icmp ne ptr %792, @nil_typ
  %798 = icmp ne ptr %792, null
  %799 = and i1 %797, %798
  %800 = trunc i160 %794 to i64
  %801 = lshr i160 %794, 64
  %802 = trunc i160 %801 to i64
  br i1 %799, label %803, label %823

803:                                              ; preds = %765, %745
  %804 = phi i64 [ %762, %745 ], [ %800, %765 ]
  %805 = phi i64 [ %764, %745 ], [ %802, %765 ]
  %806 = phi ptr [ %754, %745 ], [ %792, %765 ]
  %807 = getelementptr i8, ptr %806, i64 8
  %808 = getelementptr i8, ptr %806, i64 16
  %809 = getelementptr i8, ptr %806, i64 40
  %810 = load i64, ptr %807, align 4
  %811 = load i64, ptr %808, align 4
  %812 = load ptr, ptr %809, align 8
  %813 = mul i64 %810, 4015701072841558310
  %814 = lshr i64 %813, 32
  %815 = xor i64 %814, %813
  %816 = and i64 %815, %811
  %817 = getelementptr i32, ptr %812, i64 %816
  %818 = load i32, ptr %817, align 4
  %819 = xor i1 %728, true
  %820 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %821 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %822 = icmp eq i32 %740, 100
  br i1 %822, label %827, label %724

823:                                              ; preds = %765, %745
  %824 = load i32, ptr %67, align 4
  %825 = add i32 %824, 1
  %826 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %825, ptr %67, align 4
  br label %827

827:                                              ; preds = %823, %803
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %828

828:                                              ; preds = %827, %695
  %829 = add nuw nsw i64 %696, 1
  %830 = icmp eq i64 %829, %558
  br i1 %830, label %831, label %695

831:                                              ; preds = %828, %545, %541
  %832 = load ptr, ptr %16, align 8
  %833 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %834 = load ptr, ptr %17, align 8
  %835 = load ptr, ptr %832, align 8
  %836 = getelementptr i8, ptr %835, i64 72
  %837 = load ptr, ptr %836, align 8
  %838 = call { i64, i64 } %837(ptr nocapture nofree nonnull readonly align 8 %832) #2
  %839 = extractvalue { i64, i64 } %838, 0
  %840 = extractvalue { i64, i64 } %838, 1
  %841 = urem i64 20, %840
  %842 = icmp eq i64 %841, 0
  %843 = sub i64 %840, %841
  %844 = select i1 %842, i64 0, i64 %843
  %845 = add i64 %839, 20
  %846 = add i64 %845, %844
  %847 = load ptr, ptr %834, align 8
  %848 = getelementptr i8, ptr %847, i64 72
  %849 = load ptr, ptr %848, align 8
  %850 = call { i64, i64 } %849(ptr nocapture nofree nonnull readonly align 8 %834) #2
  %851 = extractvalue { i64, i64 } %850, 0
  %852 = extractvalue { i64, i64 } %850, 1
  %853 = call i64 @llvm.umax.i64(i64 %840, i64 %852) #44
  %854 = call i64 @llvm.umax.i64(i64 %853, i64 noundef 8) #44, !range !18
  %855 = urem i64 %846, %852
  %856 = icmp eq i64 %855, 0
  %857 = sub i64 %852, %855
  %858 = select i1 %856, i64 0, i64 %857
  %859 = add i64 %851, %846
  %860 = add i64 %859, %858
  %861 = urem i64 %860, %854
  %862 = icmp eq i64 %861, 0
  %863 = sub i64 %854, %861
  %864 = select i1 %862, i64 0, i64 %863
  %865 = add i64 %864, %860
  %866 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %865, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %832, ptr %866, align 8
  %867 = getelementptr inbounds i8, ptr %866, i64 8
  store ptr %834, ptr %867, align 8
  %868 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %866)
  %869 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %870 = load ptr, ptr %832, align 8
  %871 = getelementptr i8, ptr %870, i64 72
  %872 = load ptr, ptr %871, align 8
  %873 = call { i64, i64 } %872(ptr nocapture nofree nonnull readonly align 8 %832) #2
  %874 = extractvalue { i64, i64 } %873, 1
  %875 = urem i64 20, %874
  %876 = icmp eq i64 %875, 0
  %877 = sub i64 %874, %875
  %878 = add i64 %877, 20
  %879 = select i1 %876, i64 20, i64 %878
  %880 = getelementptr i8, ptr %866, i64 %879
  %881 = getelementptr i8, ptr %870, i64 64
  %882 = load ptr, ptr %881, align 8
  call void %882({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %832, ptr nocapture nofree writeonly %880) #8
  %883 = load ptr, ptr %866, align 8
  %884 = load ptr, ptr %883, align 8
  %885 = getelementptr i8, ptr %884, i64 72
  %886 = load ptr, ptr %885, align 8
  %887 = call { i64, i64 } %886(ptr nocapture nofree nonnull readonly align 8 %883) #2
  %888 = extractvalue { i64, i64 } %887, 0
  %889 = extractvalue { i64, i64 } %887, 1
  %890 = urem i64 20, %889
  %891 = icmp eq i64 %890, 0
  %892 = sub i64 %889, %890
  %893 = select i1 %891, i64 0, i64 %892
  %894 = add i64 %888, 20
  %895 = add i64 %894, %893
  %896 = load ptr, ptr %867, align 8
  %897 = load ptr, ptr %896, align 8
  %898 = getelementptr i8, ptr %897, i64 72
  %899 = load ptr, ptr %898, align 8
  %900 = call { i64, i64 } %899(ptr nocapture nofree nonnull readonly align 8 %896) #2
  %901 = extractvalue { i64, i64 } %900, 1
  %902 = urem i64 %895, %901
  %903 = icmp eq i64 %902, 0
  %904 = sub i64 %901, %902
  %905 = select i1 %903, i64 0, i64 %904
  %906 = getelementptr i8, ptr %866, i64 %895
  %907 = getelementptr i8, ptr %906, i64 %905
  %908 = getelementptr i8, ptr %897, i64 64
  %909 = load ptr, ptr %908, align 8
  call void %909({ ptr, i160 } %246, ptr nocapture nofree nonnull readonly align 8 %896, ptr nocapture nofree writeonly %907) #8
  %910 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %911 = getelementptr inbounds i8, ptr %866, i64 16
  store i32 %248, ptr %911, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %912 = ptrtoint ptr %866 to i64
  %913 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %914 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %915 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %916

916:                                              ; preds = %995, %831
  %917 = phi i64 [ undef, %831 ], [ %997, %995 ]
  %918 = phi i64 [ %912, %831 ], [ %996, %995 ]
  %919 = phi i32 [ 0, %831 ], [ %932, %995 ]
  %920 = phi i1 [ true, %831 ], [ %1013, %995 ]
  %921 = phi ptr [ @Entry, %831 ], [ %998, %995 ]
  %922 = phi ptr [ %866, %831 ], [ %999, %995 ]
  %923 = phi ptr [ undef, %831 ], [ %1000, %995 ]
  %924 = phi i32 [ 10, %831 ], [ %1012, %995 ]
  %925 = sext i32 %924 to i64
  %926 = getelementptr ptr, ptr %921, i64 %925
  %927 = getelementptr i8, ptr %926, i64 64
  %928 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %921, 0
  %929 = insertvalue { ptr, ptr, ptr, i32 } %928, ptr %922, 1
  %930 = insertvalue { ptr, ptr, ptr, i32 } %929, ptr %923, 2
  %931 = insertvalue { ptr, ptr, ptr, i32 } %930, i32 %924, 3
  %932 = add nuw nsw i32 %919, 1
  %933 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %921)
  %934 = load ptr, ptr %927, align 8
  %935 = call align 4 ptr %934({ ptr, ptr, ptr, i32 } %931, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %936 = call i32 %935({ ptr, ptr, ptr, i32 } %931, { ptr, ptr, ptr, i32 } %931, ptr nonnull align 8 %2) #28
  br i1 %920, label %937, label %957

937:                                              ; preds = %916
  %938 = load i32, ptr %30, align 8
  %939 = add i32 %938, -1
  %940 = and i32 %939, %936
  %941 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %942 = load ptr, ptr %32, align 8
  %943 = sext i32 %940 to i64
  %944 = shl nsw i64 %943, 5
  %945 = getelementptr i8, ptr %942, i64 %944
  %946 = load ptr, ptr %945, align 8
  %947 = getelementptr i8, ptr %945, i64 8
  %948 = load i160, ptr %947, align 4
  store ptr %921, ptr %945, align 8
  store i64 %918, ptr %947, align 4
  %949 = getelementptr i8, ptr %945, i64 16
  store i64 %917, ptr %949, align 4
  %950 = getelementptr i8, ptr %945, i64 24
  store i32 %924, ptr %950, align 4
  %951 = icmp ne ptr %946, @nil_typ
  %952 = icmp ne ptr %946, null
  %953 = and i1 %951, %952
  %954 = trunc i160 %948 to i64
  %955 = lshr i160 %948, 64
  %956 = trunc i160 %955 to i64
  br i1 %953, label %995, label %1017

957:                                              ; preds = %916
  %958 = add i32 %936, 2127912214
  %959 = shl i32 %936, 12
  %960 = add i32 %958, %959
  %961 = ashr i32 %960, 19
  %962 = xor i32 %960, %961
  %963 = xor i32 %962, -949894596
  %964 = add i32 %963, 374761393
  %965 = shl i32 %963, 5
  %966 = add i32 %964, %965
  %967 = add i32 %966, -744332180
  %968 = shl i32 %966, 9
  %969 = xor i32 %967, %968
  %970 = add i32 %969, -42973499
  %971 = shl i32 %969, 3
  %972 = add i32 %970, %971
  %973 = ashr i32 %972, 16
  %974 = xor i32 %972, %973
  %975 = xor i32 %974, -1252372727
  %976 = load i32, ptr %30, align 8
  %977 = add i32 %976, -1
  %978 = and i32 %977, %975
  %979 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %980 = load ptr, ptr %34, align 8
  %981 = sext i32 %978 to i64
  %982 = shl nsw i64 %981, 5
  %983 = getelementptr i8, ptr %980, i64 %982
  %984 = load ptr, ptr %983, align 8
  %985 = getelementptr i8, ptr %983, i64 8
  %986 = load i160, ptr %985, align 4
  store ptr %921, ptr %983, align 8
  store i64 %918, ptr %985, align 4
  %987 = getelementptr i8, ptr %983, i64 16
  store i64 %917, ptr %987, align 4
  %988 = getelementptr i8, ptr %983, i64 24
  store i32 %924, ptr %988, align 4
  %989 = icmp ne ptr %984, @nil_typ
  %990 = icmp ne ptr %984, null
  %991 = and i1 %989, %990
  %992 = trunc i160 %986 to i64
  %993 = lshr i160 %986, 64
  %994 = trunc i160 %993 to i64
  br i1 %991, label %995, label %1017

995:                                              ; preds = %957, %937
  %996 = phi i64 [ %954, %937 ], [ %992, %957 ]
  %997 = phi i64 [ %956, %937 ], [ %994, %957 ]
  %998 = phi ptr [ %946, %937 ], [ %984, %957 ]
  %999 = inttoptr i64 %996 to ptr
  %1000 = inttoptr i64 %997 to ptr
  %1001 = getelementptr i8, ptr %998, i64 8
  %1002 = getelementptr i8, ptr %998, i64 16
  %1003 = getelementptr i8, ptr %998, i64 40
  %1004 = load i64, ptr %1001, align 4
  %1005 = load i64, ptr %1002, align 4
  %1006 = load ptr, ptr %1003, align 8
  %1007 = mul i64 %1004, 4015701072841558310
  %1008 = lshr i64 %1007, 32
  %1009 = xor i64 %1008, %1007
  %1010 = and i64 %1009, %1005
  %1011 = getelementptr i32, ptr %1006, i64 %1010
  %1012 = load i32, ptr %1011, align 4
  %1013 = xor i1 %920, true
  %1014 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1015 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1016 = icmp eq i32 %932, 100
  br i1 %1016, label %1021, label %916

1017:                                             ; preds = %957, %937
  %1018 = load i32, ptr %67, align 4
  %1019 = add i32 %1018, 1
  %1020 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1019, ptr %67, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1720

1021:                                             ; preds = %995
  %1022 = getelementptr i8, ptr %998, i64 8
  %1023 = getelementptr i8, ptr %998, i64 16
  %1024 = getelementptr i8, ptr %998, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1025 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1026 = load ptr, ptr %32, align 8
  %1027 = load ptr, ptr %34, align 8
  %1028 = load i32, ptr %30, align 8
  %1029 = shl i32 %1028, 1
  %1030 = call i32 @llvm.smax.i32(i32 %1029, i32 noundef 16) #43
  store i32 %1030, ptr %30, align 8
  %1031 = zext nneg i32 %1030 to i64
  %1032 = shl nuw nsw i64 %1031, 5
  %1033 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1032, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1033, ptr %32, align 8
  %1034 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1032, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1034, ptr %34, align 8
  store i32 0, ptr %67, align 4
  %1035 = icmp sgt i32 %1028, 0
  br i1 %1035, label %1038, label %1036

1036:                                             ; preds = %1021
  %1037 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1314

1038:                                             ; preds = %1021
  %1039 = zext nneg i32 %1028 to i64
  br label %1040

1040:                                             ; preds = %1173, %1038
  %1041 = phi i64 [ 0, %1038 ], [ %1174, %1173 ]
  %1042 = shl nuw nsw i64 %1041, 5
  %1043 = getelementptr i8, ptr %1026, i64 %1042
  %1044 = load ptr, ptr %1043, align 8
  %1045 = icmp ne ptr %1044, @nil_typ
  %1046 = icmp ne ptr %1044, null
  %1047 = and i1 %1045, %1046
  br i1 %1047, label %1048, label %1173

1048:                                             ; preds = %1040
  %1049 = getelementptr i8, ptr %1043, i64 8
  %1050 = load i64, ptr %1049, align 4
  %1051 = getelementptr i8, ptr %1043, i64 16
  %1052 = load i64, ptr %1051, align 4
  %1053 = getelementptr i8, ptr %1044, i64 8
  %1054 = getelementptr i8, ptr %1044, i64 16
  %1055 = getelementptr i8, ptr %1044, i64 40
  %1056 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1057 = load i64, ptr %1053, align 4, !noalias !25
  %1058 = load i64, ptr %1054, align 4, !noalias !25
  %1059 = load ptr, ptr %1055, align 8, !noalias !25
  %1060 = mul i64 %1057, 4015701072841558310
  %1061 = lshr i64 %1060, 32
  %1062 = xor i64 %1061, %1060
  %1063 = and i64 %1062, %1058
  %1064 = getelementptr i32, ptr %1059, i64 %1063
  %1065 = load i32, ptr %1064, align 4, !noalias !188
  %1066 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1067 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1068 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1069

1069:                                             ; preds = %1148, %1048
  %1070 = phi i64 [ %1052, %1048 ], [ %1150, %1148 ]
  %1071 = phi i64 [ %1050, %1048 ], [ %1149, %1148 ]
  %1072 = phi i32 [ 0, %1048 ], [ %1085, %1148 ]
  %1073 = phi i1 [ true, %1048 ], [ %1164, %1148 ]
  %1074 = phi ptr [ %1044, %1048 ], [ %1151, %1148 ]
  %1075 = phi i32 [ %1065, %1048 ], [ %1163, %1148 ]
  %1076 = inttoptr i64 %1070 to ptr
  %1077 = inttoptr i64 %1071 to ptr
  %1078 = sext i32 %1075 to i64
  %1079 = getelementptr ptr, ptr %1074, i64 %1078
  %1080 = getelementptr i8, ptr %1079, i64 64
  %1081 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1074, 0
  %1082 = insertvalue { ptr, ptr, ptr, i32 } %1081, ptr %1077, 1
  %1083 = insertvalue { ptr, ptr, ptr, i32 } %1082, ptr %1076, 2
  %1084 = insertvalue { ptr, ptr, ptr, i32 } %1083, i32 %1075, 3
  %1085 = add nuw nsw i32 %1072, 1
  %1086 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1074)
  %1087 = load ptr, ptr %1080, align 8
  %1088 = call align 4 ptr %1087({ ptr, ptr, ptr, i32 } %1084, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1089 = call i32 %1088({ ptr, ptr, ptr, i32 } %1084, { ptr, ptr, ptr, i32 } %1084, ptr nonnull align 8 %2) #28
  br i1 %1073, label %1090, label %1110

1090:                                             ; preds = %1069
  %1091 = load i32, ptr %30, align 8
  %1092 = add i32 %1091, -1
  %1093 = and i32 %1092, %1089
  %1094 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1095 = load ptr, ptr %32, align 8
  %1096 = sext i32 %1093 to i64
  %1097 = shl nsw i64 %1096, 5
  %1098 = getelementptr i8, ptr %1095, i64 %1097
  %1099 = load ptr, ptr %1098, align 8
  %1100 = getelementptr i8, ptr %1098, i64 8
  %1101 = load i160, ptr %1100, align 4
  store ptr %1074, ptr %1098, align 8
  store i64 %1071, ptr %1100, align 4
  %1102 = getelementptr i8, ptr %1098, i64 16
  store i64 %1070, ptr %1102, align 4
  %1103 = getelementptr i8, ptr %1098, i64 24
  store i32 %1075, ptr %1103, align 4
  %1104 = icmp ne ptr %1099, @nil_typ
  %1105 = icmp ne ptr %1099, null
  %1106 = and i1 %1104, %1105
  %1107 = trunc i160 %1101 to i64
  %1108 = lshr i160 %1101, 64
  %1109 = trunc i160 %1108 to i64
  br i1 %1106, label %1148, label %1168

1110:                                             ; preds = %1069
  %1111 = add i32 %1089, 2127912214
  %1112 = shl i32 %1089, 12
  %1113 = add i32 %1111, %1112
  %1114 = ashr i32 %1113, 19
  %1115 = xor i32 %1113, %1114
  %1116 = xor i32 %1115, -949894596
  %1117 = add i32 %1116, 374761393
  %1118 = shl i32 %1116, 5
  %1119 = add i32 %1117, %1118
  %1120 = add i32 %1119, -744332180
  %1121 = shl i32 %1119, 9
  %1122 = xor i32 %1120, %1121
  %1123 = add i32 %1122, -42973499
  %1124 = shl i32 %1122, 3
  %1125 = add i32 %1123, %1124
  %1126 = ashr i32 %1125, 16
  %1127 = xor i32 %1125, %1126
  %1128 = xor i32 %1127, -1252372727
  %1129 = load i32, ptr %30, align 8
  %1130 = add i32 %1129, -1
  %1131 = and i32 %1130, %1128
  %1132 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1133 = load ptr, ptr %34, align 8
  %1134 = sext i32 %1131 to i64
  %1135 = shl nsw i64 %1134, 5
  %1136 = getelementptr i8, ptr %1133, i64 %1135
  %1137 = load ptr, ptr %1136, align 8
  %1138 = getelementptr i8, ptr %1136, i64 8
  %1139 = load i160, ptr %1138, align 4
  store ptr %1074, ptr %1136, align 8
  store i64 %1071, ptr %1138, align 4
  %1140 = getelementptr i8, ptr %1136, i64 16
  store i64 %1070, ptr %1140, align 4
  %1141 = getelementptr i8, ptr %1136, i64 24
  store i32 %1075, ptr %1141, align 4
  %1142 = icmp ne ptr %1137, @nil_typ
  %1143 = icmp ne ptr %1137, null
  %1144 = and i1 %1142, %1143
  %1145 = trunc i160 %1139 to i64
  %1146 = lshr i160 %1139, 64
  %1147 = trunc i160 %1146 to i64
  br i1 %1144, label %1148, label %1168

1148:                                             ; preds = %1110, %1090
  %1149 = phi i64 [ %1107, %1090 ], [ %1145, %1110 ]
  %1150 = phi i64 [ %1109, %1090 ], [ %1147, %1110 ]
  %1151 = phi ptr [ %1099, %1090 ], [ %1137, %1110 ]
  %1152 = getelementptr i8, ptr %1151, i64 8
  %1153 = getelementptr i8, ptr %1151, i64 16
  %1154 = getelementptr i8, ptr %1151, i64 40
  %1155 = load i64, ptr %1152, align 4
  %1156 = load i64, ptr %1153, align 4
  %1157 = load ptr, ptr %1154, align 8
  %1158 = mul i64 %1155, 4015701072841558310
  %1159 = lshr i64 %1158, 32
  %1160 = xor i64 %1159, %1158
  %1161 = and i64 %1160, %1156
  %1162 = getelementptr i32, ptr %1157, i64 %1161
  %1163 = load i32, ptr %1162, align 4
  %1164 = xor i1 %1073, true
  %1165 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1166 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1167 = icmp eq i32 %1085, 100
  br i1 %1167, label %1172, label %1069

1168:                                             ; preds = %1110, %1090
  %1169 = load i32, ptr %67, align 4
  %1170 = add i32 %1169, 1
  %1171 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1170, ptr %67, align 4
  br label %1172

1172:                                             ; preds = %1168, %1148
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1173

1173:                                             ; preds = %1172, %1040
  %1174 = add nuw nsw i64 %1041, 1
  %1175 = icmp eq i64 %1174, %1039
  br i1 %1175, label %1176, label %1040

1176:                                             ; preds = %1173
  %1177 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1178

1178:                                             ; preds = %1311, %1176
  %1179 = phi i64 [ 0, %1176 ], [ %1312, %1311 ]
  %1180 = shl nuw nsw i64 %1179, 5
  %1181 = getelementptr i8, ptr %1027, i64 %1180
  %1182 = load ptr, ptr %1181, align 8
  %1183 = icmp ne ptr %1182, @nil_typ
  %1184 = icmp ne ptr %1182, null
  %1185 = and i1 %1183, %1184
  br i1 %1185, label %1186, label %1311

1186:                                             ; preds = %1178
  %1187 = getelementptr i8, ptr %1181, i64 8
  %1188 = load i64, ptr %1187, align 4
  %1189 = getelementptr i8, ptr %1181, i64 16
  %1190 = load i64, ptr %1189, align 4
  %1191 = getelementptr i8, ptr %1182, i64 8
  %1192 = getelementptr i8, ptr %1182, i64 16
  %1193 = getelementptr i8, ptr %1182, i64 40
  %1194 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1195 = load i64, ptr %1191, align 4, !noalias !25
  %1196 = load i64, ptr %1192, align 4, !noalias !25
  %1197 = load ptr, ptr %1193, align 8, !noalias !25
  %1198 = mul i64 %1195, 4015701072841558310
  %1199 = lshr i64 %1198, 32
  %1200 = xor i64 %1199, %1198
  %1201 = and i64 %1200, %1196
  %1202 = getelementptr i32, ptr %1197, i64 %1201
  %1203 = load i32, ptr %1202, align 4, !noalias !191
  %1204 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1205 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1206 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1207

1207:                                             ; preds = %1286, %1186
  %1208 = phi i64 [ %1190, %1186 ], [ %1288, %1286 ]
  %1209 = phi i64 [ %1188, %1186 ], [ %1287, %1286 ]
  %1210 = phi i32 [ 0, %1186 ], [ %1223, %1286 ]
  %1211 = phi i1 [ true, %1186 ], [ %1302, %1286 ]
  %1212 = phi ptr [ %1182, %1186 ], [ %1289, %1286 ]
  %1213 = phi i32 [ %1203, %1186 ], [ %1301, %1286 ]
  %1214 = inttoptr i64 %1208 to ptr
  %1215 = inttoptr i64 %1209 to ptr
  %1216 = sext i32 %1213 to i64
  %1217 = getelementptr ptr, ptr %1212, i64 %1216
  %1218 = getelementptr i8, ptr %1217, i64 64
  %1219 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1212, 0
  %1220 = insertvalue { ptr, ptr, ptr, i32 } %1219, ptr %1215, 1
  %1221 = insertvalue { ptr, ptr, ptr, i32 } %1220, ptr %1214, 2
  %1222 = insertvalue { ptr, ptr, ptr, i32 } %1221, i32 %1213, 3
  %1223 = add nuw nsw i32 %1210, 1
  %1224 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1212)
  %1225 = load ptr, ptr %1218, align 8
  %1226 = call align 4 ptr %1225({ ptr, ptr, ptr, i32 } %1222, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1227 = call i32 %1226({ ptr, ptr, ptr, i32 } %1222, { ptr, ptr, ptr, i32 } %1222, ptr nonnull align 8 %2) #28
  br i1 %1211, label %1228, label %1248

1228:                                             ; preds = %1207
  %1229 = load i32, ptr %30, align 8
  %1230 = add i32 %1229, -1
  %1231 = and i32 %1230, %1227
  %1232 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1233 = load ptr, ptr %32, align 8
  %1234 = sext i32 %1231 to i64
  %1235 = shl nsw i64 %1234, 5
  %1236 = getelementptr i8, ptr %1233, i64 %1235
  %1237 = load ptr, ptr %1236, align 8
  %1238 = getelementptr i8, ptr %1236, i64 8
  %1239 = load i160, ptr %1238, align 4
  store ptr %1212, ptr %1236, align 8
  store i64 %1209, ptr %1238, align 4
  %1240 = getelementptr i8, ptr %1236, i64 16
  store i64 %1208, ptr %1240, align 4
  %1241 = getelementptr i8, ptr %1236, i64 24
  store i32 %1213, ptr %1241, align 4
  %1242 = icmp ne ptr %1237, @nil_typ
  %1243 = icmp ne ptr %1237, null
  %1244 = and i1 %1242, %1243
  %1245 = trunc i160 %1239 to i64
  %1246 = lshr i160 %1239, 64
  %1247 = trunc i160 %1246 to i64
  br i1 %1244, label %1286, label %1306

1248:                                             ; preds = %1207
  %1249 = add i32 %1227, 2127912214
  %1250 = shl i32 %1227, 12
  %1251 = add i32 %1249, %1250
  %1252 = ashr i32 %1251, 19
  %1253 = xor i32 %1251, %1252
  %1254 = xor i32 %1253, -949894596
  %1255 = add i32 %1254, 374761393
  %1256 = shl i32 %1254, 5
  %1257 = add i32 %1255, %1256
  %1258 = add i32 %1257, -744332180
  %1259 = shl i32 %1257, 9
  %1260 = xor i32 %1258, %1259
  %1261 = add i32 %1260, -42973499
  %1262 = shl i32 %1260, 3
  %1263 = add i32 %1261, %1262
  %1264 = ashr i32 %1263, 16
  %1265 = xor i32 %1263, %1264
  %1266 = xor i32 %1265, -1252372727
  %1267 = load i32, ptr %30, align 8
  %1268 = add i32 %1267, -1
  %1269 = and i32 %1268, %1266
  %1270 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1271 = load ptr, ptr %34, align 8
  %1272 = sext i32 %1269 to i64
  %1273 = shl nsw i64 %1272, 5
  %1274 = getelementptr i8, ptr %1271, i64 %1273
  %1275 = load ptr, ptr %1274, align 8
  %1276 = getelementptr i8, ptr %1274, i64 8
  %1277 = load i160, ptr %1276, align 4
  store ptr %1212, ptr %1274, align 8
  store i64 %1209, ptr %1276, align 4
  %1278 = getelementptr i8, ptr %1274, i64 16
  store i64 %1208, ptr %1278, align 4
  %1279 = getelementptr i8, ptr %1274, i64 24
  store i32 %1213, ptr %1279, align 4
  %1280 = icmp ne ptr %1275, @nil_typ
  %1281 = icmp ne ptr %1275, null
  %1282 = and i1 %1280, %1281
  %1283 = trunc i160 %1277 to i64
  %1284 = lshr i160 %1277, 64
  %1285 = trunc i160 %1284 to i64
  br i1 %1282, label %1286, label %1306

1286:                                             ; preds = %1248, %1228
  %1287 = phi i64 [ %1245, %1228 ], [ %1283, %1248 ]
  %1288 = phi i64 [ %1247, %1228 ], [ %1285, %1248 ]
  %1289 = phi ptr [ %1237, %1228 ], [ %1275, %1248 ]
  %1290 = getelementptr i8, ptr %1289, i64 8
  %1291 = getelementptr i8, ptr %1289, i64 16
  %1292 = getelementptr i8, ptr %1289, i64 40
  %1293 = load i64, ptr %1290, align 4
  %1294 = load i64, ptr %1291, align 4
  %1295 = load ptr, ptr %1292, align 8
  %1296 = mul i64 %1293, 4015701072841558310
  %1297 = lshr i64 %1296, 32
  %1298 = xor i64 %1297, %1296
  %1299 = and i64 %1298, %1294
  %1300 = getelementptr i32, ptr %1295, i64 %1299
  %1301 = load i32, ptr %1300, align 4
  %1302 = xor i1 %1211, true
  %1303 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1304 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1305 = icmp eq i32 %1223, 100
  br i1 %1305, label %1310, label %1207

1306:                                             ; preds = %1248, %1228
  %1307 = load i32, ptr %67, align 4
  %1308 = add i32 %1307, 1
  %1309 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1308, ptr %67, align 4
  br label %1310

1310:                                             ; preds = %1306, %1286
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1311

1311:                                             ; preds = %1310, %1178
  %1312 = add nuw nsw i64 %1179, 1
  %1313 = icmp eq i64 %1312, %1039
  br i1 %1313, label %1314, label %1178

1314:                                             ; preds = %1311, %1036
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1315 = load i64, ptr %1022, align 4, !noalias !25
  %1316 = load i64, ptr %1023, align 4, !noalias !25
  %1317 = load ptr, ptr %1024, align 8, !noalias !25
  %1318 = mul i64 %1315, 4015701072841558310
  %1319 = lshr i64 %1318, 32
  %1320 = xor i64 %1319, %1318
  %1321 = and i64 %1320, %1316
  %1322 = getelementptr i32, ptr %1317, i64 %1321
  %1323 = load i32, ptr %1322, align 4, !noalias !194
  %1324 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1325 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1326 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1327

1327:                                             ; preds = %1406, %1314
  %1328 = phi i64 [ %997, %1314 ], [ %1408, %1406 ]
  %1329 = phi i64 [ %996, %1314 ], [ %1407, %1406 ]
  %1330 = phi i32 [ 0, %1314 ], [ %1343, %1406 ]
  %1331 = phi i1 [ true, %1314 ], [ %1422, %1406 ]
  %1332 = phi ptr [ %998, %1314 ], [ %1409, %1406 ]
  %1333 = phi i32 [ %1323, %1314 ], [ %1421, %1406 ]
  %1334 = inttoptr i64 %1328 to ptr
  %1335 = inttoptr i64 %1329 to ptr
  %1336 = sext i32 %1333 to i64
  %1337 = getelementptr ptr, ptr %1332, i64 %1336
  %1338 = getelementptr i8, ptr %1337, i64 64
  %1339 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1332, 0
  %1340 = insertvalue { ptr, ptr, ptr, i32 } %1339, ptr %1335, 1
  %1341 = insertvalue { ptr, ptr, ptr, i32 } %1340, ptr %1334, 2
  %1342 = insertvalue { ptr, ptr, ptr, i32 } %1341, i32 %1333, 3
  %1343 = add nuw nsw i32 %1330, 1
  %1344 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1332)
  %1345 = load ptr, ptr %1338, align 8
  %1346 = call align 4 ptr %1345({ ptr, ptr, ptr, i32 } %1342, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1347 = call i32 %1346({ ptr, ptr, ptr, i32 } %1342, { ptr, ptr, ptr, i32 } %1342, ptr nonnull align 8 %2) #28
  br i1 %1331, label %1348, label %1368

1348:                                             ; preds = %1327
  %1349 = load i32, ptr %30, align 8
  %1350 = add i32 %1349, -1
  %1351 = and i32 %1350, %1347
  %1352 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1353 = load ptr, ptr %32, align 8
  %1354 = sext i32 %1351 to i64
  %1355 = shl nsw i64 %1354, 5
  %1356 = getelementptr i8, ptr %1353, i64 %1355
  %1357 = load ptr, ptr %1356, align 8
  %1358 = getelementptr i8, ptr %1356, i64 8
  %1359 = load i160, ptr %1358, align 4
  store ptr %1332, ptr %1356, align 8
  store i64 %1329, ptr %1358, align 4
  %1360 = getelementptr i8, ptr %1356, i64 16
  store i64 %1328, ptr %1360, align 4
  %1361 = getelementptr i8, ptr %1356, i64 24
  store i32 %1333, ptr %1361, align 4
  %1362 = icmp ne ptr %1357, @nil_typ
  %1363 = icmp ne ptr %1357, null
  %1364 = and i1 %1362, %1363
  %1365 = trunc i160 %1359 to i64
  %1366 = lshr i160 %1359, 64
  %1367 = trunc i160 %1366 to i64
  br i1 %1364, label %1406, label %1426

1368:                                             ; preds = %1327
  %1369 = add i32 %1347, 2127912214
  %1370 = shl i32 %1347, 12
  %1371 = add i32 %1369, %1370
  %1372 = ashr i32 %1371, 19
  %1373 = xor i32 %1371, %1372
  %1374 = xor i32 %1373, -949894596
  %1375 = add i32 %1374, 374761393
  %1376 = shl i32 %1374, 5
  %1377 = add i32 %1375, %1376
  %1378 = add i32 %1377, -744332180
  %1379 = shl i32 %1377, 9
  %1380 = xor i32 %1378, %1379
  %1381 = add i32 %1380, -42973499
  %1382 = shl i32 %1380, 3
  %1383 = add i32 %1381, %1382
  %1384 = ashr i32 %1383, 16
  %1385 = xor i32 %1383, %1384
  %1386 = xor i32 %1385, -1252372727
  %1387 = load i32, ptr %30, align 8
  %1388 = add i32 %1387, -1
  %1389 = and i32 %1388, %1386
  %1390 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1391 = load ptr, ptr %34, align 8
  %1392 = sext i32 %1389 to i64
  %1393 = shl nsw i64 %1392, 5
  %1394 = getelementptr i8, ptr %1391, i64 %1393
  %1395 = load ptr, ptr %1394, align 8
  %1396 = getelementptr i8, ptr %1394, i64 8
  %1397 = load i160, ptr %1396, align 4
  store ptr %1332, ptr %1394, align 8
  store i64 %1329, ptr %1396, align 4
  %1398 = getelementptr i8, ptr %1394, i64 16
  store i64 %1328, ptr %1398, align 4
  %1399 = getelementptr i8, ptr %1394, i64 24
  store i32 %1333, ptr %1399, align 4
  %1400 = icmp ne ptr %1395, @nil_typ
  %1401 = icmp ne ptr %1395, null
  %1402 = and i1 %1400, %1401
  %1403 = trunc i160 %1397 to i64
  %1404 = lshr i160 %1397, 64
  %1405 = trunc i160 %1404 to i64
  br i1 %1402, label %1406, label %1426

1406:                                             ; preds = %1368, %1348
  %1407 = phi i64 [ %1365, %1348 ], [ %1403, %1368 ]
  %1408 = phi i64 [ %1367, %1348 ], [ %1405, %1368 ]
  %1409 = phi ptr [ %1357, %1348 ], [ %1395, %1368 ]
  %1410 = getelementptr i8, ptr %1409, i64 8
  %1411 = getelementptr i8, ptr %1409, i64 16
  %1412 = getelementptr i8, ptr %1409, i64 40
  %1413 = load i64, ptr %1410, align 4
  %1414 = load i64, ptr %1411, align 4
  %1415 = load ptr, ptr %1412, align 8
  %1416 = mul i64 %1413, 4015701072841558310
  %1417 = lshr i64 %1416, 32
  %1418 = xor i64 %1417, %1416
  %1419 = and i64 %1418, %1414
  %1420 = getelementptr i32, ptr %1415, i64 %1419
  %1421 = load i32, ptr %1420, align 4
  %1422 = xor i1 %1331, true
  %1423 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1424 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1425 = icmp eq i32 %1343, 100
  br i1 %1425, label %1430, label %1327

1426:                                             ; preds = %1368, %1348
  %1427 = load i32, ptr %67, align 4
  %1428 = add i32 %1427, 1
  %1429 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1428, ptr %67, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1720

1430:                                             ; preds = %1406
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1431 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1432 = load ptr, ptr %32, align 8
  %1433 = load ptr, ptr %34, align 8
  %1434 = load i32, ptr %30, align 8
  %1435 = shl i32 %1434, 1
  %1436 = call i32 @llvm.smax.i32(i32 %1435, i32 noundef 16) #43
  store i32 %1436, ptr %30, align 8
  %1437 = zext nneg i32 %1436 to i64
  %1438 = shl nuw nsw i64 %1437, 5
  %1439 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1438, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1439, ptr %32, align 8
  %1440 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1438, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1440, ptr %34, align 8
  store i32 0, ptr %67, align 4
  %1441 = icmp sgt i32 %1434, 0
  br i1 %1441, label %1444, label %1442

1442:                                             ; preds = %1430
  %1443 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1720

1444:                                             ; preds = %1430
  %1445 = zext nneg i32 %1434 to i64
  br label %1446

1446:                                             ; preds = %1579, %1444
  %1447 = phi i64 [ 0, %1444 ], [ %1580, %1579 ]
  %1448 = shl nuw nsw i64 %1447, 5
  %1449 = getelementptr i8, ptr %1432, i64 %1448
  %1450 = load ptr, ptr %1449, align 8
  %1451 = icmp ne ptr %1450, @nil_typ
  %1452 = icmp ne ptr %1450, null
  %1453 = and i1 %1451, %1452
  br i1 %1453, label %1454, label %1579

1454:                                             ; preds = %1446
  %1455 = getelementptr i8, ptr %1449, i64 8
  %1456 = load i64, ptr %1455, align 4
  %1457 = getelementptr i8, ptr %1449, i64 16
  %1458 = load i64, ptr %1457, align 4
  %1459 = getelementptr i8, ptr %1450, i64 8
  %1460 = getelementptr i8, ptr %1450, i64 16
  %1461 = getelementptr i8, ptr %1450, i64 40
  %1462 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1463 = load i64, ptr %1459, align 4, !noalias !25
  %1464 = load i64, ptr %1460, align 4, !noalias !25
  %1465 = load ptr, ptr %1461, align 8, !noalias !25
  %1466 = mul i64 %1463, 4015701072841558310
  %1467 = lshr i64 %1466, 32
  %1468 = xor i64 %1467, %1466
  %1469 = and i64 %1468, %1464
  %1470 = getelementptr i32, ptr %1465, i64 %1469
  %1471 = load i32, ptr %1470, align 4, !noalias !197
  %1472 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1473 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1474 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1475

1475:                                             ; preds = %1554, %1454
  %1476 = phi i64 [ %1458, %1454 ], [ %1556, %1554 ]
  %1477 = phi i64 [ %1456, %1454 ], [ %1555, %1554 ]
  %1478 = phi i32 [ 0, %1454 ], [ %1491, %1554 ]
  %1479 = phi i1 [ true, %1454 ], [ %1570, %1554 ]
  %1480 = phi ptr [ %1450, %1454 ], [ %1557, %1554 ]
  %1481 = phi i32 [ %1471, %1454 ], [ %1569, %1554 ]
  %1482 = inttoptr i64 %1476 to ptr
  %1483 = inttoptr i64 %1477 to ptr
  %1484 = sext i32 %1481 to i64
  %1485 = getelementptr ptr, ptr %1480, i64 %1484
  %1486 = getelementptr i8, ptr %1485, i64 64
  %1487 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1480, 0
  %1488 = insertvalue { ptr, ptr, ptr, i32 } %1487, ptr %1483, 1
  %1489 = insertvalue { ptr, ptr, ptr, i32 } %1488, ptr %1482, 2
  %1490 = insertvalue { ptr, ptr, ptr, i32 } %1489, i32 %1481, 3
  %1491 = add nuw nsw i32 %1478, 1
  %1492 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1480)
  %1493 = load ptr, ptr %1486, align 8
  %1494 = call align 4 ptr %1493({ ptr, ptr, ptr, i32 } %1490, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1495 = call i32 %1494({ ptr, ptr, ptr, i32 } %1490, { ptr, ptr, ptr, i32 } %1490, ptr nonnull align 8 %2) #28
  br i1 %1479, label %1496, label %1516

1496:                                             ; preds = %1475
  %1497 = load i32, ptr %30, align 8
  %1498 = add i32 %1497, -1
  %1499 = and i32 %1498, %1495
  %1500 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1501 = load ptr, ptr %32, align 8
  %1502 = sext i32 %1499 to i64
  %1503 = shl nsw i64 %1502, 5
  %1504 = getelementptr i8, ptr %1501, i64 %1503
  %1505 = load ptr, ptr %1504, align 8
  %1506 = getelementptr i8, ptr %1504, i64 8
  %1507 = load i160, ptr %1506, align 4
  store ptr %1480, ptr %1504, align 8
  store i64 %1477, ptr %1506, align 4
  %1508 = getelementptr i8, ptr %1504, i64 16
  store i64 %1476, ptr %1508, align 4
  %1509 = getelementptr i8, ptr %1504, i64 24
  store i32 %1481, ptr %1509, align 4
  %1510 = icmp ne ptr %1505, @nil_typ
  %1511 = icmp ne ptr %1505, null
  %1512 = and i1 %1510, %1511
  %1513 = trunc i160 %1507 to i64
  %1514 = lshr i160 %1507, 64
  %1515 = trunc i160 %1514 to i64
  br i1 %1512, label %1554, label %1574

1516:                                             ; preds = %1475
  %1517 = add i32 %1495, 2127912214
  %1518 = shl i32 %1495, 12
  %1519 = add i32 %1517, %1518
  %1520 = ashr i32 %1519, 19
  %1521 = xor i32 %1519, %1520
  %1522 = xor i32 %1521, -949894596
  %1523 = add i32 %1522, 374761393
  %1524 = shl i32 %1522, 5
  %1525 = add i32 %1523, %1524
  %1526 = add i32 %1525, -744332180
  %1527 = shl i32 %1525, 9
  %1528 = xor i32 %1526, %1527
  %1529 = add i32 %1528, -42973499
  %1530 = shl i32 %1528, 3
  %1531 = add i32 %1529, %1530
  %1532 = ashr i32 %1531, 16
  %1533 = xor i32 %1531, %1532
  %1534 = xor i32 %1533, -1252372727
  %1535 = load i32, ptr %30, align 8
  %1536 = add i32 %1535, -1
  %1537 = and i32 %1536, %1534
  %1538 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1539 = load ptr, ptr %34, align 8
  %1540 = sext i32 %1537 to i64
  %1541 = shl nsw i64 %1540, 5
  %1542 = getelementptr i8, ptr %1539, i64 %1541
  %1543 = load ptr, ptr %1542, align 8
  %1544 = getelementptr i8, ptr %1542, i64 8
  %1545 = load i160, ptr %1544, align 4
  store ptr %1480, ptr %1542, align 8
  store i64 %1477, ptr %1544, align 4
  %1546 = getelementptr i8, ptr %1542, i64 16
  store i64 %1476, ptr %1546, align 4
  %1547 = getelementptr i8, ptr %1542, i64 24
  store i32 %1481, ptr %1547, align 4
  %1548 = icmp ne ptr %1543, @nil_typ
  %1549 = icmp ne ptr %1543, null
  %1550 = and i1 %1548, %1549
  %1551 = trunc i160 %1545 to i64
  %1552 = lshr i160 %1545, 64
  %1553 = trunc i160 %1552 to i64
  br i1 %1550, label %1554, label %1574

1554:                                             ; preds = %1516, %1496
  %1555 = phi i64 [ %1513, %1496 ], [ %1551, %1516 ]
  %1556 = phi i64 [ %1515, %1496 ], [ %1553, %1516 ]
  %1557 = phi ptr [ %1505, %1496 ], [ %1543, %1516 ]
  %1558 = getelementptr i8, ptr %1557, i64 8
  %1559 = getelementptr i8, ptr %1557, i64 16
  %1560 = getelementptr i8, ptr %1557, i64 40
  %1561 = load i64, ptr %1558, align 4
  %1562 = load i64, ptr %1559, align 4
  %1563 = load ptr, ptr %1560, align 8
  %1564 = mul i64 %1561, 4015701072841558310
  %1565 = lshr i64 %1564, 32
  %1566 = xor i64 %1565, %1564
  %1567 = and i64 %1566, %1562
  %1568 = getelementptr i32, ptr %1563, i64 %1567
  %1569 = load i32, ptr %1568, align 4
  %1570 = xor i1 %1479, true
  %1571 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1572 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1573 = icmp eq i32 %1491, 100
  br i1 %1573, label %1578, label %1475

1574:                                             ; preds = %1516, %1496
  %1575 = load i32, ptr %67, align 4
  %1576 = add i32 %1575, 1
  %1577 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1576, ptr %67, align 4
  br label %1578

1578:                                             ; preds = %1574, %1554
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1579

1579:                                             ; preds = %1578, %1446
  %1580 = add nuw nsw i64 %1447, 1
  %1581 = icmp eq i64 %1580, %1445
  br i1 %1581, label %1582, label %1446

1582:                                             ; preds = %1579
  %1583 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1584

1584:                                             ; preds = %1717, %1582
  %1585 = phi i64 [ 0, %1582 ], [ %1718, %1717 ]
  %1586 = shl nuw nsw i64 %1585, 5
  %1587 = getelementptr i8, ptr %1433, i64 %1586
  %1588 = load ptr, ptr %1587, align 8
  %1589 = icmp ne ptr %1588, @nil_typ
  %1590 = icmp ne ptr %1588, null
  %1591 = and i1 %1589, %1590
  br i1 %1591, label %1592, label %1717

1592:                                             ; preds = %1584
  %1593 = getelementptr i8, ptr %1587, i64 8
  %1594 = load i64, ptr %1593, align 4
  %1595 = getelementptr i8, ptr %1587, i64 16
  %1596 = load i64, ptr %1595, align 4
  %1597 = getelementptr i8, ptr %1588, i64 8
  %1598 = getelementptr i8, ptr %1588, i64 16
  %1599 = getelementptr i8, ptr %1588, i64 40
  %1600 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1601 = load i64, ptr %1597, align 4, !noalias !25
  %1602 = load i64, ptr %1598, align 4, !noalias !25
  %1603 = load ptr, ptr %1599, align 8, !noalias !25
  %1604 = mul i64 %1601, 4015701072841558310
  %1605 = lshr i64 %1604, 32
  %1606 = xor i64 %1605, %1604
  %1607 = and i64 %1606, %1602
  %1608 = getelementptr i32, ptr %1603, i64 %1607
  %1609 = load i32, ptr %1608, align 4, !noalias !200
  %1610 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1611 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1612 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1613

1613:                                             ; preds = %1692, %1592
  %1614 = phi i64 [ %1596, %1592 ], [ %1694, %1692 ]
  %1615 = phi i64 [ %1594, %1592 ], [ %1693, %1692 ]
  %1616 = phi i32 [ 0, %1592 ], [ %1629, %1692 ]
  %1617 = phi i1 [ true, %1592 ], [ %1708, %1692 ]
  %1618 = phi ptr [ %1588, %1592 ], [ %1695, %1692 ]
  %1619 = phi i32 [ %1609, %1592 ], [ %1707, %1692 ]
  %1620 = inttoptr i64 %1614 to ptr
  %1621 = inttoptr i64 %1615 to ptr
  %1622 = sext i32 %1619 to i64
  %1623 = getelementptr ptr, ptr %1618, i64 %1622
  %1624 = getelementptr i8, ptr %1623, i64 64
  %1625 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1618, 0
  %1626 = insertvalue { ptr, ptr, ptr, i32 } %1625, ptr %1621, 1
  %1627 = insertvalue { ptr, ptr, ptr, i32 } %1626, ptr %1620, 2
  %1628 = insertvalue { ptr, ptr, ptr, i32 } %1627, i32 %1619, 3
  %1629 = add nuw nsw i32 %1616, 1
  %1630 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1618)
  %1631 = load ptr, ptr %1624, align 8
  %1632 = call align 4 ptr %1631({ ptr, ptr, ptr, i32 } %1628, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1633 = call i32 %1632({ ptr, ptr, ptr, i32 } %1628, { ptr, ptr, ptr, i32 } %1628, ptr nonnull align 8 %2) #28
  br i1 %1617, label %1634, label %1654

1634:                                             ; preds = %1613
  %1635 = load i32, ptr %30, align 8
  %1636 = add i32 %1635, -1
  %1637 = and i32 %1636, %1633
  %1638 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1639 = load ptr, ptr %32, align 8
  %1640 = sext i32 %1637 to i64
  %1641 = shl nsw i64 %1640, 5
  %1642 = getelementptr i8, ptr %1639, i64 %1641
  %1643 = load ptr, ptr %1642, align 8
  %1644 = getelementptr i8, ptr %1642, i64 8
  %1645 = load i160, ptr %1644, align 4
  store ptr %1618, ptr %1642, align 8
  store i64 %1615, ptr %1644, align 4
  %1646 = getelementptr i8, ptr %1642, i64 16
  store i64 %1614, ptr %1646, align 4
  %1647 = getelementptr i8, ptr %1642, i64 24
  store i32 %1619, ptr %1647, align 4
  %1648 = icmp ne ptr %1643, @nil_typ
  %1649 = icmp ne ptr %1643, null
  %1650 = and i1 %1648, %1649
  %1651 = trunc i160 %1645 to i64
  %1652 = lshr i160 %1645, 64
  %1653 = trunc i160 %1652 to i64
  br i1 %1650, label %1692, label %1712

1654:                                             ; preds = %1613
  %1655 = add i32 %1633, 2127912214
  %1656 = shl i32 %1633, 12
  %1657 = add i32 %1655, %1656
  %1658 = ashr i32 %1657, 19
  %1659 = xor i32 %1657, %1658
  %1660 = xor i32 %1659, -949894596
  %1661 = add i32 %1660, 374761393
  %1662 = shl i32 %1660, 5
  %1663 = add i32 %1661, %1662
  %1664 = add i32 %1663, -744332180
  %1665 = shl i32 %1663, 9
  %1666 = xor i32 %1664, %1665
  %1667 = add i32 %1666, -42973499
  %1668 = shl i32 %1666, 3
  %1669 = add i32 %1667, %1668
  %1670 = ashr i32 %1669, 16
  %1671 = xor i32 %1669, %1670
  %1672 = xor i32 %1671, -1252372727
  %1673 = load i32, ptr %30, align 8
  %1674 = add i32 %1673, -1
  %1675 = and i32 %1674, %1672
  %1676 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1677 = load ptr, ptr %34, align 8
  %1678 = sext i32 %1675 to i64
  %1679 = shl nsw i64 %1678, 5
  %1680 = getelementptr i8, ptr %1677, i64 %1679
  %1681 = load ptr, ptr %1680, align 8
  %1682 = getelementptr i8, ptr %1680, i64 8
  %1683 = load i160, ptr %1682, align 4
  store ptr %1618, ptr %1680, align 8
  store i64 %1615, ptr %1682, align 4
  %1684 = getelementptr i8, ptr %1680, i64 16
  store i64 %1614, ptr %1684, align 4
  %1685 = getelementptr i8, ptr %1680, i64 24
  store i32 %1619, ptr %1685, align 4
  %1686 = icmp ne ptr %1681, @nil_typ
  %1687 = icmp ne ptr %1681, null
  %1688 = and i1 %1686, %1687
  %1689 = trunc i160 %1683 to i64
  %1690 = lshr i160 %1683, 64
  %1691 = trunc i160 %1690 to i64
  br i1 %1688, label %1692, label %1712

1692:                                             ; preds = %1654, %1634
  %1693 = phi i64 [ %1651, %1634 ], [ %1689, %1654 ]
  %1694 = phi i64 [ %1653, %1634 ], [ %1691, %1654 ]
  %1695 = phi ptr [ %1643, %1634 ], [ %1681, %1654 ]
  %1696 = getelementptr i8, ptr %1695, i64 8
  %1697 = getelementptr i8, ptr %1695, i64 16
  %1698 = getelementptr i8, ptr %1695, i64 40
  %1699 = load i64, ptr %1696, align 4
  %1700 = load i64, ptr %1697, align 4
  %1701 = load ptr, ptr %1698, align 8
  %1702 = mul i64 %1699, 4015701072841558310
  %1703 = lshr i64 %1702, 32
  %1704 = xor i64 %1703, %1702
  %1705 = and i64 %1704, %1700
  %1706 = getelementptr i32, ptr %1701, i64 %1705
  %1707 = load i32, ptr %1706, align 4
  %1708 = xor i1 %1617, true
  %1709 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1710 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1711 = icmp eq i32 %1629, 100
  br i1 %1711, label %1716, label %1613

1712:                                             ; preds = %1654, %1634
  %1713 = load i32, ptr %67, align 4
  %1714 = add i32 %1713, 1
  %1715 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1714, ptr %67, align 4
  br label %1716

1716:                                             ; preds = %1712, %1692
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1717

1717:                                             ; preds = %1716, %1584
  %1718 = add nuw nsw i64 %1585, 1
  %1719 = icmp eq i64 %1718, %1445
  br i1 %1719, label %1720, label %1584

1720:                                             ; preds = %1717, %1442, %1426, %1017, %458, %302
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1721 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %1722 = sext i32 %73 to i64
  %1723 = shl nsw i64 %1722, 2
  %1724 = getelementptr i8, ptr %38, i64 %1723
  store i32 %77, ptr %1724, align 4
  store i1 true, ptr %7, align 8
  %1725 = load i8, ptr %7, align 8
  %1726 = zext i8 %1725 to i160
  %1727 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %1726, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1728 = load ptr, ptr %52, align 8
  %1729 = call i32 %1728({ ptr, i160 } %79) #28
  %1730 = load i32, ptr %54, align 8
  %1731 = add i32 %1730, -1
  %1732 = and i32 %1731, %1729
  %1733 = load ptr, ptr %56, align 8
  %1734 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1735 = sext i32 %1732 to i64
  %1736 = shl nsw i64 %1735, 5
  %1737 = getelementptr i8, ptr %1733, i64 %1736
  %1738 = load ptr, ptr %1737, align 8
  %1739 = getelementptr i8, ptr %1737, i64 8
  %1740 = icmp ne ptr %1738, @nil_typ
  %1741 = icmp ne ptr %1738, null
  %1742 = and i1 %1740, %1741
  br i1 %1742, label %1743, label %1866

1743:                                             ; preds = %1720
  %1744 = load i64, ptr %1739, align 4
  %1745 = getelementptr i8, ptr %1737, i64 16
  %1746 = load i64, ptr %1745, align 4
  %1747 = inttoptr i64 %1744 to ptr
  %1748 = inttoptr i64 %1746 to ptr
  %1749 = getelementptr i8, ptr %1738, i64 8
  %1750 = getelementptr i8, ptr %1738, i64 16
  %1751 = getelementptr i8, ptr %1738, i64 40
  %1752 = load i64, ptr %1749, align 4, !noalias !203
  %1753 = load i64, ptr %1750, align 4, !noalias !203
  %1754 = load ptr, ptr %1751, align 8, !noalias !203
  %1755 = mul i64 %1752, 4015701072841558310
  %1756 = lshr i64 %1755, 32
  %1757 = xor i64 %1756, %1755
  %1758 = and i64 %1757, %1753
  %1759 = getelementptr i32, ptr %1754, i64 %1758
  %1760 = load i32, ptr %1759, align 4, !noalias !203
  %1761 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1738, 0
  %1762 = insertvalue { ptr, ptr, ptr, i32 } %1761, ptr %1747, 1
  %1763 = insertvalue { ptr, ptr, ptr, i32 } %1762, ptr %1748, 2
  %1764 = insertvalue { ptr, ptr, ptr, i32 } %1763, i32 %1760, 3
  %1765 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1766 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1738) #43
  %1767 = sext i32 %1760 to i64
  %1768 = getelementptr ptr, ptr %1738, i64 %1767
  %1769 = getelementptr i8, ptr %1768, i64 64
  %1770 = load ptr, ptr %1769, align 8
  %1771 = call align 4 ptr %1770({ ptr, ptr, ptr, i32 } %1764, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1772 = call i32 %1771({ ptr, ptr, ptr, i32 } %1764, { ptr, ptr, ptr, i32 } %1764, ptr nonnull align 8 %2) #28
  %1773 = icmp eq i32 %1772, %1729
  br i1 %1773, label %1774, label %1866

1774:                                             ; preds = %1743
  %1775 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1776 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1738)
  %1777 = getelementptr i8, ptr %1768, i64 48
  %1778 = load ptr, ptr %1777, align 8
  %1779 = call align 4 ptr %1778({ ptr, ptr, ptr, i32 } %1764, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1780 = call { ptr, i160 } %1779({ ptr, ptr, ptr, i32 } %1764, { ptr, ptr, ptr, i32 } %1764, ptr nonnull align 8 %2) #28
  %1781 = load ptr, ptr %53, align 8
  %1782 = call i1 %1781({ ptr, i160 } %1780, { ptr, i160 } %79) #28
  br i1 %1782, label %1783, label %1866

1783:                                             ; preds = %1774
  %1784 = load ptr, ptr %40, align 8
  %1785 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1786 = load ptr, ptr %41, align 8
  %1787 = load ptr, ptr %1784, align 8, !alias.scope !206
  %1788 = getelementptr i8, ptr %1787, i64 72
  %1789 = load ptr, ptr %1788, align 8, !alias.scope !206
  %1790 = call { i64, i64 } %1789(ptr nocapture nofree nonnull readonly align 8 %1784) #2, !alias.scope !206
  %1791 = extractvalue { i64, i64 } %1790, 0
  %1792 = extractvalue { i64, i64 } %1790, 1
  %1793 = urem i64 20, %1792
  %1794 = icmp eq i64 %1793, 0
  %1795 = sub i64 %1792, %1793
  %1796 = select i1 %1794, i64 0, i64 %1795
  %1797 = add i64 %1791, 20
  %1798 = add i64 %1797, %1796
  %1799 = load ptr, ptr %1786, align 8, !alias.scope !206
  %1800 = getelementptr i8, ptr %1799, i64 72
  %1801 = load ptr, ptr %1800, align 8, !alias.scope !206
  %1802 = call { i64, i64 } %1801(ptr nocapture nofree nonnull readonly align 8 %1786) #2, !alias.scope !206
  %1803 = extractvalue { i64, i64 } %1802, 0
  %1804 = extractvalue { i64, i64 } %1802, 1
  %1805 = call i64 @llvm.umax.i64(i64 %1792, i64 %1804) #44
  %1806 = call i64 @llvm.umax.i64(i64 %1805, i64 noundef 8) #44, !range !18
  %1807 = urem i64 %1798, %1804
  %1808 = icmp eq i64 %1807, 0
  %1809 = sub i64 %1804, %1807
  %1810 = select i1 %1808, i64 0, i64 %1809
  %1811 = add i64 %1803, %1798
  %1812 = add i64 %1811, %1810
  %1813 = urem i64 %1812, %1806
  %1814 = icmp eq i64 %1813, 0
  %1815 = sub i64 %1806, %1813
  %1816 = select i1 %1814, i64 0, i64 %1815
  %1817 = add i64 %1816, %1812
  %1818 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1817, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1784, ptr %1818, align 8
  %1819 = getelementptr inbounds i8, ptr %1818, i64 8
  store ptr %1786, ptr %1819, align 8
  %1820 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1818)
  %1821 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1822 = load ptr, ptr %1784, align 8
  %1823 = getelementptr i8, ptr %1822, i64 72
  %1824 = load ptr, ptr %1823, align 8
  %1825 = call { i64, i64 } %1824(ptr nocapture nofree nonnull readonly align 8 %1784) #2
  %1826 = extractvalue { i64, i64 } %1825, 1
  %1827 = urem i64 20, %1826
  %1828 = icmp eq i64 %1827, 0
  %1829 = sub i64 %1826, %1827
  %1830 = add i64 %1829, 20
  %1831 = select i1 %1828, i64 20, i64 %1830
  %1832 = getelementptr i8, ptr %1818, i64 %1831
  %1833 = getelementptr i8, ptr %1822, i64 64
  %1834 = load ptr, ptr %1833, align 8
  call void %1834({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %1784, ptr nocapture nofree writeonly %1832) #8
  %1835 = load ptr, ptr %1818, align 8
  %1836 = load ptr, ptr %1835, align 8
  %1837 = getelementptr i8, ptr %1836, i64 72
  %1838 = load ptr, ptr %1837, align 8
  %1839 = call { i64, i64 } %1838(ptr nocapture nofree nonnull readonly align 8 %1835) #2
  %1840 = extractvalue { i64, i64 } %1839, 0
  %1841 = extractvalue { i64, i64 } %1839, 1
  %1842 = urem i64 20, %1841
  %1843 = icmp eq i64 %1842, 0
  %1844 = sub i64 %1841, %1842
  %1845 = select i1 %1843, i64 0, i64 %1844
  %1846 = add i64 %1840, 20
  %1847 = add i64 %1846, %1845
  %1848 = load ptr, ptr %1819, align 8
  %1849 = load ptr, ptr %1848, align 8
  %1850 = getelementptr i8, ptr %1849, i64 72
  %1851 = load ptr, ptr %1850, align 8
  %1852 = call { i64, i64 } %1851(ptr nocapture nofree nonnull readonly align 8 %1848) #2
  %1853 = extractvalue { i64, i64 } %1852, 1
  %1854 = urem i64 %1847, %1853
  %1855 = icmp eq i64 %1854, 0
  %1856 = sub i64 %1853, %1854
  %1857 = select i1 %1855, i64 0, i64 %1856
  %1858 = getelementptr i8, ptr %1818, i64 %1847
  %1859 = getelementptr i8, ptr %1858, i64 %1857
  %1860 = getelementptr i8, ptr %1849, i64 64
  %1861 = load ptr, ptr %1860, align 8
  call void %1861({ ptr, i160 } %1727, ptr nocapture nofree nonnull readonly align 8 %1848, ptr nocapture nofree writeonly %1859) #8
  %1862 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1863 = getelementptr inbounds i8, ptr %1818, i64 16
  store i32 %1729, ptr %1863, align 8
  store ptr @Entry, ptr %1737, align 8
  %1864 = ptrtoint ptr %1818 to i64
  store i64 %1864, ptr %1739, align 4
  %1865 = getelementptr i8, ptr %1737, i64 24
  store i32 10, ptr %1865, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3198

1866:                                             ; preds = %1774, %1743, %1720
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1867 = add i32 %1729, 2127912214
  %1868 = shl i32 %1729, 12
  %1869 = add i32 %1867, %1868
  %1870 = ashr i32 %1869, 19
  %1871 = xor i32 %1869, %1870
  %1872 = xor i32 %1871, -949894596
  %1873 = add i32 %1872, 374761393
  %1874 = shl i32 %1872, 5
  %1875 = add i32 %1873, %1874
  %1876 = add i32 %1875, -744332180
  %1877 = shl i32 %1875, 9
  %1878 = xor i32 %1876, %1877
  %1879 = add i32 %1878, -42973499
  %1880 = shl i32 %1878, 3
  %1881 = add i32 %1879, %1880
  %1882 = ashr i32 %1881, 16
  %1883 = xor i32 %1881, %1882
  %1884 = xor i32 %1883, -1252372727
  %1885 = load i32, ptr %54, align 8
  %1886 = add i32 %1885, -1
  %1887 = and i32 %1886, %1884
  %1888 = load ptr, ptr %58, align 8
  %1889 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1890 = sext i32 %1887 to i64
  %1891 = shl nsw i64 %1890, 5
  %1892 = getelementptr i8, ptr %1888, i64 %1891
  %1893 = load ptr, ptr %1892, align 8
  %1894 = getelementptr i8, ptr %1892, i64 8
  %1895 = icmp ne ptr %1893, @nil_typ
  %1896 = icmp ne ptr %1893, null
  %1897 = and i1 %1895, %1896
  br i1 %1897, label %1898, label %2022

1898:                                             ; preds = %1866
  %1899 = load i64, ptr %1894, align 4
  %1900 = getelementptr i8, ptr %1892, i64 16
  %1901 = load i64, ptr %1900, align 4
  %1902 = inttoptr i64 %1899 to ptr
  %1903 = inttoptr i64 %1901 to ptr
  %1904 = getelementptr i8, ptr %1893, i64 8
  %1905 = getelementptr i8, ptr %1893, i64 16
  %1906 = getelementptr i8, ptr %1893, i64 40
  %1907 = load i64, ptr %1904, align 4, !noalias !209
  %1908 = load i64, ptr %1905, align 4, !noalias !209
  %1909 = load ptr, ptr %1906, align 8, !noalias !209
  %1910 = mul i64 %1907, 4015701072841558310
  %1911 = lshr i64 %1910, 32
  %1912 = xor i64 %1911, %1910
  %1913 = and i64 %1912, %1908
  %1914 = getelementptr i32, ptr %1909, i64 %1913
  %1915 = load i32, ptr %1914, align 4, !noalias !209
  %1916 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1893, 0
  %1917 = insertvalue { ptr, ptr, ptr, i32 } %1916, ptr %1902, 1
  %1918 = insertvalue { ptr, ptr, ptr, i32 } %1917, ptr %1903, 2
  %1919 = insertvalue { ptr, ptr, ptr, i32 } %1918, i32 %1915, 3
  %1920 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1921 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1893) #43
  %1922 = sext i32 %1915 to i64
  %1923 = getelementptr ptr, ptr %1893, i64 %1922
  %1924 = getelementptr i8, ptr %1923, i64 64
  %1925 = load ptr, ptr %1924, align 8
  %1926 = call align 4 ptr %1925({ ptr, ptr, ptr, i32 } %1919, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1927 = call i32 %1926({ ptr, ptr, ptr, i32 } %1919, { ptr, ptr, ptr, i32 } %1919, ptr nonnull align 8 %2) #28
  %1928 = icmp eq i32 %1927, %1729
  br i1 %1928, label %1929, label %2022

1929:                                             ; preds = %1898
  %1930 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1931 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1893)
  %1932 = getelementptr i8, ptr %1923, i64 48
  %1933 = load ptr, ptr %1932, align 8
  %1934 = call align 4 ptr %1933({ ptr, ptr, ptr, i32 } %1919, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1935 = call { ptr, i160 } %1934({ ptr, ptr, ptr, i32 } %1919, { ptr, ptr, ptr, i32 } %1919, ptr nonnull align 8 %2) #28
  %1936 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1937 = load ptr, ptr %53, align 8
  %1938 = call i1 %1937({ ptr, i160 } %1935, { ptr, i160 } %79) #28
  br i1 %1938, label %1939, label %2022

1939:                                             ; preds = %1929
  %1940 = load ptr, ptr %40, align 8
  %1941 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1942 = load ptr, ptr %41, align 8
  %1943 = load ptr, ptr %1940, align 8, !alias.scope !212
  %1944 = getelementptr i8, ptr %1943, i64 72
  %1945 = load ptr, ptr %1944, align 8, !alias.scope !212
  %1946 = call { i64, i64 } %1945(ptr nocapture nofree nonnull readonly align 8 %1940) #2, !alias.scope !212
  %1947 = extractvalue { i64, i64 } %1946, 0
  %1948 = extractvalue { i64, i64 } %1946, 1
  %1949 = urem i64 20, %1948
  %1950 = icmp eq i64 %1949, 0
  %1951 = sub i64 %1948, %1949
  %1952 = select i1 %1950, i64 0, i64 %1951
  %1953 = add i64 %1947, 20
  %1954 = add i64 %1953, %1952
  %1955 = load ptr, ptr %1942, align 8, !alias.scope !212
  %1956 = getelementptr i8, ptr %1955, i64 72
  %1957 = load ptr, ptr %1956, align 8, !alias.scope !212
  %1958 = call { i64, i64 } %1957(ptr nocapture nofree nonnull readonly align 8 %1942) #2, !alias.scope !212
  %1959 = extractvalue { i64, i64 } %1958, 0
  %1960 = extractvalue { i64, i64 } %1958, 1
  %1961 = call i64 @llvm.umax.i64(i64 %1948, i64 %1960) #44
  %1962 = call i64 @llvm.umax.i64(i64 %1961, i64 noundef 8) #44, !range !18
  %1963 = urem i64 %1954, %1960
  %1964 = icmp eq i64 %1963, 0
  %1965 = sub i64 %1960, %1963
  %1966 = select i1 %1964, i64 0, i64 %1965
  %1967 = add i64 %1959, %1954
  %1968 = add i64 %1967, %1966
  %1969 = urem i64 %1968, %1962
  %1970 = icmp eq i64 %1969, 0
  %1971 = sub i64 %1962, %1969
  %1972 = select i1 %1970, i64 0, i64 %1971
  %1973 = add i64 %1972, %1968
  %1974 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1973, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1940, ptr %1974, align 8
  %1975 = getelementptr inbounds i8, ptr %1974, i64 8
  store ptr %1942, ptr %1975, align 8
  %1976 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1974)
  %1977 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1978 = load ptr, ptr %1940, align 8
  %1979 = getelementptr i8, ptr %1978, i64 72
  %1980 = load ptr, ptr %1979, align 8
  %1981 = call { i64, i64 } %1980(ptr nocapture nofree nonnull readonly align 8 %1940) #2
  %1982 = extractvalue { i64, i64 } %1981, 1
  %1983 = urem i64 20, %1982
  %1984 = icmp eq i64 %1983, 0
  %1985 = sub i64 %1982, %1983
  %1986 = add i64 %1985, 20
  %1987 = select i1 %1984, i64 20, i64 %1986
  %1988 = getelementptr i8, ptr %1974, i64 %1987
  %1989 = getelementptr i8, ptr %1978, i64 64
  %1990 = load ptr, ptr %1989, align 8
  call void %1990({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %1940, ptr nocapture nofree writeonly %1988) #8
  %1991 = load ptr, ptr %1974, align 8
  %1992 = load ptr, ptr %1991, align 8
  %1993 = getelementptr i8, ptr %1992, i64 72
  %1994 = load ptr, ptr %1993, align 8
  %1995 = call { i64, i64 } %1994(ptr nocapture nofree nonnull readonly align 8 %1991) #2
  %1996 = extractvalue { i64, i64 } %1995, 0
  %1997 = extractvalue { i64, i64 } %1995, 1
  %1998 = urem i64 20, %1997
  %1999 = icmp eq i64 %1998, 0
  %2000 = sub i64 %1997, %1998
  %2001 = select i1 %1999, i64 0, i64 %2000
  %2002 = add i64 %1996, 20
  %2003 = add i64 %2002, %2001
  %2004 = load ptr, ptr %1975, align 8
  %2005 = load ptr, ptr %2004, align 8
  %2006 = getelementptr i8, ptr %2005, i64 72
  %2007 = load ptr, ptr %2006, align 8
  %2008 = call { i64, i64 } %2007(ptr nocapture nofree nonnull readonly align 8 %2004) #2
  %2009 = extractvalue { i64, i64 } %2008, 1
  %2010 = urem i64 %2003, %2009
  %2011 = icmp eq i64 %2010, 0
  %2012 = sub i64 %2009, %2010
  %2013 = select i1 %2011, i64 0, i64 %2012
  %2014 = getelementptr i8, ptr %1974, i64 %2003
  %2015 = getelementptr i8, ptr %2014, i64 %2013
  %2016 = getelementptr i8, ptr %2005, i64 64
  %2017 = load ptr, ptr %2016, align 8
  call void %2017({ ptr, i160 } %1727, ptr nocapture nofree nonnull readonly align 8 %2004, ptr nocapture nofree writeonly %2015) #8
  %2018 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2019 = getelementptr inbounds i8, ptr %1974, i64 16
  store i32 %1729, ptr %2019, align 8
  store ptr @Entry, ptr %1892, align 8
  %2020 = ptrtoint ptr %1974 to i64
  store i64 %2020, ptr %1894, align 4
  %2021 = getelementptr i8, ptr %1892, i64 24
  store i32 10, ptr %2021, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3198

2022:                                             ; preds = %1929, %1898, %1866
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2023 = load i32, ptr %68, align 4
  %2024 = load i32, ptr %54, align 8
  %2025 = icmp slt i32 %2023, %2024
  br i1 %2025, label %2312, label %2026

2026:                                             ; preds = %2022
  %2027 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2028 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2029 = load ptr, ptr %56, align 8
  %2030 = load ptr, ptr %58, align 8
  %2031 = shl i32 %2024, 1
  %2032 = call i32 @llvm.smax.i32(i32 %2031, i32 noundef 16) #43
  store i32 %2032, ptr %54, align 8
  %2033 = zext nneg i32 %2032 to i64
  %2034 = shl nuw nsw i64 %2033, 5
  %2035 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2034, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2035, ptr %56, align 8
  %2036 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2034, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2036, ptr %58, align 8
  store i32 0, ptr %68, align 4
  %2037 = icmp sgt i32 %2024, 0
  br i1 %2037, label %2038, label %2312

2038:                                             ; preds = %2026
  %2039 = zext nneg i32 %2024 to i64
  br label %2040

2040:                                             ; preds = %2173, %2038
  %2041 = phi i64 [ 0, %2038 ], [ %2174, %2173 ]
  %2042 = shl nuw nsw i64 %2041, 5
  %2043 = getelementptr i8, ptr %2029, i64 %2042
  %2044 = load ptr, ptr %2043, align 8
  %2045 = icmp ne ptr %2044, @nil_typ
  %2046 = icmp ne ptr %2044, null
  %2047 = and i1 %2045, %2046
  br i1 %2047, label %2048, label %2173

2048:                                             ; preds = %2040
  %2049 = getelementptr i8, ptr %2043, i64 8
  %2050 = load i64, ptr %2049, align 4
  %2051 = getelementptr i8, ptr %2043, i64 16
  %2052 = load i64, ptr %2051, align 4
  %2053 = getelementptr i8, ptr %2044, i64 8
  %2054 = getelementptr i8, ptr %2044, i64 16
  %2055 = getelementptr i8, ptr %2044, i64 40
  %2056 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2057 = load i64, ptr %2053, align 4, !noalias !25
  %2058 = load i64, ptr %2054, align 4, !noalias !25
  %2059 = load ptr, ptr %2055, align 8, !noalias !25
  %2060 = mul i64 %2057, 4015701072841558310
  %2061 = lshr i64 %2060, 32
  %2062 = xor i64 %2061, %2060
  %2063 = and i64 %2062, %2058
  %2064 = getelementptr i32, ptr %2059, i64 %2063
  %2065 = load i32, ptr %2064, align 4, !noalias !215
  %2066 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2067 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2068 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2069

2069:                                             ; preds = %2148, %2048
  %2070 = phi i64 [ %2052, %2048 ], [ %2150, %2148 ]
  %2071 = phi i64 [ %2050, %2048 ], [ %2149, %2148 ]
  %2072 = phi i32 [ 0, %2048 ], [ %2085, %2148 ]
  %2073 = phi i1 [ true, %2048 ], [ %2164, %2148 ]
  %2074 = phi ptr [ %2044, %2048 ], [ %2151, %2148 ]
  %2075 = phi i32 [ %2065, %2048 ], [ %2163, %2148 ]
  %2076 = inttoptr i64 %2070 to ptr
  %2077 = inttoptr i64 %2071 to ptr
  %2078 = sext i32 %2075 to i64
  %2079 = getelementptr ptr, ptr %2074, i64 %2078
  %2080 = getelementptr i8, ptr %2079, i64 64
  %2081 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2074, 0
  %2082 = insertvalue { ptr, ptr, ptr, i32 } %2081, ptr %2077, 1
  %2083 = insertvalue { ptr, ptr, ptr, i32 } %2082, ptr %2076, 2
  %2084 = insertvalue { ptr, ptr, ptr, i32 } %2083, i32 %2075, 3
  %2085 = add nuw nsw i32 %2072, 1
  %2086 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2074)
  %2087 = load ptr, ptr %2080, align 8
  %2088 = call align 4 ptr %2087({ ptr, ptr, ptr, i32 } %2084, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2089 = call i32 %2088({ ptr, ptr, ptr, i32 } %2084, { ptr, ptr, ptr, i32 } %2084, ptr nonnull align 8 %2) #28
  br i1 %2073, label %2090, label %2110

2090:                                             ; preds = %2069
  %2091 = load i32, ptr %54, align 8
  %2092 = add i32 %2091, -1
  %2093 = and i32 %2092, %2089
  %2094 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2095 = load ptr, ptr %56, align 8
  %2096 = sext i32 %2093 to i64
  %2097 = shl nsw i64 %2096, 5
  %2098 = getelementptr i8, ptr %2095, i64 %2097
  %2099 = load ptr, ptr %2098, align 8
  %2100 = getelementptr i8, ptr %2098, i64 8
  %2101 = load i160, ptr %2100, align 4
  store ptr %2074, ptr %2098, align 8
  store i64 %2071, ptr %2100, align 4
  %2102 = getelementptr i8, ptr %2098, i64 16
  store i64 %2070, ptr %2102, align 4
  %2103 = getelementptr i8, ptr %2098, i64 24
  store i32 %2075, ptr %2103, align 4
  %2104 = icmp ne ptr %2099, @nil_typ
  %2105 = icmp ne ptr %2099, null
  %2106 = and i1 %2104, %2105
  %2107 = trunc i160 %2101 to i64
  %2108 = lshr i160 %2101, 64
  %2109 = trunc i160 %2108 to i64
  br i1 %2106, label %2148, label %2168

2110:                                             ; preds = %2069
  %2111 = add i32 %2089, 2127912214
  %2112 = shl i32 %2089, 12
  %2113 = add i32 %2111, %2112
  %2114 = ashr i32 %2113, 19
  %2115 = xor i32 %2113, %2114
  %2116 = xor i32 %2115, -949894596
  %2117 = add i32 %2116, 374761393
  %2118 = shl i32 %2116, 5
  %2119 = add i32 %2117, %2118
  %2120 = add i32 %2119, -744332180
  %2121 = shl i32 %2119, 9
  %2122 = xor i32 %2120, %2121
  %2123 = add i32 %2122, -42973499
  %2124 = shl i32 %2122, 3
  %2125 = add i32 %2123, %2124
  %2126 = ashr i32 %2125, 16
  %2127 = xor i32 %2125, %2126
  %2128 = xor i32 %2127, -1252372727
  %2129 = load i32, ptr %54, align 8
  %2130 = add i32 %2129, -1
  %2131 = and i32 %2130, %2128
  %2132 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2133 = load ptr, ptr %58, align 8
  %2134 = sext i32 %2131 to i64
  %2135 = shl nsw i64 %2134, 5
  %2136 = getelementptr i8, ptr %2133, i64 %2135
  %2137 = load ptr, ptr %2136, align 8
  %2138 = getelementptr i8, ptr %2136, i64 8
  %2139 = load i160, ptr %2138, align 4
  store ptr %2074, ptr %2136, align 8
  store i64 %2071, ptr %2138, align 4
  %2140 = getelementptr i8, ptr %2136, i64 16
  store i64 %2070, ptr %2140, align 4
  %2141 = getelementptr i8, ptr %2136, i64 24
  store i32 %2075, ptr %2141, align 4
  %2142 = icmp ne ptr %2137, @nil_typ
  %2143 = icmp ne ptr %2137, null
  %2144 = and i1 %2142, %2143
  %2145 = trunc i160 %2139 to i64
  %2146 = lshr i160 %2139, 64
  %2147 = trunc i160 %2146 to i64
  br i1 %2144, label %2148, label %2168

2148:                                             ; preds = %2110, %2090
  %2149 = phi i64 [ %2107, %2090 ], [ %2145, %2110 ]
  %2150 = phi i64 [ %2109, %2090 ], [ %2147, %2110 ]
  %2151 = phi ptr [ %2099, %2090 ], [ %2137, %2110 ]
  %2152 = getelementptr i8, ptr %2151, i64 8
  %2153 = getelementptr i8, ptr %2151, i64 16
  %2154 = getelementptr i8, ptr %2151, i64 40
  %2155 = load i64, ptr %2152, align 4
  %2156 = load i64, ptr %2153, align 4
  %2157 = load ptr, ptr %2154, align 8
  %2158 = mul i64 %2155, 4015701072841558310
  %2159 = lshr i64 %2158, 32
  %2160 = xor i64 %2159, %2158
  %2161 = and i64 %2160, %2156
  %2162 = getelementptr i32, ptr %2157, i64 %2161
  %2163 = load i32, ptr %2162, align 4
  %2164 = xor i1 %2073, true
  %2165 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2166 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2167 = icmp eq i32 %2085, 100
  br i1 %2167, label %2172, label %2069

2168:                                             ; preds = %2110, %2090
  %2169 = load i32, ptr %68, align 4
  %2170 = add i32 %2169, 1
  %2171 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2170, ptr %68, align 4
  br label %2172

2172:                                             ; preds = %2168, %2148
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2173

2173:                                             ; preds = %2172, %2040
  %2174 = add nuw nsw i64 %2041, 1
  %2175 = icmp eq i64 %2174, %2039
  br i1 %2175, label %2176, label %2040

2176:                                             ; preds = %2309, %2173
  %2177 = phi i64 [ %2310, %2309 ], [ 0, %2173 ]
  %2178 = shl nuw nsw i64 %2177, 5
  %2179 = getelementptr i8, ptr %2030, i64 %2178
  %2180 = load ptr, ptr %2179, align 8
  %2181 = icmp ne ptr %2180, @nil_typ
  %2182 = icmp ne ptr %2180, null
  %2183 = and i1 %2181, %2182
  br i1 %2183, label %2184, label %2309

2184:                                             ; preds = %2176
  %2185 = getelementptr i8, ptr %2179, i64 8
  %2186 = load i64, ptr %2185, align 4
  %2187 = getelementptr i8, ptr %2179, i64 16
  %2188 = load i64, ptr %2187, align 4
  %2189 = getelementptr i8, ptr %2180, i64 8
  %2190 = getelementptr i8, ptr %2180, i64 16
  %2191 = getelementptr i8, ptr %2180, i64 40
  %2192 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2193 = load i64, ptr %2189, align 4, !noalias !25
  %2194 = load i64, ptr %2190, align 4, !noalias !25
  %2195 = load ptr, ptr %2191, align 8, !noalias !25
  %2196 = mul i64 %2193, 4015701072841558310
  %2197 = lshr i64 %2196, 32
  %2198 = xor i64 %2197, %2196
  %2199 = and i64 %2198, %2194
  %2200 = getelementptr i32, ptr %2195, i64 %2199
  %2201 = load i32, ptr %2200, align 4, !noalias !218
  %2202 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2203 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2204 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2205

2205:                                             ; preds = %2284, %2184
  %2206 = phi i64 [ %2188, %2184 ], [ %2286, %2284 ]
  %2207 = phi i64 [ %2186, %2184 ], [ %2285, %2284 ]
  %2208 = phi i32 [ 0, %2184 ], [ %2221, %2284 ]
  %2209 = phi i1 [ true, %2184 ], [ %2300, %2284 ]
  %2210 = phi ptr [ %2180, %2184 ], [ %2287, %2284 ]
  %2211 = phi i32 [ %2201, %2184 ], [ %2299, %2284 ]
  %2212 = inttoptr i64 %2206 to ptr
  %2213 = inttoptr i64 %2207 to ptr
  %2214 = sext i32 %2211 to i64
  %2215 = getelementptr ptr, ptr %2210, i64 %2214
  %2216 = getelementptr i8, ptr %2215, i64 64
  %2217 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2210, 0
  %2218 = insertvalue { ptr, ptr, ptr, i32 } %2217, ptr %2213, 1
  %2219 = insertvalue { ptr, ptr, ptr, i32 } %2218, ptr %2212, 2
  %2220 = insertvalue { ptr, ptr, ptr, i32 } %2219, i32 %2211, 3
  %2221 = add nuw nsw i32 %2208, 1
  %2222 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2210)
  %2223 = load ptr, ptr %2216, align 8
  %2224 = call align 4 ptr %2223({ ptr, ptr, ptr, i32 } %2220, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2225 = call i32 %2224({ ptr, ptr, ptr, i32 } %2220, { ptr, ptr, ptr, i32 } %2220, ptr nonnull align 8 %2) #28
  br i1 %2209, label %2226, label %2246

2226:                                             ; preds = %2205
  %2227 = load i32, ptr %54, align 8
  %2228 = add i32 %2227, -1
  %2229 = and i32 %2228, %2225
  %2230 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2231 = load ptr, ptr %56, align 8
  %2232 = sext i32 %2229 to i64
  %2233 = shl nsw i64 %2232, 5
  %2234 = getelementptr i8, ptr %2231, i64 %2233
  %2235 = load ptr, ptr %2234, align 8
  %2236 = getelementptr i8, ptr %2234, i64 8
  %2237 = load i160, ptr %2236, align 4
  store ptr %2210, ptr %2234, align 8
  store i64 %2207, ptr %2236, align 4
  %2238 = getelementptr i8, ptr %2234, i64 16
  store i64 %2206, ptr %2238, align 4
  %2239 = getelementptr i8, ptr %2234, i64 24
  store i32 %2211, ptr %2239, align 4
  %2240 = icmp ne ptr %2235, @nil_typ
  %2241 = icmp ne ptr %2235, null
  %2242 = and i1 %2240, %2241
  %2243 = trunc i160 %2237 to i64
  %2244 = lshr i160 %2237, 64
  %2245 = trunc i160 %2244 to i64
  br i1 %2242, label %2284, label %2304

2246:                                             ; preds = %2205
  %2247 = add i32 %2225, 2127912214
  %2248 = shl i32 %2225, 12
  %2249 = add i32 %2247, %2248
  %2250 = ashr i32 %2249, 19
  %2251 = xor i32 %2249, %2250
  %2252 = xor i32 %2251, -949894596
  %2253 = add i32 %2252, 374761393
  %2254 = shl i32 %2252, 5
  %2255 = add i32 %2253, %2254
  %2256 = add i32 %2255, -744332180
  %2257 = shl i32 %2255, 9
  %2258 = xor i32 %2256, %2257
  %2259 = add i32 %2258, -42973499
  %2260 = shl i32 %2258, 3
  %2261 = add i32 %2259, %2260
  %2262 = ashr i32 %2261, 16
  %2263 = xor i32 %2261, %2262
  %2264 = xor i32 %2263, -1252372727
  %2265 = load i32, ptr %54, align 8
  %2266 = add i32 %2265, -1
  %2267 = and i32 %2266, %2264
  %2268 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2269 = load ptr, ptr %58, align 8
  %2270 = sext i32 %2267 to i64
  %2271 = shl nsw i64 %2270, 5
  %2272 = getelementptr i8, ptr %2269, i64 %2271
  %2273 = load ptr, ptr %2272, align 8
  %2274 = getelementptr i8, ptr %2272, i64 8
  %2275 = load i160, ptr %2274, align 4
  store ptr %2210, ptr %2272, align 8
  store i64 %2207, ptr %2274, align 4
  %2276 = getelementptr i8, ptr %2272, i64 16
  store i64 %2206, ptr %2276, align 4
  %2277 = getelementptr i8, ptr %2272, i64 24
  store i32 %2211, ptr %2277, align 4
  %2278 = icmp ne ptr %2273, @nil_typ
  %2279 = icmp ne ptr %2273, null
  %2280 = and i1 %2278, %2279
  %2281 = trunc i160 %2275 to i64
  %2282 = lshr i160 %2275, 64
  %2283 = trunc i160 %2282 to i64
  br i1 %2280, label %2284, label %2304

2284:                                             ; preds = %2246, %2226
  %2285 = phi i64 [ %2243, %2226 ], [ %2281, %2246 ]
  %2286 = phi i64 [ %2245, %2226 ], [ %2283, %2246 ]
  %2287 = phi ptr [ %2235, %2226 ], [ %2273, %2246 ]
  %2288 = getelementptr i8, ptr %2287, i64 8
  %2289 = getelementptr i8, ptr %2287, i64 16
  %2290 = getelementptr i8, ptr %2287, i64 40
  %2291 = load i64, ptr %2288, align 4
  %2292 = load i64, ptr %2289, align 4
  %2293 = load ptr, ptr %2290, align 8
  %2294 = mul i64 %2291, 4015701072841558310
  %2295 = lshr i64 %2294, 32
  %2296 = xor i64 %2295, %2294
  %2297 = and i64 %2296, %2292
  %2298 = getelementptr i32, ptr %2293, i64 %2297
  %2299 = load i32, ptr %2298, align 4
  %2300 = xor i1 %2209, true
  %2301 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2302 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2303 = icmp eq i32 %2221, 100
  br i1 %2303, label %2308, label %2205

2304:                                             ; preds = %2246, %2226
  %2305 = load i32, ptr %68, align 4
  %2306 = add i32 %2305, 1
  %2307 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2306, ptr %68, align 4
  br label %2308

2308:                                             ; preds = %2304, %2284
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2309

2309:                                             ; preds = %2308, %2176
  %2310 = add nuw nsw i64 %2177, 1
  %2311 = icmp eq i64 %2310, %2039
  br i1 %2311, label %2312, label %2176

2312:                                             ; preds = %2309, %2026, %2022
  %2313 = load ptr, ptr %40, align 8
  %2314 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2315 = load ptr, ptr %41, align 8
  %2316 = load ptr, ptr %2313, align 8
  %2317 = getelementptr i8, ptr %2316, i64 72
  %2318 = load ptr, ptr %2317, align 8
  %2319 = call { i64, i64 } %2318(ptr nocapture nofree nonnull readonly align 8 %2313) #2
  %2320 = extractvalue { i64, i64 } %2319, 0
  %2321 = extractvalue { i64, i64 } %2319, 1
  %2322 = urem i64 20, %2321
  %2323 = icmp eq i64 %2322, 0
  %2324 = sub i64 %2321, %2322
  %2325 = select i1 %2323, i64 0, i64 %2324
  %2326 = add i64 %2320, 20
  %2327 = add i64 %2326, %2325
  %2328 = load ptr, ptr %2315, align 8
  %2329 = getelementptr i8, ptr %2328, i64 72
  %2330 = load ptr, ptr %2329, align 8
  %2331 = call { i64, i64 } %2330(ptr nocapture nofree nonnull readonly align 8 %2315) #2
  %2332 = extractvalue { i64, i64 } %2331, 0
  %2333 = extractvalue { i64, i64 } %2331, 1
  %2334 = call i64 @llvm.umax.i64(i64 %2321, i64 %2333) #44
  %2335 = call i64 @llvm.umax.i64(i64 %2334, i64 noundef 8) #44, !range !18
  %2336 = urem i64 %2327, %2333
  %2337 = icmp eq i64 %2336, 0
  %2338 = sub i64 %2333, %2336
  %2339 = select i1 %2337, i64 0, i64 %2338
  %2340 = add i64 %2332, %2327
  %2341 = add i64 %2340, %2339
  %2342 = urem i64 %2341, %2335
  %2343 = icmp eq i64 %2342, 0
  %2344 = sub i64 %2335, %2342
  %2345 = select i1 %2343, i64 0, i64 %2344
  %2346 = add i64 %2345, %2341
  %2347 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %2346, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2313, ptr %2347, align 8
  %2348 = getelementptr inbounds i8, ptr %2347, i64 8
  store ptr %2315, ptr %2348, align 8
  %2349 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %2347)
  %2350 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2351 = load ptr, ptr %2313, align 8
  %2352 = getelementptr i8, ptr %2351, i64 72
  %2353 = load ptr, ptr %2352, align 8
  %2354 = call { i64, i64 } %2353(ptr nocapture nofree nonnull readonly align 8 %2313) #2
  %2355 = extractvalue { i64, i64 } %2354, 1
  %2356 = urem i64 20, %2355
  %2357 = icmp eq i64 %2356, 0
  %2358 = sub i64 %2355, %2356
  %2359 = add i64 %2358, 20
  %2360 = select i1 %2357, i64 20, i64 %2359
  %2361 = getelementptr i8, ptr %2347, i64 %2360
  %2362 = getelementptr i8, ptr %2351, i64 64
  %2363 = load ptr, ptr %2362, align 8
  call void %2363({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %2313, ptr nocapture nofree writeonly %2361) #8
  %2364 = load ptr, ptr %2347, align 8
  %2365 = load ptr, ptr %2364, align 8
  %2366 = getelementptr i8, ptr %2365, i64 72
  %2367 = load ptr, ptr %2366, align 8
  %2368 = call { i64, i64 } %2367(ptr nocapture nofree nonnull readonly align 8 %2364) #2
  %2369 = extractvalue { i64, i64 } %2368, 0
  %2370 = extractvalue { i64, i64 } %2368, 1
  %2371 = urem i64 20, %2370
  %2372 = icmp eq i64 %2371, 0
  %2373 = sub i64 %2370, %2371
  %2374 = select i1 %2372, i64 0, i64 %2373
  %2375 = add i64 %2369, 20
  %2376 = add i64 %2375, %2374
  %2377 = load ptr, ptr %2348, align 8
  %2378 = load ptr, ptr %2377, align 8
  %2379 = getelementptr i8, ptr %2378, i64 72
  %2380 = load ptr, ptr %2379, align 8
  %2381 = call { i64, i64 } %2380(ptr nocapture nofree nonnull readonly align 8 %2377) #2
  %2382 = extractvalue { i64, i64 } %2381, 1
  %2383 = urem i64 %2376, %2382
  %2384 = icmp eq i64 %2383, 0
  %2385 = sub i64 %2382, %2383
  %2386 = select i1 %2384, i64 0, i64 %2385
  %2387 = getelementptr i8, ptr %2347, i64 %2376
  %2388 = getelementptr i8, ptr %2387, i64 %2386
  %2389 = getelementptr i8, ptr %2378, i64 64
  %2390 = load ptr, ptr %2389, align 8
  call void %2390({ ptr, i160 } %1727, ptr nocapture nofree nonnull readonly align 8 %2377, ptr nocapture nofree writeonly %2388) #8
  %2391 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2392 = getelementptr inbounds i8, ptr %2347, i64 16
  store i32 %1729, ptr %2392, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2393 = ptrtoint ptr %2347 to i64
  %2394 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2395 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2396 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2397

2397:                                             ; preds = %2476, %2312
  %2398 = phi i64 [ undef, %2312 ], [ %2478, %2476 ]
  %2399 = phi i64 [ %2393, %2312 ], [ %2477, %2476 ]
  %2400 = phi i32 [ 0, %2312 ], [ %2413, %2476 ]
  %2401 = phi i1 [ true, %2312 ], [ %2494, %2476 ]
  %2402 = phi ptr [ @Entry, %2312 ], [ %2479, %2476 ]
  %2403 = phi ptr [ %2347, %2312 ], [ %2480, %2476 ]
  %2404 = phi ptr [ undef, %2312 ], [ %2481, %2476 ]
  %2405 = phi i32 [ 10, %2312 ], [ %2493, %2476 ]
  %2406 = sext i32 %2405 to i64
  %2407 = getelementptr ptr, ptr %2402, i64 %2406
  %2408 = getelementptr i8, ptr %2407, i64 64
  %2409 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2402, 0
  %2410 = insertvalue { ptr, ptr, ptr, i32 } %2409, ptr %2403, 1
  %2411 = insertvalue { ptr, ptr, ptr, i32 } %2410, ptr %2404, 2
  %2412 = insertvalue { ptr, ptr, ptr, i32 } %2411, i32 %2405, 3
  %2413 = add nuw nsw i32 %2400, 1
  %2414 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2402)
  %2415 = load ptr, ptr %2408, align 8
  %2416 = call align 4 ptr %2415({ ptr, ptr, ptr, i32 } %2412, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2417 = call i32 %2416({ ptr, ptr, ptr, i32 } %2412, { ptr, ptr, ptr, i32 } %2412, ptr nonnull align 8 %2) #28
  br i1 %2401, label %2418, label %2438

2418:                                             ; preds = %2397
  %2419 = load i32, ptr %54, align 8
  %2420 = add i32 %2419, -1
  %2421 = and i32 %2420, %2417
  %2422 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2423 = load ptr, ptr %56, align 8
  %2424 = sext i32 %2421 to i64
  %2425 = shl nsw i64 %2424, 5
  %2426 = getelementptr i8, ptr %2423, i64 %2425
  %2427 = load ptr, ptr %2426, align 8
  %2428 = getelementptr i8, ptr %2426, i64 8
  %2429 = load i160, ptr %2428, align 4
  store ptr %2402, ptr %2426, align 8
  store i64 %2399, ptr %2428, align 4
  %2430 = getelementptr i8, ptr %2426, i64 16
  store i64 %2398, ptr %2430, align 4
  %2431 = getelementptr i8, ptr %2426, i64 24
  store i32 %2405, ptr %2431, align 4
  %2432 = icmp ne ptr %2427, @nil_typ
  %2433 = icmp ne ptr %2427, null
  %2434 = and i1 %2432, %2433
  %2435 = trunc i160 %2429 to i64
  %2436 = lshr i160 %2429, 64
  %2437 = trunc i160 %2436 to i64
  br i1 %2434, label %2476, label %2498

2438:                                             ; preds = %2397
  %2439 = add i32 %2417, 2127912214
  %2440 = shl i32 %2417, 12
  %2441 = add i32 %2439, %2440
  %2442 = ashr i32 %2441, 19
  %2443 = xor i32 %2441, %2442
  %2444 = xor i32 %2443, -949894596
  %2445 = add i32 %2444, 374761393
  %2446 = shl i32 %2444, 5
  %2447 = add i32 %2445, %2446
  %2448 = add i32 %2447, -744332180
  %2449 = shl i32 %2447, 9
  %2450 = xor i32 %2448, %2449
  %2451 = add i32 %2450, -42973499
  %2452 = shl i32 %2450, 3
  %2453 = add i32 %2451, %2452
  %2454 = ashr i32 %2453, 16
  %2455 = xor i32 %2453, %2454
  %2456 = xor i32 %2455, -1252372727
  %2457 = load i32, ptr %54, align 8
  %2458 = add i32 %2457, -1
  %2459 = and i32 %2458, %2456
  %2460 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2461 = load ptr, ptr %58, align 8
  %2462 = sext i32 %2459 to i64
  %2463 = shl nsw i64 %2462, 5
  %2464 = getelementptr i8, ptr %2461, i64 %2463
  %2465 = load ptr, ptr %2464, align 8
  %2466 = getelementptr i8, ptr %2464, i64 8
  %2467 = load i160, ptr %2466, align 4
  store ptr %2402, ptr %2464, align 8
  store i64 %2399, ptr %2466, align 4
  %2468 = getelementptr i8, ptr %2464, i64 16
  store i64 %2398, ptr %2468, align 4
  %2469 = getelementptr i8, ptr %2464, i64 24
  store i32 %2405, ptr %2469, align 4
  %2470 = icmp ne ptr %2465, @nil_typ
  %2471 = icmp ne ptr %2465, null
  %2472 = and i1 %2470, %2471
  %2473 = trunc i160 %2467 to i64
  %2474 = lshr i160 %2467, 64
  %2475 = trunc i160 %2474 to i64
  br i1 %2472, label %2476, label %2498

2476:                                             ; preds = %2438, %2418
  %2477 = phi i64 [ %2435, %2418 ], [ %2473, %2438 ]
  %2478 = phi i64 [ %2437, %2418 ], [ %2475, %2438 ]
  %2479 = phi ptr [ %2427, %2418 ], [ %2465, %2438 ]
  %2480 = inttoptr i64 %2477 to ptr
  %2481 = inttoptr i64 %2478 to ptr
  %2482 = getelementptr i8, ptr %2479, i64 8
  %2483 = getelementptr i8, ptr %2479, i64 16
  %2484 = getelementptr i8, ptr %2479, i64 40
  %2485 = load i64, ptr %2482, align 4
  %2486 = load i64, ptr %2483, align 4
  %2487 = load ptr, ptr %2484, align 8
  %2488 = mul i64 %2485, 4015701072841558310
  %2489 = lshr i64 %2488, 32
  %2490 = xor i64 %2489, %2488
  %2491 = and i64 %2490, %2486
  %2492 = getelementptr i32, ptr %2487, i64 %2491
  %2493 = load i32, ptr %2492, align 4
  %2494 = xor i1 %2401, true
  %2495 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2496 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2497 = icmp eq i32 %2413, 100
  br i1 %2497, label %2502, label %2397

2498:                                             ; preds = %2438, %2418
  %2499 = load i32, ptr %68, align 4
  %2500 = add i32 %2499, 1
  %2501 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2500, ptr %68, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3198

2502:                                             ; preds = %2476
  %2503 = getelementptr i8, ptr %2479, i64 8
  %2504 = getelementptr i8, ptr %2479, i64 16
  %2505 = getelementptr i8, ptr %2479, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2506 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2507 = load ptr, ptr %56, align 8
  %2508 = load ptr, ptr %58, align 8
  %2509 = load i32, ptr %54, align 8
  %2510 = shl i32 %2509, 1
  %2511 = call i32 @llvm.smax.i32(i32 %2510, i32 noundef 16) #43
  store i32 %2511, ptr %54, align 8
  %2512 = zext nneg i32 %2511 to i64
  %2513 = shl nuw nsw i64 %2512, 5
  %2514 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2513, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2514, ptr %56, align 8
  %2515 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2513, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2515, ptr %58, align 8
  store i32 0, ptr %68, align 4
  %2516 = icmp sgt i32 %2509, 0
  br i1 %2516, label %2517, label %2791

2517:                                             ; preds = %2502
  %2518 = zext nneg i32 %2509 to i64
  br label %2519

2519:                                             ; preds = %2652, %2517
  %2520 = phi i64 [ 0, %2517 ], [ %2653, %2652 ]
  %2521 = shl nuw nsw i64 %2520, 5
  %2522 = getelementptr i8, ptr %2507, i64 %2521
  %2523 = load ptr, ptr %2522, align 8
  %2524 = icmp ne ptr %2523, @nil_typ
  %2525 = icmp ne ptr %2523, null
  %2526 = and i1 %2524, %2525
  br i1 %2526, label %2527, label %2652

2527:                                             ; preds = %2519
  %2528 = getelementptr i8, ptr %2522, i64 8
  %2529 = load i64, ptr %2528, align 4
  %2530 = getelementptr i8, ptr %2522, i64 16
  %2531 = load i64, ptr %2530, align 4
  %2532 = getelementptr i8, ptr %2523, i64 8
  %2533 = getelementptr i8, ptr %2523, i64 16
  %2534 = getelementptr i8, ptr %2523, i64 40
  %2535 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2536 = load i64, ptr %2532, align 4, !noalias !25
  %2537 = load i64, ptr %2533, align 4, !noalias !25
  %2538 = load ptr, ptr %2534, align 8, !noalias !25
  %2539 = mul i64 %2536, 4015701072841558310
  %2540 = lshr i64 %2539, 32
  %2541 = xor i64 %2540, %2539
  %2542 = and i64 %2541, %2537
  %2543 = getelementptr i32, ptr %2538, i64 %2542
  %2544 = load i32, ptr %2543, align 4, !noalias !221
  %2545 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2546 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2547 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2548

2548:                                             ; preds = %2627, %2527
  %2549 = phi i64 [ %2531, %2527 ], [ %2629, %2627 ]
  %2550 = phi i64 [ %2529, %2527 ], [ %2628, %2627 ]
  %2551 = phi i32 [ 0, %2527 ], [ %2564, %2627 ]
  %2552 = phi i1 [ true, %2527 ], [ %2643, %2627 ]
  %2553 = phi ptr [ %2523, %2527 ], [ %2630, %2627 ]
  %2554 = phi i32 [ %2544, %2527 ], [ %2642, %2627 ]
  %2555 = inttoptr i64 %2549 to ptr
  %2556 = inttoptr i64 %2550 to ptr
  %2557 = sext i32 %2554 to i64
  %2558 = getelementptr ptr, ptr %2553, i64 %2557
  %2559 = getelementptr i8, ptr %2558, i64 64
  %2560 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2553, 0
  %2561 = insertvalue { ptr, ptr, ptr, i32 } %2560, ptr %2556, 1
  %2562 = insertvalue { ptr, ptr, ptr, i32 } %2561, ptr %2555, 2
  %2563 = insertvalue { ptr, ptr, ptr, i32 } %2562, i32 %2554, 3
  %2564 = add nuw nsw i32 %2551, 1
  %2565 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2553)
  %2566 = load ptr, ptr %2559, align 8
  %2567 = call align 4 ptr %2566({ ptr, ptr, ptr, i32 } %2563, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2568 = call i32 %2567({ ptr, ptr, ptr, i32 } %2563, { ptr, ptr, ptr, i32 } %2563, ptr nonnull align 8 %2) #28
  br i1 %2552, label %2569, label %2589

2569:                                             ; preds = %2548
  %2570 = load i32, ptr %54, align 8
  %2571 = add i32 %2570, -1
  %2572 = and i32 %2571, %2568
  %2573 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2574 = load ptr, ptr %56, align 8
  %2575 = sext i32 %2572 to i64
  %2576 = shl nsw i64 %2575, 5
  %2577 = getelementptr i8, ptr %2574, i64 %2576
  %2578 = load ptr, ptr %2577, align 8
  %2579 = getelementptr i8, ptr %2577, i64 8
  %2580 = load i160, ptr %2579, align 4
  store ptr %2553, ptr %2577, align 8
  store i64 %2550, ptr %2579, align 4
  %2581 = getelementptr i8, ptr %2577, i64 16
  store i64 %2549, ptr %2581, align 4
  %2582 = getelementptr i8, ptr %2577, i64 24
  store i32 %2554, ptr %2582, align 4
  %2583 = icmp ne ptr %2578, @nil_typ
  %2584 = icmp ne ptr %2578, null
  %2585 = and i1 %2583, %2584
  %2586 = trunc i160 %2580 to i64
  %2587 = lshr i160 %2580, 64
  %2588 = trunc i160 %2587 to i64
  br i1 %2585, label %2627, label %2647

2589:                                             ; preds = %2548
  %2590 = add i32 %2568, 2127912214
  %2591 = shl i32 %2568, 12
  %2592 = add i32 %2590, %2591
  %2593 = ashr i32 %2592, 19
  %2594 = xor i32 %2592, %2593
  %2595 = xor i32 %2594, -949894596
  %2596 = add i32 %2595, 374761393
  %2597 = shl i32 %2595, 5
  %2598 = add i32 %2596, %2597
  %2599 = add i32 %2598, -744332180
  %2600 = shl i32 %2598, 9
  %2601 = xor i32 %2599, %2600
  %2602 = add i32 %2601, -42973499
  %2603 = shl i32 %2601, 3
  %2604 = add i32 %2602, %2603
  %2605 = ashr i32 %2604, 16
  %2606 = xor i32 %2604, %2605
  %2607 = xor i32 %2606, -1252372727
  %2608 = load i32, ptr %54, align 8
  %2609 = add i32 %2608, -1
  %2610 = and i32 %2609, %2607
  %2611 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2612 = load ptr, ptr %58, align 8
  %2613 = sext i32 %2610 to i64
  %2614 = shl nsw i64 %2613, 5
  %2615 = getelementptr i8, ptr %2612, i64 %2614
  %2616 = load ptr, ptr %2615, align 8
  %2617 = getelementptr i8, ptr %2615, i64 8
  %2618 = load i160, ptr %2617, align 4
  store ptr %2553, ptr %2615, align 8
  store i64 %2550, ptr %2617, align 4
  %2619 = getelementptr i8, ptr %2615, i64 16
  store i64 %2549, ptr %2619, align 4
  %2620 = getelementptr i8, ptr %2615, i64 24
  store i32 %2554, ptr %2620, align 4
  %2621 = icmp ne ptr %2616, @nil_typ
  %2622 = icmp ne ptr %2616, null
  %2623 = and i1 %2621, %2622
  %2624 = trunc i160 %2618 to i64
  %2625 = lshr i160 %2618, 64
  %2626 = trunc i160 %2625 to i64
  br i1 %2623, label %2627, label %2647

2627:                                             ; preds = %2589, %2569
  %2628 = phi i64 [ %2586, %2569 ], [ %2624, %2589 ]
  %2629 = phi i64 [ %2588, %2569 ], [ %2626, %2589 ]
  %2630 = phi ptr [ %2578, %2569 ], [ %2616, %2589 ]
  %2631 = getelementptr i8, ptr %2630, i64 8
  %2632 = getelementptr i8, ptr %2630, i64 16
  %2633 = getelementptr i8, ptr %2630, i64 40
  %2634 = load i64, ptr %2631, align 4
  %2635 = load i64, ptr %2632, align 4
  %2636 = load ptr, ptr %2633, align 8
  %2637 = mul i64 %2634, 4015701072841558310
  %2638 = lshr i64 %2637, 32
  %2639 = xor i64 %2638, %2637
  %2640 = and i64 %2639, %2635
  %2641 = getelementptr i32, ptr %2636, i64 %2640
  %2642 = load i32, ptr %2641, align 4
  %2643 = xor i1 %2552, true
  %2644 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2645 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2646 = icmp eq i32 %2564, 100
  br i1 %2646, label %2651, label %2548

2647:                                             ; preds = %2589, %2569
  %2648 = load i32, ptr %68, align 4
  %2649 = add i32 %2648, 1
  %2650 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2649, ptr %68, align 4
  br label %2651

2651:                                             ; preds = %2647, %2627
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2652

2652:                                             ; preds = %2651, %2519
  %2653 = add nuw nsw i64 %2520, 1
  %2654 = icmp eq i64 %2653, %2518
  br i1 %2654, label %2655, label %2519

2655:                                             ; preds = %2788, %2652
  %2656 = phi i64 [ %2789, %2788 ], [ 0, %2652 ]
  %2657 = shl nuw nsw i64 %2656, 5
  %2658 = getelementptr i8, ptr %2508, i64 %2657
  %2659 = load ptr, ptr %2658, align 8
  %2660 = icmp ne ptr %2659, @nil_typ
  %2661 = icmp ne ptr %2659, null
  %2662 = and i1 %2660, %2661
  br i1 %2662, label %2663, label %2788

2663:                                             ; preds = %2655
  %2664 = getelementptr i8, ptr %2658, i64 8
  %2665 = load i64, ptr %2664, align 4
  %2666 = getelementptr i8, ptr %2658, i64 16
  %2667 = load i64, ptr %2666, align 4
  %2668 = getelementptr i8, ptr %2659, i64 8
  %2669 = getelementptr i8, ptr %2659, i64 16
  %2670 = getelementptr i8, ptr %2659, i64 40
  %2671 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2672 = load i64, ptr %2668, align 4, !noalias !25
  %2673 = load i64, ptr %2669, align 4, !noalias !25
  %2674 = load ptr, ptr %2670, align 8, !noalias !25
  %2675 = mul i64 %2672, 4015701072841558310
  %2676 = lshr i64 %2675, 32
  %2677 = xor i64 %2676, %2675
  %2678 = and i64 %2677, %2673
  %2679 = getelementptr i32, ptr %2674, i64 %2678
  %2680 = load i32, ptr %2679, align 4, !noalias !224
  %2681 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2682 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2683 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2684

2684:                                             ; preds = %2763, %2663
  %2685 = phi i64 [ %2667, %2663 ], [ %2765, %2763 ]
  %2686 = phi i64 [ %2665, %2663 ], [ %2764, %2763 ]
  %2687 = phi i32 [ 0, %2663 ], [ %2700, %2763 ]
  %2688 = phi i1 [ true, %2663 ], [ %2779, %2763 ]
  %2689 = phi ptr [ %2659, %2663 ], [ %2766, %2763 ]
  %2690 = phi i32 [ %2680, %2663 ], [ %2778, %2763 ]
  %2691 = inttoptr i64 %2685 to ptr
  %2692 = inttoptr i64 %2686 to ptr
  %2693 = sext i32 %2690 to i64
  %2694 = getelementptr ptr, ptr %2689, i64 %2693
  %2695 = getelementptr i8, ptr %2694, i64 64
  %2696 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2689, 0
  %2697 = insertvalue { ptr, ptr, ptr, i32 } %2696, ptr %2692, 1
  %2698 = insertvalue { ptr, ptr, ptr, i32 } %2697, ptr %2691, 2
  %2699 = insertvalue { ptr, ptr, ptr, i32 } %2698, i32 %2690, 3
  %2700 = add nuw nsw i32 %2687, 1
  %2701 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2689)
  %2702 = load ptr, ptr %2695, align 8
  %2703 = call align 4 ptr %2702({ ptr, ptr, ptr, i32 } %2699, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2704 = call i32 %2703({ ptr, ptr, ptr, i32 } %2699, { ptr, ptr, ptr, i32 } %2699, ptr nonnull align 8 %2) #28
  br i1 %2688, label %2705, label %2725

2705:                                             ; preds = %2684
  %2706 = load i32, ptr %54, align 8
  %2707 = add i32 %2706, -1
  %2708 = and i32 %2707, %2704
  %2709 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2710 = load ptr, ptr %56, align 8
  %2711 = sext i32 %2708 to i64
  %2712 = shl nsw i64 %2711, 5
  %2713 = getelementptr i8, ptr %2710, i64 %2712
  %2714 = load ptr, ptr %2713, align 8
  %2715 = getelementptr i8, ptr %2713, i64 8
  %2716 = load i160, ptr %2715, align 4
  store ptr %2689, ptr %2713, align 8
  store i64 %2686, ptr %2715, align 4
  %2717 = getelementptr i8, ptr %2713, i64 16
  store i64 %2685, ptr %2717, align 4
  %2718 = getelementptr i8, ptr %2713, i64 24
  store i32 %2690, ptr %2718, align 4
  %2719 = icmp ne ptr %2714, @nil_typ
  %2720 = icmp ne ptr %2714, null
  %2721 = and i1 %2719, %2720
  %2722 = trunc i160 %2716 to i64
  %2723 = lshr i160 %2716, 64
  %2724 = trunc i160 %2723 to i64
  br i1 %2721, label %2763, label %2783

2725:                                             ; preds = %2684
  %2726 = add i32 %2704, 2127912214
  %2727 = shl i32 %2704, 12
  %2728 = add i32 %2726, %2727
  %2729 = ashr i32 %2728, 19
  %2730 = xor i32 %2728, %2729
  %2731 = xor i32 %2730, -949894596
  %2732 = add i32 %2731, 374761393
  %2733 = shl i32 %2731, 5
  %2734 = add i32 %2732, %2733
  %2735 = add i32 %2734, -744332180
  %2736 = shl i32 %2734, 9
  %2737 = xor i32 %2735, %2736
  %2738 = add i32 %2737, -42973499
  %2739 = shl i32 %2737, 3
  %2740 = add i32 %2738, %2739
  %2741 = ashr i32 %2740, 16
  %2742 = xor i32 %2740, %2741
  %2743 = xor i32 %2742, -1252372727
  %2744 = load i32, ptr %54, align 8
  %2745 = add i32 %2744, -1
  %2746 = and i32 %2745, %2743
  %2747 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2748 = load ptr, ptr %58, align 8
  %2749 = sext i32 %2746 to i64
  %2750 = shl nsw i64 %2749, 5
  %2751 = getelementptr i8, ptr %2748, i64 %2750
  %2752 = load ptr, ptr %2751, align 8
  %2753 = getelementptr i8, ptr %2751, i64 8
  %2754 = load i160, ptr %2753, align 4
  store ptr %2689, ptr %2751, align 8
  store i64 %2686, ptr %2753, align 4
  %2755 = getelementptr i8, ptr %2751, i64 16
  store i64 %2685, ptr %2755, align 4
  %2756 = getelementptr i8, ptr %2751, i64 24
  store i32 %2690, ptr %2756, align 4
  %2757 = icmp ne ptr %2752, @nil_typ
  %2758 = icmp ne ptr %2752, null
  %2759 = and i1 %2757, %2758
  %2760 = trunc i160 %2754 to i64
  %2761 = lshr i160 %2754, 64
  %2762 = trunc i160 %2761 to i64
  br i1 %2759, label %2763, label %2783

2763:                                             ; preds = %2725, %2705
  %2764 = phi i64 [ %2722, %2705 ], [ %2760, %2725 ]
  %2765 = phi i64 [ %2724, %2705 ], [ %2762, %2725 ]
  %2766 = phi ptr [ %2714, %2705 ], [ %2752, %2725 ]
  %2767 = getelementptr i8, ptr %2766, i64 8
  %2768 = getelementptr i8, ptr %2766, i64 16
  %2769 = getelementptr i8, ptr %2766, i64 40
  %2770 = load i64, ptr %2767, align 4
  %2771 = load i64, ptr %2768, align 4
  %2772 = load ptr, ptr %2769, align 8
  %2773 = mul i64 %2770, 4015701072841558310
  %2774 = lshr i64 %2773, 32
  %2775 = xor i64 %2774, %2773
  %2776 = and i64 %2775, %2771
  %2777 = getelementptr i32, ptr %2772, i64 %2776
  %2778 = load i32, ptr %2777, align 4
  %2779 = xor i1 %2688, true
  %2780 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2781 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2782 = icmp eq i32 %2700, 100
  br i1 %2782, label %2787, label %2684

2783:                                             ; preds = %2725, %2705
  %2784 = load i32, ptr %68, align 4
  %2785 = add i32 %2784, 1
  %2786 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2785, ptr %68, align 4
  br label %2787

2787:                                             ; preds = %2783, %2763
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2788

2788:                                             ; preds = %2787, %2655
  %2789 = add nuw nsw i64 %2656, 1
  %2790 = icmp eq i64 %2789, %2518
  br i1 %2790, label %2791, label %2655

2791:                                             ; preds = %2788, %2502
  %2792 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2793 = load i64, ptr %2503, align 4, !noalias !25
  %2794 = load i64, ptr %2504, align 4, !noalias !25
  %2795 = load ptr, ptr %2505, align 8, !noalias !25
  %2796 = mul i64 %2793, 4015701072841558310
  %2797 = lshr i64 %2796, 32
  %2798 = xor i64 %2797, %2796
  %2799 = and i64 %2798, %2794
  %2800 = getelementptr i32, ptr %2795, i64 %2799
  %2801 = load i32, ptr %2800, align 4, !noalias !227
  %2802 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2803 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2804 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2805

2805:                                             ; preds = %2884, %2791
  %2806 = phi i64 [ %2478, %2791 ], [ %2886, %2884 ]
  %2807 = phi i64 [ %2477, %2791 ], [ %2885, %2884 ]
  %2808 = phi i32 [ 0, %2791 ], [ %2821, %2884 ]
  %2809 = phi i1 [ true, %2791 ], [ %2900, %2884 ]
  %2810 = phi ptr [ %2479, %2791 ], [ %2887, %2884 ]
  %2811 = phi i32 [ %2801, %2791 ], [ %2899, %2884 ]
  %2812 = inttoptr i64 %2806 to ptr
  %2813 = inttoptr i64 %2807 to ptr
  %2814 = sext i32 %2811 to i64
  %2815 = getelementptr ptr, ptr %2810, i64 %2814
  %2816 = getelementptr i8, ptr %2815, i64 64
  %2817 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2810, 0
  %2818 = insertvalue { ptr, ptr, ptr, i32 } %2817, ptr %2813, 1
  %2819 = insertvalue { ptr, ptr, ptr, i32 } %2818, ptr %2812, 2
  %2820 = insertvalue { ptr, ptr, ptr, i32 } %2819, i32 %2811, 3
  %2821 = add nuw nsw i32 %2808, 1
  %2822 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2810)
  %2823 = load ptr, ptr %2816, align 8
  %2824 = call align 4 ptr %2823({ ptr, ptr, ptr, i32 } %2820, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2825 = call i32 %2824({ ptr, ptr, ptr, i32 } %2820, { ptr, ptr, ptr, i32 } %2820, ptr nonnull align 8 %2) #28
  br i1 %2809, label %2826, label %2846

2826:                                             ; preds = %2805
  %2827 = load i32, ptr %54, align 8
  %2828 = add i32 %2827, -1
  %2829 = and i32 %2828, %2825
  %2830 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2831 = load ptr, ptr %56, align 8
  %2832 = sext i32 %2829 to i64
  %2833 = shl nsw i64 %2832, 5
  %2834 = getelementptr i8, ptr %2831, i64 %2833
  %2835 = load ptr, ptr %2834, align 8
  %2836 = getelementptr i8, ptr %2834, i64 8
  %2837 = load i160, ptr %2836, align 4
  store ptr %2810, ptr %2834, align 8
  store i64 %2807, ptr %2836, align 4
  %2838 = getelementptr i8, ptr %2834, i64 16
  store i64 %2806, ptr %2838, align 4
  %2839 = getelementptr i8, ptr %2834, i64 24
  store i32 %2811, ptr %2839, align 4
  %2840 = icmp ne ptr %2835, @nil_typ
  %2841 = icmp ne ptr %2835, null
  %2842 = and i1 %2840, %2841
  %2843 = trunc i160 %2837 to i64
  %2844 = lshr i160 %2837, 64
  %2845 = trunc i160 %2844 to i64
  br i1 %2842, label %2884, label %2904

2846:                                             ; preds = %2805
  %2847 = add i32 %2825, 2127912214
  %2848 = shl i32 %2825, 12
  %2849 = add i32 %2847, %2848
  %2850 = ashr i32 %2849, 19
  %2851 = xor i32 %2849, %2850
  %2852 = xor i32 %2851, -949894596
  %2853 = add i32 %2852, 374761393
  %2854 = shl i32 %2852, 5
  %2855 = add i32 %2853, %2854
  %2856 = add i32 %2855, -744332180
  %2857 = shl i32 %2855, 9
  %2858 = xor i32 %2856, %2857
  %2859 = add i32 %2858, -42973499
  %2860 = shl i32 %2858, 3
  %2861 = add i32 %2859, %2860
  %2862 = ashr i32 %2861, 16
  %2863 = xor i32 %2861, %2862
  %2864 = xor i32 %2863, -1252372727
  %2865 = load i32, ptr %54, align 8
  %2866 = add i32 %2865, -1
  %2867 = and i32 %2866, %2864
  %2868 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2869 = load ptr, ptr %58, align 8
  %2870 = sext i32 %2867 to i64
  %2871 = shl nsw i64 %2870, 5
  %2872 = getelementptr i8, ptr %2869, i64 %2871
  %2873 = load ptr, ptr %2872, align 8
  %2874 = getelementptr i8, ptr %2872, i64 8
  %2875 = load i160, ptr %2874, align 4
  store ptr %2810, ptr %2872, align 8
  store i64 %2807, ptr %2874, align 4
  %2876 = getelementptr i8, ptr %2872, i64 16
  store i64 %2806, ptr %2876, align 4
  %2877 = getelementptr i8, ptr %2872, i64 24
  store i32 %2811, ptr %2877, align 4
  %2878 = icmp ne ptr %2873, @nil_typ
  %2879 = icmp ne ptr %2873, null
  %2880 = and i1 %2878, %2879
  %2881 = trunc i160 %2875 to i64
  %2882 = lshr i160 %2875, 64
  %2883 = trunc i160 %2882 to i64
  br i1 %2880, label %2884, label %2904

2884:                                             ; preds = %2846, %2826
  %2885 = phi i64 [ %2843, %2826 ], [ %2881, %2846 ]
  %2886 = phi i64 [ %2845, %2826 ], [ %2883, %2846 ]
  %2887 = phi ptr [ %2835, %2826 ], [ %2873, %2846 ]
  %2888 = getelementptr i8, ptr %2887, i64 8
  %2889 = getelementptr i8, ptr %2887, i64 16
  %2890 = getelementptr i8, ptr %2887, i64 40
  %2891 = load i64, ptr %2888, align 4
  %2892 = load i64, ptr %2889, align 4
  %2893 = load ptr, ptr %2890, align 8
  %2894 = mul i64 %2891, 4015701072841558310
  %2895 = lshr i64 %2894, 32
  %2896 = xor i64 %2895, %2894
  %2897 = and i64 %2896, %2892
  %2898 = getelementptr i32, ptr %2893, i64 %2897
  %2899 = load i32, ptr %2898, align 4
  %2900 = xor i1 %2809, true
  %2901 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2902 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2903 = icmp eq i32 %2821, 100
  br i1 %2903, label %2908, label %2805

2904:                                             ; preds = %2846, %2826
  %2905 = load i32, ptr %68, align 4
  %2906 = add i32 %2905, 1
  %2907 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2906, ptr %68, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3198

2908:                                             ; preds = %2884
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2909 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2910 = load ptr, ptr %56, align 8
  %2911 = load ptr, ptr %58, align 8
  %2912 = load i32, ptr %54, align 8
  %2913 = shl i32 %2912, 1
  %2914 = call i32 @llvm.smax.i32(i32 %2913, i32 noundef 16) #43
  store i32 %2914, ptr %54, align 8
  %2915 = zext nneg i32 %2914 to i64
  %2916 = shl nuw nsw i64 %2915, 5
  %2917 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2916, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2917, ptr %56, align 8
  %2918 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2916, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2918, ptr %58, align 8
  store i32 0, ptr %68, align 4
  %2919 = icmp sgt i32 %2912, 0
  br i1 %2919, label %2922, label %2920

2920:                                             ; preds = %2908
  %2921 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %3198

2922:                                             ; preds = %2908
  %2923 = zext nneg i32 %2912 to i64
  br label %2924

2924:                                             ; preds = %3057, %2922
  %2925 = phi i64 [ 0, %2922 ], [ %3058, %3057 ]
  %2926 = shl nuw nsw i64 %2925, 5
  %2927 = getelementptr i8, ptr %2910, i64 %2926
  %2928 = load ptr, ptr %2927, align 8
  %2929 = icmp ne ptr %2928, @nil_typ
  %2930 = icmp ne ptr %2928, null
  %2931 = and i1 %2929, %2930
  br i1 %2931, label %2932, label %3057

2932:                                             ; preds = %2924
  %2933 = getelementptr i8, ptr %2927, i64 8
  %2934 = load i64, ptr %2933, align 4
  %2935 = getelementptr i8, ptr %2927, i64 16
  %2936 = load i64, ptr %2935, align 4
  %2937 = getelementptr i8, ptr %2928, i64 8
  %2938 = getelementptr i8, ptr %2928, i64 16
  %2939 = getelementptr i8, ptr %2928, i64 40
  %2940 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2941 = load i64, ptr %2937, align 4, !noalias !25
  %2942 = load i64, ptr %2938, align 4, !noalias !25
  %2943 = load ptr, ptr %2939, align 8, !noalias !25
  %2944 = mul i64 %2941, 4015701072841558310
  %2945 = lshr i64 %2944, 32
  %2946 = xor i64 %2945, %2944
  %2947 = and i64 %2946, %2942
  %2948 = getelementptr i32, ptr %2943, i64 %2947
  %2949 = load i32, ptr %2948, align 4, !noalias !230
  %2950 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2951 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2952 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2953

2953:                                             ; preds = %3032, %2932
  %2954 = phi i64 [ %2936, %2932 ], [ %3034, %3032 ]
  %2955 = phi i64 [ %2934, %2932 ], [ %3033, %3032 ]
  %2956 = phi i32 [ 0, %2932 ], [ %2969, %3032 ]
  %2957 = phi i1 [ true, %2932 ], [ %3048, %3032 ]
  %2958 = phi ptr [ %2928, %2932 ], [ %3035, %3032 ]
  %2959 = phi i32 [ %2949, %2932 ], [ %3047, %3032 ]
  %2960 = inttoptr i64 %2954 to ptr
  %2961 = inttoptr i64 %2955 to ptr
  %2962 = sext i32 %2959 to i64
  %2963 = getelementptr ptr, ptr %2958, i64 %2962
  %2964 = getelementptr i8, ptr %2963, i64 64
  %2965 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2958, 0
  %2966 = insertvalue { ptr, ptr, ptr, i32 } %2965, ptr %2961, 1
  %2967 = insertvalue { ptr, ptr, ptr, i32 } %2966, ptr %2960, 2
  %2968 = insertvalue { ptr, ptr, ptr, i32 } %2967, i32 %2959, 3
  %2969 = add nuw nsw i32 %2956, 1
  %2970 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2958)
  %2971 = load ptr, ptr %2964, align 8
  %2972 = call align 4 ptr %2971({ ptr, ptr, ptr, i32 } %2968, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2973 = call i32 %2972({ ptr, ptr, ptr, i32 } %2968, { ptr, ptr, ptr, i32 } %2968, ptr nonnull align 8 %2) #28
  br i1 %2957, label %2974, label %2994

2974:                                             ; preds = %2953
  %2975 = load i32, ptr %54, align 8
  %2976 = add i32 %2975, -1
  %2977 = and i32 %2976, %2973
  %2978 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2979 = load ptr, ptr %56, align 8
  %2980 = sext i32 %2977 to i64
  %2981 = shl nsw i64 %2980, 5
  %2982 = getelementptr i8, ptr %2979, i64 %2981
  %2983 = load ptr, ptr %2982, align 8
  %2984 = getelementptr i8, ptr %2982, i64 8
  %2985 = load i160, ptr %2984, align 4
  store ptr %2958, ptr %2982, align 8
  store i64 %2955, ptr %2984, align 4
  %2986 = getelementptr i8, ptr %2982, i64 16
  store i64 %2954, ptr %2986, align 4
  %2987 = getelementptr i8, ptr %2982, i64 24
  store i32 %2959, ptr %2987, align 4
  %2988 = icmp ne ptr %2983, @nil_typ
  %2989 = icmp ne ptr %2983, null
  %2990 = and i1 %2988, %2989
  %2991 = trunc i160 %2985 to i64
  %2992 = lshr i160 %2985, 64
  %2993 = trunc i160 %2992 to i64
  br i1 %2990, label %3032, label %3052

2994:                                             ; preds = %2953
  %2995 = add i32 %2973, 2127912214
  %2996 = shl i32 %2973, 12
  %2997 = add i32 %2995, %2996
  %2998 = ashr i32 %2997, 19
  %2999 = xor i32 %2997, %2998
  %3000 = xor i32 %2999, -949894596
  %3001 = add i32 %3000, 374761393
  %3002 = shl i32 %3000, 5
  %3003 = add i32 %3001, %3002
  %3004 = add i32 %3003, -744332180
  %3005 = shl i32 %3003, 9
  %3006 = xor i32 %3004, %3005
  %3007 = add i32 %3006, -42973499
  %3008 = shl i32 %3006, 3
  %3009 = add i32 %3007, %3008
  %3010 = ashr i32 %3009, 16
  %3011 = xor i32 %3009, %3010
  %3012 = xor i32 %3011, -1252372727
  %3013 = load i32, ptr %54, align 8
  %3014 = add i32 %3013, -1
  %3015 = and i32 %3014, %3012
  %3016 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3017 = load ptr, ptr %58, align 8
  %3018 = sext i32 %3015 to i64
  %3019 = shl nsw i64 %3018, 5
  %3020 = getelementptr i8, ptr %3017, i64 %3019
  %3021 = load ptr, ptr %3020, align 8
  %3022 = getelementptr i8, ptr %3020, i64 8
  %3023 = load i160, ptr %3022, align 4
  store ptr %2958, ptr %3020, align 8
  store i64 %2955, ptr %3022, align 4
  %3024 = getelementptr i8, ptr %3020, i64 16
  store i64 %2954, ptr %3024, align 4
  %3025 = getelementptr i8, ptr %3020, i64 24
  store i32 %2959, ptr %3025, align 4
  %3026 = icmp ne ptr %3021, @nil_typ
  %3027 = icmp ne ptr %3021, null
  %3028 = and i1 %3026, %3027
  %3029 = trunc i160 %3023 to i64
  %3030 = lshr i160 %3023, 64
  %3031 = trunc i160 %3030 to i64
  br i1 %3028, label %3032, label %3052

3032:                                             ; preds = %2994, %2974
  %3033 = phi i64 [ %2991, %2974 ], [ %3029, %2994 ]
  %3034 = phi i64 [ %2993, %2974 ], [ %3031, %2994 ]
  %3035 = phi ptr [ %2983, %2974 ], [ %3021, %2994 ]
  %3036 = getelementptr i8, ptr %3035, i64 8
  %3037 = getelementptr i8, ptr %3035, i64 16
  %3038 = getelementptr i8, ptr %3035, i64 40
  %3039 = load i64, ptr %3036, align 4
  %3040 = load i64, ptr %3037, align 4
  %3041 = load ptr, ptr %3038, align 8
  %3042 = mul i64 %3039, 4015701072841558310
  %3043 = lshr i64 %3042, 32
  %3044 = xor i64 %3043, %3042
  %3045 = and i64 %3044, %3040
  %3046 = getelementptr i32, ptr %3041, i64 %3045
  %3047 = load i32, ptr %3046, align 4
  %3048 = xor i1 %2957, true
  %3049 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3050 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3051 = icmp eq i32 %2969, 100
  br i1 %3051, label %3056, label %2953

3052:                                             ; preds = %2994, %2974
  %3053 = load i32, ptr %68, align 4
  %3054 = add i32 %3053, 1
  %3055 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %3054, ptr %68, align 4
  br label %3056

3056:                                             ; preds = %3052, %3032
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3057

3057:                                             ; preds = %3056, %2924
  %3058 = add nuw nsw i64 %2925, 1
  %3059 = icmp eq i64 %3058, %2923
  br i1 %3059, label %3060, label %2924

3060:                                             ; preds = %3057
  %3061 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %3062

3062:                                             ; preds = %3195, %3060
  %3063 = phi i64 [ 0, %3060 ], [ %3196, %3195 ]
  %3064 = shl nuw nsw i64 %3063, 5
  %3065 = getelementptr i8, ptr %2911, i64 %3064
  %3066 = load ptr, ptr %3065, align 8
  %3067 = icmp ne ptr %3066, @nil_typ
  %3068 = icmp ne ptr %3066, null
  %3069 = and i1 %3067, %3068
  br i1 %3069, label %3070, label %3195

3070:                                             ; preds = %3062
  %3071 = getelementptr i8, ptr %3065, i64 8
  %3072 = load i64, ptr %3071, align 4
  %3073 = getelementptr i8, ptr %3065, i64 16
  %3074 = load i64, ptr %3073, align 4
  %3075 = getelementptr i8, ptr %3066, i64 8
  %3076 = getelementptr i8, ptr %3066, i64 16
  %3077 = getelementptr i8, ptr %3066, i64 40
  %3078 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3079 = load i64, ptr %3075, align 4, !noalias !25
  %3080 = load i64, ptr %3076, align 4, !noalias !25
  %3081 = load ptr, ptr %3077, align 8, !noalias !25
  %3082 = mul i64 %3079, 4015701072841558310
  %3083 = lshr i64 %3082, 32
  %3084 = xor i64 %3083, %3082
  %3085 = and i64 %3084, %3080
  %3086 = getelementptr i32, ptr %3081, i64 %3085
  %3087 = load i32, ptr %3086, align 4, !noalias !233
  %3088 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3089 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3090 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3091

3091:                                             ; preds = %3170, %3070
  %3092 = phi i64 [ %3074, %3070 ], [ %3172, %3170 ]
  %3093 = phi i64 [ %3072, %3070 ], [ %3171, %3170 ]
  %3094 = phi i32 [ 0, %3070 ], [ %3107, %3170 ]
  %3095 = phi i1 [ true, %3070 ], [ %3186, %3170 ]
  %3096 = phi ptr [ %3066, %3070 ], [ %3173, %3170 ]
  %3097 = phi i32 [ %3087, %3070 ], [ %3185, %3170 ]
  %3098 = inttoptr i64 %3092 to ptr
  %3099 = inttoptr i64 %3093 to ptr
  %3100 = sext i32 %3097 to i64
  %3101 = getelementptr ptr, ptr %3096, i64 %3100
  %3102 = getelementptr i8, ptr %3101, i64 64
  %3103 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3096, 0
  %3104 = insertvalue { ptr, ptr, ptr, i32 } %3103, ptr %3099, 1
  %3105 = insertvalue { ptr, ptr, ptr, i32 } %3104, ptr %3098, 2
  %3106 = insertvalue { ptr, ptr, ptr, i32 } %3105, i32 %3097, 3
  %3107 = add nuw nsw i32 %3094, 1
  %3108 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %3096)
  %3109 = load ptr, ptr %3102, align 8
  %3110 = call align 4 ptr %3109({ ptr, ptr, ptr, i32 } %3106, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3111 = call i32 %3110({ ptr, ptr, ptr, i32 } %3106, { ptr, ptr, ptr, i32 } %3106, ptr nonnull align 8 %2) #28
  br i1 %3095, label %3112, label %3132

3112:                                             ; preds = %3091
  %3113 = load i32, ptr %54, align 8
  %3114 = add i32 %3113, -1
  %3115 = and i32 %3114, %3111
  %3116 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3117 = load ptr, ptr %56, align 8
  %3118 = sext i32 %3115 to i64
  %3119 = shl nsw i64 %3118, 5
  %3120 = getelementptr i8, ptr %3117, i64 %3119
  %3121 = load ptr, ptr %3120, align 8
  %3122 = getelementptr i8, ptr %3120, i64 8
  %3123 = load i160, ptr %3122, align 4
  store ptr %3096, ptr %3120, align 8
  store i64 %3093, ptr %3122, align 4
  %3124 = getelementptr i8, ptr %3120, i64 16
  store i64 %3092, ptr %3124, align 4
  %3125 = getelementptr i8, ptr %3120, i64 24
  store i32 %3097, ptr %3125, align 4
  %3126 = icmp ne ptr %3121, @nil_typ
  %3127 = icmp ne ptr %3121, null
  %3128 = and i1 %3126, %3127
  %3129 = trunc i160 %3123 to i64
  %3130 = lshr i160 %3123, 64
  %3131 = trunc i160 %3130 to i64
  br i1 %3128, label %3170, label %3190

3132:                                             ; preds = %3091
  %3133 = add i32 %3111, 2127912214
  %3134 = shl i32 %3111, 12
  %3135 = add i32 %3133, %3134
  %3136 = ashr i32 %3135, 19
  %3137 = xor i32 %3135, %3136
  %3138 = xor i32 %3137, -949894596
  %3139 = add i32 %3138, 374761393
  %3140 = shl i32 %3138, 5
  %3141 = add i32 %3139, %3140
  %3142 = add i32 %3141, -744332180
  %3143 = shl i32 %3141, 9
  %3144 = xor i32 %3142, %3143
  %3145 = add i32 %3144, -42973499
  %3146 = shl i32 %3144, 3
  %3147 = add i32 %3145, %3146
  %3148 = ashr i32 %3147, 16
  %3149 = xor i32 %3147, %3148
  %3150 = xor i32 %3149, -1252372727
  %3151 = load i32, ptr %54, align 8
  %3152 = add i32 %3151, -1
  %3153 = and i32 %3152, %3150
  %3154 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3155 = load ptr, ptr %58, align 8
  %3156 = sext i32 %3153 to i64
  %3157 = shl nsw i64 %3156, 5
  %3158 = getelementptr i8, ptr %3155, i64 %3157
  %3159 = load ptr, ptr %3158, align 8
  %3160 = getelementptr i8, ptr %3158, i64 8
  %3161 = load i160, ptr %3160, align 4
  store ptr %3096, ptr %3158, align 8
  store i64 %3093, ptr %3160, align 4
  %3162 = getelementptr i8, ptr %3158, i64 16
  store i64 %3092, ptr %3162, align 4
  %3163 = getelementptr i8, ptr %3158, i64 24
  store i32 %3097, ptr %3163, align 4
  %3164 = icmp ne ptr %3159, @nil_typ
  %3165 = icmp ne ptr %3159, null
  %3166 = and i1 %3164, %3165
  %3167 = trunc i160 %3161 to i64
  %3168 = lshr i160 %3161, 64
  %3169 = trunc i160 %3168 to i64
  br i1 %3166, label %3170, label %3190

3170:                                             ; preds = %3132, %3112
  %3171 = phi i64 [ %3129, %3112 ], [ %3167, %3132 ]
  %3172 = phi i64 [ %3131, %3112 ], [ %3169, %3132 ]
  %3173 = phi ptr [ %3121, %3112 ], [ %3159, %3132 ]
  %3174 = getelementptr i8, ptr %3173, i64 8
  %3175 = getelementptr i8, ptr %3173, i64 16
  %3176 = getelementptr i8, ptr %3173, i64 40
  %3177 = load i64, ptr %3174, align 4
  %3178 = load i64, ptr %3175, align 4
  %3179 = load ptr, ptr %3176, align 8
  %3180 = mul i64 %3177, 4015701072841558310
  %3181 = lshr i64 %3180, 32
  %3182 = xor i64 %3181, %3180
  %3183 = and i64 %3182, %3178
  %3184 = getelementptr i32, ptr %3179, i64 %3183
  %3185 = load i32, ptr %3184, align 4
  %3186 = xor i1 %3095, true
  %3187 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3188 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3189 = icmp eq i32 %3107, 100
  br i1 %3189, label %3194, label %3091

3190:                                             ; preds = %3132, %3112
  %3191 = load i32, ptr %68, align 4
  %3192 = add i32 %3191, 1
  %3193 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %3192, ptr %68, align 4
  br label %3194

3194:                                             ; preds = %3190, %3170
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3195

3195:                                             ; preds = %3194, %3062
  %3196 = add nuw nsw i64 %3063, 1
  %3197 = icmp eq i64 %3196, %2923
  br i1 %3197, label %3198, label %3062

3198:                                             ; preds = %3195, %2920, %2904, %2498, %1939, %1783
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3199 = sext i32 %244 to i64
  %3200 = add i64 %74, %3199
  %3201 = add nsw i32 %73, 1
  br label %3202

3202:                                             ; preds = %3198, %238
  %3203 = phi i64 [ %3200, %3198 ], [ %74, %238 ]
  %3204 = phi i32 [ %3201, %3198 ], [ %73, %238 ]
  %3205 = add nuw nsw i32 %72, 1
  %3206 = icmp slt i32 %3204, %0
  %3207 = icmp slt i32 %3205, %60
  %3208 = select i1 %3206, i1 %3207, i1 false
  br i1 %3208, label %70, label %3209

3209:                                             ; preds = %3202, %1
  %3210 = phi i64 [ 0, %1 ], [ %3203, %3202 ]
  %3211 = phi i32 [ 0, %1 ], [ %3204, %3202 ]
  %3212 = icmp slt i32 %3211, %0
  br i1 %3212, label %3213, label %3230

3213:                                             ; preds = %3209
  %3214 = call noalias nonnull align 32 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %3214, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3215 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3216 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3217 = call noalias nonnull align 4 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(30) %3217, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(30) %3214, i64 noundef 29, i1 noundef false)
  %3218 = getelementptr inbounds i8, ptr %3217, i64 29
  store i8 0, ptr %3218, align 1
  %3219 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(30) %3217) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3220 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3211) #25
  %3221 = call noalias nonnull align 64 dereferenceable(34) ptr @bump_malloc_inner(i64 noundef 34, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %3222 = load <33 x i8>, ptr @emoka__unique_keys_for_random_hit_test, align 64
  store <33 x i8> %3222, ptr %3221, align 64
  %3223 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3224 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3225 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3226 = call noalias nonnull align 4 dereferenceable(34) ptr @bump_malloc_inner(i64 noundef 34, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(34) %3226, ptr noalias nocapture nofree noundef nonnull readonly align 64 dereferenceable(34) %3221, i64 noundef 33, i1 noundef false)
  %3227 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3228 = getelementptr inbounds i8, ptr %3226, i64 33
  store i8 0, ptr %3228, align 1
  %3229 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(34) %3226) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3230

3230:                                             ; preds = %3213, %3209
  %3231 = phi i32 [ %3211, %3213 ], [ %0, %3209 ]
  %3232 = call i64 @clock()
  %3233 = icmp sgt i32 %3231, 0
  br i1 %3233, label %3234, label %3436

3234:                                             ; preds = %3230
  %3235 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %3236 = zext nneg i32 %3231 to i64
  br label %3237

3237:                                             ; preds = %3431, %3234
  %3238 = phi i64 [ 0, %3234 ], [ %3434, %3431 ]
  %3239 = phi i64 [ 0, %3234 ], [ %3433, %3431 ]
  %3240 = phi i1 [ true, %3234 ], [ %3432, %3431 ]
  %3241 = shl i64 %3238, 2
  %3242 = getelementptr i8, ptr %38, i64 %3241
  %3243 = load i32, ptr %3242, align 4
  %3244 = zext i32 %3243 to i160
  %3245 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %3244, 1
  %3246 = load ptr, ptr %28, align 8
  %3247 = call i32 %3246({ ptr, i160 } %3245) #28
  %3248 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %3249 = load i32, ptr %30, align 8
  %3250 = add i32 %3249, -1
  %3251 = and i32 %3250, %3247
  %3252 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3253 = sext i32 %3251 to i64
  %3254 = shl nsw i64 %3253, 5
  %3255 = getelementptr i8, ptr %3252, i64 %3254
  %3256 = load ptr, ptr %3255, align 8
  %3257 = icmp ne ptr %3256, @nil_typ
  %3258 = icmp ne ptr %3256, null
  %3259 = and i1 %3257, %3258
  br i1 %3259, label %3260, label %3302

3260:                                             ; preds = %3237
  %3261 = getelementptr i8, ptr %3255, i64 8
  %3262 = load i64, ptr %3261, align 4
  %3263 = getelementptr i8, ptr %3255, i64 16
  %3264 = load i64, ptr %3263, align 4
  %3265 = inttoptr i64 %3262 to ptr
  %3266 = inttoptr i64 %3264 to ptr
  %3267 = getelementptr i8, ptr %3256, i64 8
  %3268 = getelementptr i8, ptr %3256, i64 16
  %3269 = getelementptr i8, ptr %3256, i64 40
  %3270 = load i64, ptr %3267, align 4, !noalias !236
  %3271 = load i64, ptr %3268, align 4, !noalias !236
  %3272 = load ptr, ptr %3269, align 8, !noalias !236
  %3273 = mul i64 %3270, 4015701072841558310
  %3274 = lshr i64 %3273, 32
  %3275 = xor i64 %3274, %3273
  %3276 = and i64 %3275, %3271
  %3277 = getelementptr i32, ptr %3272, i64 %3276
  %3278 = load i32, ptr %3277, align 4, !noalias !236
  %3279 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3256, 0
  %3280 = insertvalue { ptr, ptr, ptr, i32 } %3279, ptr %3265, 1
  %3281 = insertvalue { ptr, ptr, ptr, i32 } %3280, ptr %3266, 2
  %3282 = insertvalue { ptr, ptr, ptr, i32 } %3281, i32 %3278, 3
  %3283 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3284 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3256) #43
  %3285 = sext i32 %3278 to i64
  %3286 = getelementptr ptr, ptr %3256, i64 %3285
  %3287 = getelementptr i8, ptr %3286, i64 64
  %3288 = load ptr, ptr %3287, align 8
  %3289 = call align 4 ptr %3288({ ptr, ptr, ptr, i32 } %3282, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3290 = call i32 %3289({ ptr, ptr, ptr, i32 } %3282, { ptr, ptr, ptr, i32 } %3282, ptr nonnull align 8 %2) #28
  %3291 = icmp eq i32 %3290, %3247
  br i1 %3291, label %3292, label %3302

3292:                                             ; preds = %3260
  %3293 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3294 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3256)
  %3295 = getelementptr i8, ptr %3286, i64 48
  %3296 = load ptr, ptr %3295, align 8
  %3297 = call align 4 ptr %3296({ ptr, ptr, ptr, i32 } %3282, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3298 = call { ptr, i160 } %3297({ ptr, ptr, ptr, i32 } %3282, { ptr, ptr, ptr, i32 } %3282, ptr nonnull align 8 %2) #28
  %3299 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3300 = load ptr, ptr %29, align 8
  %3301 = call i1 %3300({ ptr, i160 } %3298, { ptr, i160 } %3245) #28
  br i1 %3301, label %3303, label %3302

3302:                                             ; preds = %3292, %3260, %3237
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3315

3303:                                             ; preds = %3292
  %3304 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3305 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3256)
  %3306 = getelementptr i8, ptr %3286, i64 56
  %3307 = load ptr, ptr %3306, align 8
  %3308 = call align 4 ptr %3307({ ptr, ptr, ptr, i32 } %3282, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3309 = call { ptr, i160 } %3308({ ptr, ptr, ptr, i32 } %3282, { ptr, ptr, ptr, i32 } %3282, ptr nonnull align 8 %2) #28
  %3310 = extractvalue { ptr, i160 } %3309, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3311 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3312 = icmp ne ptr %3310, @nil_typ
  %3313 = icmp ne ptr %3310, null
  %3314 = and i1 %3312, %3313
  br i1 %3314, label %3408, label %3315

3315:                                             ; preds = %3303, %3302
  %3316 = add i32 %3247, 2127912214
  %3317 = shl i32 %3247, 12
  %3318 = add i32 %3316, %3317
  %3319 = ashr i32 %3318, 19
  %3320 = xor i32 %3318, %3319
  %3321 = xor i32 %3320, -949894596
  %3322 = add i32 %3321, 374761393
  %3323 = shl i32 %3321, 5
  %3324 = add i32 %3322, %3323
  %3325 = add i32 %3324, -744332180
  %3326 = shl i32 %3324, 9
  %3327 = xor i32 %3325, %3326
  %3328 = add i32 %3327, -42973499
  %3329 = shl i32 %3327, 3
  %3330 = add i32 %3328, %3329
  %3331 = ashr i32 %3330, 16
  %3332 = xor i32 %3330, %3331
  %3333 = xor i32 %3332, -1252372727
  %3334 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3335 = load i32, ptr %30, align 8
  %3336 = add i32 %3335, -1
  %3337 = and i32 %3336, %3333
  %3338 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3339 = sext i32 %3337 to i64
  %3340 = shl nsw i64 %3339, 5
  %3341 = getelementptr i8, ptr %3338, i64 %3340
  %3342 = load ptr, ptr %3341, align 8
  %3343 = icmp ne ptr %3342, @nil_typ
  %3344 = icmp ne ptr %3342, null
  %3345 = and i1 %3343, %3344
  br i1 %3345, label %3346, label %3397

3346:                                             ; preds = %3315
  %3347 = getelementptr i8, ptr %3341, i64 8
  %3348 = load i64, ptr %3347, align 4
  %3349 = getelementptr i8, ptr %3341, i64 16
  %3350 = load i64, ptr %3349, align 4
  %3351 = inttoptr i64 %3348 to ptr
  %3352 = inttoptr i64 %3350 to ptr
  %3353 = getelementptr i8, ptr %3342, i64 8
  %3354 = getelementptr i8, ptr %3342, i64 16
  %3355 = getelementptr i8, ptr %3342, i64 40
  %3356 = load i64, ptr %3353, align 4, !noalias !239
  %3357 = load i64, ptr %3354, align 4, !noalias !239
  %3358 = load ptr, ptr %3355, align 8, !noalias !239
  %3359 = mul i64 %3356, 4015701072841558310
  %3360 = lshr i64 %3359, 32
  %3361 = xor i64 %3360, %3359
  %3362 = and i64 %3361, %3357
  %3363 = getelementptr i32, ptr %3358, i64 %3362
  %3364 = load i32, ptr %3363, align 4, !noalias !239
  %3365 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3342, 0
  %3366 = insertvalue { ptr, ptr, ptr, i32 } %3365, ptr %3351, 1
  %3367 = insertvalue { ptr, ptr, ptr, i32 } %3366, ptr %3352, 2
  %3368 = insertvalue { ptr, ptr, ptr, i32 } %3367, i32 %3364, 3
  %3369 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3370 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3342) #43
  %3371 = sext i32 %3364 to i64
  %3372 = getelementptr ptr, ptr %3342, i64 %3371
  %3373 = getelementptr i8, ptr %3372, i64 64
  %3374 = load ptr, ptr %3373, align 8
  %3375 = call align 4 ptr %3374({ ptr, ptr, ptr, i32 } %3368, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3376 = call i32 %3375({ ptr, ptr, ptr, i32 } %3368, { ptr, ptr, ptr, i32 } %3368, ptr nonnull align 8 %2) #28
  %3377 = icmp eq i32 %3376, %3247
  br i1 %3377, label %3378, label %3397

3378:                                             ; preds = %3346
  %3379 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3380 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3342)
  %3381 = getelementptr i8, ptr %3372, i64 48
  %3382 = load ptr, ptr %3381, align 8
  %3383 = call align 4 ptr %3382({ ptr, ptr, ptr, i32 } %3368, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3384 = call { ptr, i160 } %3383({ ptr, ptr, ptr, i32 } %3368, { ptr, ptr, ptr, i32 } %3368, ptr nonnull align 8 %2) #28
  %3385 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3386 = load ptr, ptr %29, align 8
  %3387 = call i1 %3386({ ptr, i160 } %3384, { ptr, i160 } %3245) #28
  br i1 %3387, label %3388, label %3397

3388:                                             ; preds = %3378
  %3389 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3390 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3342)
  %3391 = getelementptr i8, ptr %3372, i64 56
  %3392 = load ptr, ptr %3391, align 8
  %3393 = call align 4 ptr %3392({ ptr, ptr, ptr, i32 } %3368, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3394 = call { ptr, i160 } %3393({ ptr, ptr, ptr, i32 } %3368, { ptr, ptr, ptr, i32 } %3368, ptr nonnull align 8 %2) #28
  %3395 = extractvalue { ptr, i160 } %3394, 0
  %3396 = extractvalue { ptr, i160 } %3394, 1
  br label %3397

3397:                                             ; preds = %3388, %3378, %3346, %3315
  %3398 = phi i160 [ %3396, %3388 ], [ poison, %3378 ], [ poison, %3315 ], [ poison, %3346 ]
  %3399 = phi ptr [ %3395, %3388 ], [ @nil_typ, %3378 ], [ @nil_typ, %3315 ], [ @nil_typ, %3346 ]
  %3400 = insertvalue { ptr, i160 } poison, ptr %3399, 0
  %3401 = insertvalue { ptr, i160 } %3400, i160 %3398, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3402 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3403 = icmp ne ptr %3399, @nil_typ
  %3404 = icmp ne ptr %3399, null
  %3405 = and i1 %3403, %3404
  %3406 = freeze i1 %3405
  %3407 = select i1 %3406, ptr %3399, ptr @nil_typ
  br label %3408

3408:                                             ; preds = %3397, %3303
  %3409 = phi { ptr, i160 } [ %3309, %3303 ], [ %3401, %3397 ]
  %3410 = phi ptr [ %3310, %3303 ], [ %3407, %3397 ]
  %3411 = icmp ne ptr %3410, @nil_typ
  %3412 = icmp ne ptr %3410, null
  %3413 = and i1 %3411, %3412
  br i1 %3413, label %3414, label %3420

3414:                                             ; preds = %3408
  %3415 = extractvalue { ptr, i160 } %3409, 1
  %3416 = trunc i160 %3415 to i64
  %3417 = shl i64 %3416, 32
  %3418 = ashr exact i64 %3417, 32
  %3419 = add i64 %3418, %3239
  br label %3431

3420:                                             ; preds = %3408
  %3421 = call noalias nonnull align 64 dereferenceable(52) ptr @bump_malloc_inner(i64 noundef 52, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %3422 = load <51 x i8>, ptr @jwicz_Error_Nil_returned_during_random_hit_test_for_key_, align 64
  store <51 x i8> %3422, ptr %3421, align 64
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3423 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3424 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3425 = call noalias nonnull align 4 dereferenceable(52) ptr @bump_malloc_inner(i64 noundef 52, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(52) %3425, ptr noalias nocapture nofree noundef nonnull readonly align 64 dereferenceable(52) %3421, i64 noundef 51, i1 noundef false)
  %3426 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3427 = getelementptr inbounds i8, ptr %3425, i64 51
  store i8 0, ptr %3427, align 1
  %3428 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(52) %3425) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3429 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  %3430 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3243) #25
  br label %3431

3431:                                             ; preds = %3420, %3414
  %3432 = phi i1 [ %3240, %3414 ], [ false, %3420 ]
  %3433 = phi i64 [ %3419, %3414 ], [ %3239, %3420 ]
  %3434 = add nuw nsw i64 %3238, 1
  %3435 = icmp eq i64 %3434, %3236
  br i1 %3435, label %3436, label %3237

3436:                                             ; preds = %3431, %3230
  %3437 = phi i1 [ true, %3230 ], [ %3432, %3431 ]
  %3438 = phi i64 [ 0, %3230 ], [ %3433, %3431 ]
  %3439 = call i64 @clock()
  %3440 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 72, i8 105, i8 116>, ptr %3440, align 16
  %3441 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3442 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3443 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3444 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3444, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3440, i64 noundef 14, i1 noundef false)
  %3445 = sub i64 %3439, %3232
  %3446 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3447 = getelementptr inbounds i8, ptr %3444, i64 14
  store i8 0, ptr %3447, align 2
  %3448 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3444) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3449 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %3449, align 16
  %3450 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3450, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3449, i64 noundef 14, i1 noundef false)
  %3451 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3450) #28
  %3452 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3231) #25
  %3453 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %3453, align 16
  %3454 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3454, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3453, i64 noundef 14, i1 noundef false)
  %3455 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3454) #28
  %3456 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3445) #25
  %3457 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %3457, align 4
  %3458 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3458, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3457, i64 noundef 3, i1 noundef false)
  %3459 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3458) #28
  br i1 %3233, label %3460, label %3477

3460:                                             ; preds = %3436
  %3461 = icmp sgt i64 %3445, 0
  br i1 %3461, label %3462, label %3466

3462:                                             ; preds = %3460
  %3463 = mul i64 %3445, 1000000
  %3464 = zext nneg i32 %3231 to i64
  %3465 = sdiv i64 %3463, %3464
  br label %3466

3466:                                             ; preds = %3462, %3460
  %3467 = phi i64 [ %3465, %3462 ], [ 0, %3460 ]
  %3468 = call noalias nonnull align 16 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %3468, align 16
  %3469 = call noalias nonnull align 4 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(16) %3469, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(16) %3468, i64 noundef 15, i1 noundef false)
  %3470 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %3469) #28
  %3471 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3467) #25
  %3472 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %3472, align 4
  %3473 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  %3474 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3474, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3472, i64 noundef 3, i1 noundef false)
  %3475 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3476 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3474) #28
  br label %3477

3477:                                             ; preds = %3466, %3436
  %3478 = icmp eq i64 %3438, %3210
  %3479 = call noalias nonnull align 32 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %3479, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3480 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3481 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3482 = call noalias nonnull align 4 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(19) %3482, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(19) %3479, i64 noundef 18, i1 noundef false)
  %3483 = select i1 %3478, i1 %3437, i1 false
  %3484 = getelementptr inbounds i8, ptr %3482, i64 18
  store i8 0, ptr %3484, align 2
  %3485 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %3482) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3486 = select i1 %3483, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %3487 = select i1 %3483, ptr %8, ptr %12
  %3488 = select i1 %3483, ptr %9, ptr %13
  %3489 = select i1 %3483, ptr %10, ptr %14
  %3490 = select i1 %3483, ptr %11, ptr %15
  store ptr @_parameterization_Bufferi8, ptr %3487, align 8
  %3491 = select i1 %3483, ptr %8, ptr %12
  %3492 = getelementptr inbounds i8, ptr %3491, i64 8
  store ptr @_parameterization_i32, ptr %3492, align 8
  %3493 = select i1 %3483, ptr %8, ptr %12
  %3494 = getelementptr inbounds i8, ptr %3493, i64 16
  store ptr @_parameterization_i32, ptr %3494, align 8
  %3495 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %3487)
  store ptr @buffer_typ, ptr %3488, align 8
  %3496 = select i1 %3483, ptr %9, ptr %13
  %3497 = getelementptr inbounds i8, ptr %3496, i64 8
  store ptr @i32_typ, ptr %3497, align 8
  %3498 = select i1 %3483, ptr %9, ptr %13
  %3499 = getelementptr inbounds i8, ptr %3498, i64 16
  store ptr @i32_typ, ptr %3499, align 8
  %3500 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %3488) #43
  store ptr @_parameterization_String, ptr %3489, align 8
  %3501 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3489)
  %3502 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store ptr @String, ptr %3490, align 8
  %3503 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %3490) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3504 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3505 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3506 = call noalias nonnull align 4 dereferenceable(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <4 x i8> %3486, ptr %3506, align 4
  %3507 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3508 = getelementptr inbounds i8, ptr %3506, i64 4
  store i8 0, ptr %3508, align 4
  %3509 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %3506) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  ret void
}

define dso_local void @benchmark_get_random_miss(i32 %0) local_unnamed_addr #30 {
  %2 = alloca {}, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %16) #43
  %20 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %6) #43
  %21 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %20, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %6) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %6) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %20, ptr noalias nofree noundef nonnull readnone align 4 @towonlcxcg, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %22 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %20) #47
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %20) #43
  %24 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %5) #43
  %25 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %24, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %5) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %5) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %24, ptr noalias nofree noundef nonnull readnone align 4 @gmsltkzmbe, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %26 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %24) #47
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %24) #43
  %28 = getelementptr inbounds i8, ptr %16, i64 48
  store ptr %22, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %16, i64 56
  store ptr %26, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %16, i64 40
  store i32 8, ptr %30, align 8
  %31 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %32 = getelementptr inbounds i8, ptr %16, i64 24
  store ptr %31, ptr %32, align 8
  %33 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %34 = getelementptr inbounds i8, ptr %16, i64 32
  store ptr %33, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  %36 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr @_parameterization_i1, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %38, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %36) #43
  %40 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %4) #43
  %41 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %40, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %4) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %4) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %40, ptr noalias nofree noundef nonnull readnone align 4 @qglslaydpu, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %42 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %40) #47
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %40) #43
  %44 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3) #43
  %45 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %44, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %3) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %44, ptr noalias nofree noundef nonnull readnone align 4 @zmdnszcnkv, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %46 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %44) #47
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %44) #43
  %48 = getelementptr inbounds i8, ptr %36, i64 48
  store ptr %42, ptr %48, align 8
  %49 = getelementptr inbounds i8, ptr %36, i64 56
  store ptr %46, ptr %49, align 8
  %50 = getelementptr inbounds i8, ptr %36, i64 40
  store i32 8, ptr %50, align 8
  %51 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %52 = getelementptr inbounds i8, ptr %36, i64 24
  store ptr %51, ptr %52, align 8
  %53 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %54 = getelementptr inbounds i8, ptr %36, i64 32
  store ptr %53, ptr %54, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %56 = mul i32 %0, 10
  %57 = icmp sgt i32 %0, 0
  %58 = icmp sgt i32 %56, 0
  %59 = and i1 %57, %58
  br i1 %59, label %60, label %3197

60:                                               ; preds = %1
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %63 = getelementptr inbounds i8, ptr %16, i64 44
  %64 = getelementptr inbounds i8, ptr %36, i64 44
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  br label %66

66:                                               ; preds = %3191, %60
  %67 = phi i32 [ 789, %60 ], [ %72, %3191 ]
  %68 = phi i32 [ 0, %60 ], [ %3193, %3191 ]
  %69 = phi i32 [ 0, %60 ], [ %3192, %3191 ]
  %70 = mul i32 %67, 1103515245
  %71 = add i32 %70, 12345
  %72 = and i32 %71, 2147483647
  %73 = zext nneg i32 %72 to i160
  %74 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %73, 1
  %75 = load ptr, ptr %48, align 8
  %76 = call i32 %75({ ptr, i160 } %74) #28
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %78 = load i32, ptr %50, align 8
  %79 = add i32 %78, -1
  %80 = and i32 %79, %76
  %81 = load ptr, ptr %52, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %82 = sext i32 %80 to i64
  %83 = shl nsw i64 %82, 5
  %84 = getelementptr i8, ptr %81, i64 %83
  %85 = load ptr, ptr %84, align 8
  %86 = icmp ne ptr %85, @nil_typ
  %87 = icmp ne ptr %85, null
  %88 = and i1 %86, %87
  br i1 %88, label %89, label %131

89:                                               ; preds = %66
  %90 = getelementptr i8, ptr %84, i64 8
  %91 = load i64, ptr %90, align 4
  %92 = getelementptr i8, ptr %84, i64 16
  %93 = load i64, ptr %92, align 4
  %94 = inttoptr i64 %91 to ptr
  %95 = inttoptr i64 %93 to ptr
  %96 = getelementptr i8, ptr %85, i64 8
  %97 = getelementptr i8, ptr %85, i64 16
  %98 = getelementptr i8, ptr %85, i64 40
  %99 = load i64, ptr %96, align 4, !noalias !242
  %100 = load i64, ptr %97, align 4, !noalias !242
  %101 = load ptr, ptr %98, align 8, !noalias !242
  %102 = mul i64 %99, 4015701072841558310
  %103 = lshr i64 %102, 32
  %104 = xor i64 %103, %102
  %105 = and i64 %104, %100
  %106 = getelementptr i32, ptr %101, i64 %105
  %107 = load i32, ptr %106, align 4, !noalias !242
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %109 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %94, 1
  %110 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %95, 2
  %111 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %107, 3
  %112 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %113 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %85) #43
  %114 = sext i32 %107 to i64
  %115 = getelementptr ptr, ptr %85, i64 %114
  %116 = getelementptr i8, ptr %115, i64 64
  %117 = load ptr, ptr %116, align 8
  %118 = call align 4 ptr %117({ ptr, ptr, ptr, i32 } %111, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %119 = call i32 %118({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr nonnull align 8 %2) #28
  %120 = icmp eq i32 %119, %76
  br i1 %120, label %121, label %131

121:                                              ; preds = %89
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %123 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %85)
  %124 = getelementptr i8, ptr %115, i64 48
  %125 = load ptr, ptr %124, align 8
  %126 = call align 4 ptr %125({ ptr, ptr, ptr, i32 } %111, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %127 = call { ptr, i160 } %126({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr nonnull align 8 %2) #28
  %128 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %129 = load ptr, ptr %49, align 8
  %130 = call i1 %129({ ptr, i160 } %127, { ptr, i160 } %74) #28
  br i1 %130, label %132, label %131

131:                                              ; preds = %121, %89, %66
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %144

132:                                              ; preds = %121
  %133 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %134 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %85)
  %135 = getelementptr i8, ptr %115, i64 56
  %136 = load ptr, ptr %135, align 8
  %137 = call align 4 ptr %136({ ptr, ptr, ptr, i32 } %111, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %138 = call { ptr, i160 } %137({ ptr, ptr, ptr, i32 } %111, { ptr, ptr, ptr, i32 } %111, ptr nonnull align 8 %2) #28
  %139 = extractvalue { ptr, i160 } %138, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %140 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %141 = icmp ne ptr %139, @nil_typ
  %142 = icmp ne ptr %139, null
  %143 = and i1 %141, %142
  br i1 %143, label %233, label %144

144:                                              ; preds = %132, %131
  %145 = add i32 %76, 2127912214
  %146 = shl i32 %76, 12
  %147 = add i32 %145, %146
  %148 = ashr i32 %147, 19
  %149 = xor i32 %147, %148
  %150 = xor i32 %149, -949894596
  %151 = add i32 %150, 374761393
  %152 = shl i32 %150, 5
  %153 = add i32 %151, %152
  %154 = add i32 %153, -744332180
  %155 = shl i32 %153, 9
  %156 = xor i32 %154, %155
  %157 = add i32 %156, -42973499
  %158 = shl i32 %156, 3
  %159 = add i32 %157, %158
  %160 = ashr i32 %159, 16
  %161 = xor i32 %159, %160
  %162 = xor i32 %161, -1252372727
  %163 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %164 = load i32, ptr %50, align 8
  %165 = add i32 %164, -1
  %166 = and i32 %165, %162
  %167 = load ptr, ptr %54, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %168 = sext i32 %166 to i64
  %169 = shl nsw i64 %168, 5
  %170 = getelementptr i8, ptr %167, i64 %169
  %171 = load ptr, ptr %170, align 8
  %172 = icmp ne ptr %171, @nil_typ
  %173 = icmp ne ptr %171, null
  %174 = and i1 %172, %173
  br i1 %174, label %175, label %225

175:                                              ; preds = %144
  %176 = getelementptr i8, ptr %170, i64 8
  %177 = load i64, ptr %176, align 4
  %178 = getelementptr i8, ptr %170, i64 16
  %179 = load i64, ptr %178, align 4
  %180 = inttoptr i64 %177 to ptr
  %181 = inttoptr i64 %179 to ptr
  %182 = getelementptr i8, ptr %171, i64 8
  %183 = getelementptr i8, ptr %171, i64 16
  %184 = getelementptr i8, ptr %171, i64 40
  %185 = load i64, ptr %182, align 4, !noalias !245
  %186 = load i64, ptr %183, align 4, !noalias !245
  %187 = load ptr, ptr %184, align 8, !noalias !245
  %188 = mul i64 %185, 4015701072841558310
  %189 = lshr i64 %188, 32
  %190 = xor i64 %189, %188
  %191 = and i64 %190, %186
  %192 = getelementptr i32, ptr %187, i64 %191
  %193 = load i32, ptr %192, align 4, !noalias !245
  %194 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %195 = insertvalue { ptr, ptr, ptr, i32 } %194, ptr %180, 1
  %196 = insertvalue { ptr, ptr, ptr, i32 } %195, ptr %181, 2
  %197 = insertvalue { ptr, ptr, ptr, i32 } %196, i32 %193, 3
  %198 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %199 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %171) #43
  %200 = sext i32 %193 to i64
  %201 = getelementptr ptr, ptr %171, i64 %200
  %202 = getelementptr i8, ptr %201, i64 64
  %203 = load ptr, ptr %202, align 8
  %204 = call align 4 ptr %203({ ptr, ptr, ptr, i32 } %197, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %205 = call i32 %204({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull align 8 %2) #28
  %206 = icmp eq i32 %205, %76
  br i1 %206, label %207, label %225

207:                                              ; preds = %175
  %208 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %209 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %171)
  %210 = getelementptr i8, ptr %201, i64 48
  %211 = load ptr, ptr %210, align 8
  %212 = call align 4 ptr %211({ ptr, ptr, ptr, i32 } %197, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %213 = call { ptr, i160 } %212({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull align 8 %2) #28
  %214 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %215 = load ptr, ptr %49, align 8
  %216 = call i1 %215({ ptr, i160 } %213, { ptr, i160 } %74) #28
  br i1 %216, label %217, label %225

217:                                              ; preds = %207
  %218 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %219 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %171)
  %220 = getelementptr i8, ptr %201, i64 56
  %221 = load ptr, ptr %220, align 8
  %222 = call align 4 ptr %221({ ptr, ptr, ptr, i32 } %197, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %223 = call { ptr, i160 } %222({ ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %197, ptr nonnull align 8 %2) #28
  %224 = extractvalue { ptr, i160 } %223, 0
  br label %225

225:                                              ; preds = %217, %207, %175, %144
  %226 = phi ptr [ %224, %217 ], [ @nil_typ, %207 ], [ @nil_typ, %144 ], [ @nil_typ, %175 ]
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %227 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %228 = icmp ne ptr %226, @nil_typ
  %229 = icmp ne ptr %226, null
  %230 = and i1 %228, %229
  %231 = freeze i1 %230
  %232 = select i1 %231, ptr %226, ptr @nil_typ
  br label %233

233:                                              ; preds = %225, %132
  %234 = phi ptr [ %139, %132 ], [ %232, %225 ]
  %235 = icmp eq ptr %234, @nil_typ
  %236 = icmp eq ptr %234, null
  %237 = or i1 %235, %236
  br i1 %237, label %238, label %3191

238:                                              ; preds = %233
  %239 = add nuw i32 %72, 1
  %240 = zext i32 %239 to i160
  %241 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %240, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %242 = load ptr, ptr %28, align 8
  %243 = call i32 %242({ ptr, i160 } %74) #28
  %244 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %245 = load i32, ptr %30, align 8
  %246 = add i32 %245, -1
  %247 = and i32 %246, %243
  %248 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %249 = sext i32 %247 to i64
  %250 = shl nsw i64 %249, 5
  %251 = getelementptr i8, ptr %248, i64 %250
  %252 = load ptr, ptr %251, align 8
  %253 = getelementptr i8, ptr %251, i64 8
  %254 = icmp ne ptr %252, @nil_typ
  %255 = icmp ne ptr %252, null
  %256 = and i1 %254, %255
  br i1 %256, label %257, label %380

257:                                              ; preds = %238
  %258 = load i64, ptr %253, align 4
  %259 = getelementptr i8, ptr %251, i64 16
  %260 = load i64, ptr %259, align 4
  %261 = inttoptr i64 %258 to ptr
  %262 = inttoptr i64 %260 to ptr
  %263 = getelementptr i8, ptr %252, i64 8
  %264 = getelementptr i8, ptr %252, i64 16
  %265 = getelementptr i8, ptr %252, i64 40
  %266 = load i64, ptr %263, align 4, !noalias !248
  %267 = load i64, ptr %264, align 4, !noalias !248
  %268 = load ptr, ptr %265, align 8, !noalias !248
  %269 = mul i64 %266, 4015701072841558310
  %270 = lshr i64 %269, 32
  %271 = xor i64 %270, %269
  %272 = and i64 %271, %267
  %273 = getelementptr i32, ptr %268, i64 %272
  %274 = load i32, ptr %273, align 4, !noalias !248
  %275 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %252, 0
  %276 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr %261, 1
  %277 = insertvalue { ptr, ptr, ptr, i32 } %276, ptr %262, 2
  %278 = insertvalue { ptr, ptr, ptr, i32 } %277, i32 %274, 3
  %279 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %280 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %252) #43
  %281 = sext i32 %274 to i64
  %282 = getelementptr ptr, ptr %252, i64 %281
  %283 = getelementptr i8, ptr %282, i64 64
  %284 = load ptr, ptr %283, align 8
  %285 = call align 4 ptr %284({ ptr, ptr, ptr, i32 } %278, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %286 = call i32 %285({ ptr, ptr, ptr, i32 } %278, { ptr, ptr, ptr, i32 } %278, ptr nonnull align 8 %2) #28
  %287 = icmp eq i32 %286, %243
  br i1 %287, label %288, label %380

288:                                              ; preds = %257
  %289 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %290 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %252)
  %291 = getelementptr i8, ptr %282, i64 48
  %292 = load ptr, ptr %291, align 8
  %293 = call align 4 ptr %292({ ptr, ptr, ptr, i32 } %278, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %294 = call { ptr, i160 } %293({ ptr, ptr, ptr, i32 } %278, { ptr, ptr, ptr, i32 } %278, ptr nonnull align 8 %2) #28
  %295 = load ptr, ptr %29, align 8
  %296 = call i1 %295({ ptr, i160 } %294, { ptr, i160 } %74) #28
  br i1 %296, label %297, label %380

297:                                              ; preds = %288
  %298 = load ptr, ptr %16, align 8
  %299 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %300 = load ptr, ptr %17, align 8
  %301 = load ptr, ptr %298, align 8, !alias.scope !251
  %302 = getelementptr i8, ptr %301, i64 72
  %303 = load ptr, ptr %302, align 8, !alias.scope !251
  %304 = call { i64, i64 } %303(ptr nocapture nofree nonnull readonly align 8 %298) #2, !alias.scope !251
  %305 = extractvalue { i64, i64 } %304, 0
  %306 = extractvalue { i64, i64 } %304, 1
  %307 = urem i64 20, %306
  %308 = icmp eq i64 %307, 0
  %309 = sub i64 %306, %307
  %310 = select i1 %308, i64 0, i64 %309
  %311 = add i64 %305, 20
  %312 = add i64 %311, %310
  %313 = load ptr, ptr %300, align 8, !alias.scope !251
  %314 = getelementptr i8, ptr %313, i64 72
  %315 = load ptr, ptr %314, align 8, !alias.scope !251
  %316 = call { i64, i64 } %315(ptr nocapture nofree nonnull readonly align 8 %300) #2, !alias.scope !251
  %317 = extractvalue { i64, i64 } %316, 0
  %318 = extractvalue { i64, i64 } %316, 1
  %319 = call i64 @llvm.umax.i64(i64 %306, i64 %318) #44
  %320 = call i64 @llvm.umax.i64(i64 %319, i64 noundef 8) #44, !range !18
  %321 = urem i64 %312, %318
  %322 = icmp eq i64 %321, 0
  %323 = sub i64 %318, %321
  %324 = select i1 %322, i64 0, i64 %323
  %325 = add i64 %317, %312
  %326 = add i64 %325, %324
  %327 = urem i64 %326, %320
  %328 = icmp eq i64 %327, 0
  %329 = sub i64 %320, %327
  %330 = select i1 %328, i64 0, i64 %329
  %331 = add i64 %330, %326
  %332 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %331, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %298, ptr %332, align 8
  %333 = getelementptr inbounds i8, ptr %332, i64 8
  store ptr %300, ptr %333, align 8
  %334 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %332)
  %335 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %336 = load ptr, ptr %298, align 8
  %337 = getelementptr i8, ptr %336, i64 72
  %338 = load ptr, ptr %337, align 8
  %339 = call { i64, i64 } %338(ptr nocapture nofree nonnull readonly align 8 %298) #2
  %340 = extractvalue { i64, i64 } %339, 1
  %341 = urem i64 20, %340
  %342 = icmp eq i64 %341, 0
  %343 = sub i64 %340, %341
  %344 = add i64 %343, 20
  %345 = select i1 %342, i64 20, i64 %344
  %346 = getelementptr i8, ptr %332, i64 %345
  %347 = getelementptr i8, ptr %336, i64 64
  %348 = load ptr, ptr %347, align 8
  call void %348({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %298, ptr nocapture nofree writeonly %346) #8
  %349 = load ptr, ptr %332, align 8
  %350 = load ptr, ptr %349, align 8
  %351 = getelementptr i8, ptr %350, i64 72
  %352 = load ptr, ptr %351, align 8
  %353 = call { i64, i64 } %352(ptr nocapture nofree nonnull readonly align 8 %349) #2
  %354 = extractvalue { i64, i64 } %353, 0
  %355 = extractvalue { i64, i64 } %353, 1
  %356 = urem i64 20, %355
  %357 = icmp eq i64 %356, 0
  %358 = sub i64 %355, %356
  %359 = select i1 %357, i64 0, i64 %358
  %360 = add i64 %354, 20
  %361 = add i64 %360, %359
  %362 = load ptr, ptr %333, align 8
  %363 = load ptr, ptr %362, align 8
  %364 = getelementptr i8, ptr %363, i64 72
  %365 = load ptr, ptr %364, align 8
  %366 = call { i64, i64 } %365(ptr nocapture nofree nonnull readonly align 8 %362) #2
  %367 = extractvalue { i64, i64 } %366, 1
  %368 = urem i64 %361, %367
  %369 = icmp eq i64 %368, 0
  %370 = sub i64 %367, %368
  %371 = select i1 %369, i64 0, i64 %370
  %372 = getelementptr i8, ptr %332, i64 %361
  %373 = getelementptr i8, ptr %372, i64 %371
  %374 = getelementptr i8, ptr %363, i64 64
  %375 = load ptr, ptr %374, align 8
  call void %375({ ptr, i160 } %241, ptr nocapture nofree nonnull readonly align 8 %362, ptr nocapture nofree writeonly %373) #8
  %376 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %377 = getelementptr inbounds i8, ptr %332, i64 16
  store i32 %243, ptr %377, align 8
  store ptr @Entry, ptr %251, align 8
  %378 = ptrtoint ptr %332 to i64
  store i64 %378, ptr %253, align 4
  %379 = getelementptr i8, ptr %251, i64 24
  store i32 10, ptr %379, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1715

380:                                              ; preds = %288, %257, %238
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %381 = add i32 %243, 2127912214
  %382 = shl i32 %243, 12
  %383 = add i32 %381, %382
  %384 = ashr i32 %383, 19
  %385 = xor i32 %383, %384
  %386 = xor i32 %385, -949894596
  %387 = add i32 %386, 374761393
  %388 = shl i32 %386, 5
  %389 = add i32 %387, %388
  %390 = add i32 %389, -744332180
  %391 = shl i32 %389, 9
  %392 = xor i32 %390, %391
  %393 = add i32 %392, -42973499
  %394 = shl i32 %392, 3
  %395 = add i32 %393, %394
  %396 = ashr i32 %395, 16
  %397 = xor i32 %395, %396
  %398 = xor i32 %397, -1252372727
  %399 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %400 = load i32, ptr %30, align 8
  %401 = add i32 %400, -1
  %402 = and i32 %401, %398
  %403 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %404 = sext i32 %402 to i64
  %405 = shl nsw i64 %404, 5
  %406 = getelementptr i8, ptr %403, i64 %405
  %407 = load ptr, ptr %406, align 8
  %408 = getelementptr i8, ptr %406, i64 8
  %409 = icmp ne ptr %407, @nil_typ
  %410 = icmp ne ptr %407, null
  %411 = and i1 %409, %410
  br i1 %411, label %412, label %536

412:                                              ; preds = %380
  %413 = load i64, ptr %408, align 4
  %414 = getelementptr i8, ptr %406, i64 16
  %415 = load i64, ptr %414, align 4
  %416 = inttoptr i64 %413 to ptr
  %417 = inttoptr i64 %415 to ptr
  %418 = getelementptr i8, ptr %407, i64 8
  %419 = getelementptr i8, ptr %407, i64 16
  %420 = getelementptr i8, ptr %407, i64 40
  %421 = load i64, ptr %418, align 4, !noalias !254
  %422 = load i64, ptr %419, align 4, !noalias !254
  %423 = load ptr, ptr %420, align 8, !noalias !254
  %424 = mul i64 %421, 4015701072841558310
  %425 = lshr i64 %424, 32
  %426 = xor i64 %425, %424
  %427 = and i64 %426, %422
  %428 = getelementptr i32, ptr %423, i64 %427
  %429 = load i32, ptr %428, align 4, !noalias !254
  %430 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %407, 0
  %431 = insertvalue { ptr, ptr, ptr, i32 } %430, ptr %416, 1
  %432 = insertvalue { ptr, ptr, ptr, i32 } %431, ptr %417, 2
  %433 = insertvalue { ptr, ptr, ptr, i32 } %432, i32 %429, 3
  %434 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %435 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %407) #43
  %436 = sext i32 %429 to i64
  %437 = getelementptr ptr, ptr %407, i64 %436
  %438 = getelementptr i8, ptr %437, i64 64
  %439 = load ptr, ptr %438, align 8
  %440 = call align 4 ptr %439({ ptr, ptr, ptr, i32 } %433, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %441 = call i32 %440({ ptr, ptr, ptr, i32 } %433, { ptr, ptr, ptr, i32 } %433, ptr nonnull align 8 %2) #28
  %442 = icmp eq i32 %441, %243
  br i1 %442, label %443, label %536

443:                                              ; preds = %412
  %444 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %445 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %407)
  %446 = getelementptr i8, ptr %437, i64 48
  %447 = load ptr, ptr %446, align 8
  %448 = call align 4 ptr %447({ ptr, ptr, ptr, i32 } %433, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %449 = call { ptr, i160 } %448({ ptr, ptr, ptr, i32 } %433, { ptr, ptr, ptr, i32 } %433, ptr nonnull align 8 %2) #28
  %450 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %451 = load ptr, ptr %29, align 8
  %452 = call i1 %451({ ptr, i160 } %449, { ptr, i160 } %74) #28
  br i1 %452, label %453, label %536

453:                                              ; preds = %443
  %454 = load ptr, ptr %16, align 8
  %455 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %456 = load ptr, ptr %17, align 8
  %457 = load ptr, ptr %454, align 8, !alias.scope !257
  %458 = getelementptr i8, ptr %457, i64 72
  %459 = load ptr, ptr %458, align 8, !alias.scope !257
  %460 = call { i64, i64 } %459(ptr nocapture nofree nonnull readonly align 8 %454) #2, !alias.scope !257
  %461 = extractvalue { i64, i64 } %460, 0
  %462 = extractvalue { i64, i64 } %460, 1
  %463 = urem i64 20, %462
  %464 = icmp eq i64 %463, 0
  %465 = sub i64 %462, %463
  %466 = select i1 %464, i64 0, i64 %465
  %467 = add i64 %461, 20
  %468 = add i64 %467, %466
  %469 = load ptr, ptr %456, align 8, !alias.scope !257
  %470 = getelementptr i8, ptr %469, i64 72
  %471 = load ptr, ptr %470, align 8, !alias.scope !257
  %472 = call { i64, i64 } %471(ptr nocapture nofree nonnull readonly align 8 %456) #2, !alias.scope !257
  %473 = extractvalue { i64, i64 } %472, 0
  %474 = extractvalue { i64, i64 } %472, 1
  %475 = call i64 @llvm.umax.i64(i64 %462, i64 %474) #44
  %476 = call i64 @llvm.umax.i64(i64 %475, i64 noundef 8) #44, !range !18
  %477 = urem i64 %468, %474
  %478 = icmp eq i64 %477, 0
  %479 = sub i64 %474, %477
  %480 = select i1 %478, i64 0, i64 %479
  %481 = add i64 %473, %468
  %482 = add i64 %481, %480
  %483 = urem i64 %482, %476
  %484 = icmp eq i64 %483, 0
  %485 = sub i64 %476, %483
  %486 = select i1 %484, i64 0, i64 %485
  %487 = add i64 %486, %482
  %488 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %487, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %454, ptr %488, align 8
  %489 = getelementptr inbounds i8, ptr %488, i64 8
  store ptr %456, ptr %489, align 8
  %490 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %488)
  %491 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %492 = load ptr, ptr %454, align 8
  %493 = getelementptr i8, ptr %492, i64 72
  %494 = load ptr, ptr %493, align 8
  %495 = call { i64, i64 } %494(ptr nocapture nofree nonnull readonly align 8 %454) #2
  %496 = extractvalue { i64, i64 } %495, 1
  %497 = urem i64 20, %496
  %498 = icmp eq i64 %497, 0
  %499 = sub i64 %496, %497
  %500 = add i64 %499, 20
  %501 = select i1 %498, i64 20, i64 %500
  %502 = getelementptr i8, ptr %488, i64 %501
  %503 = getelementptr i8, ptr %492, i64 64
  %504 = load ptr, ptr %503, align 8
  call void %504({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %454, ptr nocapture nofree writeonly %502) #8
  %505 = load ptr, ptr %488, align 8
  %506 = load ptr, ptr %505, align 8
  %507 = getelementptr i8, ptr %506, i64 72
  %508 = load ptr, ptr %507, align 8
  %509 = call { i64, i64 } %508(ptr nocapture nofree nonnull readonly align 8 %505) #2
  %510 = extractvalue { i64, i64 } %509, 0
  %511 = extractvalue { i64, i64 } %509, 1
  %512 = urem i64 20, %511
  %513 = icmp eq i64 %512, 0
  %514 = sub i64 %511, %512
  %515 = select i1 %513, i64 0, i64 %514
  %516 = add i64 %510, 20
  %517 = add i64 %516, %515
  %518 = load ptr, ptr %489, align 8
  %519 = load ptr, ptr %518, align 8
  %520 = getelementptr i8, ptr %519, i64 72
  %521 = load ptr, ptr %520, align 8
  %522 = call { i64, i64 } %521(ptr nocapture nofree nonnull readonly align 8 %518) #2
  %523 = extractvalue { i64, i64 } %522, 1
  %524 = urem i64 %517, %523
  %525 = icmp eq i64 %524, 0
  %526 = sub i64 %523, %524
  %527 = select i1 %525, i64 0, i64 %526
  %528 = getelementptr i8, ptr %488, i64 %517
  %529 = getelementptr i8, ptr %528, i64 %527
  %530 = getelementptr i8, ptr %519, i64 64
  %531 = load ptr, ptr %530, align 8
  call void %531({ ptr, i160 } %241, ptr nocapture nofree nonnull readonly align 8 %518, ptr nocapture nofree writeonly %529) #8
  %532 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %533 = getelementptr inbounds i8, ptr %488, i64 16
  store i32 %243, ptr %533, align 8
  store ptr @Entry, ptr %406, align 8
  %534 = ptrtoint ptr %488 to i64
  store i64 %534, ptr %408, align 4
  %535 = getelementptr i8, ptr %406, i64 24
  store i32 10, ptr %535, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1715

536:                                              ; preds = %443, %412, %380
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %537 = load i32, ptr %63, align 4
  %538 = load i32, ptr %30, align 8
  %539 = icmp slt i32 %537, %538
  br i1 %539, label %826, label %540

540:                                              ; preds = %536
  %541 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %542 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %543 = load ptr, ptr %32, align 8
  %544 = load ptr, ptr %34, align 8
  %545 = shl i32 %538, 1
  %546 = call i32 @llvm.smax.i32(i32 %545, i32 noundef 16) #43
  store i32 %546, ptr %30, align 8
  %547 = zext nneg i32 %546 to i64
  %548 = shl nuw nsw i64 %547, 5
  %549 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %548, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %549, ptr %32, align 8
  %550 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %548, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %550, ptr %34, align 8
  store i32 0, ptr %63, align 4
  %551 = icmp sgt i32 %538, 0
  br i1 %551, label %552, label %826

552:                                              ; preds = %540
  %553 = zext nneg i32 %538 to i64
  br label %554

554:                                              ; preds = %687, %552
  %555 = phi i64 [ 0, %552 ], [ %688, %687 ]
  %556 = shl nuw nsw i64 %555, 5
  %557 = getelementptr i8, ptr %543, i64 %556
  %558 = load ptr, ptr %557, align 8
  %559 = icmp ne ptr %558, @nil_typ
  %560 = icmp ne ptr %558, null
  %561 = and i1 %559, %560
  br i1 %561, label %562, label %687

562:                                              ; preds = %554
  %563 = getelementptr i8, ptr %557, i64 8
  %564 = load i64, ptr %563, align 4
  %565 = getelementptr i8, ptr %557, i64 16
  %566 = load i64, ptr %565, align 4
  %567 = getelementptr i8, ptr %558, i64 8
  %568 = getelementptr i8, ptr %558, i64 16
  %569 = getelementptr i8, ptr %558, i64 40
  %570 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %571 = load i64, ptr %567, align 4, !noalias !25
  %572 = load i64, ptr %568, align 4, !noalias !25
  %573 = load ptr, ptr %569, align 8, !noalias !25
  %574 = mul i64 %571, 4015701072841558310
  %575 = lshr i64 %574, 32
  %576 = xor i64 %575, %574
  %577 = and i64 %576, %572
  %578 = getelementptr i32, ptr %573, i64 %577
  %579 = load i32, ptr %578, align 4, !noalias !260
  %580 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %581 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %582 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %583

583:                                              ; preds = %662, %562
  %584 = phi i64 [ %566, %562 ], [ %664, %662 ]
  %585 = phi i64 [ %564, %562 ], [ %663, %662 ]
  %586 = phi i32 [ 0, %562 ], [ %599, %662 ]
  %587 = phi i1 [ true, %562 ], [ %678, %662 ]
  %588 = phi ptr [ %558, %562 ], [ %665, %662 ]
  %589 = phi i32 [ %579, %562 ], [ %677, %662 ]
  %590 = inttoptr i64 %584 to ptr
  %591 = inttoptr i64 %585 to ptr
  %592 = sext i32 %589 to i64
  %593 = getelementptr ptr, ptr %588, i64 %592
  %594 = getelementptr i8, ptr %593, i64 64
  %595 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %588, 0
  %596 = insertvalue { ptr, ptr, ptr, i32 } %595, ptr %591, 1
  %597 = insertvalue { ptr, ptr, ptr, i32 } %596, ptr %590, 2
  %598 = insertvalue { ptr, ptr, ptr, i32 } %597, i32 %589, 3
  %599 = add nuw nsw i32 %586, 1
  %600 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %588)
  %601 = load ptr, ptr %594, align 8
  %602 = call align 4 ptr %601({ ptr, ptr, ptr, i32 } %598, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %603 = call i32 %602({ ptr, ptr, ptr, i32 } %598, { ptr, ptr, ptr, i32 } %598, ptr nonnull align 8 %2) #28
  br i1 %587, label %604, label %624

604:                                              ; preds = %583
  %605 = load i32, ptr %30, align 8
  %606 = add i32 %605, -1
  %607 = and i32 %606, %603
  %608 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %609 = load ptr, ptr %32, align 8
  %610 = sext i32 %607 to i64
  %611 = shl nsw i64 %610, 5
  %612 = getelementptr i8, ptr %609, i64 %611
  %613 = load ptr, ptr %612, align 8
  %614 = getelementptr i8, ptr %612, i64 8
  %615 = load i160, ptr %614, align 4
  store ptr %588, ptr %612, align 8
  store i64 %585, ptr %614, align 4
  %616 = getelementptr i8, ptr %612, i64 16
  store i64 %584, ptr %616, align 4
  %617 = getelementptr i8, ptr %612, i64 24
  store i32 %589, ptr %617, align 4
  %618 = icmp ne ptr %613, @nil_typ
  %619 = icmp ne ptr %613, null
  %620 = and i1 %618, %619
  %621 = trunc i160 %615 to i64
  %622 = lshr i160 %615, 64
  %623 = trunc i160 %622 to i64
  br i1 %620, label %662, label %682

624:                                              ; preds = %583
  %625 = add i32 %603, 2127912214
  %626 = shl i32 %603, 12
  %627 = add i32 %625, %626
  %628 = ashr i32 %627, 19
  %629 = xor i32 %627, %628
  %630 = xor i32 %629, -949894596
  %631 = add i32 %630, 374761393
  %632 = shl i32 %630, 5
  %633 = add i32 %631, %632
  %634 = add i32 %633, -744332180
  %635 = shl i32 %633, 9
  %636 = xor i32 %634, %635
  %637 = add i32 %636, -42973499
  %638 = shl i32 %636, 3
  %639 = add i32 %637, %638
  %640 = ashr i32 %639, 16
  %641 = xor i32 %639, %640
  %642 = xor i32 %641, -1252372727
  %643 = load i32, ptr %30, align 8
  %644 = add i32 %643, -1
  %645 = and i32 %644, %642
  %646 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %647 = load ptr, ptr %34, align 8
  %648 = sext i32 %645 to i64
  %649 = shl nsw i64 %648, 5
  %650 = getelementptr i8, ptr %647, i64 %649
  %651 = load ptr, ptr %650, align 8
  %652 = getelementptr i8, ptr %650, i64 8
  %653 = load i160, ptr %652, align 4
  store ptr %588, ptr %650, align 8
  store i64 %585, ptr %652, align 4
  %654 = getelementptr i8, ptr %650, i64 16
  store i64 %584, ptr %654, align 4
  %655 = getelementptr i8, ptr %650, i64 24
  store i32 %589, ptr %655, align 4
  %656 = icmp ne ptr %651, @nil_typ
  %657 = icmp ne ptr %651, null
  %658 = and i1 %656, %657
  %659 = trunc i160 %653 to i64
  %660 = lshr i160 %653, 64
  %661 = trunc i160 %660 to i64
  br i1 %658, label %662, label %682

662:                                              ; preds = %624, %604
  %663 = phi i64 [ %621, %604 ], [ %659, %624 ]
  %664 = phi i64 [ %623, %604 ], [ %661, %624 ]
  %665 = phi ptr [ %613, %604 ], [ %651, %624 ]
  %666 = getelementptr i8, ptr %665, i64 8
  %667 = getelementptr i8, ptr %665, i64 16
  %668 = getelementptr i8, ptr %665, i64 40
  %669 = load i64, ptr %666, align 4
  %670 = load i64, ptr %667, align 4
  %671 = load ptr, ptr %668, align 8
  %672 = mul i64 %669, 4015701072841558310
  %673 = lshr i64 %672, 32
  %674 = xor i64 %673, %672
  %675 = and i64 %674, %670
  %676 = getelementptr i32, ptr %671, i64 %675
  %677 = load i32, ptr %676, align 4
  %678 = xor i1 %587, true
  %679 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %680 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %681 = icmp eq i32 %599, 100
  br i1 %681, label %686, label %583

682:                                              ; preds = %624, %604
  %683 = load i32, ptr %63, align 4
  %684 = add i32 %683, 1
  %685 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %684, ptr %63, align 4
  br label %686

686:                                              ; preds = %682, %662
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %687

687:                                              ; preds = %686, %554
  %688 = add nuw nsw i64 %555, 1
  %689 = icmp eq i64 %688, %553
  br i1 %689, label %690, label %554

690:                                              ; preds = %823, %687
  %691 = phi i64 [ %824, %823 ], [ 0, %687 ]
  %692 = shl nuw nsw i64 %691, 5
  %693 = getelementptr i8, ptr %544, i64 %692
  %694 = load ptr, ptr %693, align 8
  %695 = icmp ne ptr %694, @nil_typ
  %696 = icmp ne ptr %694, null
  %697 = and i1 %695, %696
  br i1 %697, label %698, label %823

698:                                              ; preds = %690
  %699 = getelementptr i8, ptr %693, i64 8
  %700 = load i64, ptr %699, align 4
  %701 = getelementptr i8, ptr %693, i64 16
  %702 = load i64, ptr %701, align 4
  %703 = getelementptr i8, ptr %694, i64 8
  %704 = getelementptr i8, ptr %694, i64 16
  %705 = getelementptr i8, ptr %694, i64 40
  %706 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %707 = load i64, ptr %703, align 4, !noalias !25
  %708 = load i64, ptr %704, align 4, !noalias !25
  %709 = load ptr, ptr %705, align 8, !noalias !25
  %710 = mul i64 %707, 4015701072841558310
  %711 = lshr i64 %710, 32
  %712 = xor i64 %711, %710
  %713 = and i64 %712, %708
  %714 = getelementptr i32, ptr %709, i64 %713
  %715 = load i32, ptr %714, align 4, !noalias !263
  %716 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %717 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %718 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %719

719:                                              ; preds = %798, %698
  %720 = phi i64 [ %702, %698 ], [ %800, %798 ]
  %721 = phi i64 [ %700, %698 ], [ %799, %798 ]
  %722 = phi i32 [ 0, %698 ], [ %735, %798 ]
  %723 = phi i1 [ true, %698 ], [ %814, %798 ]
  %724 = phi ptr [ %694, %698 ], [ %801, %798 ]
  %725 = phi i32 [ %715, %698 ], [ %813, %798 ]
  %726 = inttoptr i64 %720 to ptr
  %727 = inttoptr i64 %721 to ptr
  %728 = sext i32 %725 to i64
  %729 = getelementptr ptr, ptr %724, i64 %728
  %730 = getelementptr i8, ptr %729, i64 64
  %731 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %724, 0
  %732 = insertvalue { ptr, ptr, ptr, i32 } %731, ptr %727, 1
  %733 = insertvalue { ptr, ptr, ptr, i32 } %732, ptr %726, 2
  %734 = insertvalue { ptr, ptr, ptr, i32 } %733, i32 %725, 3
  %735 = add nuw nsw i32 %722, 1
  %736 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %724)
  %737 = load ptr, ptr %730, align 8
  %738 = call align 4 ptr %737({ ptr, ptr, ptr, i32 } %734, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %739 = call i32 %738({ ptr, ptr, ptr, i32 } %734, { ptr, ptr, ptr, i32 } %734, ptr nonnull align 8 %2) #28
  br i1 %723, label %740, label %760

740:                                              ; preds = %719
  %741 = load i32, ptr %30, align 8
  %742 = add i32 %741, -1
  %743 = and i32 %742, %739
  %744 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %745 = load ptr, ptr %32, align 8
  %746 = sext i32 %743 to i64
  %747 = shl nsw i64 %746, 5
  %748 = getelementptr i8, ptr %745, i64 %747
  %749 = load ptr, ptr %748, align 8
  %750 = getelementptr i8, ptr %748, i64 8
  %751 = load i160, ptr %750, align 4
  store ptr %724, ptr %748, align 8
  store i64 %721, ptr %750, align 4
  %752 = getelementptr i8, ptr %748, i64 16
  store i64 %720, ptr %752, align 4
  %753 = getelementptr i8, ptr %748, i64 24
  store i32 %725, ptr %753, align 4
  %754 = icmp ne ptr %749, @nil_typ
  %755 = icmp ne ptr %749, null
  %756 = and i1 %754, %755
  %757 = trunc i160 %751 to i64
  %758 = lshr i160 %751, 64
  %759 = trunc i160 %758 to i64
  br i1 %756, label %798, label %818

760:                                              ; preds = %719
  %761 = add i32 %739, 2127912214
  %762 = shl i32 %739, 12
  %763 = add i32 %761, %762
  %764 = ashr i32 %763, 19
  %765 = xor i32 %763, %764
  %766 = xor i32 %765, -949894596
  %767 = add i32 %766, 374761393
  %768 = shl i32 %766, 5
  %769 = add i32 %767, %768
  %770 = add i32 %769, -744332180
  %771 = shl i32 %769, 9
  %772 = xor i32 %770, %771
  %773 = add i32 %772, -42973499
  %774 = shl i32 %772, 3
  %775 = add i32 %773, %774
  %776 = ashr i32 %775, 16
  %777 = xor i32 %775, %776
  %778 = xor i32 %777, -1252372727
  %779 = load i32, ptr %30, align 8
  %780 = add i32 %779, -1
  %781 = and i32 %780, %778
  %782 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %783 = load ptr, ptr %34, align 8
  %784 = sext i32 %781 to i64
  %785 = shl nsw i64 %784, 5
  %786 = getelementptr i8, ptr %783, i64 %785
  %787 = load ptr, ptr %786, align 8
  %788 = getelementptr i8, ptr %786, i64 8
  %789 = load i160, ptr %788, align 4
  store ptr %724, ptr %786, align 8
  store i64 %721, ptr %788, align 4
  %790 = getelementptr i8, ptr %786, i64 16
  store i64 %720, ptr %790, align 4
  %791 = getelementptr i8, ptr %786, i64 24
  store i32 %725, ptr %791, align 4
  %792 = icmp ne ptr %787, @nil_typ
  %793 = icmp ne ptr %787, null
  %794 = and i1 %792, %793
  %795 = trunc i160 %789 to i64
  %796 = lshr i160 %789, 64
  %797 = trunc i160 %796 to i64
  br i1 %794, label %798, label %818

798:                                              ; preds = %760, %740
  %799 = phi i64 [ %757, %740 ], [ %795, %760 ]
  %800 = phi i64 [ %759, %740 ], [ %797, %760 ]
  %801 = phi ptr [ %749, %740 ], [ %787, %760 ]
  %802 = getelementptr i8, ptr %801, i64 8
  %803 = getelementptr i8, ptr %801, i64 16
  %804 = getelementptr i8, ptr %801, i64 40
  %805 = load i64, ptr %802, align 4
  %806 = load i64, ptr %803, align 4
  %807 = load ptr, ptr %804, align 8
  %808 = mul i64 %805, 4015701072841558310
  %809 = lshr i64 %808, 32
  %810 = xor i64 %809, %808
  %811 = and i64 %810, %806
  %812 = getelementptr i32, ptr %807, i64 %811
  %813 = load i32, ptr %812, align 4
  %814 = xor i1 %723, true
  %815 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %816 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %817 = icmp eq i32 %735, 100
  br i1 %817, label %822, label %719

818:                                              ; preds = %760, %740
  %819 = load i32, ptr %63, align 4
  %820 = add i32 %819, 1
  %821 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %820, ptr %63, align 4
  br label %822

822:                                              ; preds = %818, %798
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %823

823:                                              ; preds = %822, %690
  %824 = add nuw nsw i64 %691, 1
  %825 = icmp eq i64 %824, %553
  br i1 %825, label %826, label %690

826:                                              ; preds = %823, %540, %536
  %827 = load ptr, ptr %16, align 8
  %828 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %829 = load ptr, ptr %17, align 8
  %830 = load ptr, ptr %827, align 8
  %831 = getelementptr i8, ptr %830, i64 72
  %832 = load ptr, ptr %831, align 8
  %833 = call { i64, i64 } %832(ptr nocapture nofree nonnull readonly align 8 %827) #2
  %834 = extractvalue { i64, i64 } %833, 0
  %835 = extractvalue { i64, i64 } %833, 1
  %836 = urem i64 20, %835
  %837 = icmp eq i64 %836, 0
  %838 = sub i64 %835, %836
  %839 = select i1 %837, i64 0, i64 %838
  %840 = add i64 %834, 20
  %841 = add i64 %840, %839
  %842 = load ptr, ptr %829, align 8
  %843 = getelementptr i8, ptr %842, i64 72
  %844 = load ptr, ptr %843, align 8
  %845 = call { i64, i64 } %844(ptr nocapture nofree nonnull readonly align 8 %829) #2
  %846 = extractvalue { i64, i64 } %845, 0
  %847 = extractvalue { i64, i64 } %845, 1
  %848 = call i64 @llvm.umax.i64(i64 %835, i64 %847) #44
  %849 = call i64 @llvm.umax.i64(i64 %848, i64 noundef 8) #44, !range !18
  %850 = urem i64 %841, %847
  %851 = icmp eq i64 %850, 0
  %852 = sub i64 %847, %850
  %853 = select i1 %851, i64 0, i64 %852
  %854 = add i64 %846, %841
  %855 = add i64 %854, %853
  %856 = urem i64 %855, %849
  %857 = icmp eq i64 %856, 0
  %858 = sub i64 %849, %856
  %859 = select i1 %857, i64 0, i64 %858
  %860 = add i64 %859, %855
  %861 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %860, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %827, ptr %861, align 8
  %862 = getelementptr inbounds i8, ptr %861, i64 8
  store ptr %829, ptr %862, align 8
  %863 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %861)
  %864 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %865 = load ptr, ptr %827, align 8
  %866 = getelementptr i8, ptr %865, i64 72
  %867 = load ptr, ptr %866, align 8
  %868 = call { i64, i64 } %867(ptr nocapture nofree nonnull readonly align 8 %827) #2
  %869 = extractvalue { i64, i64 } %868, 1
  %870 = urem i64 20, %869
  %871 = icmp eq i64 %870, 0
  %872 = sub i64 %869, %870
  %873 = add i64 %872, 20
  %874 = select i1 %871, i64 20, i64 %873
  %875 = getelementptr i8, ptr %861, i64 %874
  %876 = getelementptr i8, ptr %865, i64 64
  %877 = load ptr, ptr %876, align 8
  call void %877({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %827, ptr nocapture nofree writeonly %875) #8
  %878 = load ptr, ptr %861, align 8
  %879 = load ptr, ptr %878, align 8
  %880 = getelementptr i8, ptr %879, i64 72
  %881 = load ptr, ptr %880, align 8
  %882 = call { i64, i64 } %881(ptr nocapture nofree nonnull readonly align 8 %878) #2
  %883 = extractvalue { i64, i64 } %882, 0
  %884 = extractvalue { i64, i64 } %882, 1
  %885 = urem i64 20, %884
  %886 = icmp eq i64 %885, 0
  %887 = sub i64 %884, %885
  %888 = select i1 %886, i64 0, i64 %887
  %889 = add i64 %883, 20
  %890 = add i64 %889, %888
  %891 = load ptr, ptr %862, align 8
  %892 = load ptr, ptr %891, align 8
  %893 = getelementptr i8, ptr %892, i64 72
  %894 = load ptr, ptr %893, align 8
  %895 = call { i64, i64 } %894(ptr nocapture nofree nonnull readonly align 8 %891) #2
  %896 = extractvalue { i64, i64 } %895, 1
  %897 = urem i64 %890, %896
  %898 = icmp eq i64 %897, 0
  %899 = sub i64 %896, %897
  %900 = select i1 %898, i64 0, i64 %899
  %901 = getelementptr i8, ptr %861, i64 %890
  %902 = getelementptr i8, ptr %901, i64 %900
  %903 = getelementptr i8, ptr %892, i64 64
  %904 = load ptr, ptr %903, align 8
  call void %904({ ptr, i160 } %241, ptr nocapture nofree nonnull readonly align 8 %891, ptr nocapture nofree writeonly %902) #8
  %905 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %906 = getelementptr inbounds i8, ptr %861, i64 16
  store i32 %243, ptr %906, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %907 = ptrtoint ptr %861 to i64
  %908 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %909 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %910 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %911

911:                                              ; preds = %990, %826
  %912 = phi i64 [ undef, %826 ], [ %992, %990 ]
  %913 = phi i64 [ %907, %826 ], [ %991, %990 ]
  %914 = phi i32 [ 0, %826 ], [ %927, %990 ]
  %915 = phi i1 [ true, %826 ], [ %1008, %990 ]
  %916 = phi ptr [ @Entry, %826 ], [ %993, %990 ]
  %917 = phi ptr [ %861, %826 ], [ %994, %990 ]
  %918 = phi ptr [ undef, %826 ], [ %995, %990 ]
  %919 = phi i32 [ 10, %826 ], [ %1007, %990 ]
  %920 = sext i32 %919 to i64
  %921 = getelementptr ptr, ptr %916, i64 %920
  %922 = getelementptr i8, ptr %921, i64 64
  %923 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %916, 0
  %924 = insertvalue { ptr, ptr, ptr, i32 } %923, ptr %917, 1
  %925 = insertvalue { ptr, ptr, ptr, i32 } %924, ptr %918, 2
  %926 = insertvalue { ptr, ptr, ptr, i32 } %925, i32 %919, 3
  %927 = add nuw nsw i32 %914, 1
  %928 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %916)
  %929 = load ptr, ptr %922, align 8
  %930 = call align 4 ptr %929({ ptr, ptr, ptr, i32 } %926, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %931 = call i32 %930({ ptr, ptr, ptr, i32 } %926, { ptr, ptr, ptr, i32 } %926, ptr nonnull align 8 %2) #28
  br i1 %915, label %932, label %952

932:                                              ; preds = %911
  %933 = load i32, ptr %30, align 8
  %934 = add i32 %933, -1
  %935 = and i32 %934, %931
  %936 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %937 = load ptr, ptr %32, align 8
  %938 = sext i32 %935 to i64
  %939 = shl nsw i64 %938, 5
  %940 = getelementptr i8, ptr %937, i64 %939
  %941 = load ptr, ptr %940, align 8
  %942 = getelementptr i8, ptr %940, i64 8
  %943 = load i160, ptr %942, align 4
  store ptr %916, ptr %940, align 8
  store i64 %913, ptr %942, align 4
  %944 = getelementptr i8, ptr %940, i64 16
  store i64 %912, ptr %944, align 4
  %945 = getelementptr i8, ptr %940, i64 24
  store i32 %919, ptr %945, align 4
  %946 = icmp ne ptr %941, @nil_typ
  %947 = icmp ne ptr %941, null
  %948 = and i1 %946, %947
  %949 = trunc i160 %943 to i64
  %950 = lshr i160 %943, 64
  %951 = trunc i160 %950 to i64
  br i1 %948, label %990, label %1012

952:                                              ; preds = %911
  %953 = add i32 %931, 2127912214
  %954 = shl i32 %931, 12
  %955 = add i32 %953, %954
  %956 = ashr i32 %955, 19
  %957 = xor i32 %955, %956
  %958 = xor i32 %957, -949894596
  %959 = add i32 %958, 374761393
  %960 = shl i32 %958, 5
  %961 = add i32 %959, %960
  %962 = add i32 %961, -744332180
  %963 = shl i32 %961, 9
  %964 = xor i32 %962, %963
  %965 = add i32 %964, -42973499
  %966 = shl i32 %964, 3
  %967 = add i32 %965, %966
  %968 = ashr i32 %967, 16
  %969 = xor i32 %967, %968
  %970 = xor i32 %969, -1252372727
  %971 = load i32, ptr %30, align 8
  %972 = add i32 %971, -1
  %973 = and i32 %972, %970
  %974 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %975 = load ptr, ptr %34, align 8
  %976 = sext i32 %973 to i64
  %977 = shl nsw i64 %976, 5
  %978 = getelementptr i8, ptr %975, i64 %977
  %979 = load ptr, ptr %978, align 8
  %980 = getelementptr i8, ptr %978, i64 8
  %981 = load i160, ptr %980, align 4
  store ptr %916, ptr %978, align 8
  store i64 %913, ptr %980, align 4
  %982 = getelementptr i8, ptr %978, i64 16
  store i64 %912, ptr %982, align 4
  %983 = getelementptr i8, ptr %978, i64 24
  store i32 %919, ptr %983, align 4
  %984 = icmp ne ptr %979, @nil_typ
  %985 = icmp ne ptr %979, null
  %986 = and i1 %984, %985
  %987 = trunc i160 %981 to i64
  %988 = lshr i160 %981, 64
  %989 = trunc i160 %988 to i64
  br i1 %986, label %990, label %1012

990:                                              ; preds = %952, %932
  %991 = phi i64 [ %949, %932 ], [ %987, %952 ]
  %992 = phi i64 [ %951, %932 ], [ %989, %952 ]
  %993 = phi ptr [ %941, %932 ], [ %979, %952 ]
  %994 = inttoptr i64 %991 to ptr
  %995 = inttoptr i64 %992 to ptr
  %996 = getelementptr i8, ptr %993, i64 8
  %997 = getelementptr i8, ptr %993, i64 16
  %998 = getelementptr i8, ptr %993, i64 40
  %999 = load i64, ptr %996, align 4
  %1000 = load i64, ptr %997, align 4
  %1001 = load ptr, ptr %998, align 8
  %1002 = mul i64 %999, 4015701072841558310
  %1003 = lshr i64 %1002, 32
  %1004 = xor i64 %1003, %1002
  %1005 = and i64 %1004, %1000
  %1006 = getelementptr i32, ptr %1001, i64 %1005
  %1007 = load i32, ptr %1006, align 4
  %1008 = xor i1 %915, true
  %1009 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1010 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1011 = icmp eq i32 %927, 100
  br i1 %1011, label %1016, label %911

1012:                                             ; preds = %952, %932
  %1013 = load i32, ptr %63, align 4
  %1014 = add i32 %1013, 1
  %1015 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1014, ptr %63, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1715

1016:                                             ; preds = %990
  %1017 = getelementptr i8, ptr %993, i64 8
  %1018 = getelementptr i8, ptr %993, i64 16
  %1019 = getelementptr i8, ptr %993, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1020 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1021 = load ptr, ptr %32, align 8
  %1022 = load ptr, ptr %34, align 8
  %1023 = load i32, ptr %30, align 8
  %1024 = shl i32 %1023, 1
  %1025 = call i32 @llvm.smax.i32(i32 %1024, i32 noundef 16) #43
  store i32 %1025, ptr %30, align 8
  %1026 = zext nneg i32 %1025 to i64
  %1027 = shl nuw nsw i64 %1026, 5
  %1028 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1027, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1028, ptr %32, align 8
  %1029 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1027, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1029, ptr %34, align 8
  store i32 0, ptr %63, align 4
  %1030 = icmp sgt i32 %1023, 0
  br i1 %1030, label %1033, label %1031

1031:                                             ; preds = %1016
  %1032 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1309

1033:                                             ; preds = %1016
  %1034 = zext nneg i32 %1023 to i64
  br label %1035

1035:                                             ; preds = %1168, %1033
  %1036 = phi i64 [ 0, %1033 ], [ %1169, %1168 ]
  %1037 = shl nuw nsw i64 %1036, 5
  %1038 = getelementptr i8, ptr %1021, i64 %1037
  %1039 = load ptr, ptr %1038, align 8
  %1040 = icmp ne ptr %1039, @nil_typ
  %1041 = icmp ne ptr %1039, null
  %1042 = and i1 %1040, %1041
  br i1 %1042, label %1043, label %1168

1043:                                             ; preds = %1035
  %1044 = getelementptr i8, ptr %1038, i64 8
  %1045 = load i64, ptr %1044, align 4
  %1046 = getelementptr i8, ptr %1038, i64 16
  %1047 = load i64, ptr %1046, align 4
  %1048 = getelementptr i8, ptr %1039, i64 8
  %1049 = getelementptr i8, ptr %1039, i64 16
  %1050 = getelementptr i8, ptr %1039, i64 40
  %1051 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1052 = load i64, ptr %1048, align 4, !noalias !25
  %1053 = load i64, ptr %1049, align 4, !noalias !25
  %1054 = load ptr, ptr %1050, align 8, !noalias !25
  %1055 = mul i64 %1052, 4015701072841558310
  %1056 = lshr i64 %1055, 32
  %1057 = xor i64 %1056, %1055
  %1058 = and i64 %1057, %1053
  %1059 = getelementptr i32, ptr %1054, i64 %1058
  %1060 = load i32, ptr %1059, align 4, !noalias !266
  %1061 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1062 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1063 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1064

1064:                                             ; preds = %1143, %1043
  %1065 = phi i64 [ %1047, %1043 ], [ %1145, %1143 ]
  %1066 = phi i64 [ %1045, %1043 ], [ %1144, %1143 ]
  %1067 = phi i32 [ 0, %1043 ], [ %1080, %1143 ]
  %1068 = phi i1 [ true, %1043 ], [ %1159, %1143 ]
  %1069 = phi ptr [ %1039, %1043 ], [ %1146, %1143 ]
  %1070 = phi i32 [ %1060, %1043 ], [ %1158, %1143 ]
  %1071 = inttoptr i64 %1065 to ptr
  %1072 = inttoptr i64 %1066 to ptr
  %1073 = sext i32 %1070 to i64
  %1074 = getelementptr ptr, ptr %1069, i64 %1073
  %1075 = getelementptr i8, ptr %1074, i64 64
  %1076 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1069, 0
  %1077 = insertvalue { ptr, ptr, ptr, i32 } %1076, ptr %1072, 1
  %1078 = insertvalue { ptr, ptr, ptr, i32 } %1077, ptr %1071, 2
  %1079 = insertvalue { ptr, ptr, ptr, i32 } %1078, i32 %1070, 3
  %1080 = add nuw nsw i32 %1067, 1
  %1081 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1069)
  %1082 = load ptr, ptr %1075, align 8
  %1083 = call align 4 ptr %1082({ ptr, ptr, ptr, i32 } %1079, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1084 = call i32 %1083({ ptr, ptr, ptr, i32 } %1079, { ptr, ptr, ptr, i32 } %1079, ptr nonnull align 8 %2) #28
  br i1 %1068, label %1085, label %1105

1085:                                             ; preds = %1064
  %1086 = load i32, ptr %30, align 8
  %1087 = add i32 %1086, -1
  %1088 = and i32 %1087, %1084
  %1089 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1090 = load ptr, ptr %32, align 8
  %1091 = sext i32 %1088 to i64
  %1092 = shl nsw i64 %1091, 5
  %1093 = getelementptr i8, ptr %1090, i64 %1092
  %1094 = load ptr, ptr %1093, align 8
  %1095 = getelementptr i8, ptr %1093, i64 8
  %1096 = load i160, ptr %1095, align 4
  store ptr %1069, ptr %1093, align 8
  store i64 %1066, ptr %1095, align 4
  %1097 = getelementptr i8, ptr %1093, i64 16
  store i64 %1065, ptr %1097, align 4
  %1098 = getelementptr i8, ptr %1093, i64 24
  store i32 %1070, ptr %1098, align 4
  %1099 = icmp ne ptr %1094, @nil_typ
  %1100 = icmp ne ptr %1094, null
  %1101 = and i1 %1099, %1100
  %1102 = trunc i160 %1096 to i64
  %1103 = lshr i160 %1096, 64
  %1104 = trunc i160 %1103 to i64
  br i1 %1101, label %1143, label %1163

1105:                                             ; preds = %1064
  %1106 = add i32 %1084, 2127912214
  %1107 = shl i32 %1084, 12
  %1108 = add i32 %1106, %1107
  %1109 = ashr i32 %1108, 19
  %1110 = xor i32 %1108, %1109
  %1111 = xor i32 %1110, -949894596
  %1112 = add i32 %1111, 374761393
  %1113 = shl i32 %1111, 5
  %1114 = add i32 %1112, %1113
  %1115 = add i32 %1114, -744332180
  %1116 = shl i32 %1114, 9
  %1117 = xor i32 %1115, %1116
  %1118 = add i32 %1117, -42973499
  %1119 = shl i32 %1117, 3
  %1120 = add i32 %1118, %1119
  %1121 = ashr i32 %1120, 16
  %1122 = xor i32 %1120, %1121
  %1123 = xor i32 %1122, -1252372727
  %1124 = load i32, ptr %30, align 8
  %1125 = add i32 %1124, -1
  %1126 = and i32 %1125, %1123
  %1127 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1128 = load ptr, ptr %34, align 8
  %1129 = sext i32 %1126 to i64
  %1130 = shl nsw i64 %1129, 5
  %1131 = getelementptr i8, ptr %1128, i64 %1130
  %1132 = load ptr, ptr %1131, align 8
  %1133 = getelementptr i8, ptr %1131, i64 8
  %1134 = load i160, ptr %1133, align 4
  store ptr %1069, ptr %1131, align 8
  store i64 %1066, ptr %1133, align 4
  %1135 = getelementptr i8, ptr %1131, i64 16
  store i64 %1065, ptr %1135, align 4
  %1136 = getelementptr i8, ptr %1131, i64 24
  store i32 %1070, ptr %1136, align 4
  %1137 = icmp ne ptr %1132, @nil_typ
  %1138 = icmp ne ptr %1132, null
  %1139 = and i1 %1137, %1138
  %1140 = trunc i160 %1134 to i64
  %1141 = lshr i160 %1134, 64
  %1142 = trunc i160 %1141 to i64
  br i1 %1139, label %1143, label %1163

1143:                                             ; preds = %1105, %1085
  %1144 = phi i64 [ %1102, %1085 ], [ %1140, %1105 ]
  %1145 = phi i64 [ %1104, %1085 ], [ %1142, %1105 ]
  %1146 = phi ptr [ %1094, %1085 ], [ %1132, %1105 ]
  %1147 = getelementptr i8, ptr %1146, i64 8
  %1148 = getelementptr i8, ptr %1146, i64 16
  %1149 = getelementptr i8, ptr %1146, i64 40
  %1150 = load i64, ptr %1147, align 4
  %1151 = load i64, ptr %1148, align 4
  %1152 = load ptr, ptr %1149, align 8
  %1153 = mul i64 %1150, 4015701072841558310
  %1154 = lshr i64 %1153, 32
  %1155 = xor i64 %1154, %1153
  %1156 = and i64 %1155, %1151
  %1157 = getelementptr i32, ptr %1152, i64 %1156
  %1158 = load i32, ptr %1157, align 4
  %1159 = xor i1 %1068, true
  %1160 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1161 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1162 = icmp eq i32 %1080, 100
  br i1 %1162, label %1167, label %1064

1163:                                             ; preds = %1105, %1085
  %1164 = load i32, ptr %63, align 4
  %1165 = add i32 %1164, 1
  %1166 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1165, ptr %63, align 4
  br label %1167

1167:                                             ; preds = %1163, %1143
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1168

1168:                                             ; preds = %1167, %1035
  %1169 = add nuw nsw i64 %1036, 1
  %1170 = icmp eq i64 %1169, %1034
  br i1 %1170, label %1171, label %1035

1171:                                             ; preds = %1168
  %1172 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1173

1173:                                             ; preds = %1306, %1171
  %1174 = phi i64 [ 0, %1171 ], [ %1307, %1306 ]
  %1175 = shl nuw nsw i64 %1174, 5
  %1176 = getelementptr i8, ptr %1022, i64 %1175
  %1177 = load ptr, ptr %1176, align 8
  %1178 = icmp ne ptr %1177, @nil_typ
  %1179 = icmp ne ptr %1177, null
  %1180 = and i1 %1178, %1179
  br i1 %1180, label %1181, label %1306

1181:                                             ; preds = %1173
  %1182 = getelementptr i8, ptr %1176, i64 8
  %1183 = load i64, ptr %1182, align 4
  %1184 = getelementptr i8, ptr %1176, i64 16
  %1185 = load i64, ptr %1184, align 4
  %1186 = getelementptr i8, ptr %1177, i64 8
  %1187 = getelementptr i8, ptr %1177, i64 16
  %1188 = getelementptr i8, ptr %1177, i64 40
  %1189 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1190 = load i64, ptr %1186, align 4, !noalias !25
  %1191 = load i64, ptr %1187, align 4, !noalias !25
  %1192 = load ptr, ptr %1188, align 8, !noalias !25
  %1193 = mul i64 %1190, 4015701072841558310
  %1194 = lshr i64 %1193, 32
  %1195 = xor i64 %1194, %1193
  %1196 = and i64 %1195, %1191
  %1197 = getelementptr i32, ptr %1192, i64 %1196
  %1198 = load i32, ptr %1197, align 4, !noalias !269
  %1199 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1200 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1201 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1202

1202:                                             ; preds = %1281, %1181
  %1203 = phi i64 [ %1185, %1181 ], [ %1283, %1281 ]
  %1204 = phi i64 [ %1183, %1181 ], [ %1282, %1281 ]
  %1205 = phi i32 [ 0, %1181 ], [ %1218, %1281 ]
  %1206 = phi i1 [ true, %1181 ], [ %1297, %1281 ]
  %1207 = phi ptr [ %1177, %1181 ], [ %1284, %1281 ]
  %1208 = phi i32 [ %1198, %1181 ], [ %1296, %1281 ]
  %1209 = inttoptr i64 %1203 to ptr
  %1210 = inttoptr i64 %1204 to ptr
  %1211 = sext i32 %1208 to i64
  %1212 = getelementptr ptr, ptr %1207, i64 %1211
  %1213 = getelementptr i8, ptr %1212, i64 64
  %1214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1207, 0
  %1215 = insertvalue { ptr, ptr, ptr, i32 } %1214, ptr %1210, 1
  %1216 = insertvalue { ptr, ptr, ptr, i32 } %1215, ptr %1209, 2
  %1217 = insertvalue { ptr, ptr, ptr, i32 } %1216, i32 %1208, 3
  %1218 = add nuw nsw i32 %1205, 1
  %1219 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1207)
  %1220 = load ptr, ptr %1213, align 8
  %1221 = call align 4 ptr %1220({ ptr, ptr, ptr, i32 } %1217, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1222 = call i32 %1221({ ptr, ptr, ptr, i32 } %1217, { ptr, ptr, ptr, i32 } %1217, ptr nonnull align 8 %2) #28
  br i1 %1206, label %1223, label %1243

1223:                                             ; preds = %1202
  %1224 = load i32, ptr %30, align 8
  %1225 = add i32 %1224, -1
  %1226 = and i32 %1225, %1222
  %1227 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1228 = load ptr, ptr %32, align 8
  %1229 = sext i32 %1226 to i64
  %1230 = shl nsw i64 %1229, 5
  %1231 = getelementptr i8, ptr %1228, i64 %1230
  %1232 = load ptr, ptr %1231, align 8
  %1233 = getelementptr i8, ptr %1231, i64 8
  %1234 = load i160, ptr %1233, align 4
  store ptr %1207, ptr %1231, align 8
  store i64 %1204, ptr %1233, align 4
  %1235 = getelementptr i8, ptr %1231, i64 16
  store i64 %1203, ptr %1235, align 4
  %1236 = getelementptr i8, ptr %1231, i64 24
  store i32 %1208, ptr %1236, align 4
  %1237 = icmp ne ptr %1232, @nil_typ
  %1238 = icmp ne ptr %1232, null
  %1239 = and i1 %1237, %1238
  %1240 = trunc i160 %1234 to i64
  %1241 = lshr i160 %1234, 64
  %1242 = trunc i160 %1241 to i64
  br i1 %1239, label %1281, label %1301

1243:                                             ; preds = %1202
  %1244 = add i32 %1222, 2127912214
  %1245 = shl i32 %1222, 12
  %1246 = add i32 %1244, %1245
  %1247 = ashr i32 %1246, 19
  %1248 = xor i32 %1246, %1247
  %1249 = xor i32 %1248, -949894596
  %1250 = add i32 %1249, 374761393
  %1251 = shl i32 %1249, 5
  %1252 = add i32 %1250, %1251
  %1253 = add i32 %1252, -744332180
  %1254 = shl i32 %1252, 9
  %1255 = xor i32 %1253, %1254
  %1256 = add i32 %1255, -42973499
  %1257 = shl i32 %1255, 3
  %1258 = add i32 %1256, %1257
  %1259 = ashr i32 %1258, 16
  %1260 = xor i32 %1258, %1259
  %1261 = xor i32 %1260, -1252372727
  %1262 = load i32, ptr %30, align 8
  %1263 = add i32 %1262, -1
  %1264 = and i32 %1263, %1261
  %1265 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1266 = load ptr, ptr %34, align 8
  %1267 = sext i32 %1264 to i64
  %1268 = shl nsw i64 %1267, 5
  %1269 = getelementptr i8, ptr %1266, i64 %1268
  %1270 = load ptr, ptr %1269, align 8
  %1271 = getelementptr i8, ptr %1269, i64 8
  %1272 = load i160, ptr %1271, align 4
  store ptr %1207, ptr %1269, align 8
  store i64 %1204, ptr %1271, align 4
  %1273 = getelementptr i8, ptr %1269, i64 16
  store i64 %1203, ptr %1273, align 4
  %1274 = getelementptr i8, ptr %1269, i64 24
  store i32 %1208, ptr %1274, align 4
  %1275 = icmp ne ptr %1270, @nil_typ
  %1276 = icmp ne ptr %1270, null
  %1277 = and i1 %1275, %1276
  %1278 = trunc i160 %1272 to i64
  %1279 = lshr i160 %1272, 64
  %1280 = trunc i160 %1279 to i64
  br i1 %1277, label %1281, label %1301

1281:                                             ; preds = %1243, %1223
  %1282 = phi i64 [ %1240, %1223 ], [ %1278, %1243 ]
  %1283 = phi i64 [ %1242, %1223 ], [ %1280, %1243 ]
  %1284 = phi ptr [ %1232, %1223 ], [ %1270, %1243 ]
  %1285 = getelementptr i8, ptr %1284, i64 8
  %1286 = getelementptr i8, ptr %1284, i64 16
  %1287 = getelementptr i8, ptr %1284, i64 40
  %1288 = load i64, ptr %1285, align 4
  %1289 = load i64, ptr %1286, align 4
  %1290 = load ptr, ptr %1287, align 8
  %1291 = mul i64 %1288, 4015701072841558310
  %1292 = lshr i64 %1291, 32
  %1293 = xor i64 %1292, %1291
  %1294 = and i64 %1293, %1289
  %1295 = getelementptr i32, ptr %1290, i64 %1294
  %1296 = load i32, ptr %1295, align 4
  %1297 = xor i1 %1206, true
  %1298 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1299 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1300 = icmp eq i32 %1218, 100
  br i1 %1300, label %1305, label %1202

1301:                                             ; preds = %1243, %1223
  %1302 = load i32, ptr %63, align 4
  %1303 = add i32 %1302, 1
  %1304 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1303, ptr %63, align 4
  br label %1305

1305:                                             ; preds = %1301, %1281
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1306

1306:                                             ; preds = %1305, %1173
  %1307 = add nuw nsw i64 %1174, 1
  %1308 = icmp eq i64 %1307, %1034
  br i1 %1308, label %1309, label %1173

1309:                                             ; preds = %1306, %1031
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1310 = load i64, ptr %1017, align 4, !noalias !25
  %1311 = load i64, ptr %1018, align 4, !noalias !25
  %1312 = load ptr, ptr %1019, align 8, !noalias !25
  %1313 = mul i64 %1310, 4015701072841558310
  %1314 = lshr i64 %1313, 32
  %1315 = xor i64 %1314, %1313
  %1316 = and i64 %1315, %1311
  %1317 = getelementptr i32, ptr %1312, i64 %1316
  %1318 = load i32, ptr %1317, align 4, !noalias !272
  %1319 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1320 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1321 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1322

1322:                                             ; preds = %1401, %1309
  %1323 = phi i64 [ %992, %1309 ], [ %1403, %1401 ]
  %1324 = phi i64 [ %991, %1309 ], [ %1402, %1401 ]
  %1325 = phi i32 [ 0, %1309 ], [ %1338, %1401 ]
  %1326 = phi i1 [ true, %1309 ], [ %1417, %1401 ]
  %1327 = phi ptr [ %993, %1309 ], [ %1404, %1401 ]
  %1328 = phi i32 [ %1318, %1309 ], [ %1416, %1401 ]
  %1329 = inttoptr i64 %1323 to ptr
  %1330 = inttoptr i64 %1324 to ptr
  %1331 = sext i32 %1328 to i64
  %1332 = getelementptr ptr, ptr %1327, i64 %1331
  %1333 = getelementptr i8, ptr %1332, i64 64
  %1334 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1327, 0
  %1335 = insertvalue { ptr, ptr, ptr, i32 } %1334, ptr %1330, 1
  %1336 = insertvalue { ptr, ptr, ptr, i32 } %1335, ptr %1329, 2
  %1337 = insertvalue { ptr, ptr, ptr, i32 } %1336, i32 %1328, 3
  %1338 = add nuw nsw i32 %1325, 1
  %1339 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1327)
  %1340 = load ptr, ptr %1333, align 8
  %1341 = call align 4 ptr %1340({ ptr, ptr, ptr, i32 } %1337, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1342 = call i32 %1341({ ptr, ptr, ptr, i32 } %1337, { ptr, ptr, ptr, i32 } %1337, ptr nonnull align 8 %2) #28
  br i1 %1326, label %1343, label %1363

1343:                                             ; preds = %1322
  %1344 = load i32, ptr %30, align 8
  %1345 = add i32 %1344, -1
  %1346 = and i32 %1345, %1342
  %1347 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1348 = load ptr, ptr %32, align 8
  %1349 = sext i32 %1346 to i64
  %1350 = shl nsw i64 %1349, 5
  %1351 = getelementptr i8, ptr %1348, i64 %1350
  %1352 = load ptr, ptr %1351, align 8
  %1353 = getelementptr i8, ptr %1351, i64 8
  %1354 = load i160, ptr %1353, align 4
  store ptr %1327, ptr %1351, align 8
  store i64 %1324, ptr %1353, align 4
  %1355 = getelementptr i8, ptr %1351, i64 16
  store i64 %1323, ptr %1355, align 4
  %1356 = getelementptr i8, ptr %1351, i64 24
  store i32 %1328, ptr %1356, align 4
  %1357 = icmp ne ptr %1352, @nil_typ
  %1358 = icmp ne ptr %1352, null
  %1359 = and i1 %1357, %1358
  %1360 = trunc i160 %1354 to i64
  %1361 = lshr i160 %1354, 64
  %1362 = trunc i160 %1361 to i64
  br i1 %1359, label %1401, label %1421

1363:                                             ; preds = %1322
  %1364 = add i32 %1342, 2127912214
  %1365 = shl i32 %1342, 12
  %1366 = add i32 %1364, %1365
  %1367 = ashr i32 %1366, 19
  %1368 = xor i32 %1366, %1367
  %1369 = xor i32 %1368, -949894596
  %1370 = add i32 %1369, 374761393
  %1371 = shl i32 %1369, 5
  %1372 = add i32 %1370, %1371
  %1373 = add i32 %1372, -744332180
  %1374 = shl i32 %1372, 9
  %1375 = xor i32 %1373, %1374
  %1376 = add i32 %1375, -42973499
  %1377 = shl i32 %1375, 3
  %1378 = add i32 %1376, %1377
  %1379 = ashr i32 %1378, 16
  %1380 = xor i32 %1378, %1379
  %1381 = xor i32 %1380, -1252372727
  %1382 = load i32, ptr %30, align 8
  %1383 = add i32 %1382, -1
  %1384 = and i32 %1383, %1381
  %1385 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1386 = load ptr, ptr %34, align 8
  %1387 = sext i32 %1384 to i64
  %1388 = shl nsw i64 %1387, 5
  %1389 = getelementptr i8, ptr %1386, i64 %1388
  %1390 = load ptr, ptr %1389, align 8
  %1391 = getelementptr i8, ptr %1389, i64 8
  %1392 = load i160, ptr %1391, align 4
  store ptr %1327, ptr %1389, align 8
  store i64 %1324, ptr %1391, align 4
  %1393 = getelementptr i8, ptr %1389, i64 16
  store i64 %1323, ptr %1393, align 4
  %1394 = getelementptr i8, ptr %1389, i64 24
  store i32 %1328, ptr %1394, align 4
  %1395 = icmp ne ptr %1390, @nil_typ
  %1396 = icmp ne ptr %1390, null
  %1397 = and i1 %1395, %1396
  %1398 = trunc i160 %1392 to i64
  %1399 = lshr i160 %1392, 64
  %1400 = trunc i160 %1399 to i64
  br i1 %1397, label %1401, label %1421

1401:                                             ; preds = %1363, %1343
  %1402 = phi i64 [ %1360, %1343 ], [ %1398, %1363 ]
  %1403 = phi i64 [ %1362, %1343 ], [ %1400, %1363 ]
  %1404 = phi ptr [ %1352, %1343 ], [ %1390, %1363 ]
  %1405 = getelementptr i8, ptr %1404, i64 8
  %1406 = getelementptr i8, ptr %1404, i64 16
  %1407 = getelementptr i8, ptr %1404, i64 40
  %1408 = load i64, ptr %1405, align 4
  %1409 = load i64, ptr %1406, align 4
  %1410 = load ptr, ptr %1407, align 8
  %1411 = mul i64 %1408, 4015701072841558310
  %1412 = lshr i64 %1411, 32
  %1413 = xor i64 %1412, %1411
  %1414 = and i64 %1413, %1409
  %1415 = getelementptr i32, ptr %1410, i64 %1414
  %1416 = load i32, ptr %1415, align 4
  %1417 = xor i1 %1326, true
  %1418 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1419 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1420 = icmp eq i32 %1338, 100
  br i1 %1420, label %1425, label %1322

1421:                                             ; preds = %1363, %1343
  %1422 = load i32, ptr %63, align 4
  %1423 = add i32 %1422, 1
  %1424 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1423, ptr %63, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1715

1425:                                             ; preds = %1401
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1426 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1427 = load ptr, ptr %32, align 8
  %1428 = load ptr, ptr %34, align 8
  %1429 = load i32, ptr %30, align 8
  %1430 = shl i32 %1429, 1
  %1431 = call i32 @llvm.smax.i32(i32 %1430, i32 noundef 16) #43
  store i32 %1431, ptr %30, align 8
  %1432 = zext nneg i32 %1431 to i64
  %1433 = shl nuw nsw i64 %1432, 5
  %1434 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1433, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1434, ptr %32, align 8
  %1435 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1433, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1435, ptr %34, align 8
  store i32 0, ptr %63, align 4
  %1436 = icmp sgt i32 %1429, 0
  br i1 %1436, label %1439, label %1437

1437:                                             ; preds = %1425
  %1438 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1715

1439:                                             ; preds = %1425
  %1440 = zext nneg i32 %1429 to i64
  br label %1441

1441:                                             ; preds = %1574, %1439
  %1442 = phi i64 [ 0, %1439 ], [ %1575, %1574 ]
  %1443 = shl nuw nsw i64 %1442, 5
  %1444 = getelementptr i8, ptr %1427, i64 %1443
  %1445 = load ptr, ptr %1444, align 8
  %1446 = icmp ne ptr %1445, @nil_typ
  %1447 = icmp ne ptr %1445, null
  %1448 = and i1 %1446, %1447
  br i1 %1448, label %1449, label %1574

1449:                                             ; preds = %1441
  %1450 = getelementptr i8, ptr %1444, i64 8
  %1451 = load i64, ptr %1450, align 4
  %1452 = getelementptr i8, ptr %1444, i64 16
  %1453 = load i64, ptr %1452, align 4
  %1454 = getelementptr i8, ptr %1445, i64 8
  %1455 = getelementptr i8, ptr %1445, i64 16
  %1456 = getelementptr i8, ptr %1445, i64 40
  %1457 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1458 = load i64, ptr %1454, align 4, !noalias !25
  %1459 = load i64, ptr %1455, align 4, !noalias !25
  %1460 = load ptr, ptr %1456, align 8, !noalias !25
  %1461 = mul i64 %1458, 4015701072841558310
  %1462 = lshr i64 %1461, 32
  %1463 = xor i64 %1462, %1461
  %1464 = and i64 %1463, %1459
  %1465 = getelementptr i32, ptr %1460, i64 %1464
  %1466 = load i32, ptr %1465, align 4, !noalias !275
  %1467 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1468 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1469 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1470

1470:                                             ; preds = %1549, %1449
  %1471 = phi i64 [ %1453, %1449 ], [ %1551, %1549 ]
  %1472 = phi i64 [ %1451, %1449 ], [ %1550, %1549 ]
  %1473 = phi i32 [ 0, %1449 ], [ %1486, %1549 ]
  %1474 = phi i1 [ true, %1449 ], [ %1565, %1549 ]
  %1475 = phi ptr [ %1445, %1449 ], [ %1552, %1549 ]
  %1476 = phi i32 [ %1466, %1449 ], [ %1564, %1549 ]
  %1477 = inttoptr i64 %1471 to ptr
  %1478 = inttoptr i64 %1472 to ptr
  %1479 = sext i32 %1476 to i64
  %1480 = getelementptr ptr, ptr %1475, i64 %1479
  %1481 = getelementptr i8, ptr %1480, i64 64
  %1482 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1475, 0
  %1483 = insertvalue { ptr, ptr, ptr, i32 } %1482, ptr %1478, 1
  %1484 = insertvalue { ptr, ptr, ptr, i32 } %1483, ptr %1477, 2
  %1485 = insertvalue { ptr, ptr, ptr, i32 } %1484, i32 %1476, 3
  %1486 = add nuw nsw i32 %1473, 1
  %1487 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1475)
  %1488 = load ptr, ptr %1481, align 8
  %1489 = call align 4 ptr %1488({ ptr, ptr, ptr, i32 } %1485, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1490 = call i32 %1489({ ptr, ptr, ptr, i32 } %1485, { ptr, ptr, ptr, i32 } %1485, ptr nonnull align 8 %2) #28
  br i1 %1474, label %1491, label %1511

1491:                                             ; preds = %1470
  %1492 = load i32, ptr %30, align 8
  %1493 = add i32 %1492, -1
  %1494 = and i32 %1493, %1490
  %1495 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1496 = load ptr, ptr %32, align 8
  %1497 = sext i32 %1494 to i64
  %1498 = shl nsw i64 %1497, 5
  %1499 = getelementptr i8, ptr %1496, i64 %1498
  %1500 = load ptr, ptr %1499, align 8
  %1501 = getelementptr i8, ptr %1499, i64 8
  %1502 = load i160, ptr %1501, align 4
  store ptr %1475, ptr %1499, align 8
  store i64 %1472, ptr %1501, align 4
  %1503 = getelementptr i8, ptr %1499, i64 16
  store i64 %1471, ptr %1503, align 4
  %1504 = getelementptr i8, ptr %1499, i64 24
  store i32 %1476, ptr %1504, align 4
  %1505 = icmp ne ptr %1500, @nil_typ
  %1506 = icmp ne ptr %1500, null
  %1507 = and i1 %1505, %1506
  %1508 = trunc i160 %1502 to i64
  %1509 = lshr i160 %1502, 64
  %1510 = trunc i160 %1509 to i64
  br i1 %1507, label %1549, label %1569

1511:                                             ; preds = %1470
  %1512 = add i32 %1490, 2127912214
  %1513 = shl i32 %1490, 12
  %1514 = add i32 %1512, %1513
  %1515 = ashr i32 %1514, 19
  %1516 = xor i32 %1514, %1515
  %1517 = xor i32 %1516, -949894596
  %1518 = add i32 %1517, 374761393
  %1519 = shl i32 %1517, 5
  %1520 = add i32 %1518, %1519
  %1521 = add i32 %1520, -744332180
  %1522 = shl i32 %1520, 9
  %1523 = xor i32 %1521, %1522
  %1524 = add i32 %1523, -42973499
  %1525 = shl i32 %1523, 3
  %1526 = add i32 %1524, %1525
  %1527 = ashr i32 %1526, 16
  %1528 = xor i32 %1526, %1527
  %1529 = xor i32 %1528, -1252372727
  %1530 = load i32, ptr %30, align 8
  %1531 = add i32 %1530, -1
  %1532 = and i32 %1531, %1529
  %1533 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1534 = load ptr, ptr %34, align 8
  %1535 = sext i32 %1532 to i64
  %1536 = shl nsw i64 %1535, 5
  %1537 = getelementptr i8, ptr %1534, i64 %1536
  %1538 = load ptr, ptr %1537, align 8
  %1539 = getelementptr i8, ptr %1537, i64 8
  %1540 = load i160, ptr %1539, align 4
  store ptr %1475, ptr %1537, align 8
  store i64 %1472, ptr %1539, align 4
  %1541 = getelementptr i8, ptr %1537, i64 16
  store i64 %1471, ptr %1541, align 4
  %1542 = getelementptr i8, ptr %1537, i64 24
  store i32 %1476, ptr %1542, align 4
  %1543 = icmp ne ptr %1538, @nil_typ
  %1544 = icmp ne ptr %1538, null
  %1545 = and i1 %1543, %1544
  %1546 = trunc i160 %1540 to i64
  %1547 = lshr i160 %1540, 64
  %1548 = trunc i160 %1547 to i64
  br i1 %1545, label %1549, label %1569

1549:                                             ; preds = %1511, %1491
  %1550 = phi i64 [ %1508, %1491 ], [ %1546, %1511 ]
  %1551 = phi i64 [ %1510, %1491 ], [ %1548, %1511 ]
  %1552 = phi ptr [ %1500, %1491 ], [ %1538, %1511 ]
  %1553 = getelementptr i8, ptr %1552, i64 8
  %1554 = getelementptr i8, ptr %1552, i64 16
  %1555 = getelementptr i8, ptr %1552, i64 40
  %1556 = load i64, ptr %1553, align 4
  %1557 = load i64, ptr %1554, align 4
  %1558 = load ptr, ptr %1555, align 8
  %1559 = mul i64 %1556, 4015701072841558310
  %1560 = lshr i64 %1559, 32
  %1561 = xor i64 %1560, %1559
  %1562 = and i64 %1561, %1557
  %1563 = getelementptr i32, ptr %1558, i64 %1562
  %1564 = load i32, ptr %1563, align 4
  %1565 = xor i1 %1474, true
  %1566 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1567 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1568 = icmp eq i32 %1486, 100
  br i1 %1568, label %1573, label %1470

1569:                                             ; preds = %1511, %1491
  %1570 = load i32, ptr %63, align 4
  %1571 = add i32 %1570, 1
  %1572 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1571, ptr %63, align 4
  br label %1573

1573:                                             ; preds = %1569, %1549
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1574

1574:                                             ; preds = %1573, %1441
  %1575 = add nuw nsw i64 %1442, 1
  %1576 = icmp eq i64 %1575, %1440
  br i1 %1576, label %1577, label %1441

1577:                                             ; preds = %1574
  %1578 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1579

1579:                                             ; preds = %1712, %1577
  %1580 = phi i64 [ 0, %1577 ], [ %1713, %1712 ]
  %1581 = shl nuw nsw i64 %1580, 5
  %1582 = getelementptr i8, ptr %1428, i64 %1581
  %1583 = load ptr, ptr %1582, align 8
  %1584 = icmp ne ptr %1583, @nil_typ
  %1585 = icmp ne ptr %1583, null
  %1586 = and i1 %1584, %1585
  br i1 %1586, label %1587, label %1712

1587:                                             ; preds = %1579
  %1588 = getelementptr i8, ptr %1582, i64 8
  %1589 = load i64, ptr %1588, align 4
  %1590 = getelementptr i8, ptr %1582, i64 16
  %1591 = load i64, ptr %1590, align 4
  %1592 = getelementptr i8, ptr %1583, i64 8
  %1593 = getelementptr i8, ptr %1583, i64 16
  %1594 = getelementptr i8, ptr %1583, i64 40
  %1595 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1596 = load i64, ptr %1592, align 4, !noalias !25
  %1597 = load i64, ptr %1593, align 4, !noalias !25
  %1598 = load ptr, ptr %1594, align 8, !noalias !25
  %1599 = mul i64 %1596, 4015701072841558310
  %1600 = lshr i64 %1599, 32
  %1601 = xor i64 %1600, %1599
  %1602 = and i64 %1601, %1597
  %1603 = getelementptr i32, ptr %1598, i64 %1602
  %1604 = load i32, ptr %1603, align 4, !noalias !278
  %1605 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1606 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1607 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1608

1608:                                             ; preds = %1687, %1587
  %1609 = phi i64 [ %1591, %1587 ], [ %1689, %1687 ]
  %1610 = phi i64 [ %1589, %1587 ], [ %1688, %1687 ]
  %1611 = phi i32 [ 0, %1587 ], [ %1624, %1687 ]
  %1612 = phi i1 [ true, %1587 ], [ %1703, %1687 ]
  %1613 = phi ptr [ %1583, %1587 ], [ %1690, %1687 ]
  %1614 = phi i32 [ %1604, %1587 ], [ %1702, %1687 ]
  %1615 = inttoptr i64 %1609 to ptr
  %1616 = inttoptr i64 %1610 to ptr
  %1617 = sext i32 %1614 to i64
  %1618 = getelementptr ptr, ptr %1613, i64 %1617
  %1619 = getelementptr i8, ptr %1618, i64 64
  %1620 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1613, 0
  %1621 = insertvalue { ptr, ptr, ptr, i32 } %1620, ptr %1616, 1
  %1622 = insertvalue { ptr, ptr, ptr, i32 } %1621, ptr %1615, 2
  %1623 = insertvalue { ptr, ptr, ptr, i32 } %1622, i32 %1614, 3
  %1624 = add nuw nsw i32 %1611, 1
  %1625 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1613)
  %1626 = load ptr, ptr %1619, align 8
  %1627 = call align 4 ptr %1626({ ptr, ptr, ptr, i32 } %1623, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1628 = call i32 %1627({ ptr, ptr, ptr, i32 } %1623, { ptr, ptr, ptr, i32 } %1623, ptr nonnull align 8 %2) #28
  br i1 %1612, label %1629, label %1649

1629:                                             ; preds = %1608
  %1630 = load i32, ptr %30, align 8
  %1631 = add i32 %1630, -1
  %1632 = and i32 %1631, %1628
  %1633 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1634 = load ptr, ptr %32, align 8
  %1635 = sext i32 %1632 to i64
  %1636 = shl nsw i64 %1635, 5
  %1637 = getelementptr i8, ptr %1634, i64 %1636
  %1638 = load ptr, ptr %1637, align 8
  %1639 = getelementptr i8, ptr %1637, i64 8
  %1640 = load i160, ptr %1639, align 4
  store ptr %1613, ptr %1637, align 8
  store i64 %1610, ptr %1639, align 4
  %1641 = getelementptr i8, ptr %1637, i64 16
  store i64 %1609, ptr %1641, align 4
  %1642 = getelementptr i8, ptr %1637, i64 24
  store i32 %1614, ptr %1642, align 4
  %1643 = icmp ne ptr %1638, @nil_typ
  %1644 = icmp ne ptr %1638, null
  %1645 = and i1 %1643, %1644
  %1646 = trunc i160 %1640 to i64
  %1647 = lshr i160 %1640, 64
  %1648 = trunc i160 %1647 to i64
  br i1 %1645, label %1687, label %1707

1649:                                             ; preds = %1608
  %1650 = add i32 %1628, 2127912214
  %1651 = shl i32 %1628, 12
  %1652 = add i32 %1650, %1651
  %1653 = ashr i32 %1652, 19
  %1654 = xor i32 %1652, %1653
  %1655 = xor i32 %1654, -949894596
  %1656 = add i32 %1655, 374761393
  %1657 = shl i32 %1655, 5
  %1658 = add i32 %1656, %1657
  %1659 = add i32 %1658, -744332180
  %1660 = shl i32 %1658, 9
  %1661 = xor i32 %1659, %1660
  %1662 = add i32 %1661, -42973499
  %1663 = shl i32 %1661, 3
  %1664 = add i32 %1662, %1663
  %1665 = ashr i32 %1664, 16
  %1666 = xor i32 %1664, %1665
  %1667 = xor i32 %1666, -1252372727
  %1668 = load i32, ptr %30, align 8
  %1669 = add i32 %1668, -1
  %1670 = and i32 %1669, %1667
  %1671 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1672 = load ptr, ptr %34, align 8
  %1673 = sext i32 %1670 to i64
  %1674 = shl nsw i64 %1673, 5
  %1675 = getelementptr i8, ptr %1672, i64 %1674
  %1676 = load ptr, ptr %1675, align 8
  %1677 = getelementptr i8, ptr %1675, i64 8
  %1678 = load i160, ptr %1677, align 4
  store ptr %1613, ptr %1675, align 8
  store i64 %1610, ptr %1677, align 4
  %1679 = getelementptr i8, ptr %1675, i64 16
  store i64 %1609, ptr %1679, align 4
  %1680 = getelementptr i8, ptr %1675, i64 24
  store i32 %1614, ptr %1680, align 4
  %1681 = icmp ne ptr %1676, @nil_typ
  %1682 = icmp ne ptr %1676, null
  %1683 = and i1 %1681, %1682
  %1684 = trunc i160 %1678 to i64
  %1685 = lshr i160 %1678, 64
  %1686 = trunc i160 %1685 to i64
  br i1 %1683, label %1687, label %1707

1687:                                             ; preds = %1649, %1629
  %1688 = phi i64 [ %1646, %1629 ], [ %1684, %1649 ]
  %1689 = phi i64 [ %1648, %1629 ], [ %1686, %1649 ]
  %1690 = phi ptr [ %1638, %1629 ], [ %1676, %1649 ]
  %1691 = getelementptr i8, ptr %1690, i64 8
  %1692 = getelementptr i8, ptr %1690, i64 16
  %1693 = getelementptr i8, ptr %1690, i64 40
  %1694 = load i64, ptr %1691, align 4
  %1695 = load i64, ptr %1692, align 4
  %1696 = load ptr, ptr %1693, align 8
  %1697 = mul i64 %1694, 4015701072841558310
  %1698 = lshr i64 %1697, 32
  %1699 = xor i64 %1698, %1697
  %1700 = and i64 %1699, %1695
  %1701 = getelementptr i32, ptr %1696, i64 %1700
  %1702 = load i32, ptr %1701, align 4
  %1703 = xor i1 %1612, true
  %1704 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1705 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1706 = icmp eq i32 %1624, 100
  br i1 %1706, label %1711, label %1608

1707:                                             ; preds = %1649, %1629
  %1708 = load i32, ptr %63, align 4
  %1709 = add i32 %1708, 1
  %1710 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1709, ptr %63, align 4
  br label %1711

1711:                                             ; preds = %1707, %1687
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1712

1712:                                             ; preds = %1711, %1579
  %1713 = add nuw nsw i64 %1580, 1
  %1714 = icmp eq i64 %1713, %1440
  br i1 %1714, label %1715, label %1579

1715:                                             ; preds = %1712, %1437, %1421, %1012, %453, %297
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  store i1 true, ptr %7, align 8
  %1716 = load i8, ptr %7, align 8
  %1717 = zext i8 %1716 to i160
  %1718 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %1717, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1719 = load ptr, ptr %48, align 8
  %1720 = call i32 %1719({ ptr, i160 } %74) #28
  %1721 = load i32, ptr %50, align 8
  %1722 = add i32 %1721, -1
  %1723 = and i32 %1722, %1720
  %1724 = load ptr, ptr %52, align 8
  %1725 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1726 = sext i32 %1723 to i64
  %1727 = shl nsw i64 %1726, 5
  %1728 = getelementptr i8, ptr %1724, i64 %1727
  %1729 = load ptr, ptr %1728, align 8
  %1730 = getelementptr i8, ptr %1728, i64 8
  %1731 = icmp ne ptr %1729, @nil_typ
  %1732 = icmp ne ptr %1729, null
  %1733 = and i1 %1731, %1732
  br i1 %1733, label %1734, label %1857

1734:                                             ; preds = %1715
  %1735 = load i64, ptr %1730, align 4
  %1736 = getelementptr i8, ptr %1728, i64 16
  %1737 = load i64, ptr %1736, align 4
  %1738 = inttoptr i64 %1735 to ptr
  %1739 = inttoptr i64 %1737 to ptr
  %1740 = getelementptr i8, ptr %1729, i64 8
  %1741 = getelementptr i8, ptr %1729, i64 16
  %1742 = getelementptr i8, ptr %1729, i64 40
  %1743 = load i64, ptr %1740, align 4, !noalias !281
  %1744 = load i64, ptr %1741, align 4, !noalias !281
  %1745 = load ptr, ptr %1742, align 8, !noalias !281
  %1746 = mul i64 %1743, 4015701072841558310
  %1747 = lshr i64 %1746, 32
  %1748 = xor i64 %1747, %1746
  %1749 = and i64 %1748, %1744
  %1750 = getelementptr i32, ptr %1745, i64 %1749
  %1751 = load i32, ptr %1750, align 4, !noalias !281
  %1752 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1729, 0
  %1753 = insertvalue { ptr, ptr, ptr, i32 } %1752, ptr %1738, 1
  %1754 = insertvalue { ptr, ptr, ptr, i32 } %1753, ptr %1739, 2
  %1755 = insertvalue { ptr, ptr, ptr, i32 } %1754, i32 %1751, 3
  %1756 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1757 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1729) #43
  %1758 = sext i32 %1751 to i64
  %1759 = getelementptr ptr, ptr %1729, i64 %1758
  %1760 = getelementptr i8, ptr %1759, i64 64
  %1761 = load ptr, ptr %1760, align 8
  %1762 = call align 4 ptr %1761({ ptr, ptr, ptr, i32 } %1755, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1763 = call i32 %1762({ ptr, ptr, ptr, i32 } %1755, { ptr, ptr, ptr, i32 } %1755, ptr nonnull align 8 %2) #28
  %1764 = icmp eq i32 %1763, %1720
  br i1 %1764, label %1765, label %1857

1765:                                             ; preds = %1734
  %1766 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1767 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1729)
  %1768 = getelementptr i8, ptr %1759, i64 48
  %1769 = load ptr, ptr %1768, align 8
  %1770 = call align 4 ptr %1769({ ptr, ptr, ptr, i32 } %1755, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1771 = call { ptr, i160 } %1770({ ptr, ptr, ptr, i32 } %1755, { ptr, ptr, ptr, i32 } %1755, ptr nonnull align 8 %2) #28
  %1772 = load ptr, ptr %49, align 8
  %1773 = call i1 %1772({ ptr, i160 } %1771, { ptr, i160 } %74) #28
  br i1 %1773, label %1774, label %1857

1774:                                             ; preds = %1765
  %1775 = load ptr, ptr %36, align 8
  %1776 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1777 = load ptr, ptr %37, align 8
  %1778 = load ptr, ptr %1775, align 8, !alias.scope !284
  %1779 = getelementptr i8, ptr %1778, i64 72
  %1780 = load ptr, ptr %1779, align 8, !alias.scope !284
  %1781 = call { i64, i64 } %1780(ptr nocapture nofree nonnull readonly align 8 %1775) #2, !alias.scope !284
  %1782 = extractvalue { i64, i64 } %1781, 0
  %1783 = extractvalue { i64, i64 } %1781, 1
  %1784 = urem i64 20, %1783
  %1785 = icmp eq i64 %1784, 0
  %1786 = sub i64 %1783, %1784
  %1787 = select i1 %1785, i64 0, i64 %1786
  %1788 = add i64 %1782, 20
  %1789 = add i64 %1788, %1787
  %1790 = load ptr, ptr %1777, align 8, !alias.scope !284
  %1791 = getelementptr i8, ptr %1790, i64 72
  %1792 = load ptr, ptr %1791, align 8, !alias.scope !284
  %1793 = call { i64, i64 } %1792(ptr nocapture nofree nonnull readonly align 8 %1777) #2, !alias.scope !284
  %1794 = extractvalue { i64, i64 } %1793, 0
  %1795 = extractvalue { i64, i64 } %1793, 1
  %1796 = call i64 @llvm.umax.i64(i64 %1783, i64 %1795) #44
  %1797 = call i64 @llvm.umax.i64(i64 %1796, i64 noundef 8) #44, !range !18
  %1798 = urem i64 %1789, %1795
  %1799 = icmp eq i64 %1798, 0
  %1800 = sub i64 %1795, %1798
  %1801 = select i1 %1799, i64 0, i64 %1800
  %1802 = add i64 %1794, %1789
  %1803 = add i64 %1802, %1801
  %1804 = urem i64 %1803, %1797
  %1805 = icmp eq i64 %1804, 0
  %1806 = sub i64 %1797, %1804
  %1807 = select i1 %1805, i64 0, i64 %1806
  %1808 = add i64 %1807, %1803
  %1809 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1808, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1775, ptr %1809, align 8
  %1810 = getelementptr inbounds i8, ptr %1809, i64 8
  store ptr %1777, ptr %1810, align 8
  %1811 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1809)
  %1812 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1813 = load ptr, ptr %1775, align 8
  %1814 = getelementptr i8, ptr %1813, i64 72
  %1815 = load ptr, ptr %1814, align 8
  %1816 = call { i64, i64 } %1815(ptr nocapture nofree nonnull readonly align 8 %1775) #2
  %1817 = extractvalue { i64, i64 } %1816, 1
  %1818 = urem i64 20, %1817
  %1819 = icmp eq i64 %1818, 0
  %1820 = sub i64 %1817, %1818
  %1821 = add i64 %1820, 20
  %1822 = select i1 %1819, i64 20, i64 %1821
  %1823 = getelementptr i8, ptr %1809, i64 %1822
  %1824 = getelementptr i8, ptr %1813, i64 64
  %1825 = load ptr, ptr %1824, align 8
  call void %1825({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %1775, ptr nocapture nofree writeonly %1823) #8
  %1826 = load ptr, ptr %1809, align 8
  %1827 = load ptr, ptr %1826, align 8
  %1828 = getelementptr i8, ptr %1827, i64 72
  %1829 = load ptr, ptr %1828, align 8
  %1830 = call { i64, i64 } %1829(ptr nocapture nofree nonnull readonly align 8 %1826) #2
  %1831 = extractvalue { i64, i64 } %1830, 0
  %1832 = extractvalue { i64, i64 } %1830, 1
  %1833 = urem i64 20, %1832
  %1834 = icmp eq i64 %1833, 0
  %1835 = sub i64 %1832, %1833
  %1836 = select i1 %1834, i64 0, i64 %1835
  %1837 = add i64 %1831, 20
  %1838 = add i64 %1837, %1836
  %1839 = load ptr, ptr %1810, align 8
  %1840 = load ptr, ptr %1839, align 8
  %1841 = getelementptr i8, ptr %1840, i64 72
  %1842 = load ptr, ptr %1841, align 8
  %1843 = call { i64, i64 } %1842(ptr nocapture nofree nonnull readonly align 8 %1839) #2
  %1844 = extractvalue { i64, i64 } %1843, 1
  %1845 = urem i64 %1838, %1844
  %1846 = icmp eq i64 %1845, 0
  %1847 = sub i64 %1844, %1845
  %1848 = select i1 %1846, i64 0, i64 %1847
  %1849 = getelementptr i8, ptr %1809, i64 %1838
  %1850 = getelementptr i8, ptr %1849, i64 %1848
  %1851 = getelementptr i8, ptr %1840, i64 64
  %1852 = load ptr, ptr %1851, align 8
  call void %1852({ ptr, i160 } %1718, ptr nocapture nofree nonnull readonly align 8 %1839, ptr nocapture nofree writeonly %1850) #8
  %1853 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1854 = getelementptr inbounds i8, ptr %1809, i64 16
  store i32 %1720, ptr %1854, align 8
  store ptr @Entry, ptr %1728, align 8
  %1855 = ptrtoint ptr %1809 to i64
  store i64 %1855, ptr %1730, align 4
  %1856 = getelementptr i8, ptr %1728, i64 24
  store i32 10, ptr %1856, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3189

1857:                                             ; preds = %1765, %1734, %1715
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1858 = add i32 %1720, 2127912214
  %1859 = shl i32 %1720, 12
  %1860 = add i32 %1858, %1859
  %1861 = ashr i32 %1860, 19
  %1862 = xor i32 %1860, %1861
  %1863 = xor i32 %1862, -949894596
  %1864 = add i32 %1863, 374761393
  %1865 = shl i32 %1863, 5
  %1866 = add i32 %1864, %1865
  %1867 = add i32 %1866, -744332180
  %1868 = shl i32 %1866, 9
  %1869 = xor i32 %1867, %1868
  %1870 = add i32 %1869, -42973499
  %1871 = shl i32 %1869, 3
  %1872 = add i32 %1870, %1871
  %1873 = ashr i32 %1872, 16
  %1874 = xor i32 %1872, %1873
  %1875 = xor i32 %1874, -1252372727
  %1876 = load i32, ptr %50, align 8
  %1877 = add i32 %1876, -1
  %1878 = and i32 %1877, %1875
  %1879 = load ptr, ptr %54, align 8
  %1880 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1881 = sext i32 %1878 to i64
  %1882 = shl nsw i64 %1881, 5
  %1883 = getelementptr i8, ptr %1879, i64 %1882
  %1884 = load ptr, ptr %1883, align 8
  %1885 = getelementptr i8, ptr %1883, i64 8
  %1886 = icmp ne ptr %1884, @nil_typ
  %1887 = icmp ne ptr %1884, null
  %1888 = and i1 %1886, %1887
  br i1 %1888, label %1889, label %2013

1889:                                             ; preds = %1857
  %1890 = load i64, ptr %1885, align 4
  %1891 = getelementptr i8, ptr %1883, i64 16
  %1892 = load i64, ptr %1891, align 4
  %1893 = inttoptr i64 %1890 to ptr
  %1894 = inttoptr i64 %1892 to ptr
  %1895 = getelementptr i8, ptr %1884, i64 8
  %1896 = getelementptr i8, ptr %1884, i64 16
  %1897 = getelementptr i8, ptr %1884, i64 40
  %1898 = load i64, ptr %1895, align 4, !noalias !287
  %1899 = load i64, ptr %1896, align 4, !noalias !287
  %1900 = load ptr, ptr %1897, align 8, !noalias !287
  %1901 = mul i64 %1898, 4015701072841558310
  %1902 = lshr i64 %1901, 32
  %1903 = xor i64 %1902, %1901
  %1904 = and i64 %1903, %1899
  %1905 = getelementptr i32, ptr %1900, i64 %1904
  %1906 = load i32, ptr %1905, align 4, !noalias !287
  %1907 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1884, 0
  %1908 = insertvalue { ptr, ptr, ptr, i32 } %1907, ptr %1893, 1
  %1909 = insertvalue { ptr, ptr, ptr, i32 } %1908, ptr %1894, 2
  %1910 = insertvalue { ptr, ptr, ptr, i32 } %1909, i32 %1906, 3
  %1911 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1912 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1884) #43
  %1913 = sext i32 %1906 to i64
  %1914 = getelementptr ptr, ptr %1884, i64 %1913
  %1915 = getelementptr i8, ptr %1914, i64 64
  %1916 = load ptr, ptr %1915, align 8
  %1917 = call align 4 ptr %1916({ ptr, ptr, ptr, i32 } %1910, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1918 = call i32 %1917({ ptr, ptr, ptr, i32 } %1910, { ptr, ptr, ptr, i32 } %1910, ptr nonnull align 8 %2) #28
  %1919 = icmp eq i32 %1918, %1720
  br i1 %1919, label %1920, label %2013

1920:                                             ; preds = %1889
  %1921 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1922 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1884)
  %1923 = getelementptr i8, ptr %1914, i64 48
  %1924 = load ptr, ptr %1923, align 8
  %1925 = call align 4 ptr %1924({ ptr, ptr, ptr, i32 } %1910, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1926 = call { ptr, i160 } %1925({ ptr, ptr, ptr, i32 } %1910, { ptr, ptr, ptr, i32 } %1910, ptr nonnull align 8 %2) #28
  %1927 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1928 = load ptr, ptr %49, align 8
  %1929 = call i1 %1928({ ptr, i160 } %1926, { ptr, i160 } %74) #28
  br i1 %1929, label %1930, label %2013

1930:                                             ; preds = %1920
  %1931 = load ptr, ptr %36, align 8
  %1932 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1933 = load ptr, ptr %37, align 8
  %1934 = load ptr, ptr %1931, align 8, !alias.scope !290
  %1935 = getelementptr i8, ptr %1934, i64 72
  %1936 = load ptr, ptr %1935, align 8, !alias.scope !290
  %1937 = call { i64, i64 } %1936(ptr nocapture nofree nonnull readonly align 8 %1931) #2, !alias.scope !290
  %1938 = extractvalue { i64, i64 } %1937, 0
  %1939 = extractvalue { i64, i64 } %1937, 1
  %1940 = urem i64 20, %1939
  %1941 = icmp eq i64 %1940, 0
  %1942 = sub i64 %1939, %1940
  %1943 = select i1 %1941, i64 0, i64 %1942
  %1944 = add i64 %1938, 20
  %1945 = add i64 %1944, %1943
  %1946 = load ptr, ptr %1933, align 8, !alias.scope !290
  %1947 = getelementptr i8, ptr %1946, i64 72
  %1948 = load ptr, ptr %1947, align 8, !alias.scope !290
  %1949 = call { i64, i64 } %1948(ptr nocapture nofree nonnull readonly align 8 %1933) #2, !alias.scope !290
  %1950 = extractvalue { i64, i64 } %1949, 0
  %1951 = extractvalue { i64, i64 } %1949, 1
  %1952 = call i64 @llvm.umax.i64(i64 %1939, i64 %1951) #44
  %1953 = call i64 @llvm.umax.i64(i64 %1952, i64 noundef 8) #44, !range !18
  %1954 = urem i64 %1945, %1951
  %1955 = icmp eq i64 %1954, 0
  %1956 = sub i64 %1951, %1954
  %1957 = select i1 %1955, i64 0, i64 %1956
  %1958 = add i64 %1950, %1945
  %1959 = add i64 %1958, %1957
  %1960 = urem i64 %1959, %1953
  %1961 = icmp eq i64 %1960, 0
  %1962 = sub i64 %1953, %1960
  %1963 = select i1 %1961, i64 0, i64 %1962
  %1964 = add i64 %1963, %1959
  %1965 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1964, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1931, ptr %1965, align 8
  %1966 = getelementptr inbounds i8, ptr %1965, i64 8
  store ptr %1933, ptr %1966, align 8
  %1967 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1965)
  %1968 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1969 = load ptr, ptr %1931, align 8
  %1970 = getelementptr i8, ptr %1969, i64 72
  %1971 = load ptr, ptr %1970, align 8
  %1972 = call { i64, i64 } %1971(ptr nocapture nofree nonnull readonly align 8 %1931) #2
  %1973 = extractvalue { i64, i64 } %1972, 1
  %1974 = urem i64 20, %1973
  %1975 = icmp eq i64 %1974, 0
  %1976 = sub i64 %1973, %1974
  %1977 = add i64 %1976, 20
  %1978 = select i1 %1975, i64 20, i64 %1977
  %1979 = getelementptr i8, ptr %1965, i64 %1978
  %1980 = getelementptr i8, ptr %1969, i64 64
  %1981 = load ptr, ptr %1980, align 8
  call void %1981({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %1931, ptr nocapture nofree writeonly %1979) #8
  %1982 = load ptr, ptr %1965, align 8
  %1983 = load ptr, ptr %1982, align 8
  %1984 = getelementptr i8, ptr %1983, i64 72
  %1985 = load ptr, ptr %1984, align 8
  %1986 = call { i64, i64 } %1985(ptr nocapture nofree nonnull readonly align 8 %1982) #2
  %1987 = extractvalue { i64, i64 } %1986, 0
  %1988 = extractvalue { i64, i64 } %1986, 1
  %1989 = urem i64 20, %1988
  %1990 = icmp eq i64 %1989, 0
  %1991 = sub i64 %1988, %1989
  %1992 = select i1 %1990, i64 0, i64 %1991
  %1993 = add i64 %1987, 20
  %1994 = add i64 %1993, %1992
  %1995 = load ptr, ptr %1966, align 8
  %1996 = load ptr, ptr %1995, align 8
  %1997 = getelementptr i8, ptr %1996, i64 72
  %1998 = load ptr, ptr %1997, align 8
  %1999 = call { i64, i64 } %1998(ptr nocapture nofree nonnull readonly align 8 %1995) #2
  %2000 = extractvalue { i64, i64 } %1999, 1
  %2001 = urem i64 %1994, %2000
  %2002 = icmp eq i64 %2001, 0
  %2003 = sub i64 %2000, %2001
  %2004 = select i1 %2002, i64 0, i64 %2003
  %2005 = getelementptr i8, ptr %1965, i64 %1994
  %2006 = getelementptr i8, ptr %2005, i64 %2004
  %2007 = getelementptr i8, ptr %1996, i64 64
  %2008 = load ptr, ptr %2007, align 8
  call void %2008({ ptr, i160 } %1718, ptr nocapture nofree nonnull readonly align 8 %1995, ptr nocapture nofree writeonly %2006) #8
  %2009 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2010 = getelementptr inbounds i8, ptr %1965, i64 16
  store i32 %1720, ptr %2010, align 8
  store ptr @Entry, ptr %1883, align 8
  %2011 = ptrtoint ptr %1965 to i64
  store i64 %2011, ptr %1885, align 4
  %2012 = getelementptr i8, ptr %1883, i64 24
  store i32 10, ptr %2012, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3189

2013:                                             ; preds = %1920, %1889, %1857
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2014 = load i32, ptr %64, align 4
  %2015 = load i32, ptr %50, align 8
  %2016 = icmp slt i32 %2014, %2015
  br i1 %2016, label %2303, label %2017

2017:                                             ; preds = %2013
  %2018 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2019 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2020 = load ptr, ptr %52, align 8
  %2021 = load ptr, ptr %54, align 8
  %2022 = shl i32 %2015, 1
  %2023 = call i32 @llvm.smax.i32(i32 %2022, i32 noundef 16) #43
  store i32 %2023, ptr %50, align 8
  %2024 = zext nneg i32 %2023 to i64
  %2025 = shl nuw nsw i64 %2024, 5
  %2026 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2025, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2026, ptr %52, align 8
  %2027 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2025, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2027, ptr %54, align 8
  store i32 0, ptr %64, align 4
  %2028 = icmp sgt i32 %2015, 0
  br i1 %2028, label %2029, label %2303

2029:                                             ; preds = %2017
  %2030 = zext nneg i32 %2015 to i64
  br label %2031

2031:                                             ; preds = %2164, %2029
  %2032 = phi i64 [ 0, %2029 ], [ %2165, %2164 ]
  %2033 = shl nuw nsw i64 %2032, 5
  %2034 = getelementptr i8, ptr %2020, i64 %2033
  %2035 = load ptr, ptr %2034, align 8
  %2036 = icmp ne ptr %2035, @nil_typ
  %2037 = icmp ne ptr %2035, null
  %2038 = and i1 %2036, %2037
  br i1 %2038, label %2039, label %2164

2039:                                             ; preds = %2031
  %2040 = getelementptr i8, ptr %2034, i64 8
  %2041 = load i64, ptr %2040, align 4
  %2042 = getelementptr i8, ptr %2034, i64 16
  %2043 = load i64, ptr %2042, align 4
  %2044 = getelementptr i8, ptr %2035, i64 8
  %2045 = getelementptr i8, ptr %2035, i64 16
  %2046 = getelementptr i8, ptr %2035, i64 40
  %2047 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2048 = load i64, ptr %2044, align 4, !noalias !25
  %2049 = load i64, ptr %2045, align 4, !noalias !25
  %2050 = load ptr, ptr %2046, align 8, !noalias !25
  %2051 = mul i64 %2048, 4015701072841558310
  %2052 = lshr i64 %2051, 32
  %2053 = xor i64 %2052, %2051
  %2054 = and i64 %2053, %2049
  %2055 = getelementptr i32, ptr %2050, i64 %2054
  %2056 = load i32, ptr %2055, align 4, !noalias !293
  %2057 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2058 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2059 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2060

2060:                                             ; preds = %2139, %2039
  %2061 = phi i64 [ %2043, %2039 ], [ %2141, %2139 ]
  %2062 = phi i64 [ %2041, %2039 ], [ %2140, %2139 ]
  %2063 = phi i32 [ 0, %2039 ], [ %2076, %2139 ]
  %2064 = phi i1 [ true, %2039 ], [ %2155, %2139 ]
  %2065 = phi ptr [ %2035, %2039 ], [ %2142, %2139 ]
  %2066 = phi i32 [ %2056, %2039 ], [ %2154, %2139 ]
  %2067 = inttoptr i64 %2061 to ptr
  %2068 = inttoptr i64 %2062 to ptr
  %2069 = sext i32 %2066 to i64
  %2070 = getelementptr ptr, ptr %2065, i64 %2069
  %2071 = getelementptr i8, ptr %2070, i64 64
  %2072 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2065, 0
  %2073 = insertvalue { ptr, ptr, ptr, i32 } %2072, ptr %2068, 1
  %2074 = insertvalue { ptr, ptr, ptr, i32 } %2073, ptr %2067, 2
  %2075 = insertvalue { ptr, ptr, ptr, i32 } %2074, i32 %2066, 3
  %2076 = add nuw nsw i32 %2063, 1
  %2077 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2065)
  %2078 = load ptr, ptr %2071, align 8
  %2079 = call align 4 ptr %2078({ ptr, ptr, ptr, i32 } %2075, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2080 = call i32 %2079({ ptr, ptr, ptr, i32 } %2075, { ptr, ptr, ptr, i32 } %2075, ptr nonnull align 8 %2) #28
  br i1 %2064, label %2081, label %2101

2081:                                             ; preds = %2060
  %2082 = load i32, ptr %50, align 8
  %2083 = add i32 %2082, -1
  %2084 = and i32 %2083, %2080
  %2085 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2086 = load ptr, ptr %52, align 8
  %2087 = sext i32 %2084 to i64
  %2088 = shl nsw i64 %2087, 5
  %2089 = getelementptr i8, ptr %2086, i64 %2088
  %2090 = load ptr, ptr %2089, align 8
  %2091 = getelementptr i8, ptr %2089, i64 8
  %2092 = load i160, ptr %2091, align 4
  store ptr %2065, ptr %2089, align 8
  store i64 %2062, ptr %2091, align 4
  %2093 = getelementptr i8, ptr %2089, i64 16
  store i64 %2061, ptr %2093, align 4
  %2094 = getelementptr i8, ptr %2089, i64 24
  store i32 %2066, ptr %2094, align 4
  %2095 = icmp ne ptr %2090, @nil_typ
  %2096 = icmp ne ptr %2090, null
  %2097 = and i1 %2095, %2096
  %2098 = trunc i160 %2092 to i64
  %2099 = lshr i160 %2092, 64
  %2100 = trunc i160 %2099 to i64
  br i1 %2097, label %2139, label %2159

2101:                                             ; preds = %2060
  %2102 = add i32 %2080, 2127912214
  %2103 = shl i32 %2080, 12
  %2104 = add i32 %2102, %2103
  %2105 = ashr i32 %2104, 19
  %2106 = xor i32 %2104, %2105
  %2107 = xor i32 %2106, -949894596
  %2108 = add i32 %2107, 374761393
  %2109 = shl i32 %2107, 5
  %2110 = add i32 %2108, %2109
  %2111 = add i32 %2110, -744332180
  %2112 = shl i32 %2110, 9
  %2113 = xor i32 %2111, %2112
  %2114 = add i32 %2113, -42973499
  %2115 = shl i32 %2113, 3
  %2116 = add i32 %2114, %2115
  %2117 = ashr i32 %2116, 16
  %2118 = xor i32 %2116, %2117
  %2119 = xor i32 %2118, -1252372727
  %2120 = load i32, ptr %50, align 8
  %2121 = add i32 %2120, -1
  %2122 = and i32 %2121, %2119
  %2123 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2124 = load ptr, ptr %54, align 8
  %2125 = sext i32 %2122 to i64
  %2126 = shl nsw i64 %2125, 5
  %2127 = getelementptr i8, ptr %2124, i64 %2126
  %2128 = load ptr, ptr %2127, align 8
  %2129 = getelementptr i8, ptr %2127, i64 8
  %2130 = load i160, ptr %2129, align 4
  store ptr %2065, ptr %2127, align 8
  store i64 %2062, ptr %2129, align 4
  %2131 = getelementptr i8, ptr %2127, i64 16
  store i64 %2061, ptr %2131, align 4
  %2132 = getelementptr i8, ptr %2127, i64 24
  store i32 %2066, ptr %2132, align 4
  %2133 = icmp ne ptr %2128, @nil_typ
  %2134 = icmp ne ptr %2128, null
  %2135 = and i1 %2133, %2134
  %2136 = trunc i160 %2130 to i64
  %2137 = lshr i160 %2130, 64
  %2138 = trunc i160 %2137 to i64
  br i1 %2135, label %2139, label %2159

2139:                                             ; preds = %2101, %2081
  %2140 = phi i64 [ %2098, %2081 ], [ %2136, %2101 ]
  %2141 = phi i64 [ %2100, %2081 ], [ %2138, %2101 ]
  %2142 = phi ptr [ %2090, %2081 ], [ %2128, %2101 ]
  %2143 = getelementptr i8, ptr %2142, i64 8
  %2144 = getelementptr i8, ptr %2142, i64 16
  %2145 = getelementptr i8, ptr %2142, i64 40
  %2146 = load i64, ptr %2143, align 4
  %2147 = load i64, ptr %2144, align 4
  %2148 = load ptr, ptr %2145, align 8
  %2149 = mul i64 %2146, 4015701072841558310
  %2150 = lshr i64 %2149, 32
  %2151 = xor i64 %2150, %2149
  %2152 = and i64 %2151, %2147
  %2153 = getelementptr i32, ptr %2148, i64 %2152
  %2154 = load i32, ptr %2153, align 4
  %2155 = xor i1 %2064, true
  %2156 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2157 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2158 = icmp eq i32 %2076, 100
  br i1 %2158, label %2163, label %2060

2159:                                             ; preds = %2101, %2081
  %2160 = load i32, ptr %64, align 4
  %2161 = add i32 %2160, 1
  %2162 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2161, ptr %64, align 4
  br label %2163

2163:                                             ; preds = %2159, %2139
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2164

2164:                                             ; preds = %2163, %2031
  %2165 = add nuw nsw i64 %2032, 1
  %2166 = icmp eq i64 %2165, %2030
  br i1 %2166, label %2167, label %2031

2167:                                             ; preds = %2300, %2164
  %2168 = phi i64 [ %2301, %2300 ], [ 0, %2164 ]
  %2169 = shl nuw nsw i64 %2168, 5
  %2170 = getelementptr i8, ptr %2021, i64 %2169
  %2171 = load ptr, ptr %2170, align 8
  %2172 = icmp ne ptr %2171, @nil_typ
  %2173 = icmp ne ptr %2171, null
  %2174 = and i1 %2172, %2173
  br i1 %2174, label %2175, label %2300

2175:                                             ; preds = %2167
  %2176 = getelementptr i8, ptr %2170, i64 8
  %2177 = load i64, ptr %2176, align 4
  %2178 = getelementptr i8, ptr %2170, i64 16
  %2179 = load i64, ptr %2178, align 4
  %2180 = getelementptr i8, ptr %2171, i64 8
  %2181 = getelementptr i8, ptr %2171, i64 16
  %2182 = getelementptr i8, ptr %2171, i64 40
  %2183 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2184 = load i64, ptr %2180, align 4, !noalias !25
  %2185 = load i64, ptr %2181, align 4, !noalias !25
  %2186 = load ptr, ptr %2182, align 8, !noalias !25
  %2187 = mul i64 %2184, 4015701072841558310
  %2188 = lshr i64 %2187, 32
  %2189 = xor i64 %2188, %2187
  %2190 = and i64 %2189, %2185
  %2191 = getelementptr i32, ptr %2186, i64 %2190
  %2192 = load i32, ptr %2191, align 4, !noalias !296
  %2193 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2194 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2195 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2196

2196:                                             ; preds = %2275, %2175
  %2197 = phi i64 [ %2179, %2175 ], [ %2277, %2275 ]
  %2198 = phi i64 [ %2177, %2175 ], [ %2276, %2275 ]
  %2199 = phi i32 [ 0, %2175 ], [ %2212, %2275 ]
  %2200 = phi i1 [ true, %2175 ], [ %2291, %2275 ]
  %2201 = phi ptr [ %2171, %2175 ], [ %2278, %2275 ]
  %2202 = phi i32 [ %2192, %2175 ], [ %2290, %2275 ]
  %2203 = inttoptr i64 %2197 to ptr
  %2204 = inttoptr i64 %2198 to ptr
  %2205 = sext i32 %2202 to i64
  %2206 = getelementptr ptr, ptr %2201, i64 %2205
  %2207 = getelementptr i8, ptr %2206, i64 64
  %2208 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2201, 0
  %2209 = insertvalue { ptr, ptr, ptr, i32 } %2208, ptr %2204, 1
  %2210 = insertvalue { ptr, ptr, ptr, i32 } %2209, ptr %2203, 2
  %2211 = insertvalue { ptr, ptr, ptr, i32 } %2210, i32 %2202, 3
  %2212 = add nuw nsw i32 %2199, 1
  %2213 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2201)
  %2214 = load ptr, ptr %2207, align 8
  %2215 = call align 4 ptr %2214({ ptr, ptr, ptr, i32 } %2211, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2216 = call i32 %2215({ ptr, ptr, ptr, i32 } %2211, { ptr, ptr, ptr, i32 } %2211, ptr nonnull align 8 %2) #28
  br i1 %2200, label %2217, label %2237

2217:                                             ; preds = %2196
  %2218 = load i32, ptr %50, align 8
  %2219 = add i32 %2218, -1
  %2220 = and i32 %2219, %2216
  %2221 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2222 = load ptr, ptr %52, align 8
  %2223 = sext i32 %2220 to i64
  %2224 = shl nsw i64 %2223, 5
  %2225 = getelementptr i8, ptr %2222, i64 %2224
  %2226 = load ptr, ptr %2225, align 8
  %2227 = getelementptr i8, ptr %2225, i64 8
  %2228 = load i160, ptr %2227, align 4
  store ptr %2201, ptr %2225, align 8
  store i64 %2198, ptr %2227, align 4
  %2229 = getelementptr i8, ptr %2225, i64 16
  store i64 %2197, ptr %2229, align 4
  %2230 = getelementptr i8, ptr %2225, i64 24
  store i32 %2202, ptr %2230, align 4
  %2231 = icmp ne ptr %2226, @nil_typ
  %2232 = icmp ne ptr %2226, null
  %2233 = and i1 %2231, %2232
  %2234 = trunc i160 %2228 to i64
  %2235 = lshr i160 %2228, 64
  %2236 = trunc i160 %2235 to i64
  br i1 %2233, label %2275, label %2295

2237:                                             ; preds = %2196
  %2238 = add i32 %2216, 2127912214
  %2239 = shl i32 %2216, 12
  %2240 = add i32 %2238, %2239
  %2241 = ashr i32 %2240, 19
  %2242 = xor i32 %2240, %2241
  %2243 = xor i32 %2242, -949894596
  %2244 = add i32 %2243, 374761393
  %2245 = shl i32 %2243, 5
  %2246 = add i32 %2244, %2245
  %2247 = add i32 %2246, -744332180
  %2248 = shl i32 %2246, 9
  %2249 = xor i32 %2247, %2248
  %2250 = add i32 %2249, -42973499
  %2251 = shl i32 %2249, 3
  %2252 = add i32 %2250, %2251
  %2253 = ashr i32 %2252, 16
  %2254 = xor i32 %2252, %2253
  %2255 = xor i32 %2254, -1252372727
  %2256 = load i32, ptr %50, align 8
  %2257 = add i32 %2256, -1
  %2258 = and i32 %2257, %2255
  %2259 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2260 = load ptr, ptr %54, align 8
  %2261 = sext i32 %2258 to i64
  %2262 = shl nsw i64 %2261, 5
  %2263 = getelementptr i8, ptr %2260, i64 %2262
  %2264 = load ptr, ptr %2263, align 8
  %2265 = getelementptr i8, ptr %2263, i64 8
  %2266 = load i160, ptr %2265, align 4
  store ptr %2201, ptr %2263, align 8
  store i64 %2198, ptr %2265, align 4
  %2267 = getelementptr i8, ptr %2263, i64 16
  store i64 %2197, ptr %2267, align 4
  %2268 = getelementptr i8, ptr %2263, i64 24
  store i32 %2202, ptr %2268, align 4
  %2269 = icmp ne ptr %2264, @nil_typ
  %2270 = icmp ne ptr %2264, null
  %2271 = and i1 %2269, %2270
  %2272 = trunc i160 %2266 to i64
  %2273 = lshr i160 %2266, 64
  %2274 = trunc i160 %2273 to i64
  br i1 %2271, label %2275, label %2295

2275:                                             ; preds = %2237, %2217
  %2276 = phi i64 [ %2234, %2217 ], [ %2272, %2237 ]
  %2277 = phi i64 [ %2236, %2217 ], [ %2274, %2237 ]
  %2278 = phi ptr [ %2226, %2217 ], [ %2264, %2237 ]
  %2279 = getelementptr i8, ptr %2278, i64 8
  %2280 = getelementptr i8, ptr %2278, i64 16
  %2281 = getelementptr i8, ptr %2278, i64 40
  %2282 = load i64, ptr %2279, align 4
  %2283 = load i64, ptr %2280, align 4
  %2284 = load ptr, ptr %2281, align 8
  %2285 = mul i64 %2282, 4015701072841558310
  %2286 = lshr i64 %2285, 32
  %2287 = xor i64 %2286, %2285
  %2288 = and i64 %2287, %2283
  %2289 = getelementptr i32, ptr %2284, i64 %2288
  %2290 = load i32, ptr %2289, align 4
  %2291 = xor i1 %2200, true
  %2292 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2293 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2294 = icmp eq i32 %2212, 100
  br i1 %2294, label %2299, label %2196

2295:                                             ; preds = %2237, %2217
  %2296 = load i32, ptr %64, align 4
  %2297 = add i32 %2296, 1
  %2298 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2297, ptr %64, align 4
  br label %2299

2299:                                             ; preds = %2295, %2275
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2300

2300:                                             ; preds = %2299, %2167
  %2301 = add nuw nsw i64 %2168, 1
  %2302 = icmp eq i64 %2301, %2030
  br i1 %2302, label %2303, label %2167

2303:                                             ; preds = %2300, %2017, %2013
  %2304 = load ptr, ptr %36, align 8
  %2305 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2306 = load ptr, ptr %37, align 8
  %2307 = load ptr, ptr %2304, align 8
  %2308 = getelementptr i8, ptr %2307, i64 72
  %2309 = load ptr, ptr %2308, align 8
  %2310 = call { i64, i64 } %2309(ptr nocapture nofree nonnull readonly align 8 %2304) #2
  %2311 = extractvalue { i64, i64 } %2310, 0
  %2312 = extractvalue { i64, i64 } %2310, 1
  %2313 = urem i64 20, %2312
  %2314 = icmp eq i64 %2313, 0
  %2315 = sub i64 %2312, %2313
  %2316 = select i1 %2314, i64 0, i64 %2315
  %2317 = add i64 %2311, 20
  %2318 = add i64 %2317, %2316
  %2319 = load ptr, ptr %2306, align 8
  %2320 = getelementptr i8, ptr %2319, i64 72
  %2321 = load ptr, ptr %2320, align 8
  %2322 = call { i64, i64 } %2321(ptr nocapture nofree nonnull readonly align 8 %2306) #2
  %2323 = extractvalue { i64, i64 } %2322, 0
  %2324 = extractvalue { i64, i64 } %2322, 1
  %2325 = call i64 @llvm.umax.i64(i64 %2312, i64 %2324) #44
  %2326 = call i64 @llvm.umax.i64(i64 %2325, i64 noundef 8) #44, !range !18
  %2327 = urem i64 %2318, %2324
  %2328 = icmp eq i64 %2327, 0
  %2329 = sub i64 %2324, %2327
  %2330 = select i1 %2328, i64 0, i64 %2329
  %2331 = add i64 %2323, %2318
  %2332 = add i64 %2331, %2330
  %2333 = urem i64 %2332, %2326
  %2334 = icmp eq i64 %2333, 0
  %2335 = sub i64 %2326, %2333
  %2336 = select i1 %2334, i64 0, i64 %2335
  %2337 = add i64 %2336, %2332
  %2338 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %2337, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2304, ptr %2338, align 8
  %2339 = getelementptr inbounds i8, ptr %2338, i64 8
  store ptr %2306, ptr %2339, align 8
  %2340 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %2338)
  %2341 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2342 = load ptr, ptr %2304, align 8
  %2343 = getelementptr i8, ptr %2342, i64 72
  %2344 = load ptr, ptr %2343, align 8
  %2345 = call { i64, i64 } %2344(ptr nocapture nofree nonnull readonly align 8 %2304) #2
  %2346 = extractvalue { i64, i64 } %2345, 1
  %2347 = urem i64 20, %2346
  %2348 = icmp eq i64 %2347, 0
  %2349 = sub i64 %2346, %2347
  %2350 = add i64 %2349, 20
  %2351 = select i1 %2348, i64 20, i64 %2350
  %2352 = getelementptr i8, ptr %2338, i64 %2351
  %2353 = getelementptr i8, ptr %2342, i64 64
  %2354 = load ptr, ptr %2353, align 8
  call void %2354({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %2304, ptr nocapture nofree writeonly %2352) #8
  %2355 = load ptr, ptr %2338, align 8
  %2356 = load ptr, ptr %2355, align 8
  %2357 = getelementptr i8, ptr %2356, i64 72
  %2358 = load ptr, ptr %2357, align 8
  %2359 = call { i64, i64 } %2358(ptr nocapture nofree nonnull readonly align 8 %2355) #2
  %2360 = extractvalue { i64, i64 } %2359, 0
  %2361 = extractvalue { i64, i64 } %2359, 1
  %2362 = urem i64 20, %2361
  %2363 = icmp eq i64 %2362, 0
  %2364 = sub i64 %2361, %2362
  %2365 = select i1 %2363, i64 0, i64 %2364
  %2366 = add i64 %2360, 20
  %2367 = add i64 %2366, %2365
  %2368 = load ptr, ptr %2339, align 8
  %2369 = load ptr, ptr %2368, align 8
  %2370 = getelementptr i8, ptr %2369, i64 72
  %2371 = load ptr, ptr %2370, align 8
  %2372 = call { i64, i64 } %2371(ptr nocapture nofree nonnull readonly align 8 %2368) #2
  %2373 = extractvalue { i64, i64 } %2372, 1
  %2374 = urem i64 %2367, %2373
  %2375 = icmp eq i64 %2374, 0
  %2376 = sub i64 %2373, %2374
  %2377 = select i1 %2375, i64 0, i64 %2376
  %2378 = getelementptr i8, ptr %2338, i64 %2367
  %2379 = getelementptr i8, ptr %2378, i64 %2377
  %2380 = getelementptr i8, ptr %2369, i64 64
  %2381 = load ptr, ptr %2380, align 8
  call void %2381({ ptr, i160 } %1718, ptr nocapture nofree nonnull readonly align 8 %2368, ptr nocapture nofree writeonly %2379) #8
  %2382 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2383 = getelementptr inbounds i8, ptr %2338, i64 16
  store i32 %1720, ptr %2383, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2384 = ptrtoint ptr %2338 to i64
  %2385 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2386 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2387 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2388

2388:                                             ; preds = %2467, %2303
  %2389 = phi i64 [ undef, %2303 ], [ %2469, %2467 ]
  %2390 = phi i64 [ %2384, %2303 ], [ %2468, %2467 ]
  %2391 = phi i32 [ 0, %2303 ], [ %2404, %2467 ]
  %2392 = phi i1 [ true, %2303 ], [ %2485, %2467 ]
  %2393 = phi ptr [ @Entry, %2303 ], [ %2470, %2467 ]
  %2394 = phi ptr [ %2338, %2303 ], [ %2471, %2467 ]
  %2395 = phi ptr [ undef, %2303 ], [ %2472, %2467 ]
  %2396 = phi i32 [ 10, %2303 ], [ %2484, %2467 ]
  %2397 = sext i32 %2396 to i64
  %2398 = getelementptr ptr, ptr %2393, i64 %2397
  %2399 = getelementptr i8, ptr %2398, i64 64
  %2400 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2393, 0
  %2401 = insertvalue { ptr, ptr, ptr, i32 } %2400, ptr %2394, 1
  %2402 = insertvalue { ptr, ptr, ptr, i32 } %2401, ptr %2395, 2
  %2403 = insertvalue { ptr, ptr, ptr, i32 } %2402, i32 %2396, 3
  %2404 = add nuw nsw i32 %2391, 1
  %2405 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2393)
  %2406 = load ptr, ptr %2399, align 8
  %2407 = call align 4 ptr %2406({ ptr, ptr, ptr, i32 } %2403, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2408 = call i32 %2407({ ptr, ptr, ptr, i32 } %2403, { ptr, ptr, ptr, i32 } %2403, ptr nonnull align 8 %2) #28
  br i1 %2392, label %2409, label %2429

2409:                                             ; preds = %2388
  %2410 = load i32, ptr %50, align 8
  %2411 = add i32 %2410, -1
  %2412 = and i32 %2411, %2408
  %2413 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2414 = load ptr, ptr %52, align 8
  %2415 = sext i32 %2412 to i64
  %2416 = shl nsw i64 %2415, 5
  %2417 = getelementptr i8, ptr %2414, i64 %2416
  %2418 = load ptr, ptr %2417, align 8
  %2419 = getelementptr i8, ptr %2417, i64 8
  %2420 = load i160, ptr %2419, align 4
  store ptr %2393, ptr %2417, align 8
  store i64 %2390, ptr %2419, align 4
  %2421 = getelementptr i8, ptr %2417, i64 16
  store i64 %2389, ptr %2421, align 4
  %2422 = getelementptr i8, ptr %2417, i64 24
  store i32 %2396, ptr %2422, align 4
  %2423 = icmp ne ptr %2418, @nil_typ
  %2424 = icmp ne ptr %2418, null
  %2425 = and i1 %2423, %2424
  %2426 = trunc i160 %2420 to i64
  %2427 = lshr i160 %2420, 64
  %2428 = trunc i160 %2427 to i64
  br i1 %2425, label %2467, label %2489

2429:                                             ; preds = %2388
  %2430 = add i32 %2408, 2127912214
  %2431 = shl i32 %2408, 12
  %2432 = add i32 %2430, %2431
  %2433 = ashr i32 %2432, 19
  %2434 = xor i32 %2432, %2433
  %2435 = xor i32 %2434, -949894596
  %2436 = add i32 %2435, 374761393
  %2437 = shl i32 %2435, 5
  %2438 = add i32 %2436, %2437
  %2439 = add i32 %2438, -744332180
  %2440 = shl i32 %2438, 9
  %2441 = xor i32 %2439, %2440
  %2442 = add i32 %2441, -42973499
  %2443 = shl i32 %2441, 3
  %2444 = add i32 %2442, %2443
  %2445 = ashr i32 %2444, 16
  %2446 = xor i32 %2444, %2445
  %2447 = xor i32 %2446, -1252372727
  %2448 = load i32, ptr %50, align 8
  %2449 = add i32 %2448, -1
  %2450 = and i32 %2449, %2447
  %2451 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2452 = load ptr, ptr %54, align 8
  %2453 = sext i32 %2450 to i64
  %2454 = shl nsw i64 %2453, 5
  %2455 = getelementptr i8, ptr %2452, i64 %2454
  %2456 = load ptr, ptr %2455, align 8
  %2457 = getelementptr i8, ptr %2455, i64 8
  %2458 = load i160, ptr %2457, align 4
  store ptr %2393, ptr %2455, align 8
  store i64 %2390, ptr %2457, align 4
  %2459 = getelementptr i8, ptr %2455, i64 16
  store i64 %2389, ptr %2459, align 4
  %2460 = getelementptr i8, ptr %2455, i64 24
  store i32 %2396, ptr %2460, align 4
  %2461 = icmp ne ptr %2456, @nil_typ
  %2462 = icmp ne ptr %2456, null
  %2463 = and i1 %2461, %2462
  %2464 = trunc i160 %2458 to i64
  %2465 = lshr i160 %2458, 64
  %2466 = trunc i160 %2465 to i64
  br i1 %2463, label %2467, label %2489

2467:                                             ; preds = %2429, %2409
  %2468 = phi i64 [ %2426, %2409 ], [ %2464, %2429 ]
  %2469 = phi i64 [ %2428, %2409 ], [ %2466, %2429 ]
  %2470 = phi ptr [ %2418, %2409 ], [ %2456, %2429 ]
  %2471 = inttoptr i64 %2468 to ptr
  %2472 = inttoptr i64 %2469 to ptr
  %2473 = getelementptr i8, ptr %2470, i64 8
  %2474 = getelementptr i8, ptr %2470, i64 16
  %2475 = getelementptr i8, ptr %2470, i64 40
  %2476 = load i64, ptr %2473, align 4
  %2477 = load i64, ptr %2474, align 4
  %2478 = load ptr, ptr %2475, align 8
  %2479 = mul i64 %2476, 4015701072841558310
  %2480 = lshr i64 %2479, 32
  %2481 = xor i64 %2480, %2479
  %2482 = and i64 %2481, %2477
  %2483 = getelementptr i32, ptr %2478, i64 %2482
  %2484 = load i32, ptr %2483, align 4
  %2485 = xor i1 %2392, true
  %2486 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2487 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2488 = icmp eq i32 %2404, 100
  br i1 %2488, label %2493, label %2388

2489:                                             ; preds = %2429, %2409
  %2490 = load i32, ptr %64, align 4
  %2491 = add i32 %2490, 1
  %2492 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2491, ptr %64, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3189

2493:                                             ; preds = %2467
  %2494 = getelementptr i8, ptr %2470, i64 8
  %2495 = getelementptr i8, ptr %2470, i64 16
  %2496 = getelementptr i8, ptr %2470, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2497 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2498 = load ptr, ptr %52, align 8
  %2499 = load ptr, ptr %54, align 8
  %2500 = load i32, ptr %50, align 8
  %2501 = shl i32 %2500, 1
  %2502 = call i32 @llvm.smax.i32(i32 %2501, i32 noundef 16) #43
  store i32 %2502, ptr %50, align 8
  %2503 = zext nneg i32 %2502 to i64
  %2504 = shl nuw nsw i64 %2503, 5
  %2505 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2504, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2505, ptr %52, align 8
  %2506 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2504, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2506, ptr %54, align 8
  store i32 0, ptr %64, align 4
  %2507 = icmp sgt i32 %2500, 0
  br i1 %2507, label %2508, label %2782

2508:                                             ; preds = %2493
  %2509 = zext nneg i32 %2500 to i64
  br label %2510

2510:                                             ; preds = %2643, %2508
  %2511 = phi i64 [ 0, %2508 ], [ %2644, %2643 ]
  %2512 = shl nuw nsw i64 %2511, 5
  %2513 = getelementptr i8, ptr %2498, i64 %2512
  %2514 = load ptr, ptr %2513, align 8
  %2515 = icmp ne ptr %2514, @nil_typ
  %2516 = icmp ne ptr %2514, null
  %2517 = and i1 %2515, %2516
  br i1 %2517, label %2518, label %2643

2518:                                             ; preds = %2510
  %2519 = getelementptr i8, ptr %2513, i64 8
  %2520 = load i64, ptr %2519, align 4
  %2521 = getelementptr i8, ptr %2513, i64 16
  %2522 = load i64, ptr %2521, align 4
  %2523 = getelementptr i8, ptr %2514, i64 8
  %2524 = getelementptr i8, ptr %2514, i64 16
  %2525 = getelementptr i8, ptr %2514, i64 40
  %2526 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2527 = load i64, ptr %2523, align 4, !noalias !25
  %2528 = load i64, ptr %2524, align 4, !noalias !25
  %2529 = load ptr, ptr %2525, align 8, !noalias !25
  %2530 = mul i64 %2527, 4015701072841558310
  %2531 = lshr i64 %2530, 32
  %2532 = xor i64 %2531, %2530
  %2533 = and i64 %2532, %2528
  %2534 = getelementptr i32, ptr %2529, i64 %2533
  %2535 = load i32, ptr %2534, align 4, !noalias !299
  %2536 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2537 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2538 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2539

2539:                                             ; preds = %2618, %2518
  %2540 = phi i64 [ %2522, %2518 ], [ %2620, %2618 ]
  %2541 = phi i64 [ %2520, %2518 ], [ %2619, %2618 ]
  %2542 = phi i32 [ 0, %2518 ], [ %2555, %2618 ]
  %2543 = phi i1 [ true, %2518 ], [ %2634, %2618 ]
  %2544 = phi ptr [ %2514, %2518 ], [ %2621, %2618 ]
  %2545 = phi i32 [ %2535, %2518 ], [ %2633, %2618 ]
  %2546 = inttoptr i64 %2540 to ptr
  %2547 = inttoptr i64 %2541 to ptr
  %2548 = sext i32 %2545 to i64
  %2549 = getelementptr ptr, ptr %2544, i64 %2548
  %2550 = getelementptr i8, ptr %2549, i64 64
  %2551 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2544, 0
  %2552 = insertvalue { ptr, ptr, ptr, i32 } %2551, ptr %2547, 1
  %2553 = insertvalue { ptr, ptr, ptr, i32 } %2552, ptr %2546, 2
  %2554 = insertvalue { ptr, ptr, ptr, i32 } %2553, i32 %2545, 3
  %2555 = add nuw nsw i32 %2542, 1
  %2556 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2544)
  %2557 = load ptr, ptr %2550, align 8
  %2558 = call align 4 ptr %2557({ ptr, ptr, ptr, i32 } %2554, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2559 = call i32 %2558({ ptr, ptr, ptr, i32 } %2554, { ptr, ptr, ptr, i32 } %2554, ptr nonnull align 8 %2) #28
  br i1 %2543, label %2560, label %2580

2560:                                             ; preds = %2539
  %2561 = load i32, ptr %50, align 8
  %2562 = add i32 %2561, -1
  %2563 = and i32 %2562, %2559
  %2564 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2565 = load ptr, ptr %52, align 8
  %2566 = sext i32 %2563 to i64
  %2567 = shl nsw i64 %2566, 5
  %2568 = getelementptr i8, ptr %2565, i64 %2567
  %2569 = load ptr, ptr %2568, align 8
  %2570 = getelementptr i8, ptr %2568, i64 8
  %2571 = load i160, ptr %2570, align 4
  store ptr %2544, ptr %2568, align 8
  store i64 %2541, ptr %2570, align 4
  %2572 = getelementptr i8, ptr %2568, i64 16
  store i64 %2540, ptr %2572, align 4
  %2573 = getelementptr i8, ptr %2568, i64 24
  store i32 %2545, ptr %2573, align 4
  %2574 = icmp ne ptr %2569, @nil_typ
  %2575 = icmp ne ptr %2569, null
  %2576 = and i1 %2574, %2575
  %2577 = trunc i160 %2571 to i64
  %2578 = lshr i160 %2571, 64
  %2579 = trunc i160 %2578 to i64
  br i1 %2576, label %2618, label %2638

2580:                                             ; preds = %2539
  %2581 = add i32 %2559, 2127912214
  %2582 = shl i32 %2559, 12
  %2583 = add i32 %2581, %2582
  %2584 = ashr i32 %2583, 19
  %2585 = xor i32 %2583, %2584
  %2586 = xor i32 %2585, -949894596
  %2587 = add i32 %2586, 374761393
  %2588 = shl i32 %2586, 5
  %2589 = add i32 %2587, %2588
  %2590 = add i32 %2589, -744332180
  %2591 = shl i32 %2589, 9
  %2592 = xor i32 %2590, %2591
  %2593 = add i32 %2592, -42973499
  %2594 = shl i32 %2592, 3
  %2595 = add i32 %2593, %2594
  %2596 = ashr i32 %2595, 16
  %2597 = xor i32 %2595, %2596
  %2598 = xor i32 %2597, -1252372727
  %2599 = load i32, ptr %50, align 8
  %2600 = add i32 %2599, -1
  %2601 = and i32 %2600, %2598
  %2602 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2603 = load ptr, ptr %54, align 8
  %2604 = sext i32 %2601 to i64
  %2605 = shl nsw i64 %2604, 5
  %2606 = getelementptr i8, ptr %2603, i64 %2605
  %2607 = load ptr, ptr %2606, align 8
  %2608 = getelementptr i8, ptr %2606, i64 8
  %2609 = load i160, ptr %2608, align 4
  store ptr %2544, ptr %2606, align 8
  store i64 %2541, ptr %2608, align 4
  %2610 = getelementptr i8, ptr %2606, i64 16
  store i64 %2540, ptr %2610, align 4
  %2611 = getelementptr i8, ptr %2606, i64 24
  store i32 %2545, ptr %2611, align 4
  %2612 = icmp ne ptr %2607, @nil_typ
  %2613 = icmp ne ptr %2607, null
  %2614 = and i1 %2612, %2613
  %2615 = trunc i160 %2609 to i64
  %2616 = lshr i160 %2609, 64
  %2617 = trunc i160 %2616 to i64
  br i1 %2614, label %2618, label %2638

2618:                                             ; preds = %2580, %2560
  %2619 = phi i64 [ %2577, %2560 ], [ %2615, %2580 ]
  %2620 = phi i64 [ %2579, %2560 ], [ %2617, %2580 ]
  %2621 = phi ptr [ %2569, %2560 ], [ %2607, %2580 ]
  %2622 = getelementptr i8, ptr %2621, i64 8
  %2623 = getelementptr i8, ptr %2621, i64 16
  %2624 = getelementptr i8, ptr %2621, i64 40
  %2625 = load i64, ptr %2622, align 4
  %2626 = load i64, ptr %2623, align 4
  %2627 = load ptr, ptr %2624, align 8
  %2628 = mul i64 %2625, 4015701072841558310
  %2629 = lshr i64 %2628, 32
  %2630 = xor i64 %2629, %2628
  %2631 = and i64 %2630, %2626
  %2632 = getelementptr i32, ptr %2627, i64 %2631
  %2633 = load i32, ptr %2632, align 4
  %2634 = xor i1 %2543, true
  %2635 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2636 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2637 = icmp eq i32 %2555, 100
  br i1 %2637, label %2642, label %2539

2638:                                             ; preds = %2580, %2560
  %2639 = load i32, ptr %64, align 4
  %2640 = add i32 %2639, 1
  %2641 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2640, ptr %64, align 4
  br label %2642

2642:                                             ; preds = %2638, %2618
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2643

2643:                                             ; preds = %2642, %2510
  %2644 = add nuw nsw i64 %2511, 1
  %2645 = icmp eq i64 %2644, %2509
  br i1 %2645, label %2646, label %2510

2646:                                             ; preds = %2779, %2643
  %2647 = phi i64 [ %2780, %2779 ], [ 0, %2643 ]
  %2648 = shl nuw nsw i64 %2647, 5
  %2649 = getelementptr i8, ptr %2499, i64 %2648
  %2650 = load ptr, ptr %2649, align 8
  %2651 = icmp ne ptr %2650, @nil_typ
  %2652 = icmp ne ptr %2650, null
  %2653 = and i1 %2651, %2652
  br i1 %2653, label %2654, label %2779

2654:                                             ; preds = %2646
  %2655 = getelementptr i8, ptr %2649, i64 8
  %2656 = load i64, ptr %2655, align 4
  %2657 = getelementptr i8, ptr %2649, i64 16
  %2658 = load i64, ptr %2657, align 4
  %2659 = getelementptr i8, ptr %2650, i64 8
  %2660 = getelementptr i8, ptr %2650, i64 16
  %2661 = getelementptr i8, ptr %2650, i64 40
  %2662 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2663 = load i64, ptr %2659, align 4, !noalias !25
  %2664 = load i64, ptr %2660, align 4, !noalias !25
  %2665 = load ptr, ptr %2661, align 8, !noalias !25
  %2666 = mul i64 %2663, 4015701072841558310
  %2667 = lshr i64 %2666, 32
  %2668 = xor i64 %2667, %2666
  %2669 = and i64 %2668, %2664
  %2670 = getelementptr i32, ptr %2665, i64 %2669
  %2671 = load i32, ptr %2670, align 4, !noalias !302
  %2672 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2673 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2674 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2675

2675:                                             ; preds = %2754, %2654
  %2676 = phi i64 [ %2658, %2654 ], [ %2756, %2754 ]
  %2677 = phi i64 [ %2656, %2654 ], [ %2755, %2754 ]
  %2678 = phi i32 [ 0, %2654 ], [ %2691, %2754 ]
  %2679 = phi i1 [ true, %2654 ], [ %2770, %2754 ]
  %2680 = phi ptr [ %2650, %2654 ], [ %2757, %2754 ]
  %2681 = phi i32 [ %2671, %2654 ], [ %2769, %2754 ]
  %2682 = inttoptr i64 %2676 to ptr
  %2683 = inttoptr i64 %2677 to ptr
  %2684 = sext i32 %2681 to i64
  %2685 = getelementptr ptr, ptr %2680, i64 %2684
  %2686 = getelementptr i8, ptr %2685, i64 64
  %2687 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2680, 0
  %2688 = insertvalue { ptr, ptr, ptr, i32 } %2687, ptr %2683, 1
  %2689 = insertvalue { ptr, ptr, ptr, i32 } %2688, ptr %2682, 2
  %2690 = insertvalue { ptr, ptr, ptr, i32 } %2689, i32 %2681, 3
  %2691 = add nuw nsw i32 %2678, 1
  %2692 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2680)
  %2693 = load ptr, ptr %2686, align 8
  %2694 = call align 4 ptr %2693({ ptr, ptr, ptr, i32 } %2690, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2695 = call i32 %2694({ ptr, ptr, ptr, i32 } %2690, { ptr, ptr, ptr, i32 } %2690, ptr nonnull align 8 %2) #28
  br i1 %2679, label %2696, label %2716

2696:                                             ; preds = %2675
  %2697 = load i32, ptr %50, align 8
  %2698 = add i32 %2697, -1
  %2699 = and i32 %2698, %2695
  %2700 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2701 = load ptr, ptr %52, align 8
  %2702 = sext i32 %2699 to i64
  %2703 = shl nsw i64 %2702, 5
  %2704 = getelementptr i8, ptr %2701, i64 %2703
  %2705 = load ptr, ptr %2704, align 8
  %2706 = getelementptr i8, ptr %2704, i64 8
  %2707 = load i160, ptr %2706, align 4
  store ptr %2680, ptr %2704, align 8
  store i64 %2677, ptr %2706, align 4
  %2708 = getelementptr i8, ptr %2704, i64 16
  store i64 %2676, ptr %2708, align 4
  %2709 = getelementptr i8, ptr %2704, i64 24
  store i32 %2681, ptr %2709, align 4
  %2710 = icmp ne ptr %2705, @nil_typ
  %2711 = icmp ne ptr %2705, null
  %2712 = and i1 %2710, %2711
  %2713 = trunc i160 %2707 to i64
  %2714 = lshr i160 %2707, 64
  %2715 = trunc i160 %2714 to i64
  br i1 %2712, label %2754, label %2774

2716:                                             ; preds = %2675
  %2717 = add i32 %2695, 2127912214
  %2718 = shl i32 %2695, 12
  %2719 = add i32 %2717, %2718
  %2720 = ashr i32 %2719, 19
  %2721 = xor i32 %2719, %2720
  %2722 = xor i32 %2721, -949894596
  %2723 = add i32 %2722, 374761393
  %2724 = shl i32 %2722, 5
  %2725 = add i32 %2723, %2724
  %2726 = add i32 %2725, -744332180
  %2727 = shl i32 %2725, 9
  %2728 = xor i32 %2726, %2727
  %2729 = add i32 %2728, -42973499
  %2730 = shl i32 %2728, 3
  %2731 = add i32 %2729, %2730
  %2732 = ashr i32 %2731, 16
  %2733 = xor i32 %2731, %2732
  %2734 = xor i32 %2733, -1252372727
  %2735 = load i32, ptr %50, align 8
  %2736 = add i32 %2735, -1
  %2737 = and i32 %2736, %2734
  %2738 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2739 = load ptr, ptr %54, align 8
  %2740 = sext i32 %2737 to i64
  %2741 = shl nsw i64 %2740, 5
  %2742 = getelementptr i8, ptr %2739, i64 %2741
  %2743 = load ptr, ptr %2742, align 8
  %2744 = getelementptr i8, ptr %2742, i64 8
  %2745 = load i160, ptr %2744, align 4
  store ptr %2680, ptr %2742, align 8
  store i64 %2677, ptr %2744, align 4
  %2746 = getelementptr i8, ptr %2742, i64 16
  store i64 %2676, ptr %2746, align 4
  %2747 = getelementptr i8, ptr %2742, i64 24
  store i32 %2681, ptr %2747, align 4
  %2748 = icmp ne ptr %2743, @nil_typ
  %2749 = icmp ne ptr %2743, null
  %2750 = and i1 %2748, %2749
  %2751 = trunc i160 %2745 to i64
  %2752 = lshr i160 %2745, 64
  %2753 = trunc i160 %2752 to i64
  br i1 %2750, label %2754, label %2774

2754:                                             ; preds = %2716, %2696
  %2755 = phi i64 [ %2713, %2696 ], [ %2751, %2716 ]
  %2756 = phi i64 [ %2715, %2696 ], [ %2753, %2716 ]
  %2757 = phi ptr [ %2705, %2696 ], [ %2743, %2716 ]
  %2758 = getelementptr i8, ptr %2757, i64 8
  %2759 = getelementptr i8, ptr %2757, i64 16
  %2760 = getelementptr i8, ptr %2757, i64 40
  %2761 = load i64, ptr %2758, align 4
  %2762 = load i64, ptr %2759, align 4
  %2763 = load ptr, ptr %2760, align 8
  %2764 = mul i64 %2761, 4015701072841558310
  %2765 = lshr i64 %2764, 32
  %2766 = xor i64 %2765, %2764
  %2767 = and i64 %2766, %2762
  %2768 = getelementptr i32, ptr %2763, i64 %2767
  %2769 = load i32, ptr %2768, align 4
  %2770 = xor i1 %2679, true
  %2771 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2772 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2773 = icmp eq i32 %2691, 100
  br i1 %2773, label %2778, label %2675

2774:                                             ; preds = %2716, %2696
  %2775 = load i32, ptr %64, align 4
  %2776 = add i32 %2775, 1
  %2777 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2776, ptr %64, align 4
  br label %2778

2778:                                             ; preds = %2774, %2754
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2779

2779:                                             ; preds = %2778, %2646
  %2780 = add nuw nsw i64 %2647, 1
  %2781 = icmp eq i64 %2780, %2509
  br i1 %2781, label %2782, label %2646

2782:                                             ; preds = %2779, %2493
  %2783 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2784 = load i64, ptr %2494, align 4, !noalias !25
  %2785 = load i64, ptr %2495, align 4, !noalias !25
  %2786 = load ptr, ptr %2496, align 8, !noalias !25
  %2787 = mul i64 %2784, 4015701072841558310
  %2788 = lshr i64 %2787, 32
  %2789 = xor i64 %2788, %2787
  %2790 = and i64 %2789, %2785
  %2791 = getelementptr i32, ptr %2786, i64 %2790
  %2792 = load i32, ptr %2791, align 4, !noalias !305
  %2793 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2794 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2795 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2796

2796:                                             ; preds = %2875, %2782
  %2797 = phi i64 [ %2469, %2782 ], [ %2877, %2875 ]
  %2798 = phi i64 [ %2468, %2782 ], [ %2876, %2875 ]
  %2799 = phi i32 [ 0, %2782 ], [ %2812, %2875 ]
  %2800 = phi i1 [ true, %2782 ], [ %2891, %2875 ]
  %2801 = phi ptr [ %2470, %2782 ], [ %2878, %2875 ]
  %2802 = phi i32 [ %2792, %2782 ], [ %2890, %2875 ]
  %2803 = inttoptr i64 %2797 to ptr
  %2804 = inttoptr i64 %2798 to ptr
  %2805 = sext i32 %2802 to i64
  %2806 = getelementptr ptr, ptr %2801, i64 %2805
  %2807 = getelementptr i8, ptr %2806, i64 64
  %2808 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2801, 0
  %2809 = insertvalue { ptr, ptr, ptr, i32 } %2808, ptr %2804, 1
  %2810 = insertvalue { ptr, ptr, ptr, i32 } %2809, ptr %2803, 2
  %2811 = insertvalue { ptr, ptr, ptr, i32 } %2810, i32 %2802, 3
  %2812 = add nuw nsw i32 %2799, 1
  %2813 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2801)
  %2814 = load ptr, ptr %2807, align 8
  %2815 = call align 4 ptr %2814({ ptr, ptr, ptr, i32 } %2811, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2816 = call i32 %2815({ ptr, ptr, ptr, i32 } %2811, { ptr, ptr, ptr, i32 } %2811, ptr nonnull align 8 %2) #28
  br i1 %2800, label %2817, label %2837

2817:                                             ; preds = %2796
  %2818 = load i32, ptr %50, align 8
  %2819 = add i32 %2818, -1
  %2820 = and i32 %2819, %2816
  %2821 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2822 = load ptr, ptr %52, align 8
  %2823 = sext i32 %2820 to i64
  %2824 = shl nsw i64 %2823, 5
  %2825 = getelementptr i8, ptr %2822, i64 %2824
  %2826 = load ptr, ptr %2825, align 8
  %2827 = getelementptr i8, ptr %2825, i64 8
  %2828 = load i160, ptr %2827, align 4
  store ptr %2801, ptr %2825, align 8
  store i64 %2798, ptr %2827, align 4
  %2829 = getelementptr i8, ptr %2825, i64 16
  store i64 %2797, ptr %2829, align 4
  %2830 = getelementptr i8, ptr %2825, i64 24
  store i32 %2802, ptr %2830, align 4
  %2831 = icmp ne ptr %2826, @nil_typ
  %2832 = icmp ne ptr %2826, null
  %2833 = and i1 %2831, %2832
  %2834 = trunc i160 %2828 to i64
  %2835 = lshr i160 %2828, 64
  %2836 = trunc i160 %2835 to i64
  br i1 %2833, label %2875, label %2895

2837:                                             ; preds = %2796
  %2838 = add i32 %2816, 2127912214
  %2839 = shl i32 %2816, 12
  %2840 = add i32 %2838, %2839
  %2841 = ashr i32 %2840, 19
  %2842 = xor i32 %2840, %2841
  %2843 = xor i32 %2842, -949894596
  %2844 = add i32 %2843, 374761393
  %2845 = shl i32 %2843, 5
  %2846 = add i32 %2844, %2845
  %2847 = add i32 %2846, -744332180
  %2848 = shl i32 %2846, 9
  %2849 = xor i32 %2847, %2848
  %2850 = add i32 %2849, -42973499
  %2851 = shl i32 %2849, 3
  %2852 = add i32 %2850, %2851
  %2853 = ashr i32 %2852, 16
  %2854 = xor i32 %2852, %2853
  %2855 = xor i32 %2854, -1252372727
  %2856 = load i32, ptr %50, align 8
  %2857 = add i32 %2856, -1
  %2858 = and i32 %2857, %2855
  %2859 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2860 = load ptr, ptr %54, align 8
  %2861 = sext i32 %2858 to i64
  %2862 = shl nsw i64 %2861, 5
  %2863 = getelementptr i8, ptr %2860, i64 %2862
  %2864 = load ptr, ptr %2863, align 8
  %2865 = getelementptr i8, ptr %2863, i64 8
  %2866 = load i160, ptr %2865, align 4
  store ptr %2801, ptr %2863, align 8
  store i64 %2798, ptr %2865, align 4
  %2867 = getelementptr i8, ptr %2863, i64 16
  store i64 %2797, ptr %2867, align 4
  %2868 = getelementptr i8, ptr %2863, i64 24
  store i32 %2802, ptr %2868, align 4
  %2869 = icmp ne ptr %2864, @nil_typ
  %2870 = icmp ne ptr %2864, null
  %2871 = and i1 %2869, %2870
  %2872 = trunc i160 %2866 to i64
  %2873 = lshr i160 %2866, 64
  %2874 = trunc i160 %2873 to i64
  br i1 %2871, label %2875, label %2895

2875:                                             ; preds = %2837, %2817
  %2876 = phi i64 [ %2834, %2817 ], [ %2872, %2837 ]
  %2877 = phi i64 [ %2836, %2817 ], [ %2874, %2837 ]
  %2878 = phi ptr [ %2826, %2817 ], [ %2864, %2837 ]
  %2879 = getelementptr i8, ptr %2878, i64 8
  %2880 = getelementptr i8, ptr %2878, i64 16
  %2881 = getelementptr i8, ptr %2878, i64 40
  %2882 = load i64, ptr %2879, align 4
  %2883 = load i64, ptr %2880, align 4
  %2884 = load ptr, ptr %2881, align 8
  %2885 = mul i64 %2882, 4015701072841558310
  %2886 = lshr i64 %2885, 32
  %2887 = xor i64 %2886, %2885
  %2888 = and i64 %2887, %2883
  %2889 = getelementptr i32, ptr %2884, i64 %2888
  %2890 = load i32, ptr %2889, align 4
  %2891 = xor i1 %2800, true
  %2892 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2893 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2894 = icmp eq i32 %2812, 100
  br i1 %2894, label %2899, label %2796

2895:                                             ; preds = %2837, %2817
  %2896 = load i32, ptr %64, align 4
  %2897 = add i32 %2896, 1
  %2898 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2897, ptr %64, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3189

2899:                                             ; preds = %2875
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2900 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2901 = load ptr, ptr %52, align 8
  %2902 = load ptr, ptr %54, align 8
  %2903 = load i32, ptr %50, align 8
  %2904 = shl i32 %2903, 1
  %2905 = call i32 @llvm.smax.i32(i32 %2904, i32 noundef 16) #43
  store i32 %2905, ptr %50, align 8
  %2906 = zext nneg i32 %2905 to i64
  %2907 = shl nuw nsw i64 %2906, 5
  %2908 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2907, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2908, ptr %52, align 8
  %2909 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2907, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2909, ptr %54, align 8
  store i32 0, ptr %64, align 4
  %2910 = icmp sgt i32 %2903, 0
  br i1 %2910, label %2913, label %2911

2911:                                             ; preds = %2899
  %2912 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %3189

2913:                                             ; preds = %2899
  %2914 = zext nneg i32 %2903 to i64
  br label %2915

2915:                                             ; preds = %3048, %2913
  %2916 = phi i64 [ 0, %2913 ], [ %3049, %3048 ]
  %2917 = shl nuw nsw i64 %2916, 5
  %2918 = getelementptr i8, ptr %2901, i64 %2917
  %2919 = load ptr, ptr %2918, align 8
  %2920 = icmp ne ptr %2919, @nil_typ
  %2921 = icmp ne ptr %2919, null
  %2922 = and i1 %2920, %2921
  br i1 %2922, label %2923, label %3048

2923:                                             ; preds = %2915
  %2924 = getelementptr i8, ptr %2918, i64 8
  %2925 = load i64, ptr %2924, align 4
  %2926 = getelementptr i8, ptr %2918, i64 16
  %2927 = load i64, ptr %2926, align 4
  %2928 = getelementptr i8, ptr %2919, i64 8
  %2929 = getelementptr i8, ptr %2919, i64 16
  %2930 = getelementptr i8, ptr %2919, i64 40
  %2931 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2932 = load i64, ptr %2928, align 4, !noalias !25
  %2933 = load i64, ptr %2929, align 4, !noalias !25
  %2934 = load ptr, ptr %2930, align 8, !noalias !25
  %2935 = mul i64 %2932, 4015701072841558310
  %2936 = lshr i64 %2935, 32
  %2937 = xor i64 %2936, %2935
  %2938 = and i64 %2937, %2933
  %2939 = getelementptr i32, ptr %2934, i64 %2938
  %2940 = load i32, ptr %2939, align 4, !noalias !308
  %2941 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2942 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2943 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2944

2944:                                             ; preds = %3023, %2923
  %2945 = phi i64 [ %2927, %2923 ], [ %3025, %3023 ]
  %2946 = phi i64 [ %2925, %2923 ], [ %3024, %3023 ]
  %2947 = phi i32 [ 0, %2923 ], [ %2960, %3023 ]
  %2948 = phi i1 [ true, %2923 ], [ %3039, %3023 ]
  %2949 = phi ptr [ %2919, %2923 ], [ %3026, %3023 ]
  %2950 = phi i32 [ %2940, %2923 ], [ %3038, %3023 ]
  %2951 = inttoptr i64 %2945 to ptr
  %2952 = inttoptr i64 %2946 to ptr
  %2953 = sext i32 %2950 to i64
  %2954 = getelementptr ptr, ptr %2949, i64 %2953
  %2955 = getelementptr i8, ptr %2954, i64 64
  %2956 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2949, 0
  %2957 = insertvalue { ptr, ptr, ptr, i32 } %2956, ptr %2952, 1
  %2958 = insertvalue { ptr, ptr, ptr, i32 } %2957, ptr %2951, 2
  %2959 = insertvalue { ptr, ptr, ptr, i32 } %2958, i32 %2950, 3
  %2960 = add nuw nsw i32 %2947, 1
  %2961 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2949)
  %2962 = load ptr, ptr %2955, align 8
  %2963 = call align 4 ptr %2962({ ptr, ptr, ptr, i32 } %2959, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2964 = call i32 %2963({ ptr, ptr, ptr, i32 } %2959, { ptr, ptr, ptr, i32 } %2959, ptr nonnull align 8 %2) #28
  br i1 %2948, label %2965, label %2985

2965:                                             ; preds = %2944
  %2966 = load i32, ptr %50, align 8
  %2967 = add i32 %2966, -1
  %2968 = and i32 %2967, %2964
  %2969 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2970 = load ptr, ptr %52, align 8
  %2971 = sext i32 %2968 to i64
  %2972 = shl nsw i64 %2971, 5
  %2973 = getelementptr i8, ptr %2970, i64 %2972
  %2974 = load ptr, ptr %2973, align 8
  %2975 = getelementptr i8, ptr %2973, i64 8
  %2976 = load i160, ptr %2975, align 4
  store ptr %2949, ptr %2973, align 8
  store i64 %2946, ptr %2975, align 4
  %2977 = getelementptr i8, ptr %2973, i64 16
  store i64 %2945, ptr %2977, align 4
  %2978 = getelementptr i8, ptr %2973, i64 24
  store i32 %2950, ptr %2978, align 4
  %2979 = icmp ne ptr %2974, @nil_typ
  %2980 = icmp ne ptr %2974, null
  %2981 = and i1 %2979, %2980
  %2982 = trunc i160 %2976 to i64
  %2983 = lshr i160 %2976, 64
  %2984 = trunc i160 %2983 to i64
  br i1 %2981, label %3023, label %3043

2985:                                             ; preds = %2944
  %2986 = add i32 %2964, 2127912214
  %2987 = shl i32 %2964, 12
  %2988 = add i32 %2986, %2987
  %2989 = ashr i32 %2988, 19
  %2990 = xor i32 %2988, %2989
  %2991 = xor i32 %2990, -949894596
  %2992 = add i32 %2991, 374761393
  %2993 = shl i32 %2991, 5
  %2994 = add i32 %2992, %2993
  %2995 = add i32 %2994, -744332180
  %2996 = shl i32 %2994, 9
  %2997 = xor i32 %2995, %2996
  %2998 = add i32 %2997, -42973499
  %2999 = shl i32 %2997, 3
  %3000 = add i32 %2998, %2999
  %3001 = ashr i32 %3000, 16
  %3002 = xor i32 %3000, %3001
  %3003 = xor i32 %3002, -1252372727
  %3004 = load i32, ptr %50, align 8
  %3005 = add i32 %3004, -1
  %3006 = and i32 %3005, %3003
  %3007 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3008 = load ptr, ptr %54, align 8
  %3009 = sext i32 %3006 to i64
  %3010 = shl nsw i64 %3009, 5
  %3011 = getelementptr i8, ptr %3008, i64 %3010
  %3012 = load ptr, ptr %3011, align 8
  %3013 = getelementptr i8, ptr %3011, i64 8
  %3014 = load i160, ptr %3013, align 4
  store ptr %2949, ptr %3011, align 8
  store i64 %2946, ptr %3013, align 4
  %3015 = getelementptr i8, ptr %3011, i64 16
  store i64 %2945, ptr %3015, align 4
  %3016 = getelementptr i8, ptr %3011, i64 24
  store i32 %2950, ptr %3016, align 4
  %3017 = icmp ne ptr %3012, @nil_typ
  %3018 = icmp ne ptr %3012, null
  %3019 = and i1 %3017, %3018
  %3020 = trunc i160 %3014 to i64
  %3021 = lshr i160 %3014, 64
  %3022 = trunc i160 %3021 to i64
  br i1 %3019, label %3023, label %3043

3023:                                             ; preds = %2985, %2965
  %3024 = phi i64 [ %2982, %2965 ], [ %3020, %2985 ]
  %3025 = phi i64 [ %2984, %2965 ], [ %3022, %2985 ]
  %3026 = phi ptr [ %2974, %2965 ], [ %3012, %2985 ]
  %3027 = getelementptr i8, ptr %3026, i64 8
  %3028 = getelementptr i8, ptr %3026, i64 16
  %3029 = getelementptr i8, ptr %3026, i64 40
  %3030 = load i64, ptr %3027, align 4
  %3031 = load i64, ptr %3028, align 4
  %3032 = load ptr, ptr %3029, align 8
  %3033 = mul i64 %3030, 4015701072841558310
  %3034 = lshr i64 %3033, 32
  %3035 = xor i64 %3034, %3033
  %3036 = and i64 %3035, %3031
  %3037 = getelementptr i32, ptr %3032, i64 %3036
  %3038 = load i32, ptr %3037, align 4
  %3039 = xor i1 %2948, true
  %3040 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3041 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3042 = icmp eq i32 %2960, 100
  br i1 %3042, label %3047, label %2944

3043:                                             ; preds = %2985, %2965
  %3044 = load i32, ptr %64, align 4
  %3045 = add i32 %3044, 1
  %3046 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %3045, ptr %64, align 4
  br label %3047

3047:                                             ; preds = %3043, %3023
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3048

3048:                                             ; preds = %3047, %2915
  %3049 = add nuw nsw i64 %2916, 1
  %3050 = icmp eq i64 %3049, %2914
  br i1 %3050, label %3051, label %2915

3051:                                             ; preds = %3048
  %3052 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %3053

3053:                                             ; preds = %3186, %3051
  %3054 = phi i64 [ 0, %3051 ], [ %3187, %3186 ]
  %3055 = shl nuw nsw i64 %3054, 5
  %3056 = getelementptr i8, ptr %2902, i64 %3055
  %3057 = load ptr, ptr %3056, align 8
  %3058 = icmp ne ptr %3057, @nil_typ
  %3059 = icmp ne ptr %3057, null
  %3060 = and i1 %3058, %3059
  br i1 %3060, label %3061, label %3186

3061:                                             ; preds = %3053
  %3062 = getelementptr i8, ptr %3056, i64 8
  %3063 = load i64, ptr %3062, align 4
  %3064 = getelementptr i8, ptr %3056, i64 16
  %3065 = load i64, ptr %3064, align 4
  %3066 = getelementptr i8, ptr %3057, i64 8
  %3067 = getelementptr i8, ptr %3057, i64 16
  %3068 = getelementptr i8, ptr %3057, i64 40
  %3069 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3070 = load i64, ptr %3066, align 4, !noalias !25
  %3071 = load i64, ptr %3067, align 4, !noalias !25
  %3072 = load ptr, ptr %3068, align 8, !noalias !25
  %3073 = mul i64 %3070, 4015701072841558310
  %3074 = lshr i64 %3073, 32
  %3075 = xor i64 %3074, %3073
  %3076 = and i64 %3075, %3071
  %3077 = getelementptr i32, ptr %3072, i64 %3076
  %3078 = load i32, ptr %3077, align 4, !noalias !311
  %3079 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3080 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3081 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3082

3082:                                             ; preds = %3161, %3061
  %3083 = phi i64 [ %3065, %3061 ], [ %3163, %3161 ]
  %3084 = phi i64 [ %3063, %3061 ], [ %3162, %3161 ]
  %3085 = phi i32 [ 0, %3061 ], [ %3098, %3161 ]
  %3086 = phi i1 [ true, %3061 ], [ %3177, %3161 ]
  %3087 = phi ptr [ %3057, %3061 ], [ %3164, %3161 ]
  %3088 = phi i32 [ %3078, %3061 ], [ %3176, %3161 ]
  %3089 = inttoptr i64 %3083 to ptr
  %3090 = inttoptr i64 %3084 to ptr
  %3091 = sext i32 %3088 to i64
  %3092 = getelementptr ptr, ptr %3087, i64 %3091
  %3093 = getelementptr i8, ptr %3092, i64 64
  %3094 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3087, 0
  %3095 = insertvalue { ptr, ptr, ptr, i32 } %3094, ptr %3090, 1
  %3096 = insertvalue { ptr, ptr, ptr, i32 } %3095, ptr %3089, 2
  %3097 = insertvalue { ptr, ptr, ptr, i32 } %3096, i32 %3088, 3
  %3098 = add nuw nsw i32 %3085, 1
  %3099 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %3087)
  %3100 = load ptr, ptr %3093, align 8
  %3101 = call align 4 ptr %3100({ ptr, ptr, ptr, i32 } %3097, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3102 = call i32 %3101({ ptr, ptr, ptr, i32 } %3097, { ptr, ptr, ptr, i32 } %3097, ptr nonnull align 8 %2) #28
  br i1 %3086, label %3103, label %3123

3103:                                             ; preds = %3082
  %3104 = load i32, ptr %50, align 8
  %3105 = add i32 %3104, -1
  %3106 = and i32 %3105, %3102
  %3107 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3108 = load ptr, ptr %52, align 8
  %3109 = sext i32 %3106 to i64
  %3110 = shl nsw i64 %3109, 5
  %3111 = getelementptr i8, ptr %3108, i64 %3110
  %3112 = load ptr, ptr %3111, align 8
  %3113 = getelementptr i8, ptr %3111, i64 8
  %3114 = load i160, ptr %3113, align 4
  store ptr %3087, ptr %3111, align 8
  store i64 %3084, ptr %3113, align 4
  %3115 = getelementptr i8, ptr %3111, i64 16
  store i64 %3083, ptr %3115, align 4
  %3116 = getelementptr i8, ptr %3111, i64 24
  store i32 %3088, ptr %3116, align 4
  %3117 = icmp ne ptr %3112, @nil_typ
  %3118 = icmp ne ptr %3112, null
  %3119 = and i1 %3117, %3118
  %3120 = trunc i160 %3114 to i64
  %3121 = lshr i160 %3114, 64
  %3122 = trunc i160 %3121 to i64
  br i1 %3119, label %3161, label %3181

3123:                                             ; preds = %3082
  %3124 = add i32 %3102, 2127912214
  %3125 = shl i32 %3102, 12
  %3126 = add i32 %3124, %3125
  %3127 = ashr i32 %3126, 19
  %3128 = xor i32 %3126, %3127
  %3129 = xor i32 %3128, -949894596
  %3130 = add i32 %3129, 374761393
  %3131 = shl i32 %3129, 5
  %3132 = add i32 %3130, %3131
  %3133 = add i32 %3132, -744332180
  %3134 = shl i32 %3132, 9
  %3135 = xor i32 %3133, %3134
  %3136 = add i32 %3135, -42973499
  %3137 = shl i32 %3135, 3
  %3138 = add i32 %3136, %3137
  %3139 = ashr i32 %3138, 16
  %3140 = xor i32 %3138, %3139
  %3141 = xor i32 %3140, -1252372727
  %3142 = load i32, ptr %50, align 8
  %3143 = add i32 %3142, -1
  %3144 = and i32 %3143, %3141
  %3145 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3146 = load ptr, ptr %54, align 8
  %3147 = sext i32 %3144 to i64
  %3148 = shl nsw i64 %3147, 5
  %3149 = getelementptr i8, ptr %3146, i64 %3148
  %3150 = load ptr, ptr %3149, align 8
  %3151 = getelementptr i8, ptr %3149, i64 8
  %3152 = load i160, ptr %3151, align 4
  store ptr %3087, ptr %3149, align 8
  store i64 %3084, ptr %3151, align 4
  %3153 = getelementptr i8, ptr %3149, i64 16
  store i64 %3083, ptr %3153, align 4
  %3154 = getelementptr i8, ptr %3149, i64 24
  store i32 %3088, ptr %3154, align 4
  %3155 = icmp ne ptr %3150, @nil_typ
  %3156 = icmp ne ptr %3150, null
  %3157 = and i1 %3155, %3156
  %3158 = trunc i160 %3152 to i64
  %3159 = lshr i160 %3152, 64
  %3160 = trunc i160 %3159 to i64
  br i1 %3157, label %3161, label %3181

3161:                                             ; preds = %3123, %3103
  %3162 = phi i64 [ %3120, %3103 ], [ %3158, %3123 ]
  %3163 = phi i64 [ %3122, %3103 ], [ %3160, %3123 ]
  %3164 = phi ptr [ %3112, %3103 ], [ %3150, %3123 ]
  %3165 = getelementptr i8, ptr %3164, i64 8
  %3166 = getelementptr i8, ptr %3164, i64 16
  %3167 = getelementptr i8, ptr %3164, i64 40
  %3168 = load i64, ptr %3165, align 4
  %3169 = load i64, ptr %3166, align 4
  %3170 = load ptr, ptr %3167, align 8
  %3171 = mul i64 %3168, 4015701072841558310
  %3172 = lshr i64 %3171, 32
  %3173 = xor i64 %3172, %3171
  %3174 = and i64 %3173, %3169
  %3175 = getelementptr i32, ptr %3170, i64 %3174
  %3176 = load i32, ptr %3175, align 4
  %3177 = xor i1 %3086, true
  %3178 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3179 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3180 = icmp eq i32 %3098, 100
  br i1 %3180, label %3185, label %3082

3181:                                             ; preds = %3123, %3103
  %3182 = load i32, ptr %64, align 4
  %3183 = add i32 %3182, 1
  %3184 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %3183, ptr %64, align 4
  br label %3185

3185:                                             ; preds = %3181, %3161
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3186

3186:                                             ; preds = %3185, %3053
  %3187 = add nuw nsw i64 %3054, 1
  %3188 = icmp eq i64 %3187, %2914
  br i1 %3188, label %3189, label %3053

3189:                                             ; preds = %3186, %2911, %2895, %2489, %1930, %1774
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3190 = add nsw i32 %69, 1
  br label %3191

3191:                                             ; preds = %3189, %233
  %3192 = phi i32 [ %3190, %3189 ], [ %69, %233 ]
  %3193 = add nuw nsw i32 %68, 1
  %3194 = icmp slt i32 %3192, %0
  %3195 = icmp slt i32 %3193, %56
  %3196 = select i1 %3194, i1 %3195, i1 false
  br i1 %3196, label %66, label %3197

3197:                                             ; preds = %3191, %1
  %3198 = sext i32 %0 to i64
  %3199 = shl nsw i64 %3198, 2
  %3200 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %3199, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %3201 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #43
  %3202 = mul i32 %0, 20
  %3203 = icmp sgt i32 %3202, 0
  %3204 = and i1 %57, %3203
  br i1 %3204, label %3205, label %3393

3205:                                             ; preds = %3197
  %3206 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3207 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3208 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  br label %3209

3209:                                             ; preds = %3387, %3205
  %3210 = phi i32 [ 987, %3205 ], [ %3215, %3387 ]
  %3211 = phi i32 [ 0, %3205 ], [ %3388, %3387 ]
  %3212 = phi i32 [ 0, %3205 ], [ %3389, %3387 ]
  %3213 = mul i32 %3210, 1103515245
  %3214 = add i32 %3213, 12345
  %3215 = and i32 %3214, 2147483647
  %3216 = zext nneg i32 %3215 to i160
  %3217 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %3216, 1
  %3218 = load ptr, ptr %48, align 8
  %3219 = call i32 %3218({ ptr, i160 } %3217) #28
  %3220 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %3221 = load i32, ptr %50, align 8
  %3222 = add i32 %3221, -1
  %3223 = and i32 %3222, %3219
  %3224 = load ptr, ptr %52, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3225 = sext i32 %3223 to i64
  %3226 = shl nsw i64 %3225, 5
  %3227 = getelementptr i8, ptr %3224, i64 %3226
  %3228 = load ptr, ptr %3227, align 8
  %3229 = icmp ne ptr %3228, @nil_typ
  %3230 = icmp ne ptr %3228, null
  %3231 = and i1 %3229, %3230
  br i1 %3231, label %3232, label %3274

3232:                                             ; preds = %3209
  %3233 = getelementptr i8, ptr %3227, i64 8
  %3234 = load i64, ptr %3233, align 4
  %3235 = getelementptr i8, ptr %3227, i64 16
  %3236 = load i64, ptr %3235, align 4
  %3237 = inttoptr i64 %3234 to ptr
  %3238 = inttoptr i64 %3236 to ptr
  %3239 = getelementptr i8, ptr %3228, i64 8
  %3240 = getelementptr i8, ptr %3228, i64 16
  %3241 = getelementptr i8, ptr %3228, i64 40
  %3242 = load i64, ptr %3239, align 4, !noalias !314
  %3243 = load i64, ptr %3240, align 4, !noalias !314
  %3244 = load ptr, ptr %3241, align 8, !noalias !314
  %3245 = mul i64 %3242, 4015701072841558310
  %3246 = lshr i64 %3245, 32
  %3247 = xor i64 %3246, %3245
  %3248 = and i64 %3247, %3243
  %3249 = getelementptr i32, ptr %3244, i64 %3248
  %3250 = load i32, ptr %3249, align 4, !noalias !314
  %3251 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3228, 0
  %3252 = insertvalue { ptr, ptr, ptr, i32 } %3251, ptr %3237, 1
  %3253 = insertvalue { ptr, ptr, ptr, i32 } %3252, ptr %3238, 2
  %3254 = insertvalue { ptr, ptr, ptr, i32 } %3253, i32 %3250, 3
  %3255 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3256 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3228) #43
  %3257 = sext i32 %3250 to i64
  %3258 = getelementptr ptr, ptr %3228, i64 %3257
  %3259 = getelementptr i8, ptr %3258, i64 64
  %3260 = load ptr, ptr %3259, align 8
  %3261 = call align 4 ptr %3260({ ptr, ptr, ptr, i32 } %3254, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3262 = call i32 %3261({ ptr, ptr, ptr, i32 } %3254, { ptr, ptr, ptr, i32 } %3254, ptr nonnull align 8 %2) #28
  %3263 = icmp eq i32 %3262, %3219
  br i1 %3263, label %3264, label %3274

3264:                                             ; preds = %3232
  %3265 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3266 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3228)
  %3267 = getelementptr i8, ptr %3258, i64 48
  %3268 = load ptr, ptr %3267, align 8
  %3269 = call align 4 ptr %3268({ ptr, ptr, ptr, i32 } %3254, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3270 = call { ptr, i160 } %3269({ ptr, ptr, ptr, i32 } %3254, { ptr, ptr, ptr, i32 } %3254, ptr nonnull align 8 %2) #28
  %3271 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3272 = load ptr, ptr %49, align 8
  %3273 = call i1 %3272({ ptr, i160 } %3270, { ptr, i160 } %3217) #28
  br i1 %3273, label %3275, label %3274

3274:                                             ; preds = %3264, %3232, %3209
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3287

3275:                                             ; preds = %3264
  %3276 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3277 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3228)
  %3278 = getelementptr i8, ptr %3258, i64 56
  %3279 = load ptr, ptr %3278, align 8
  %3280 = call align 4 ptr %3279({ ptr, ptr, ptr, i32 } %3254, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3281 = call { ptr, i160 } %3280({ ptr, ptr, ptr, i32 } %3254, { ptr, ptr, ptr, i32 } %3254, ptr nonnull align 8 %2) #28
  %3282 = extractvalue { ptr, i160 } %3281, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3283 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3284 = icmp ne ptr %3282, @nil_typ
  %3285 = icmp ne ptr %3282, null
  %3286 = and i1 %3284, %3285
  br i1 %3286, label %3376, label %3287

3287:                                             ; preds = %3275, %3274
  %3288 = add i32 %3219, 2127912214
  %3289 = shl i32 %3219, 12
  %3290 = add i32 %3288, %3289
  %3291 = ashr i32 %3290, 19
  %3292 = xor i32 %3290, %3291
  %3293 = xor i32 %3292, -949894596
  %3294 = add i32 %3293, 374761393
  %3295 = shl i32 %3293, 5
  %3296 = add i32 %3294, %3295
  %3297 = add i32 %3296, -744332180
  %3298 = shl i32 %3296, 9
  %3299 = xor i32 %3297, %3298
  %3300 = add i32 %3299, -42973499
  %3301 = shl i32 %3299, 3
  %3302 = add i32 %3300, %3301
  %3303 = ashr i32 %3302, 16
  %3304 = xor i32 %3302, %3303
  %3305 = xor i32 %3304, -1252372727
  %3306 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3307 = load i32, ptr %50, align 8
  %3308 = add i32 %3307, -1
  %3309 = and i32 %3308, %3305
  %3310 = load ptr, ptr %54, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3311 = sext i32 %3309 to i64
  %3312 = shl nsw i64 %3311, 5
  %3313 = getelementptr i8, ptr %3310, i64 %3312
  %3314 = load ptr, ptr %3313, align 8
  %3315 = icmp ne ptr %3314, @nil_typ
  %3316 = icmp ne ptr %3314, null
  %3317 = and i1 %3315, %3316
  br i1 %3317, label %3318, label %3368

3318:                                             ; preds = %3287
  %3319 = getelementptr i8, ptr %3313, i64 8
  %3320 = load i64, ptr %3319, align 4
  %3321 = getelementptr i8, ptr %3313, i64 16
  %3322 = load i64, ptr %3321, align 4
  %3323 = inttoptr i64 %3320 to ptr
  %3324 = inttoptr i64 %3322 to ptr
  %3325 = getelementptr i8, ptr %3314, i64 8
  %3326 = getelementptr i8, ptr %3314, i64 16
  %3327 = getelementptr i8, ptr %3314, i64 40
  %3328 = load i64, ptr %3325, align 4, !noalias !317
  %3329 = load i64, ptr %3326, align 4, !noalias !317
  %3330 = load ptr, ptr %3327, align 8, !noalias !317
  %3331 = mul i64 %3328, 4015701072841558310
  %3332 = lshr i64 %3331, 32
  %3333 = xor i64 %3332, %3331
  %3334 = and i64 %3333, %3329
  %3335 = getelementptr i32, ptr %3330, i64 %3334
  %3336 = load i32, ptr %3335, align 4, !noalias !317
  %3337 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3314, 0
  %3338 = insertvalue { ptr, ptr, ptr, i32 } %3337, ptr %3323, 1
  %3339 = insertvalue { ptr, ptr, ptr, i32 } %3338, ptr %3324, 2
  %3340 = insertvalue { ptr, ptr, ptr, i32 } %3339, i32 %3336, 3
  %3341 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3342 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3314) #43
  %3343 = sext i32 %3336 to i64
  %3344 = getelementptr ptr, ptr %3314, i64 %3343
  %3345 = getelementptr i8, ptr %3344, i64 64
  %3346 = load ptr, ptr %3345, align 8
  %3347 = call align 4 ptr %3346({ ptr, ptr, ptr, i32 } %3340, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3348 = call i32 %3347({ ptr, ptr, ptr, i32 } %3340, { ptr, ptr, ptr, i32 } %3340, ptr nonnull align 8 %2) #28
  %3349 = icmp eq i32 %3348, %3219
  br i1 %3349, label %3350, label %3368

3350:                                             ; preds = %3318
  %3351 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3352 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3314)
  %3353 = getelementptr i8, ptr %3344, i64 48
  %3354 = load ptr, ptr %3353, align 8
  %3355 = call align 4 ptr %3354({ ptr, ptr, ptr, i32 } %3340, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3356 = call { ptr, i160 } %3355({ ptr, ptr, ptr, i32 } %3340, { ptr, ptr, ptr, i32 } %3340, ptr nonnull align 8 %2) #28
  %3357 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3358 = load ptr, ptr %49, align 8
  %3359 = call i1 %3358({ ptr, i160 } %3356, { ptr, i160 } %3217) #28
  br i1 %3359, label %3360, label %3368

3360:                                             ; preds = %3350
  %3361 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3362 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3314)
  %3363 = getelementptr i8, ptr %3344, i64 56
  %3364 = load ptr, ptr %3363, align 8
  %3365 = call align 4 ptr %3364({ ptr, ptr, ptr, i32 } %3340, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3366 = call { ptr, i160 } %3365({ ptr, ptr, ptr, i32 } %3340, { ptr, ptr, ptr, i32 } %3340, ptr nonnull align 8 %2) #28
  %3367 = extractvalue { ptr, i160 } %3366, 0
  br label %3368

3368:                                             ; preds = %3360, %3350, %3318, %3287
  %3369 = phi ptr [ %3367, %3360 ], [ @nil_typ, %3350 ], [ @nil_typ, %3287 ], [ @nil_typ, %3318 ]
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3370 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3371 = icmp ne ptr %3369, @nil_typ
  %3372 = icmp ne ptr %3369, null
  %3373 = and i1 %3371, %3372
  %3374 = freeze i1 %3373
  %3375 = select i1 %3374, ptr %3369, ptr @nil_typ
  br label %3376

3376:                                             ; preds = %3368, %3275
  %3377 = phi ptr [ %3282, %3275 ], [ %3375, %3368 ]
  %3378 = icmp eq ptr %3377, @nil_typ
  %3379 = icmp eq ptr %3377, null
  %3380 = or i1 %3378, %3379
  br i1 %3380, label %3381, label %3387

3381:                                             ; preds = %3376
  %3382 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %3383 = sext i32 %3211 to i64
  %3384 = shl nsw i64 %3383, 2
  %3385 = getelementptr i8, ptr %3200, i64 %3384
  store i32 %3215, ptr %3385, align 4
  %3386 = add nsw i32 %3211, 1
  br label %3387

3387:                                             ; preds = %3381, %3376
  %3388 = phi i32 [ %3386, %3381 ], [ %3211, %3376 ]
  %3389 = add nuw nsw i32 %3212, 1
  %3390 = icmp slt i32 %3388, %0
  %3391 = icmp slt i32 %3389, %3202
  %3392 = select i1 %3390, i1 %3391, i1 false
  br i1 %3392, label %3209, label %3393

3393:                                             ; preds = %3387, %3197
  %3394 = phi i32 [ 0, %3197 ], [ %3388, %3387 ]
  %3395 = icmp slt i32 %3394, %0
  br i1 %3395, label %3396, label %3412

3396:                                             ; preds = %3393
  %3397 = call noalias nonnull align 32 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %3397, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3398 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3399 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3400 = call noalias nonnull align 4 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(30) %3400, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(30) %3397, i64 noundef 29, i1 noundef false)
  %3401 = getelementptr inbounds i8, ptr %3400, i64 29
  store i8 0, ptr %3401, align 1
  %3402 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(30) %3400) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3403 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3394) #25
  %3404 = call noalias nonnull align 32 dereferenceable(23) ptr @bump_malloc_inner(i64 noundef 23, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <22 x i8> <i8 32, i8 103, i8 117, i8 97, i8 114, i8 97, i8 110, i8 116, i8 101, i8 101, i8 100, i8 32, i8 109, i8 105, i8 115, i8 115, i8 32, i8 107, i8 101, i8 121, i8 115, i8 46>, ptr %3404, align 32
  %3405 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3406 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3407 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3408 = call noalias nonnull align 4 dereferenceable(23) ptr @bump_malloc_inner(i64 noundef 23, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(23) %3408, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(23) %3404, i64 noundef 22, i1 noundef false)
  %3409 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3410 = getelementptr inbounds i8, ptr %3408, i64 22
  store i8 0, ptr %3410, align 2
  %3411 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(23) %3408) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3412

3412:                                             ; preds = %3396, %3393
  %3413 = phi i32 [ %3394, %3396 ], [ %0, %3393 ]
  %3414 = call i64 @clock()
  %3415 = icmp sgt i32 %3413, 0
  br i1 %3415, label %3416, label %3419

3416:                                             ; preds = %3412
  %3417 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %3418 = zext nneg i32 %3413 to i64
  br label %3421

3419:                                             ; preds = %3412
  %3420 = call i64 @clock()
  br label %3604

3421:                                             ; preds = %3588, %3416
  %3422 = phi i64 [ 0, %3416 ], [ %3597, %3588 ]
  %3423 = phi i32 [ 0, %3416 ], [ %3596, %3588 ]
  %3424 = phi i32 [ 0, %3416 ], [ %3595, %3588 ]
  %3425 = shl i64 %3422, 2
  %3426 = getelementptr i8, ptr %3200, i64 %3425
  %3427 = load i32, ptr %3426, align 4
  %3428 = zext i32 %3427 to i160
  %3429 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %3428, 1
  %3430 = load ptr, ptr %28, align 8
  %3431 = call i32 %3430({ ptr, i160 } %3429) #28
  %3432 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %3433 = load i32, ptr %30, align 8
  %3434 = add i32 %3433, -1
  %3435 = and i32 %3434, %3431
  %3436 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3437 = sext i32 %3435 to i64
  %3438 = shl nsw i64 %3437, 5
  %3439 = getelementptr i8, ptr %3436, i64 %3438
  %3440 = load ptr, ptr %3439, align 8
  %3441 = icmp ne ptr %3440, @nil_typ
  %3442 = icmp ne ptr %3440, null
  %3443 = and i1 %3441, %3442
  br i1 %3443, label %3444, label %3486

3444:                                             ; preds = %3421
  %3445 = getelementptr i8, ptr %3439, i64 8
  %3446 = load i64, ptr %3445, align 4
  %3447 = getelementptr i8, ptr %3439, i64 16
  %3448 = load i64, ptr %3447, align 4
  %3449 = inttoptr i64 %3446 to ptr
  %3450 = inttoptr i64 %3448 to ptr
  %3451 = getelementptr i8, ptr %3440, i64 8
  %3452 = getelementptr i8, ptr %3440, i64 16
  %3453 = getelementptr i8, ptr %3440, i64 40
  %3454 = load i64, ptr %3451, align 4, !noalias !320
  %3455 = load i64, ptr %3452, align 4, !noalias !320
  %3456 = load ptr, ptr %3453, align 8, !noalias !320
  %3457 = mul i64 %3454, 4015701072841558310
  %3458 = lshr i64 %3457, 32
  %3459 = xor i64 %3458, %3457
  %3460 = and i64 %3459, %3455
  %3461 = getelementptr i32, ptr %3456, i64 %3460
  %3462 = load i32, ptr %3461, align 4, !noalias !320
  %3463 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3440, 0
  %3464 = insertvalue { ptr, ptr, ptr, i32 } %3463, ptr %3449, 1
  %3465 = insertvalue { ptr, ptr, ptr, i32 } %3464, ptr %3450, 2
  %3466 = insertvalue { ptr, ptr, ptr, i32 } %3465, i32 %3462, 3
  %3467 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3468 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3440) #43
  %3469 = sext i32 %3462 to i64
  %3470 = getelementptr ptr, ptr %3440, i64 %3469
  %3471 = getelementptr i8, ptr %3470, i64 64
  %3472 = load ptr, ptr %3471, align 8
  %3473 = call align 4 ptr %3472({ ptr, ptr, ptr, i32 } %3466, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3474 = call i32 %3473({ ptr, ptr, ptr, i32 } %3466, { ptr, ptr, ptr, i32 } %3466, ptr nonnull align 8 %2) #28
  %3475 = icmp eq i32 %3474, %3431
  br i1 %3475, label %3476, label %3486

3476:                                             ; preds = %3444
  %3477 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3478 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3440)
  %3479 = getelementptr i8, ptr %3470, i64 48
  %3480 = load ptr, ptr %3479, align 8
  %3481 = call align 4 ptr %3480({ ptr, ptr, ptr, i32 } %3466, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3482 = call { ptr, i160 } %3481({ ptr, ptr, ptr, i32 } %3466, { ptr, ptr, ptr, i32 } %3466, ptr nonnull align 8 %2) #28
  %3483 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3484 = load ptr, ptr %29, align 8
  %3485 = call i1 %3484({ ptr, i160 } %3482, { ptr, i160 } %3429) #28
  br i1 %3485, label %3487, label %3486

3486:                                             ; preds = %3476, %3444, %3421
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3499

3487:                                             ; preds = %3476
  %3488 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3489 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3440)
  %3490 = getelementptr i8, ptr %3470, i64 56
  %3491 = load ptr, ptr %3490, align 8
  %3492 = call align 4 ptr %3491({ ptr, ptr, ptr, i32 } %3466, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3493 = call { ptr, i160 } %3492({ ptr, ptr, ptr, i32 } %3466, { ptr, ptr, ptr, i32 } %3466, ptr nonnull align 8 %2) #28
  %3494 = extractvalue { ptr, i160 } %3493, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3495 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3496 = icmp ne ptr %3494, @nil_typ
  %3497 = icmp ne ptr %3494, null
  %3498 = and i1 %3496, %3497
  br i1 %3498, label %3588, label %3499

3499:                                             ; preds = %3487, %3486
  %3500 = add i32 %3431, 2127912214
  %3501 = shl i32 %3431, 12
  %3502 = add i32 %3500, %3501
  %3503 = ashr i32 %3502, 19
  %3504 = xor i32 %3502, %3503
  %3505 = xor i32 %3504, -949894596
  %3506 = add i32 %3505, 374761393
  %3507 = shl i32 %3505, 5
  %3508 = add i32 %3506, %3507
  %3509 = add i32 %3508, -744332180
  %3510 = shl i32 %3508, 9
  %3511 = xor i32 %3509, %3510
  %3512 = add i32 %3511, -42973499
  %3513 = shl i32 %3511, 3
  %3514 = add i32 %3512, %3513
  %3515 = ashr i32 %3514, 16
  %3516 = xor i32 %3514, %3515
  %3517 = xor i32 %3516, -1252372727
  %3518 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3519 = load i32, ptr %30, align 8
  %3520 = add i32 %3519, -1
  %3521 = and i32 %3520, %3517
  %3522 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3523 = sext i32 %3521 to i64
  %3524 = shl nsw i64 %3523, 5
  %3525 = getelementptr i8, ptr %3522, i64 %3524
  %3526 = load ptr, ptr %3525, align 8
  %3527 = icmp ne ptr %3526, @nil_typ
  %3528 = icmp ne ptr %3526, null
  %3529 = and i1 %3527, %3528
  br i1 %3529, label %3530, label %3580

3530:                                             ; preds = %3499
  %3531 = getelementptr i8, ptr %3525, i64 8
  %3532 = load i64, ptr %3531, align 4
  %3533 = getelementptr i8, ptr %3525, i64 16
  %3534 = load i64, ptr %3533, align 4
  %3535 = inttoptr i64 %3532 to ptr
  %3536 = inttoptr i64 %3534 to ptr
  %3537 = getelementptr i8, ptr %3526, i64 8
  %3538 = getelementptr i8, ptr %3526, i64 16
  %3539 = getelementptr i8, ptr %3526, i64 40
  %3540 = load i64, ptr %3537, align 4, !noalias !323
  %3541 = load i64, ptr %3538, align 4, !noalias !323
  %3542 = load ptr, ptr %3539, align 8, !noalias !323
  %3543 = mul i64 %3540, 4015701072841558310
  %3544 = lshr i64 %3543, 32
  %3545 = xor i64 %3544, %3543
  %3546 = and i64 %3545, %3541
  %3547 = getelementptr i32, ptr %3542, i64 %3546
  %3548 = load i32, ptr %3547, align 4, !noalias !323
  %3549 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3526, 0
  %3550 = insertvalue { ptr, ptr, ptr, i32 } %3549, ptr %3535, 1
  %3551 = insertvalue { ptr, ptr, ptr, i32 } %3550, ptr %3536, 2
  %3552 = insertvalue { ptr, ptr, ptr, i32 } %3551, i32 %3548, 3
  %3553 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3554 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3526) #43
  %3555 = sext i32 %3548 to i64
  %3556 = getelementptr ptr, ptr %3526, i64 %3555
  %3557 = getelementptr i8, ptr %3556, i64 64
  %3558 = load ptr, ptr %3557, align 8
  %3559 = call align 4 ptr %3558({ ptr, ptr, ptr, i32 } %3552, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3560 = call i32 %3559({ ptr, ptr, ptr, i32 } %3552, { ptr, ptr, ptr, i32 } %3552, ptr nonnull align 8 %2) #28
  %3561 = icmp eq i32 %3560, %3431
  br i1 %3561, label %3562, label %3580

3562:                                             ; preds = %3530
  %3563 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3564 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3526)
  %3565 = getelementptr i8, ptr %3556, i64 48
  %3566 = load ptr, ptr %3565, align 8
  %3567 = call align 4 ptr %3566({ ptr, ptr, ptr, i32 } %3552, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3568 = call { ptr, i160 } %3567({ ptr, ptr, ptr, i32 } %3552, { ptr, ptr, ptr, i32 } %3552, ptr nonnull align 8 %2) #28
  %3569 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3570 = load ptr, ptr %29, align 8
  %3571 = call i1 %3570({ ptr, i160 } %3568, { ptr, i160 } %3429) #28
  br i1 %3571, label %3572, label %3580

3572:                                             ; preds = %3562
  %3573 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3574 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3526)
  %3575 = getelementptr i8, ptr %3556, i64 56
  %3576 = load ptr, ptr %3575, align 8
  %3577 = call align 4 ptr %3576({ ptr, ptr, ptr, i32 } %3552, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3578 = call { ptr, i160 } %3577({ ptr, ptr, ptr, i32 } %3552, { ptr, ptr, ptr, i32 } %3552, ptr nonnull align 8 %2) #28
  %3579 = extractvalue { ptr, i160 } %3578, 0
  br label %3580

3580:                                             ; preds = %3572, %3562, %3530, %3499
  %3581 = phi ptr [ %3579, %3572 ], [ @nil_typ, %3562 ], [ @nil_typ, %3499 ], [ @nil_typ, %3530 ]
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3582 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3583 = icmp ne ptr %3581, @nil_typ
  %3584 = icmp ne ptr %3581, null
  %3585 = and i1 %3583, %3584
  %3586 = freeze i1 %3585
  %3587 = select i1 %3586, ptr %3581, ptr @nil_typ
  br label %3588

3588:                                             ; preds = %3580, %3487
  %3589 = phi ptr [ %3494, %3487 ], [ %3587, %3580 ]
  %3590 = icmp eq ptr %3589, @nil_typ
  %3591 = icmp eq ptr %3589, null
  %3592 = or i1 %3590, %3591
  %3593 = select i1 %3592, i32 %3423, i32 %3424
  %3594 = add i32 %3593, 1
  %3595 = select i1 %3592, i32 %3424, i32 %3594
  %3596 = select i1 %3592, i32 %3594, i32 %3423
  %3597 = add nuw nsw i64 %3422, 1
  %3598 = icmp eq i64 %3597, %3418
  br i1 %3598, label %3599, label %3421

3599:                                             ; preds = %3588
  %3600 = call i64 @clock()
  %3601 = mul i32 %3595, 100
  %3602 = sdiv i32 %3601, %3413
  %3603 = icmp slt i32 %3602, 5
  br label %3604

3604:                                             ; preds = %3599, %3419
  %3605 = phi i64 [ %3600, %3599 ], [ %3420, %3419 ]
  %3606 = phi i32 [ %3596, %3599 ], [ 0, %3419 ]
  %3607 = phi i32 [ %3595, %3599 ], [ 0, %3419 ]
  %3608 = phi i1 [ %3603, %3599 ], [ true, %3419 ]
  %3609 = call noalias nonnull align 16 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <15 x i8> <i8 71, i8 101, i8 116, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109, i8 32, i8 77, i8 105, i8 115, i8 115>, ptr %3609, align 16
  %3610 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3611 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3612 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3613 = call noalias nonnull align 4 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(16) %3613, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(16) %3609, i64 noundef 15, i1 noundef false)
  %3614 = sub i64 %3605, %3414
  %3615 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3616 = getelementptr inbounds i8, ptr %3613, i64 15
  store i8 0, ptr %3616, align 1
  %3617 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %3613) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3618 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %3618, align 16
  %3619 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3619, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3618, i64 noundef 14, i1 noundef false)
  %3620 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3619) #28
  %3621 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3413) #25
  %3622 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %3622, align 16
  %3623 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3623, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3622, i64 noundef 14, i1 noundef false)
  %3624 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3623) #28
  %3625 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3614) #25
  %3626 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %3626, align 4
  %3627 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3627, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3626, i64 noundef 3, i1 noundef false)
  %3628 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3627) #28
  br i1 %3415, label %3629, label %3644

3629:                                             ; preds = %3604
  %3630 = icmp sgt i64 %3614, 0
  br i1 %3630, label %3631, label %3635

3631:                                             ; preds = %3629
  %3632 = mul i64 %3614, 1000000
  %3633 = zext nneg i32 %3413 to i64
  %3634 = sdiv i64 %3632, %3633
  br label %3635

3635:                                             ; preds = %3631, %3629
  %3636 = phi i64 [ %3634, %3631 ], [ 0, %3629 ]
  %3637 = call noalias nonnull align 16 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %3637, align 16
  %3638 = call noalias nonnull align 4 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(16) %3638, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(16) %3637, i64 noundef 15, i1 noundef false)
  %3639 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %3638) #28
  %3640 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3636) #25
  %3641 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %3641, align 4
  %3642 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3642, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3641, i64 noundef 3, i1 noundef false)
  %3643 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3642) #28
  br label %3644

3644:                                             ; preds = %3635, %3604
  %3645 = call noalias nonnull align 32 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %3645, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3646 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3647 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3648 = call noalias nonnull align 4 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(19) %3648, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(19) %3645, i64 noundef 18, i1 noundef false)
  %3649 = getelementptr inbounds i8, ptr %3648, i64 18
  store i8 0, ptr %3649, align 2
  %3650 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %3648) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3651 = select i1 %3608, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %3652 = select i1 %3608, ptr %8, ptr %12
  %3653 = select i1 %3608, ptr %9, ptr %13
  %3654 = select i1 %3608, ptr %10, ptr %14
  %3655 = select i1 %3608, ptr %11, ptr %15
  store ptr @_parameterization_Bufferi8, ptr %3652, align 8
  %3656 = select i1 %3608, ptr %8, ptr %12
  %3657 = getelementptr inbounds i8, ptr %3656, i64 8
  store ptr @_parameterization_i32, ptr %3657, align 8
  %3658 = select i1 %3608, ptr %8, ptr %12
  %3659 = getelementptr inbounds i8, ptr %3658, i64 16
  store ptr @_parameterization_i32, ptr %3659, align 8
  %3660 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %3652)
  store ptr @buffer_typ, ptr %3653, align 8
  %3661 = select i1 %3608, ptr %9, ptr %13
  %3662 = getelementptr inbounds i8, ptr %3661, i64 8
  store ptr @i32_typ, ptr %3662, align 8
  %3663 = select i1 %3608, ptr %9, ptr %13
  %3664 = getelementptr inbounds i8, ptr %3663, i64 16
  store ptr @i32_typ, ptr %3664, align 8
  %3665 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %3653) #43
  store ptr @_parameterization_String, ptr %3654, align 8
  %3666 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3654)
  store ptr @String, ptr %3655, align 8
  %3667 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %3655) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3668 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3669 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3670 = call noalias nonnull align 4 dereferenceable(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <4 x i8> %3651, ptr %3670, align 4
  %3671 = getelementptr inbounds i8, ptr %3670, i64 4
  store i8 0, ptr %3671, align 4
  %3672 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %3670) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3673 = call noalias nonnull align 16 dereferenceable(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <13 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 77, i8 105, i8 115, i8 115, i8 101, i8 115, i8 58, i8 32>, ptr %3673, align 16
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3674 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3675 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3676 = call noalias nonnull align 4 dereferenceable(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(14) %3676, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(14) %3673, i64 noundef 13, i1 noundef false)
  %3677 = getelementptr inbounds i8, ptr %3676, i64 13
  store i8 0, ptr %3677, align 1
  %3678 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(14) %3676) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3679 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3606) #25
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3680 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3681 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3682 = call noalias nonnull align 4 dereferenceable(9) ptr @bump_malloc_inner(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store i64 2322295501682647084, ptr %3682, align 4
  %3683 = getelementptr inbounds i8, ptr %3682, i64 8
  store i8 0, ptr %3683, align 4
  %3684 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(9) %3682) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3685 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3607) #25
  %3686 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3687 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3688 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3689 = call noalias nonnull align 4 dereferenceable(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store i8 41, ptr %3689, align 4
  %3690 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3691 = getelementptr inbounds i8, ptr %3689, i64 1
  store i8 0, ptr %3691, align 1
  %3692 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(2) %3689) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  ret void
}

define dso_local void @benchmark_remove_random(i32 %0) local_unnamed_addr #30 {
  %2 = alloca {}, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca [3 x ptr], align 8
  %13 = alloca { ptr, ptr, ptr }, align 8
  %14 = alloca [1 x ptr], align 8
  %15 = alloca { ptr }, align 8
  %16 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %16) #43
  %20 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %6) #43
  %21 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %20, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %6) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %6) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %20, ptr noalias nofree noundef nonnull readnone align 4 @eultmxdams, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %22 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %20) #47
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %20) #43
  %24 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %5) #43
  %25 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %24, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %5) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %5) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %24, ptr noalias nofree noundef nonnull readnone align 4 @kobgulxfyk, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %26 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %24) #47
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %24) #43
  %28 = getelementptr inbounds i8, ptr %16, i64 48
  store ptr %22, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %16, i64 56
  store ptr %26, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %16, i64 40
  store i32 8, ptr %30, align 8
  %31 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %32 = getelementptr inbounds i8, ptr %16, i64 24
  store ptr %31, ptr %32, align 8
  %33 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %34 = getelementptr inbounds i8, ptr %16, i64 32
  store ptr %33, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  %36 = sext i32 %0 to i64
  %37 = shl nsw i64 %36, 2
  %38 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %37, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #43
  %40 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @_parameterization_i1, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @_parameterization_Pairi32._i1, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %40) #43
  %44 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %4) #43
  %45 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %44, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %4) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %4) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %44, ptr noalias nofree noundef nonnull readnone align 4 @goryohrwlm, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %46 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %44) #47
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %44) #43
  %48 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3) #43
  %49 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %48, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %3) #54
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3) #43
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %48, ptr noalias nofree noundef nonnull readnone align 4 @hgzqejipdr, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %50 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %48) #47
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %48) #43
  %52 = getelementptr inbounds i8, ptr %40, i64 48
  store ptr %46, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %40, i64 56
  store ptr %50, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %40, i64 40
  store i32 8, ptr %54, align 8
  %55 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %56 = getelementptr inbounds i8, ptr %40, i64 24
  store ptr %55, ptr %56, align 8
  %57 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %58 = getelementptr inbounds i8, ptr %40, i64 32
  store ptr %57, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %60 = mul i32 %0, 10
  %61 = icmp sgt i32 %0, 0
  %62 = icmp sgt i32 %60, 0
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %3205

64:                                               ; preds = %1
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %67 = getelementptr inbounds i8, ptr %16, i64 44
  %68 = getelementptr inbounds i8, ptr %40, i64 44
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @PRNG) #43
  br label %70

70:                                               ; preds = %3199, %64
  %71 = phi i32 [ 101112, %64 ], [ %76, %3199 ]
  %72 = phi i32 [ 0, %64 ], [ %3201, %3199 ]
  %73 = phi i32 [ 0, %64 ], [ %3200, %3199 ]
  %74 = mul i32 %71, 1103515245
  %75 = add i32 %74, 12345
  %76 = and i32 %75, 2147483647
  %77 = zext nneg i32 %76 to i160
  %78 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %77, 1
  %79 = load ptr, ptr %52, align 8
  %80 = call i32 %79({ ptr, i160 } %78) #28
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %82 = load i32, ptr %54, align 8
  %83 = add i32 %82, -1
  %84 = and i32 %83, %80
  %85 = load ptr, ptr %56, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %86 = sext i32 %84 to i64
  %87 = shl nsw i64 %86, 5
  %88 = getelementptr i8, ptr %85, i64 %87
  %89 = load ptr, ptr %88, align 8
  %90 = icmp ne ptr %89, @nil_typ
  %91 = icmp ne ptr %89, null
  %92 = and i1 %90, %91
  br i1 %92, label %93, label %135

93:                                               ; preds = %70
  %94 = getelementptr i8, ptr %88, i64 8
  %95 = load i64, ptr %94, align 4
  %96 = getelementptr i8, ptr %88, i64 16
  %97 = load i64, ptr %96, align 4
  %98 = inttoptr i64 %95 to ptr
  %99 = inttoptr i64 %97 to ptr
  %100 = getelementptr i8, ptr %89, i64 8
  %101 = getelementptr i8, ptr %89, i64 16
  %102 = getelementptr i8, ptr %89, i64 40
  %103 = load i64, ptr %100, align 4, !noalias !326
  %104 = load i64, ptr %101, align 4, !noalias !326
  %105 = load ptr, ptr %102, align 8, !noalias !326
  %106 = mul i64 %103, 4015701072841558310
  %107 = lshr i64 %106, 32
  %108 = xor i64 %107, %106
  %109 = and i64 %108, %104
  %110 = getelementptr i32, ptr %105, i64 %109
  %111 = load i32, ptr %110, align 4, !noalias !326
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %113 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %98, 1
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr %99, 2
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 %111, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %89) #43
  %118 = sext i32 %111 to i64
  %119 = getelementptr ptr, ptr %89, i64 %118
  %120 = getelementptr i8, ptr %119, i64 64
  %121 = load ptr, ptr %120, align 8
  %122 = call align 4 ptr %121({ ptr, ptr, ptr, i32 } %115, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %123 = call i32 %122({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull align 8 %2) #28
  %124 = icmp eq i32 %123, %80
  br i1 %124, label %125, label %135

125:                                              ; preds = %93
  %126 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %127 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %89)
  %128 = getelementptr i8, ptr %119, i64 48
  %129 = load ptr, ptr %128, align 8
  %130 = call align 4 ptr %129({ ptr, ptr, ptr, i32 } %115, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %131 = call { ptr, i160 } %130({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull align 8 %2) #28
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %133 = load ptr, ptr %53, align 8
  %134 = call i1 %133({ ptr, i160 } %131, { ptr, i160 } %78) #28
  br i1 %134, label %136, label %135

135:                                              ; preds = %125, %93, %70
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %148

136:                                              ; preds = %125
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %89)
  %139 = getelementptr i8, ptr %119, i64 56
  %140 = load ptr, ptr %139, align 8
  %141 = call align 4 ptr %140({ ptr, ptr, ptr, i32 } %115, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %142 = call { ptr, i160 } %141({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull align 8 %2) #28
  %143 = extractvalue { ptr, i160 } %142, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %145 = icmp ne ptr %143, @nil_typ
  %146 = icmp ne ptr %143, null
  %147 = and i1 %145, %146
  br i1 %147, label %237, label %148

148:                                              ; preds = %136, %135
  %149 = add i32 %80, 2127912214
  %150 = shl i32 %80, 12
  %151 = add i32 %149, %150
  %152 = ashr i32 %151, 19
  %153 = xor i32 %151, %152
  %154 = xor i32 %153, -949894596
  %155 = add i32 %154, 374761393
  %156 = shl i32 %154, 5
  %157 = add i32 %155, %156
  %158 = add i32 %157, -744332180
  %159 = shl i32 %157, 9
  %160 = xor i32 %158, %159
  %161 = add i32 %160, -42973499
  %162 = shl i32 %160, 3
  %163 = add i32 %161, %162
  %164 = ashr i32 %163, 16
  %165 = xor i32 %163, %164
  %166 = xor i32 %165, -1252372727
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %168 = load i32, ptr %54, align 8
  %169 = add i32 %168, -1
  %170 = and i32 %169, %166
  %171 = load ptr, ptr %58, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %172 = sext i32 %170 to i64
  %173 = shl nsw i64 %172, 5
  %174 = getelementptr i8, ptr %171, i64 %173
  %175 = load ptr, ptr %174, align 8
  %176 = icmp ne ptr %175, @nil_typ
  %177 = icmp ne ptr %175, null
  %178 = and i1 %176, %177
  br i1 %178, label %179, label %229

179:                                              ; preds = %148
  %180 = getelementptr i8, ptr %174, i64 8
  %181 = load i64, ptr %180, align 4
  %182 = getelementptr i8, ptr %174, i64 16
  %183 = load i64, ptr %182, align 4
  %184 = inttoptr i64 %181 to ptr
  %185 = inttoptr i64 %183 to ptr
  %186 = getelementptr i8, ptr %175, i64 8
  %187 = getelementptr i8, ptr %175, i64 16
  %188 = getelementptr i8, ptr %175, i64 40
  %189 = load i64, ptr %186, align 4, !noalias !329
  %190 = load i64, ptr %187, align 4, !noalias !329
  %191 = load ptr, ptr %188, align 8, !noalias !329
  %192 = mul i64 %189, 4015701072841558310
  %193 = lshr i64 %192, 32
  %194 = xor i64 %193, %192
  %195 = and i64 %194, %190
  %196 = getelementptr i32, ptr %191, i64 %195
  %197 = load i32, ptr %196, align 4, !noalias !329
  %198 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %199 = insertvalue { ptr, ptr, ptr, i32 } %198, ptr %184, 1
  %200 = insertvalue { ptr, ptr, ptr, i32 } %199, ptr %185, 2
  %201 = insertvalue { ptr, ptr, ptr, i32 } %200, i32 %197, 3
  %202 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %203 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %175) #43
  %204 = sext i32 %197 to i64
  %205 = getelementptr ptr, ptr %175, i64 %204
  %206 = getelementptr i8, ptr %205, i64 64
  %207 = load ptr, ptr %206, align 8
  %208 = call align 4 ptr %207({ ptr, ptr, ptr, i32 } %201, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %209 = call i32 %208({ ptr, ptr, ptr, i32 } %201, { ptr, ptr, ptr, i32 } %201, ptr nonnull align 8 %2) #28
  %210 = icmp eq i32 %209, %80
  br i1 %210, label %211, label %229

211:                                              ; preds = %179
  %212 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %213 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %175)
  %214 = getelementptr i8, ptr %205, i64 48
  %215 = load ptr, ptr %214, align 8
  %216 = call align 4 ptr %215({ ptr, ptr, ptr, i32 } %201, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %217 = call { ptr, i160 } %216({ ptr, ptr, ptr, i32 } %201, { ptr, ptr, ptr, i32 } %201, ptr nonnull align 8 %2) #28
  %218 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %219 = load ptr, ptr %53, align 8
  %220 = call i1 %219({ ptr, i160 } %217, { ptr, i160 } %78) #28
  br i1 %220, label %221, label %229

221:                                              ; preds = %211
  %222 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %223 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %175)
  %224 = getelementptr i8, ptr %205, i64 56
  %225 = load ptr, ptr %224, align 8
  %226 = call align 4 ptr %225({ ptr, ptr, ptr, i32 } %201, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %227 = call { ptr, i160 } %226({ ptr, ptr, ptr, i32 } %201, { ptr, ptr, ptr, i32 } %201, ptr nonnull align 8 %2) #28
  %228 = extractvalue { ptr, i160 } %227, 0
  br label %229

229:                                              ; preds = %221, %211, %179, %148
  %230 = phi ptr [ %228, %221 ], [ @nil_typ, %211 ], [ @nil_typ, %148 ], [ @nil_typ, %179 ]
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %231 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %232 = icmp ne ptr %230, @nil_typ
  %233 = icmp ne ptr %230, null
  %234 = and i1 %232, %233
  %235 = freeze i1 %234
  %236 = select i1 %235, ptr %230, ptr @nil_typ
  br label %237

237:                                              ; preds = %229, %136
  %238 = phi ptr [ %143, %136 ], [ %236, %229 ]
  %239 = icmp eq ptr %238, @nil_typ
  %240 = icmp eq ptr %238, null
  %241 = or i1 %239, %240
  br i1 %241, label %242, label %3199

242:                                              ; preds = %237
  %243 = add nuw i32 %76, 1
  %244 = zext i32 %243 to i160
  %245 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %244, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %246 = load ptr, ptr %28, align 8
  %247 = call i32 %246({ ptr, i160 } %78) #28
  %248 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %249 = load i32, ptr %30, align 8
  %250 = add i32 %249, -1
  %251 = and i32 %250, %247
  %252 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %253 = sext i32 %251 to i64
  %254 = shl nsw i64 %253, 5
  %255 = getelementptr i8, ptr %252, i64 %254
  %256 = load ptr, ptr %255, align 8
  %257 = getelementptr i8, ptr %255, i64 8
  %258 = icmp ne ptr %256, @nil_typ
  %259 = icmp ne ptr %256, null
  %260 = and i1 %258, %259
  br i1 %260, label %261, label %384

261:                                              ; preds = %242
  %262 = load i64, ptr %257, align 4
  %263 = getelementptr i8, ptr %255, i64 16
  %264 = load i64, ptr %263, align 4
  %265 = inttoptr i64 %262 to ptr
  %266 = inttoptr i64 %264 to ptr
  %267 = getelementptr i8, ptr %256, i64 8
  %268 = getelementptr i8, ptr %256, i64 16
  %269 = getelementptr i8, ptr %256, i64 40
  %270 = load i64, ptr %267, align 4, !noalias !332
  %271 = load i64, ptr %268, align 4, !noalias !332
  %272 = load ptr, ptr %269, align 8, !noalias !332
  %273 = mul i64 %270, 4015701072841558310
  %274 = lshr i64 %273, 32
  %275 = xor i64 %274, %273
  %276 = and i64 %275, %271
  %277 = getelementptr i32, ptr %272, i64 %276
  %278 = load i32, ptr %277, align 4, !noalias !332
  %279 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %256, 0
  %280 = insertvalue { ptr, ptr, ptr, i32 } %279, ptr %265, 1
  %281 = insertvalue { ptr, ptr, ptr, i32 } %280, ptr %266, 2
  %282 = insertvalue { ptr, ptr, ptr, i32 } %281, i32 %278, 3
  %283 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %284 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %256) #43
  %285 = sext i32 %278 to i64
  %286 = getelementptr ptr, ptr %256, i64 %285
  %287 = getelementptr i8, ptr %286, i64 64
  %288 = load ptr, ptr %287, align 8
  %289 = call align 4 ptr %288({ ptr, ptr, ptr, i32 } %282, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %290 = call i32 %289({ ptr, ptr, ptr, i32 } %282, { ptr, ptr, ptr, i32 } %282, ptr nonnull align 8 %2) #28
  %291 = icmp eq i32 %290, %247
  br i1 %291, label %292, label %384

292:                                              ; preds = %261
  %293 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %294 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %256)
  %295 = getelementptr i8, ptr %286, i64 48
  %296 = load ptr, ptr %295, align 8
  %297 = call align 4 ptr %296({ ptr, ptr, ptr, i32 } %282, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %298 = call { ptr, i160 } %297({ ptr, ptr, ptr, i32 } %282, { ptr, ptr, ptr, i32 } %282, ptr nonnull align 8 %2) #28
  %299 = load ptr, ptr %29, align 8
  %300 = call i1 %299({ ptr, i160 } %298, { ptr, i160 } %78) #28
  br i1 %300, label %301, label %384

301:                                              ; preds = %292
  %302 = load ptr, ptr %16, align 8
  %303 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %304 = load ptr, ptr %17, align 8
  %305 = load ptr, ptr %302, align 8, !alias.scope !335
  %306 = getelementptr i8, ptr %305, i64 72
  %307 = load ptr, ptr %306, align 8, !alias.scope !335
  %308 = call { i64, i64 } %307(ptr nocapture nofree nonnull readonly align 8 %302) #2, !alias.scope !335
  %309 = extractvalue { i64, i64 } %308, 0
  %310 = extractvalue { i64, i64 } %308, 1
  %311 = urem i64 20, %310
  %312 = icmp eq i64 %311, 0
  %313 = sub i64 %310, %311
  %314 = select i1 %312, i64 0, i64 %313
  %315 = add i64 %309, 20
  %316 = add i64 %315, %314
  %317 = load ptr, ptr %304, align 8, !alias.scope !335
  %318 = getelementptr i8, ptr %317, i64 72
  %319 = load ptr, ptr %318, align 8, !alias.scope !335
  %320 = call { i64, i64 } %319(ptr nocapture nofree nonnull readonly align 8 %304) #2, !alias.scope !335
  %321 = extractvalue { i64, i64 } %320, 0
  %322 = extractvalue { i64, i64 } %320, 1
  %323 = call i64 @llvm.umax.i64(i64 %310, i64 %322) #44
  %324 = call i64 @llvm.umax.i64(i64 %323, i64 noundef 8) #44, !range !18
  %325 = urem i64 %316, %322
  %326 = icmp eq i64 %325, 0
  %327 = sub i64 %322, %325
  %328 = select i1 %326, i64 0, i64 %327
  %329 = add i64 %321, %316
  %330 = add i64 %329, %328
  %331 = urem i64 %330, %324
  %332 = icmp eq i64 %331, 0
  %333 = sub i64 %324, %331
  %334 = select i1 %332, i64 0, i64 %333
  %335 = add i64 %334, %330
  %336 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %335, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %302, ptr %336, align 8
  %337 = getelementptr inbounds i8, ptr %336, i64 8
  store ptr %304, ptr %337, align 8
  %338 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %336)
  %339 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %340 = load ptr, ptr %302, align 8
  %341 = getelementptr i8, ptr %340, i64 72
  %342 = load ptr, ptr %341, align 8
  %343 = call { i64, i64 } %342(ptr nocapture nofree nonnull readonly align 8 %302) #2
  %344 = extractvalue { i64, i64 } %343, 1
  %345 = urem i64 20, %344
  %346 = icmp eq i64 %345, 0
  %347 = sub i64 %344, %345
  %348 = add i64 %347, 20
  %349 = select i1 %346, i64 20, i64 %348
  %350 = getelementptr i8, ptr %336, i64 %349
  %351 = getelementptr i8, ptr %340, i64 64
  %352 = load ptr, ptr %351, align 8
  call void %352({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %302, ptr nocapture nofree writeonly %350) #8
  %353 = load ptr, ptr %336, align 8
  %354 = load ptr, ptr %353, align 8
  %355 = getelementptr i8, ptr %354, i64 72
  %356 = load ptr, ptr %355, align 8
  %357 = call { i64, i64 } %356(ptr nocapture nofree nonnull readonly align 8 %353) #2
  %358 = extractvalue { i64, i64 } %357, 0
  %359 = extractvalue { i64, i64 } %357, 1
  %360 = urem i64 20, %359
  %361 = icmp eq i64 %360, 0
  %362 = sub i64 %359, %360
  %363 = select i1 %361, i64 0, i64 %362
  %364 = add i64 %358, 20
  %365 = add i64 %364, %363
  %366 = load ptr, ptr %337, align 8
  %367 = load ptr, ptr %366, align 8
  %368 = getelementptr i8, ptr %367, i64 72
  %369 = load ptr, ptr %368, align 8
  %370 = call { i64, i64 } %369(ptr nocapture nofree nonnull readonly align 8 %366) #2
  %371 = extractvalue { i64, i64 } %370, 1
  %372 = urem i64 %365, %371
  %373 = icmp eq i64 %372, 0
  %374 = sub i64 %371, %372
  %375 = select i1 %373, i64 0, i64 %374
  %376 = getelementptr i8, ptr %336, i64 %365
  %377 = getelementptr i8, ptr %376, i64 %375
  %378 = getelementptr i8, ptr %367, i64 64
  %379 = load ptr, ptr %378, align 8
  call void %379({ ptr, i160 } %245, ptr nocapture nofree nonnull readonly align 8 %366, ptr nocapture nofree writeonly %377) #8
  %380 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %381 = getelementptr inbounds i8, ptr %336, i64 16
  store i32 %247, ptr %381, align 8
  store ptr @Entry, ptr %255, align 8
  %382 = ptrtoint ptr %336 to i64
  store i64 %382, ptr %257, align 4
  %383 = getelementptr i8, ptr %255, i64 24
  store i32 10, ptr %383, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1719

384:                                              ; preds = %292, %261, %242
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %385 = add i32 %247, 2127912214
  %386 = shl i32 %247, 12
  %387 = add i32 %385, %386
  %388 = ashr i32 %387, 19
  %389 = xor i32 %387, %388
  %390 = xor i32 %389, -949894596
  %391 = add i32 %390, 374761393
  %392 = shl i32 %390, 5
  %393 = add i32 %391, %392
  %394 = add i32 %393, -744332180
  %395 = shl i32 %393, 9
  %396 = xor i32 %394, %395
  %397 = add i32 %396, -42973499
  %398 = shl i32 %396, 3
  %399 = add i32 %397, %398
  %400 = ashr i32 %399, 16
  %401 = xor i32 %399, %400
  %402 = xor i32 %401, -1252372727
  %403 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %404 = load i32, ptr %30, align 8
  %405 = add i32 %404, -1
  %406 = and i32 %405, %402
  %407 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %408 = sext i32 %406 to i64
  %409 = shl nsw i64 %408, 5
  %410 = getelementptr i8, ptr %407, i64 %409
  %411 = load ptr, ptr %410, align 8
  %412 = getelementptr i8, ptr %410, i64 8
  %413 = icmp ne ptr %411, @nil_typ
  %414 = icmp ne ptr %411, null
  %415 = and i1 %413, %414
  br i1 %415, label %416, label %540

416:                                              ; preds = %384
  %417 = load i64, ptr %412, align 4
  %418 = getelementptr i8, ptr %410, i64 16
  %419 = load i64, ptr %418, align 4
  %420 = inttoptr i64 %417 to ptr
  %421 = inttoptr i64 %419 to ptr
  %422 = getelementptr i8, ptr %411, i64 8
  %423 = getelementptr i8, ptr %411, i64 16
  %424 = getelementptr i8, ptr %411, i64 40
  %425 = load i64, ptr %422, align 4, !noalias !338
  %426 = load i64, ptr %423, align 4, !noalias !338
  %427 = load ptr, ptr %424, align 8, !noalias !338
  %428 = mul i64 %425, 4015701072841558310
  %429 = lshr i64 %428, 32
  %430 = xor i64 %429, %428
  %431 = and i64 %430, %426
  %432 = getelementptr i32, ptr %427, i64 %431
  %433 = load i32, ptr %432, align 4, !noalias !338
  %434 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %411, 0
  %435 = insertvalue { ptr, ptr, ptr, i32 } %434, ptr %420, 1
  %436 = insertvalue { ptr, ptr, ptr, i32 } %435, ptr %421, 2
  %437 = insertvalue { ptr, ptr, ptr, i32 } %436, i32 %433, 3
  %438 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %439 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %411) #43
  %440 = sext i32 %433 to i64
  %441 = getelementptr ptr, ptr %411, i64 %440
  %442 = getelementptr i8, ptr %441, i64 64
  %443 = load ptr, ptr %442, align 8
  %444 = call align 4 ptr %443({ ptr, ptr, ptr, i32 } %437, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %445 = call i32 %444({ ptr, ptr, ptr, i32 } %437, { ptr, ptr, ptr, i32 } %437, ptr nonnull align 8 %2) #28
  %446 = icmp eq i32 %445, %247
  br i1 %446, label %447, label %540

447:                                              ; preds = %416
  %448 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %449 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %411)
  %450 = getelementptr i8, ptr %441, i64 48
  %451 = load ptr, ptr %450, align 8
  %452 = call align 4 ptr %451({ ptr, ptr, ptr, i32 } %437, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %453 = call { ptr, i160 } %452({ ptr, ptr, ptr, i32 } %437, { ptr, ptr, ptr, i32 } %437, ptr nonnull align 8 %2) #28
  %454 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %455 = load ptr, ptr %29, align 8
  %456 = call i1 %455({ ptr, i160 } %453, { ptr, i160 } %78) #28
  br i1 %456, label %457, label %540

457:                                              ; preds = %447
  %458 = load ptr, ptr %16, align 8
  %459 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %460 = load ptr, ptr %17, align 8
  %461 = load ptr, ptr %458, align 8, !alias.scope !341
  %462 = getelementptr i8, ptr %461, i64 72
  %463 = load ptr, ptr %462, align 8, !alias.scope !341
  %464 = call { i64, i64 } %463(ptr nocapture nofree nonnull readonly align 8 %458) #2, !alias.scope !341
  %465 = extractvalue { i64, i64 } %464, 0
  %466 = extractvalue { i64, i64 } %464, 1
  %467 = urem i64 20, %466
  %468 = icmp eq i64 %467, 0
  %469 = sub i64 %466, %467
  %470 = select i1 %468, i64 0, i64 %469
  %471 = add i64 %465, 20
  %472 = add i64 %471, %470
  %473 = load ptr, ptr %460, align 8, !alias.scope !341
  %474 = getelementptr i8, ptr %473, i64 72
  %475 = load ptr, ptr %474, align 8, !alias.scope !341
  %476 = call { i64, i64 } %475(ptr nocapture nofree nonnull readonly align 8 %460) #2, !alias.scope !341
  %477 = extractvalue { i64, i64 } %476, 0
  %478 = extractvalue { i64, i64 } %476, 1
  %479 = call i64 @llvm.umax.i64(i64 %466, i64 %478) #44
  %480 = call i64 @llvm.umax.i64(i64 %479, i64 noundef 8) #44, !range !18
  %481 = urem i64 %472, %478
  %482 = icmp eq i64 %481, 0
  %483 = sub i64 %478, %481
  %484 = select i1 %482, i64 0, i64 %483
  %485 = add i64 %477, %472
  %486 = add i64 %485, %484
  %487 = urem i64 %486, %480
  %488 = icmp eq i64 %487, 0
  %489 = sub i64 %480, %487
  %490 = select i1 %488, i64 0, i64 %489
  %491 = add i64 %490, %486
  %492 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %491, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %458, ptr %492, align 8
  %493 = getelementptr inbounds i8, ptr %492, i64 8
  store ptr %460, ptr %493, align 8
  %494 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %492)
  %495 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %496 = load ptr, ptr %458, align 8
  %497 = getelementptr i8, ptr %496, i64 72
  %498 = load ptr, ptr %497, align 8
  %499 = call { i64, i64 } %498(ptr nocapture nofree nonnull readonly align 8 %458) #2
  %500 = extractvalue { i64, i64 } %499, 1
  %501 = urem i64 20, %500
  %502 = icmp eq i64 %501, 0
  %503 = sub i64 %500, %501
  %504 = add i64 %503, 20
  %505 = select i1 %502, i64 20, i64 %504
  %506 = getelementptr i8, ptr %492, i64 %505
  %507 = getelementptr i8, ptr %496, i64 64
  %508 = load ptr, ptr %507, align 8
  call void %508({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %458, ptr nocapture nofree writeonly %506) #8
  %509 = load ptr, ptr %492, align 8
  %510 = load ptr, ptr %509, align 8
  %511 = getelementptr i8, ptr %510, i64 72
  %512 = load ptr, ptr %511, align 8
  %513 = call { i64, i64 } %512(ptr nocapture nofree nonnull readonly align 8 %509) #2
  %514 = extractvalue { i64, i64 } %513, 0
  %515 = extractvalue { i64, i64 } %513, 1
  %516 = urem i64 20, %515
  %517 = icmp eq i64 %516, 0
  %518 = sub i64 %515, %516
  %519 = select i1 %517, i64 0, i64 %518
  %520 = add i64 %514, 20
  %521 = add i64 %520, %519
  %522 = load ptr, ptr %493, align 8
  %523 = load ptr, ptr %522, align 8
  %524 = getelementptr i8, ptr %523, i64 72
  %525 = load ptr, ptr %524, align 8
  %526 = call { i64, i64 } %525(ptr nocapture nofree nonnull readonly align 8 %522) #2
  %527 = extractvalue { i64, i64 } %526, 1
  %528 = urem i64 %521, %527
  %529 = icmp eq i64 %528, 0
  %530 = sub i64 %527, %528
  %531 = select i1 %529, i64 0, i64 %530
  %532 = getelementptr i8, ptr %492, i64 %521
  %533 = getelementptr i8, ptr %532, i64 %531
  %534 = getelementptr i8, ptr %523, i64 64
  %535 = load ptr, ptr %534, align 8
  call void %535({ ptr, i160 } %245, ptr nocapture nofree nonnull readonly align 8 %522, ptr nocapture nofree writeonly %533) #8
  %536 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %537 = getelementptr inbounds i8, ptr %492, i64 16
  store i32 %247, ptr %537, align 8
  store ptr @Entry, ptr %410, align 8
  %538 = ptrtoint ptr %492 to i64
  store i64 %538, ptr %412, align 4
  %539 = getelementptr i8, ptr %410, i64 24
  store i32 10, ptr %539, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1719

540:                                              ; preds = %447, %416, %384
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %541 = load i32, ptr %67, align 4
  %542 = load i32, ptr %30, align 8
  %543 = icmp slt i32 %541, %542
  br i1 %543, label %830, label %544

544:                                              ; preds = %540
  %545 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %546 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %547 = load ptr, ptr %32, align 8
  %548 = load ptr, ptr %34, align 8
  %549 = shl i32 %542, 1
  %550 = call i32 @llvm.smax.i32(i32 %549, i32 noundef 16) #43
  store i32 %550, ptr %30, align 8
  %551 = zext nneg i32 %550 to i64
  %552 = shl nuw nsw i64 %551, 5
  %553 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %552, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %553, ptr %32, align 8
  %554 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %552, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %554, ptr %34, align 8
  store i32 0, ptr %67, align 4
  %555 = icmp sgt i32 %542, 0
  br i1 %555, label %556, label %830

556:                                              ; preds = %544
  %557 = zext nneg i32 %542 to i64
  br label %558

558:                                              ; preds = %691, %556
  %559 = phi i64 [ 0, %556 ], [ %692, %691 ]
  %560 = shl nuw nsw i64 %559, 5
  %561 = getelementptr i8, ptr %547, i64 %560
  %562 = load ptr, ptr %561, align 8
  %563 = icmp ne ptr %562, @nil_typ
  %564 = icmp ne ptr %562, null
  %565 = and i1 %563, %564
  br i1 %565, label %566, label %691

566:                                              ; preds = %558
  %567 = getelementptr i8, ptr %561, i64 8
  %568 = load i64, ptr %567, align 4
  %569 = getelementptr i8, ptr %561, i64 16
  %570 = load i64, ptr %569, align 4
  %571 = getelementptr i8, ptr %562, i64 8
  %572 = getelementptr i8, ptr %562, i64 16
  %573 = getelementptr i8, ptr %562, i64 40
  %574 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %575 = load i64, ptr %571, align 4, !noalias !25
  %576 = load i64, ptr %572, align 4, !noalias !25
  %577 = load ptr, ptr %573, align 8, !noalias !25
  %578 = mul i64 %575, 4015701072841558310
  %579 = lshr i64 %578, 32
  %580 = xor i64 %579, %578
  %581 = and i64 %580, %576
  %582 = getelementptr i32, ptr %577, i64 %581
  %583 = load i32, ptr %582, align 4, !noalias !344
  %584 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %585 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %586 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %587

587:                                              ; preds = %666, %566
  %588 = phi i64 [ %570, %566 ], [ %668, %666 ]
  %589 = phi i64 [ %568, %566 ], [ %667, %666 ]
  %590 = phi i32 [ 0, %566 ], [ %603, %666 ]
  %591 = phi i1 [ true, %566 ], [ %682, %666 ]
  %592 = phi ptr [ %562, %566 ], [ %669, %666 ]
  %593 = phi i32 [ %583, %566 ], [ %681, %666 ]
  %594 = inttoptr i64 %588 to ptr
  %595 = inttoptr i64 %589 to ptr
  %596 = sext i32 %593 to i64
  %597 = getelementptr ptr, ptr %592, i64 %596
  %598 = getelementptr i8, ptr %597, i64 64
  %599 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %592, 0
  %600 = insertvalue { ptr, ptr, ptr, i32 } %599, ptr %595, 1
  %601 = insertvalue { ptr, ptr, ptr, i32 } %600, ptr %594, 2
  %602 = insertvalue { ptr, ptr, ptr, i32 } %601, i32 %593, 3
  %603 = add nuw nsw i32 %590, 1
  %604 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %592)
  %605 = load ptr, ptr %598, align 8
  %606 = call align 4 ptr %605({ ptr, ptr, ptr, i32 } %602, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %607 = call i32 %606({ ptr, ptr, ptr, i32 } %602, { ptr, ptr, ptr, i32 } %602, ptr nonnull align 8 %2) #28
  br i1 %591, label %608, label %628

608:                                              ; preds = %587
  %609 = load i32, ptr %30, align 8
  %610 = add i32 %609, -1
  %611 = and i32 %610, %607
  %612 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %613 = load ptr, ptr %32, align 8
  %614 = sext i32 %611 to i64
  %615 = shl nsw i64 %614, 5
  %616 = getelementptr i8, ptr %613, i64 %615
  %617 = load ptr, ptr %616, align 8
  %618 = getelementptr i8, ptr %616, i64 8
  %619 = load i160, ptr %618, align 4
  store ptr %592, ptr %616, align 8
  store i64 %589, ptr %618, align 4
  %620 = getelementptr i8, ptr %616, i64 16
  store i64 %588, ptr %620, align 4
  %621 = getelementptr i8, ptr %616, i64 24
  store i32 %593, ptr %621, align 4
  %622 = icmp ne ptr %617, @nil_typ
  %623 = icmp ne ptr %617, null
  %624 = and i1 %622, %623
  %625 = trunc i160 %619 to i64
  %626 = lshr i160 %619, 64
  %627 = trunc i160 %626 to i64
  br i1 %624, label %666, label %686

628:                                              ; preds = %587
  %629 = add i32 %607, 2127912214
  %630 = shl i32 %607, 12
  %631 = add i32 %629, %630
  %632 = ashr i32 %631, 19
  %633 = xor i32 %631, %632
  %634 = xor i32 %633, -949894596
  %635 = add i32 %634, 374761393
  %636 = shl i32 %634, 5
  %637 = add i32 %635, %636
  %638 = add i32 %637, -744332180
  %639 = shl i32 %637, 9
  %640 = xor i32 %638, %639
  %641 = add i32 %640, -42973499
  %642 = shl i32 %640, 3
  %643 = add i32 %641, %642
  %644 = ashr i32 %643, 16
  %645 = xor i32 %643, %644
  %646 = xor i32 %645, -1252372727
  %647 = load i32, ptr %30, align 8
  %648 = add i32 %647, -1
  %649 = and i32 %648, %646
  %650 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %651 = load ptr, ptr %34, align 8
  %652 = sext i32 %649 to i64
  %653 = shl nsw i64 %652, 5
  %654 = getelementptr i8, ptr %651, i64 %653
  %655 = load ptr, ptr %654, align 8
  %656 = getelementptr i8, ptr %654, i64 8
  %657 = load i160, ptr %656, align 4
  store ptr %592, ptr %654, align 8
  store i64 %589, ptr %656, align 4
  %658 = getelementptr i8, ptr %654, i64 16
  store i64 %588, ptr %658, align 4
  %659 = getelementptr i8, ptr %654, i64 24
  store i32 %593, ptr %659, align 4
  %660 = icmp ne ptr %655, @nil_typ
  %661 = icmp ne ptr %655, null
  %662 = and i1 %660, %661
  %663 = trunc i160 %657 to i64
  %664 = lshr i160 %657, 64
  %665 = trunc i160 %664 to i64
  br i1 %662, label %666, label %686

666:                                              ; preds = %628, %608
  %667 = phi i64 [ %625, %608 ], [ %663, %628 ]
  %668 = phi i64 [ %627, %608 ], [ %665, %628 ]
  %669 = phi ptr [ %617, %608 ], [ %655, %628 ]
  %670 = getelementptr i8, ptr %669, i64 8
  %671 = getelementptr i8, ptr %669, i64 16
  %672 = getelementptr i8, ptr %669, i64 40
  %673 = load i64, ptr %670, align 4
  %674 = load i64, ptr %671, align 4
  %675 = load ptr, ptr %672, align 8
  %676 = mul i64 %673, 4015701072841558310
  %677 = lshr i64 %676, 32
  %678 = xor i64 %677, %676
  %679 = and i64 %678, %674
  %680 = getelementptr i32, ptr %675, i64 %679
  %681 = load i32, ptr %680, align 4
  %682 = xor i1 %591, true
  %683 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %684 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %685 = icmp eq i32 %603, 100
  br i1 %685, label %690, label %587

686:                                              ; preds = %628, %608
  %687 = load i32, ptr %67, align 4
  %688 = add i32 %687, 1
  %689 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %688, ptr %67, align 4
  br label %690

690:                                              ; preds = %686, %666
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %691

691:                                              ; preds = %690, %558
  %692 = add nuw nsw i64 %559, 1
  %693 = icmp eq i64 %692, %557
  br i1 %693, label %694, label %558

694:                                              ; preds = %827, %691
  %695 = phi i64 [ %828, %827 ], [ 0, %691 ]
  %696 = shl nuw nsw i64 %695, 5
  %697 = getelementptr i8, ptr %548, i64 %696
  %698 = load ptr, ptr %697, align 8
  %699 = icmp ne ptr %698, @nil_typ
  %700 = icmp ne ptr %698, null
  %701 = and i1 %699, %700
  br i1 %701, label %702, label %827

702:                                              ; preds = %694
  %703 = getelementptr i8, ptr %697, i64 8
  %704 = load i64, ptr %703, align 4
  %705 = getelementptr i8, ptr %697, i64 16
  %706 = load i64, ptr %705, align 4
  %707 = getelementptr i8, ptr %698, i64 8
  %708 = getelementptr i8, ptr %698, i64 16
  %709 = getelementptr i8, ptr %698, i64 40
  %710 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %711 = load i64, ptr %707, align 4, !noalias !25
  %712 = load i64, ptr %708, align 4, !noalias !25
  %713 = load ptr, ptr %709, align 8, !noalias !25
  %714 = mul i64 %711, 4015701072841558310
  %715 = lshr i64 %714, 32
  %716 = xor i64 %715, %714
  %717 = and i64 %716, %712
  %718 = getelementptr i32, ptr %713, i64 %717
  %719 = load i32, ptr %718, align 4, !noalias !347
  %720 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %721 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %722 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %723

723:                                              ; preds = %802, %702
  %724 = phi i64 [ %706, %702 ], [ %804, %802 ]
  %725 = phi i64 [ %704, %702 ], [ %803, %802 ]
  %726 = phi i32 [ 0, %702 ], [ %739, %802 ]
  %727 = phi i1 [ true, %702 ], [ %818, %802 ]
  %728 = phi ptr [ %698, %702 ], [ %805, %802 ]
  %729 = phi i32 [ %719, %702 ], [ %817, %802 ]
  %730 = inttoptr i64 %724 to ptr
  %731 = inttoptr i64 %725 to ptr
  %732 = sext i32 %729 to i64
  %733 = getelementptr ptr, ptr %728, i64 %732
  %734 = getelementptr i8, ptr %733, i64 64
  %735 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %728, 0
  %736 = insertvalue { ptr, ptr, ptr, i32 } %735, ptr %731, 1
  %737 = insertvalue { ptr, ptr, ptr, i32 } %736, ptr %730, 2
  %738 = insertvalue { ptr, ptr, ptr, i32 } %737, i32 %729, 3
  %739 = add nuw nsw i32 %726, 1
  %740 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %728)
  %741 = load ptr, ptr %734, align 8
  %742 = call align 4 ptr %741({ ptr, ptr, ptr, i32 } %738, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %743 = call i32 %742({ ptr, ptr, ptr, i32 } %738, { ptr, ptr, ptr, i32 } %738, ptr nonnull align 8 %2) #28
  br i1 %727, label %744, label %764

744:                                              ; preds = %723
  %745 = load i32, ptr %30, align 8
  %746 = add i32 %745, -1
  %747 = and i32 %746, %743
  %748 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %749 = load ptr, ptr %32, align 8
  %750 = sext i32 %747 to i64
  %751 = shl nsw i64 %750, 5
  %752 = getelementptr i8, ptr %749, i64 %751
  %753 = load ptr, ptr %752, align 8
  %754 = getelementptr i8, ptr %752, i64 8
  %755 = load i160, ptr %754, align 4
  store ptr %728, ptr %752, align 8
  store i64 %725, ptr %754, align 4
  %756 = getelementptr i8, ptr %752, i64 16
  store i64 %724, ptr %756, align 4
  %757 = getelementptr i8, ptr %752, i64 24
  store i32 %729, ptr %757, align 4
  %758 = icmp ne ptr %753, @nil_typ
  %759 = icmp ne ptr %753, null
  %760 = and i1 %758, %759
  %761 = trunc i160 %755 to i64
  %762 = lshr i160 %755, 64
  %763 = trunc i160 %762 to i64
  br i1 %760, label %802, label %822

764:                                              ; preds = %723
  %765 = add i32 %743, 2127912214
  %766 = shl i32 %743, 12
  %767 = add i32 %765, %766
  %768 = ashr i32 %767, 19
  %769 = xor i32 %767, %768
  %770 = xor i32 %769, -949894596
  %771 = add i32 %770, 374761393
  %772 = shl i32 %770, 5
  %773 = add i32 %771, %772
  %774 = add i32 %773, -744332180
  %775 = shl i32 %773, 9
  %776 = xor i32 %774, %775
  %777 = add i32 %776, -42973499
  %778 = shl i32 %776, 3
  %779 = add i32 %777, %778
  %780 = ashr i32 %779, 16
  %781 = xor i32 %779, %780
  %782 = xor i32 %781, -1252372727
  %783 = load i32, ptr %30, align 8
  %784 = add i32 %783, -1
  %785 = and i32 %784, %782
  %786 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %787 = load ptr, ptr %34, align 8
  %788 = sext i32 %785 to i64
  %789 = shl nsw i64 %788, 5
  %790 = getelementptr i8, ptr %787, i64 %789
  %791 = load ptr, ptr %790, align 8
  %792 = getelementptr i8, ptr %790, i64 8
  %793 = load i160, ptr %792, align 4
  store ptr %728, ptr %790, align 8
  store i64 %725, ptr %792, align 4
  %794 = getelementptr i8, ptr %790, i64 16
  store i64 %724, ptr %794, align 4
  %795 = getelementptr i8, ptr %790, i64 24
  store i32 %729, ptr %795, align 4
  %796 = icmp ne ptr %791, @nil_typ
  %797 = icmp ne ptr %791, null
  %798 = and i1 %796, %797
  %799 = trunc i160 %793 to i64
  %800 = lshr i160 %793, 64
  %801 = trunc i160 %800 to i64
  br i1 %798, label %802, label %822

802:                                              ; preds = %764, %744
  %803 = phi i64 [ %761, %744 ], [ %799, %764 ]
  %804 = phi i64 [ %763, %744 ], [ %801, %764 ]
  %805 = phi ptr [ %753, %744 ], [ %791, %764 ]
  %806 = getelementptr i8, ptr %805, i64 8
  %807 = getelementptr i8, ptr %805, i64 16
  %808 = getelementptr i8, ptr %805, i64 40
  %809 = load i64, ptr %806, align 4
  %810 = load i64, ptr %807, align 4
  %811 = load ptr, ptr %808, align 8
  %812 = mul i64 %809, 4015701072841558310
  %813 = lshr i64 %812, 32
  %814 = xor i64 %813, %812
  %815 = and i64 %814, %810
  %816 = getelementptr i32, ptr %811, i64 %815
  %817 = load i32, ptr %816, align 4
  %818 = xor i1 %727, true
  %819 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %820 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %821 = icmp eq i32 %739, 100
  br i1 %821, label %826, label %723

822:                                              ; preds = %764, %744
  %823 = load i32, ptr %67, align 4
  %824 = add i32 %823, 1
  %825 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %824, ptr %67, align 4
  br label %826

826:                                              ; preds = %822, %802
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %827

827:                                              ; preds = %826, %694
  %828 = add nuw nsw i64 %695, 1
  %829 = icmp eq i64 %828, %557
  br i1 %829, label %830, label %694

830:                                              ; preds = %827, %544, %540
  %831 = load ptr, ptr %16, align 8
  %832 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %833 = load ptr, ptr %17, align 8
  %834 = load ptr, ptr %831, align 8
  %835 = getelementptr i8, ptr %834, i64 72
  %836 = load ptr, ptr %835, align 8
  %837 = call { i64, i64 } %836(ptr nocapture nofree nonnull readonly align 8 %831) #2
  %838 = extractvalue { i64, i64 } %837, 0
  %839 = extractvalue { i64, i64 } %837, 1
  %840 = urem i64 20, %839
  %841 = icmp eq i64 %840, 0
  %842 = sub i64 %839, %840
  %843 = select i1 %841, i64 0, i64 %842
  %844 = add i64 %838, 20
  %845 = add i64 %844, %843
  %846 = load ptr, ptr %833, align 8
  %847 = getelementptr i8, ptr %846, i64 72
  %848 = load ptr, ptr %847, align 8
  %849 = call { i64, i64 } %848(ptr nocapture nofree nonnull readonly align 8 %833) #2
  %850 = extractvalue { i64, i64 } %849, 0
  %851 = extractvalue { i64, i64 } %849, 1
  %852 = call i64 @llvm.umax.i64(i64 %839, i64 %851) #44
  %853 = call i64 @llvm.umax.i64(i64 %852, i64 noundef 8) #44, !range !18
  %854 = urem i64 %845, %851
  %855 = icmp eq i64 %854, 0
  %856 = sub i64 %851, %854
  %857 = select i1 %855, i64 0, i64 %856
  %858 = add i64 %850, %845
  %859 = add i64 %858, %857
  %860 = urem i64 %859, %853
  %861 = icmp eq i64 %860, 0
  %862 = sub i64 %853, %860
  %863 = select i1 %861, i64 0, i64 %862
  %864 = add i64 %863, %859
  %865 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %864, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %831, ptr %865, align 8
  %866 = getelementptr inbounds i8, ptr %865, i64 8
  store ptr %833, ptr %866, align 8
  %867 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %865)
  %868 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %869 = load ptr, ptr %831, align 8
  %870 = getelementptr i8, ptr %869, i64 72
  %871 = load ptr, ptr %870, align 8
  %872 = call { i64, i64 } %871(ptr nocapture nofree nonnull readonly align 8 %831) #2
  %873 = extractvalue { i64, i64 } %872, 1
  %874 = urem i64 20, %873
  %875 = icmp eq i64 %874, 0
  %876 = sub i64 %873, %874
  %877 = add i64 %876, 20
  %878 = select i1 %875, i64 20, i64 %877
  %879 = getelementptr i8, ptr %865, i64 %878
  %880 = getelementptr i8, ptr %869, i64 64
  %881 = load ptr, ptr %880, align 8
  call void %881({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %831, ptr nocapture nofree writeonly %879) #8
  %882 = load ptr, ptr %865, align 8
  %883 = load ptr, ptr %882, align 8
  %884 = getelementptr i8, ptr %883, i64 72
  %885 = load ptr, ptr %884, align 8
  %886 = call { i64, i64 } %885(ptr nocapture nofree nonnull readonly align 8 %882) #2
  %887 = extractvalue { i64, i64 } %886, 0
  %888 = extractvalue { i64, i64 } %886, 1
  %889 = urem i64 20, %888
  %890 = icmp eq i64 %889, 0
  %891 = sub i64 %888, %889
  %892 = select i1 %890, i64 0, i64 %891
  %893 = add i64 %887, 20
  %894 = add i64 %893, %892
  %895 = load ptr, ptr %866, align 8
  %896 = load ptr, ptr %895, align 8
  %897 = getelementptr i8, ptr %896, i64 72
  %898 = load ptr, ptr %897, align 8
  %899 = call { i64, i64 } %898(ptr nocapture nofree nonnull readonly align 8 %895) #2
  %900 = extractvalue { i64, i64 } %899, 1
  %901 = urem i64 %894, %900
  %902 = icmp eq i64 %901, 0
  %903 = sub i64 %900, %901
  %904 = select i1 %902, i64 0, i64 %903
  %905 = getelementptr i8, ptr %865, i64 %894
  %906 = getelementptr i8, ptr %905, i64 %904
  %907 = getelementptr i8, ptr %896, i64 64
  %908 = load ptr, ptr %907, align 8
  call void %908({ ptr, i160 } %245, ptr nocapture nofree nonnull readonly align 8 %895, ptr nocapture nofree writeonly %906) #8
  %909 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %910 = getelementptr inbounds i8, ptr %865, i64 16
  store i32 %247, ptr %910, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %911 = ptrtoint ptr %865 to i64
  %912 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %913 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %914 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %915

915:                                              ; preds = %994, %830
  %916 = phi i64 [ undef, %830 ], [ %996, %994 ]
  %917 = phi i64 [ %911, %830 ], [ %995, %994 ]
  %918 = phi i32 [ 0, %830 ], [ %931, %994 ]
  %919 = phi i1 [ true, %830 ], [ %1012, %994 ]
  %920 = phi ptr [ @Entry, %830 ], [ %997, %994 ]
  %921 = phi ptr [ %865, %830 ], [ %998, %994 ]
  %922 = phi ptr [ undef, %830 ], [ %999, %994 ]
  %923 = phi i32 [ 10, %830 ], [ %1011, %994 ]
  %924 = sext i32 %923 to i64
  %925 = getelementptr ptr, ptr %920, i64 %924
  %926 = getelementptr i8, ptr %925, i64 64
  %927 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %920, 0
  %928 = insertvalue { ptr, ptr, ptr, i32 } %927, ptr %921, 1
  %929 = insertvalue { ptr, ptr, ptr, i32 } %928, ptr %922, 2
  %930 = insertvalue { ptr, ptr, ptr, i32 } %929, i32 %923, 3
  %931 = add nuw nsw i32 %918, 1
  %932 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %920)
  %933 = load ptr, ptr %926, align 8
  %934 = call align 4 ptr %933({ ptr, ptr, ptr, i32 } %930, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %935 = call i32 %934({ ptr, ptr, ptr, i32 } %930, { ptr, ptr, ptr, i32 } %930, ptr nonnull align 8 %2) #28
  br i1 %919, label %936, label %956

936:                                              ; preds = %915
  %937 = load i32, ptr %30, align 8
  %938 = add i32 %937, -1
  %939 = and i32 %938, %935
  %940 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %941 = load ptr, ptr %32, align 8
  %942 = sext i32 %939 to i64
  %943 = shl nsw i64 %942, 5
  %944 = getelementptr i8, ptr %941, i64 %943
  %945 = load ptr, ptr %944, align 8
  %946 = getelementptr i8, ptr %944, i64 8
  %947 = load i160, ptr %946, align 4
  store ptr %920, ptr %944, align 8
  store i64 %917, ptr %946, align 4
  %948 = getelementptr i8, ptr %944, i64 16
  store i64 %916, ptr %948, align 4
  %949 = getelementptr i8, ptr %944, i64 24
  store i32 %923, ptr %949, align 4
  %950 = icmp ne ptr %945, @nil_typ
  %951 = icmp ne ptr %945, null
  %952 = and i1 %950, %951
  %953 = trunc i160 %947 to i64
  %954 = lshr i160 %947, 64
  %955 = trunc i160 %954 to i64
  br i1 %952, label %994, label %1016

956:                                              ; preds = %915
  %957 = add i32 %935, 2127912214
  %958 = shl i32 %935, 12
  %959 = add i32 %957, %958
  %960 = ashr i32 %959, 19
  %961 = xor i32 %959, %960
  %962 = xor i32 %961, -949894596
  %963 = add i32 %962, 374761393
  %964 = shl i32 %962, 5
  %965 = add i32 %963, %964
  %966 = add i32 %965, -744332180
  %967 = shl i32 %965, 9
  %968 = xor i32 %966, %967
  %969 = add i32 %968, -42973499
  %970 = shl i32 %968, 3
  %971 = add i32 %969, %970
  %972 = ashr i32 %971, 16
  %973 = xor i32 %971, %972
  %974 = xor i32 %973, -1252372727
  %975 = load i32, ptr %30, align 8
  %976 = add i32 %975, -1
  %977 = and i32 %976, %974
  %978 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %979 = load ptr, ptr %34, align 8
  %980 = sext i32 %977 to i64
  %981 = shl nsw i64 %980, 5
  %982 = getelementptr i8, ptr %979, i64 %981
  %983 = load ptr, ptr %982, align 8
  %984 = getelementptr i8, ptr %982, i64 8
  %985 = load i160, ptr %984, align 4
  store ptr %920, ptr %982, align 8
  store i64 %917, ptr %984, align 4
  %986 = getelementptr i8, ptr %982, i64 16
  store i64 %916, ptr %986, align 4
  %987 = getelementptr i8, ptr %982, i64 24
  store i32 %923, ptr %987, align 4
  %988 = icmp ne ptr %983, @nil_typ
  %989 = icmp ne ptr %983, null
  %990 = and i1 %988, %989
  %991 = trunc i160 %985 to i64
  %992 = lshr i160 %985, 64
  %993 = trunc i160 %992 to i64
  br i1 %990, label %994, label %1016

994:                                              ; preds = %956, %936
  %995 = phi i64 [ %953, %936 ], [ %991, %956 ]
  %996 = phi i64 [ %955, %936 ], [ %993, %956 ]
  %997 = phi ptr [ %945, %936 ], [ %983, %956 ]
  %998 = inttoptr i64 %995 to ptr
  %999 = inttoptr i64 %996 to ptr
  %1000 = getelementptr i8, ptr %997, i64 8
  %1001 = getelementptr i8, ptr %997, i64 16
  %1002 = getelementptr i8, ptr %997, i64 40
  %1003 = load i64, ptr %1000, align 4
  %1004 = load i64, ptr %1001, align 4
  %1005 = load ptr, ptr %1002, align 8
  %1006 = mul i64 %1003, 4015701072841558310
  %1007 = lshr i64 %1006, 32
  %1008 = xor i64 %1007, %1006
  %1009 = and i64 %1008, %1004
  %1010 = getelementptr i32, ptr %1005, i64 %1009
  %1011 = load i32, ptr %1010, align 4
  %1012 = xor i1 %919, true
  %1013 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1014 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1015 = icmp eq i32 %931, 100
  br i1 %1015, label %1020, label %915

1016:                                             ; preds = %956, %936
  %1017 = load i32, ptr %67, align 4
  %1018 = add i32 %1017, 1
  %1019 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1018, ptr %67, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1719

1020:                                             ; preds = %994
  %1021 = getelementptr i8, ptr %997, i64 8
  %1022 = getelementptr i8, ptr %997, i64 16
  %1023 = getelementptr i8, ptr %997, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1024 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1025 = load ptr, ptr %32, align 8
  %1026 = load ptr, ptr %34, align 8
  %1027 = load i32, ptr %30, align 8
  %1028 = shl i32 %1027, 1
  %1029 = call i32 @llvm.smax.i32(i32 %1028, i32 noundef 16) #43
  store i32 %1029, ptr %30, align 8
  %1030 = zext nneg i32 %1029 to i64
  %1031 = shl nuw nsw i64 %1030, 5
  %1032 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1031, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1032, ptr %32, align 8
  %1033 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1031, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1033, ptr %34, align 8
  store i32 0, ptr %67, align 4
  %1034 = icmp sgt i32 %1027, 0
  br i1 %1034, label %1037, label %1035

1035:                                             ; preds = %1020
  %1036 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1313

1037:                                             ; preds = %1020
  %1038 = zext nneg i32 %1027 to i64
  br label %1039

1039:                                             ; preds = %1172, %1037
  %1040 = phi i64 [ 0, %1037 ], [ %1173, %1172 ]
  %1041 = shl nuw nsw i64 %1040, 5
  %1042 = getelementptr i8, ptr %1025, i64 %1041
  %1043 = load ptr, ptr %1042, align 8
  %1044 = icmp ne ptr %1043, @nil_typ
  %1045 = icmp ne ptr %1043, null
  %1046 = and i1 %1044, %1045
  br i1 %1046, label %1047, label %1172

1047:                                             ; preds = %1039
  %1048 = getelementptr i8, ptr %1042, i64 8
  %1049 = load i64, ptr %1048, align 4
  %1050 = getelementptr i8, ptr %1042, i64 16
  %1051 = load i64, ptr %1050, align 4
  %1052 = getelementptr i8, ptr %1043, i64 8
  %1053 = getelementptr i8, ptr %1043, i64 16
  %1054 = getelementptr i8, ptr %1043, i64 40
  %1055 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1056 = load i64, ptr %1052, align 4, !noalias !25
  %1057 = load i64, ptr %1053, align 4, !noalias !25
  %1058 = load ptr, ptr %1054, align 8, !noalias !25
  %1059 = mul i64 %1056, 4015701072841558310
  %1060 = lshr i64 %1059, 32
  %1061 = xor i64 %1060, %1059
  %1062 = and i64 %1061, %1057
  %1063 = getelementptr i32, ptr %1058, i64 %1062
  %1064 = load i32, ptr %1063, align 4, !noalias !350
  %1065 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1066 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1067 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1068

1068:                                             ; preds = %1147, %1047
  %1069 = phi i64 [ %1051, %1047 ], [ %1149, %1147 ]
  %1070 = phi i64 [ %1049, %1047 ], [ %1148, %1147 ]
  %1071 = phi i32 [ 0, %1047 ], [ %1084, %1147 ]
  %1072 = phi i1 [ true, %1047 ], [ %1163, %1147 ]
  %1073 = phi ptr [ %1043, %1047 ], [ %1150, %1147 ]
  %1074 = phi i32 [ %1064, %1047 ], [ %1162, %1147 ]
  %1075 = inttoptr i64 %1069 to ptr
  %1076 = inttoptr i64 %1070 to ptr
  %1077 = sext i32 %1074 to i64
  %1078 = getelementptr ptr, ptr %1073, i64 %1077
  %1079 = getelementptr i8, ptr %1078, i64 64
  %1080 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1073, 0
  %1081 = insertvalue { ptr, ptr, ptr, i32 } %1080, ptr %1076, 1
  %1082 = insertvalue { ptr, ptr, ptr, i32 } %1081, ptr %1075, 2
  %1083 = insertvalue { ptr, ptr, ptr, i32 } %1082, i32 %1074, 3
  %1084 = add nuw nsw i32 %1071, 1
  %1085 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1073)
  %1086 = load ptr, ptr %1079, align 8
  %1087 = call align 4 ptr %1086({ ptr, ptr, ptr, i32 } %1083, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1088 = call i32 %1087({ ptr, ptr, ptr, i32 } %1083, { ptr, ptr, ptr, i32 } %1083, ptr nonnull align 8 %2) #28
  br i1 %1072, label %1089, label %1109

1089:                                             ; preds = %1068
  %1090 = load i32, ptr %30, align 8
  %1091 = add i32 %1090, -1
  %1092 = and i32 %1091, %1088
  %1093 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1094 = load ptr, ptr %32, align 8
  %1095 = sext i32 %1092 to i64
  %1096 = shl nsw i64 %1095, 5
  %1097 = getelementptr i8, ptr %1094, i64 %1096
  %1098 = load ptr, ptr %1097, align 8
  %1099 = getelementptr i8, ptr %1097, i64 8
  %1100 = load i160, ptr %1099, align 4
  store ptr %1073, ptr %1097, align 8
  store i64 %1070, ptr %1099, align 4
  %1101 = getelementptr i8, ptr %1097, i64 16
  store i64 %1069, ptr %1101, align 4
  %1102 = getelementptr i8, ptr %1097, i64 24
  store i32 %1074, ptr %1102, align 4
  %1103 = icmp ne ptr %1098, @nil_typ
  %1104 = icmp ne ptr %1098, null
  %1105 = and i1 %1103, %1104
  %1106 = trunc i160 %1100 to i64
  %1107 = lshr i160 %1100, 64
  %1108 = trunc i160 %1107 to i64
  br i1 %1105, label %1147, label %1167

1109:                                             ; preds = %1068
  %1110 = add i32 %1088, 2127912214
  %1111 = shl i32 %1088, 12
  %1112 = add i32 %1110, %1111
  %1113 = ashr i32 %1112, 19
  %1114 = xor i32 %1112, %1113
  %1115 = xor i32 %1114, -949894596
  %1116 = add i32 %1115, 374761393
  %1117 = shl i32 %1115, 5
  %1118 = add i32 %1116, %1117
  %1119 = add i32 %1118, -744332180
  %1120 = shl i32 %1118, 9
  %1121 = xor i32 %1119, %1120
  %1122 = add i32 %1121, -42973499
  %1123 = shl i32 %1121, 3
  %1124 = add i32 %1122, %1123
  %1125 = ashr i32 %1124, 16
  %1126 = xor i32 %1124, %1125
  %1127 = xor i32 %1126, -1252372727
  %1128 = load i32, ptr %30, align 8
  %1129 = add i32 %1128, -1
  %1130 = and i32 %1129, %1127
  %1131 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1132 = load ptr, ptr %34, align 8
  %1133 = sext i32 %1130 to i64
  %1134 = shl nsw i64 %1133, 5
  %1135 = getelementptr i8, ptr %1132, i64 %1134
  %1136 = load ptr, ptr %1135, align 8
  %1137 = getelementptr i8, ptr %1135, i64 8
  %1138 = load i160, ptr %1137, align 4
  store ptr %1073, ptr %1135, align 8
  store i64 %1070, ptr %1137, align 4
  %1139 = getelementptr i8, ptr %1135, i64 16
  store i64 %1069, ptr %1139, align 4
  %1140 = getelementptr i8, ptr %1135, i64 24
  store i32 %1074, ptr %1140, align 4
  %1141 = icmp ne ptr %1136, @nil_typ
  %1142 = icmp ne ptr %1136, null
  %1143 = and i1 %1141, %1142
  %1144 = trunc i160 %1138 to i64
  %1145 = lshr i160 %1138, 64
  %1146 = trunc i160 %1145 to i64
  br i1 %1143, label %1147, label %1167

1147:                                             ; preds = %1109, %1089
  %1148 = phi i64 [ %1106, %1089 ], [ %1144, %1109 ]
  %1149 = phi i64 [ %1108, %1089 ], [ %1146, %1109 ]
  %1150 = phi ptr [ %1098, %1089 ], [ %1136, %1109 ]
  %1151 = getelementptr i8, ptr %1150, i64 8
  %1152 = getelementptr i8, ptr %1150, i64 16
  %1153 = getelementptr i8, ptr %1150, i64 40
  %1154 = load i64, ptr %1151, align 4
  %1155 = load i64, ptr %1152, align 4
  %1156 = load ptr, ptr %1153, align 8
  %1157 = mul i64 %1154, 4015701072841558310
  %1158 = lshr i64 %1157, 32
  %1159 = xor i64 %1158, %1157
  %1160 = and i64 %1159, %1155
  %1161 = getelementptr i32, ptr %1156, i64 %1160
  %1162 = load i32, ptr %1161, align 4
  %1163 = xor i1 %1072, true
  %1164 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1165 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1166 = icmp eq i32 %1084, 100
  br i1 %1166, label %1171, label %1068

1167:                                             ; preds = %1109, %1089
  %1168 = load i32, ptr %67, align 4
  %1169 = add i32 %1168, 1
  %1170 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1169, ptr %67, align 4
  br label %1171

1171:                                             ; preds = %1167, %1147
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1172

1172:                                             ; preds = %1171, %1039
  %1173 = add nuw nsw i64 %1040, 1
  %1174 = icmp eq i64 %1173, %1038
  br i1 %1174, label %1175, label %1039

1175:                                             ; preds = %1172
  %1176 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1177

1177:                                             ; preds = %1310, %1175
  %1178 = phi i64 [ 0, %1175 ], [ %1311, %1310 ]
  %1179 = shl nuw nsw i64 %1178, 5
  %1180 = getelementptr i8, ptr %1026, i64 %1179
  %1181 = load ptr, ptr %1180, align 8
  %1182 = icmp ne ptr %1181, @nil_typ
  %1183 = icmp ne ptr %1181, null
  %1184 = and i1 %1182, %1183
  br i1 %1184, label %1185, label %1310

1185:                                             ; preds = %1177
  %1186 = getelementptr i8, ptr %1180, i64 8
  %1187 = load i64, ptr %1186, align 4
  %1188 = getelementptr i8, ptr %1180, i64 16
  %1189 = load i64, ptr %1188, align 4
  %1190 = getelementptr i8, ptr %1181, i64 8
  %1191 = getelementptr i8, ptr %1181, i64 16
  %1192 = getelementptr i8, ptr %1181, i64 40
  %1193 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1194 = load i64, ptr %1190, align 4, !noalias !25
  %1195 = load i64, ptr %1191, align 4, !noalias !25
  %1196 = load ptr, ptr %1192, align 8, !noalias !25
  %1197 = mul i64 %1194, 4015701072841558310
  %1198 = lshr i64 %1197, 32
  %1199 = xor i64 %1198, %1197
  %1200 = and i64 %1199, %1195
  %1201 = getelementptr i32, ptr %1196, i64 %1200
  %1202 = load i32, ptr %1201, align 4, !noalias !353
  %1203 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1204 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1205 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1206

1206:                                             ; preds = %1285, %1185
  %1207 = phi i64 [ %1189, %1185 ], [ %1287, %1285 ]
  %1208 = phi i64 [ %1187, %1185 ], [ %1286, %1285 ]
  %1209 = phi i32 [ 0, %1185 ], [ %1222, %1285 ]
  %1210 = phi i1 [ true, %1185 ], [ %1301, %1285 ]
  %1211 = phi ptr [ %1181, %1185 ], [ %1288, %1285 ]
  %1212 = phi i32 [ %1202, %1185 ], [ %1300, %1285 ]
  %1213 = inttoptr i64 %1207 to ptr
  %1214 = inttoptr i64 %1208 to ptr
  %1215 = sext i32 %1212 to i64
  %1216 = getelementptr ptr, ptr %1211, i64 %1215
  %1217 = getelementptr i8, ptr %1216, i64 64
  %1218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1211, 0
  %1219 = insertvalue { ptr, ptr, ptr, i32 } %1218, ptr %1214, 1
  %1220 = insertvalue { ptr, ptr, ptr, i32 } %1219, ptr %1213, 2
  %1221 = insertvalue { ptr, ptr, ptr, i32 } %1220, i32 %1212, 3
  %1222 = add nuw nsw i32 %1209, 1
  %1223 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1211)
  %1224 = load ptr, ptr %1217, align 8
  %1225 = call align 4 ptr %1224({ ptr, ptr, ptr, i32 } %1221, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1226 = call i32 %1225({ ptr, ptr, ptr, i32 } %1221, { ptr, ptr, ptr, i32 } %1221, ptr nonnull align 8 %2) #28
  br i1 %1210, label %1227, label %1247

1227:                                             ; preds = %1206
  %1228 = load i32, ptr %30, align 8
  %1229 = add i32 %1228, -1
  %1230 = and i32 %1229, %1226
  %1231 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1232 = load ptr, ptr %32, align 8
  %1233 = sext i32 %1230 to i64
  %1234 = shl nsw i64 %1233, 5
  %1235 = getelementptr i8, ptr %1232, i64 %1234
  %1236 = load ptr, ptr %1235, align 8
  %1237 = getelementptr i8, ptr %1235, i64 8
  %1238 = load i160, ptr %1237, align 4
  store ptr %1211, ptr %1235, align 8
  store i64 %1208, ptr %1237, align 4
  %1239 = getelementptr i8, ptr %1235, i64 16
  store i64 %1207, ptr %1239, align 4
  %1240 = getelementptr i8, ptr %1235, i64 24
  store i32 %1212, ptr %1240, align 4
  %1241 = icmp ne ptr %1236, @nil_typ
  %1242 = icmp ne ptr %1236, null
  %1243 = and i1 %1241, %1242
  %1244 = trunc i160 %1238 to i64
  %1245 = lshr i160 %1238, 64
  %1246 = trunc i160 %1245 to i64
  br i1 %1243, label %1285, label %1305

1247:                                             ; preds = %1206
  %1248 = add i32 %1226, 2127912214
  %1249 = shl i32 %1226, 12
  %1250 = add i32 %1248, %1249
  %1251 = ashr i32 %1250, 19
  %1252 = xor i32 %1250, %1251
  %1253 = xor i32 %1252, -949894596
  %1254 = add i32 %1253, 374761393
  %1255 = shl i32 %1253, 5
  %1256 = add i32 %1254, %1255
  %1257 = add i32 %1256, -744332180
  %1258 = shl i32 %1256, 9
  %1259 = xor i32 %1257, %1258
  %1260 = add i32 %1259, -42973499
  %1261 = shl i32 %1259, 3
  %1262 = add i32 %1260, %1261
  %1263 = ashr i32 %1262, 16
  %1264 = xor i32 %1262, %1263
  %1265 = xor i32 %1264, -1252372727
  %1266 = load i32, ptr %30, align 8
  %1267 = add i32 %1266, -1
  %1268 = and i32 %1267, %1265
  %1269 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1270 = load ptr, ptr %34, align 8
  %1271 = sext i32 %1268 to i64
  %1272 = shl nsw i64 %1271, 5
  %1273 = getelementptr i8, ptr %1270, i64 %1272
  %1274 = load ptr, ptr %1273, align 8
  %1275 = getelementptr i8, ptr %1273, i64 8
  %1276 = load i160, ptr %1275, align 4
  store ptr %1211, ptr %1273, align 8
  store i64 %1208, ptr %1275, align 4
  %1277 = getelementptr i8, ptr %1273, i64 16
  store i64 %1207, ptr %1277, align 4
  %1278 = getelementptr i8, ptr %1273, i64 24
  store i32 %1212, ptr %1278, align 4
  %1279 = icmp ne ptr %1274, @nil_typ
  %1280 = icmp ne ptr %1274, null
  %1281 = and i1 %1279, %1280
  %1282 = trunc i160 %1276 to i64
  %1283 = lshr i160 %1276, 64
  %1284 = trunc i160 %1283 to i64
  br i1 %1281, label %1285, label %1305

1285:                                             ; preds = %1247, %1227
  %1286 = phi i64 [ %1244, %1227 ], [ %1282, %1247 ]
  %1287 = phi i64 [ %1246, %1227 ], [ %1284, %1247 ]
  %1288 = phi ptr [ %1236, %1227 ], [ %1274, %1247 ]
  %1289 = getelementptr i8, ptr %1288, i64 8
  %1290 = getelementptr i8, ptr %1288, i64 16
  %1291 = getelementptr i8, ptr %1288, i64 40
  %1292 = load i64, ptr %1289, align 4
  %1293 = load i64, ptr %1290, align 4
  %1294 = load ptr, ptr %1291, align 8
  %1295 = mul i64 %1292, 4015701072841558310
  %1296 = lshr i64 %1295, 32
  %1297 = xor i64 %1296, %1295
  %1298 = and i64 %1297, %1293
  %1299 = getelementptr i32, ptr %1294, i64 %1298
  %1300 = load i32, ptr %1299, align 4
  %1301 = xor i1 %1210, true
  %1302 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1303 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1304 = icmp eq i32 %1222, 100
  br i1 %1304, label %1309, label %1206

1305:                                             ; preds = %1247, %1227
  %1306 = load i32, ptr %67, align 4
  %1307 = add i32 %1306, 1
  %1308 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1307, ptr %67, align 4
  br label %1309

1309:                                             ; preds = %1305, %1285
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1310

1310:                                             ; preds = %1309, %1177
  %1311 = add nuw nsw i64 %1178, 1
  %1312 = icmp eq i64 %1311, %1038
  br i1 %1312, label %1313, label %1177

1313:                                             ; preds = %1310, %1035
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1314 = load i64, ptr %1021, align 4, !noalias !25
  %1315 = load i64, ptr %1022, align 4, !noalias !25
  %1316 = load ptr, ptr %1023, align 8, !noalias !25
  %1317 = mul i64 %1314, 4015701072841558310
  %1318 = lshr i64 %1317, 32
  %1319 = xor i64 %1318, %1317
  %1320 = and i64 %1319, %1315
  %1321 = getelementptr i32, ptr %1316, i64 %1320
  %1322 = load i32, ptr %1321, align 4, !noalias !356
  %1323 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1324 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1325 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1326

1326:                                             ; preds = %1405, %1313
  %1327 = phi i64 [ %996, %1313 ], [ %1407, %1405 ]
  %1328 = phi i64 [ %995, %1313 ], [ %1406, %1405 ]
  %1329 = phi i32 [ 0, %1313 ], [ %1342, %1405 ]
  %1330 = phi i1 [ true, %1313 ], [ %1421, %1405 ]
  %1331 = phi ptr [ %997, %1313 ], [ %1408, %1405 ]
  %1332 = phi i32 [ %1322, %1313 ], [ %1420, %1405 ]
  %1333 = inttoptr i64 %1327 to ptr
  %1334 = inttoptr i64 %1328 to ptr
  %1335 = sext i32 %1332 to i64
  %1336 = getelementptr ptr, ptr %1331, i64 %1335
  %1337 = getelementptr i8, ptr %1336, i64 64
  %1338 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1331, 0
  %1339 = insertvalue { ptr, ptr, ptr, i32 } %1338, ptr %1334, 1
  %1340 = insertvalue { ptr, ptr, ptr, i32 } %1339, ptr %1333, 2
  %1341 = insertvalue { ptr, ptr, ptr, i32 } %1340, i32 %1332, 3
  %1342 = add nuw nsw i32 %1329, 1
  %1343 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1331)
  %1344 = load ptr, ptr %1337, align 8
  %1345 = call align 4 ptr %1344({ ptr, ptr, ptr, i32 } %1341, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1346 = call i32 %1345({ ptr, ptr, ptr, i32 } %1341, { ptr, ptr, ptr, i32 } %1341, ptr nonnull align 8 %2) #28
  br i1 %1330, label %1347, label %1367

1347:                                             ; preds = %1326
  %1348 = load i32, ptr %30, align 8
  %1349 = add i32 %1348, -1
  %1350 = and i32 %1349, %1346
  %1351 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1352 = load ptr, ptr %32, align 8
  %1353 = sext i32 %1350 to i64
  %1354 = shl nsw i64 %1353, 5
  %1355 = getelementptr i8, ptr %1352, i64 %1354
  %1356 = load ptr, ptr %1355, align 8
  %1357 = getelementptr i8, ptr %1355, i64 8
  %1358 = load i160, ptr %1357, align 4
  store ptr %1331, ptr %1355, align 8
  store i64 %1328, ptr %1357, align 4
  %1359 = getelementptr i8, ptr %1355, i64 16
  store i64 %1327, ptr %1359, align 4
  %1360 = getelementptr i8, ptr %1355, i64 24
  store i32 %1332, ptr %1360, align 4
  %1361 = icmp ne ptr %1356, @nil_typ
  %1362 = icmp ne ptr %1356, null
  %1363 = and i1 %1361, %1362
  %1364 = trunc i160 %1358 to i64
  %1365 = lshr i160 %1358, 64
  %1366 = trunc i160 %1365 to i64
  br i1 %1363, label %1405, label %1425

1367:                                             ; preds = %1326
  %1368 = add i32 %1346, 2127912214
  %1369 = shl i32 %1346, 12
  %1370 = add i32 %1368, %1369
  %1371 = ashr i32 %1370, 19
  %1372 = xor i32 %1370, %1371
  %1373 = xor i32 %1372, -949894596
  %1374 = add i32 %1373, 374761393
  %1375 = shl i32 %1373, 5
  %1376 = add i32 %1374, %1375
  %1377 = add i32 %1376, -744332180
  %1378 = shl i32 %1376, 9
  %1379 = xor i32 %1377, %1378
  %1380 = add i32 %1379, -42973499
  %1381 = shl i32 %1379, 3
  %1382 = add i32 %1380, %1381
  %1383 = ashr i32 %1382, 16
  %1384 = xor i32 %1382, %1383
  %1385 = xor i32 %1384, -1252372727
  %1386 = load i32, ptr %30, align 8
  %1387 = add i32 %1386, -1
  %1388 = and i32 %1387, %1385
  %1389 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1390 = load ptr, ptr %34, align 8
  %1391 = sext i32 %1388 to i64
  %1392 = shl nsw i64 %1391, 5
  %1393 = getelementptr i8, ptr %1390, i64 %1392
  %1394 = load ptr, ptr %1393, align 8
  %1395 = getelementptr i8, ptr %1393, i64 8
  %1396 = load i160, ptr %1395, align 4
  store ptr %1331, ptr %1393, align 8
  store i64 %1328, ptr %1395, align 4
  %1397 = getelementptr i8, ptr %1393, i64 16
  store i64 %1327, ptr %1397, align 4
  %1398 = getelementptr i8, ptr %1393, i64 24
  store i32 %1332, ptr %1398, align 4
  %1399 = icmp ne ptr %1394, @nil_typ
  %1400 = icmp ne ptr %1394, null
  %1401 = and i1 %1399, %1400
  %1402 = trunc i160 %1396 to i64
  %1403 = lshr i160 %1396, 64
  %1404 = trunc i160 %1403 to i64
  br i1 %1401, label %1405, label %1425

1405:                                             ; preds = %1367, %1347
  %1406 = phi i64 [ %1364, %1347 ], [ %1402, %1367 ]
  %1407 = phi i64 [ %1366, %1347 ], [ %1404, %1367 ]
  %1408 = phi ptr [ %1356, %1347 ], [ %1394, %1367 ]
  %1409 = getelementptr i8, ptr %1408, i64 8
  %1410 = getelementptr i8, ptr %1408, i64 16
  %1411 = getelementptr i8, ptr %1408, i64 40
  %1412 = load i64, ptr %1409, align 4
  %1413 = load i64, ptr %1410, align 4
  %1414 = load ptr, ptr %1411, align 8
  %1415 = mul i64 %1412, 4015701072841558310
  %1416 = lshr i64 %1415, 32
  %1417 = xor i64 %1416, %1415
  %1418 = and i64 %1417, %1413
  %1419 = getelementptr i32, ptr %1414, i64 %1418
  %1420 = load i32, ptr %1419, align 4
  %1421 = xor i1 %1330, true
  %1422 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1423 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1424 = icmp eq i32 %1342, 100
  br i1 %1424, label %1429, label %1326

1425:                                             ; preds = %1367, %1347
  %1426 = load i32, ptr %67, align 4
  %1427 = add i32 %1426, 1
  %1428 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1427, ptr %67, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1719

1429:                                             ; preds = %1405
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1430 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1431 = load ptr, ptr %32, align 8
  %1432 = load ptr, ptr %34, align 8
  %1433 = load i32, ptr %30, align 8
  %1434 = shl i32 %1433, 1
  %1435 = call i32 @llvm.smax.i32(i32 %1434, i32 noundef 16) #43
  store i32 %1435, ptr %30, align 8
  %1436 = zext nneg i32 %1435 to i64
  %1437 = shl nuw nsw i64 %1436, 5
  %1438 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1437, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1438, ptr %32, align 8
  %1439 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1437, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1439, ptr %34, align 8
  store i32 0, ptr %67, align 4
  %1440 = icmp sgt i32 %1433, 0
  br i1 %1440, label %1443, label %1441

1441:                                             ; preds = %1429
  %1442 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1719

1443:                                             ; preds = %1429
  %1444 = zext nneg i32 %1433 to i64
  br label %1445

1445:                                             ; preds = %1578, %1443
  %1446 = phi i64 [ 0, %1443 ], [ %1579, %1578 ]
  %1447 = shl nuw nsw i64 %1446, 5
  %1448 = getelementptr i8, ptr %1431, i64 %1447
  %1449 = load ptr, ptr %1448, align 8
  %1450 = icmp ne ptr %1449, @nil_typ
  %1451 = icmp ne ptr %1449, null
  %1452 = and i1 %1450, %1451
  br i1 %1452, label %1453, label %1578

1453:                                             ; preds = %1445
  %1454 = getelementptr i8, ptr %1448, i64 8
  %1455 = load i64, ptr %1454, align 4
  %1456 = getelementptr i8, ptr %1448, i64 16
  %1457 = load i64, ptr %1456, align 4
  %1458 = getelementptr i8, ptr %1449, i64 8
  %1459 = getelementptr i8, ptr %1449, i64 16
  %1460 = getelementptr i8, ptr %1449, i64 40
  %1461 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1462 = load i64, ptr %1458, align 4, !noalias !25
  %1463 = load i64, ptr %1459, align 4, !noalias !25
  %1464 = load ptr, ptr %1460, align 8, !noalias !25
  %1465 = mul i64 %1462, 4015701072841558310
  %1466 = lshr i64 %1465, 32
  %1467 = xor i64 %1466, %1465
  %1468 = and i64 %1467, %1463
  %1469 = getelementptr i32, ptr %1464, i64 %1468
  %1470 = load i32, ptr %1469, align 4, !noalias !359
  %1471 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1472 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1473 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1474

1474:                                             ; preds = %1553, %1453
  %1475 = phi i64 [ %1457, %1453 ], [ %1555, %1553 ]
  %1476 = phi i64 [ %1455, %1453 ], [ %1554, %1553 ]
  %1477 = phi i32 [ 0, %1453 ], [ %1490, %1553 ]
  %1478 = phi i1 [ true, %1453 ], [ %1569, %1553 ]
  %1479 = phi ptr [ %1449, %1453 ], [ %1556, %1553 ]
  %1480 = phi i32 [ %1470, %1453 ], [ %1568, %1553 ]
  %1481 = inttoptr i64 %1475 to ptr
  %1482 = inttoptr i64 %1476 to ptr
  %1483 = sext i32 %1480 to i64
  %1484 = getelementptr ptr, ptr %1479, i64 %1483
  %1485 = getelementptr i8, ptr %1484, i64 64
  %1486 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1479, 0
  %1487 = insertvalue { ptr, ptr, ptr, i32 } %1486, ptr %1482, 1
  %1488 = insertvalue { ptr, ptr, ptr, i32 } %1487, ptr %1481, 2
  %1489 = insertvalue { ptr, ptr, ptr, i32 } %1488, i32 %1480, 3
  %1490 = add nuw nsw i32 %1477, 1
  %1491 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1479)
  %1492 = load ptr, ptr %1485, align 8
  %1493 = call align 4 ptr %1492({ ptr, ptr, ptr, i32 } %1489, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1494 = call i32 %1493({ ptr, ptr, ptr, i32 } %1489, { ptr, ptr, ptr, i32 } %1489, ptr nonnull align 8 %2) #28
  br i1 %1478, label %1495, label %1515

1495:                                             ; preds = %1474
  %1496 = load i32, ptr %30, align 8
  %1497 = add i32 %1496, -1
  %1498 = and i32 %1497, %1494
  %1499 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1500 = load ptr, ptr %32, align 8
  %1501 = sext i32 %1498 to i64
  %1502 = shl nsw i64 %1501, 5
  %1503 = getelementptr i8, ptr %1500, i64 %1502
  %1504 = load ptr, ptr %1503, align 8
  %1505 = getelementptr i8, ptr %1503, i64 8
  %1506 = load i160, ptr %1505, align 4
  store ptr %1479, ptr %1503, align 8
  store i64 %1476, ptr %1505, align 4
  %1507 = getelementptr i8, ptr %1503, i64 16
  store i64 %1475, ptr %1507, align 4
  %1508 = getelementptr i8, ptr %1503, i64 24
  store i32 %1480, ptr %1508, align 4
  %1509 = icmp ne ptr %1504, @nil_typ
  %1510 = icmp ne ptr %1504, null
  %1511 = and i1 %1509, %1510
  %1512 = trunc i160 %1506 to i64
  %1513 = lshr i160 %1506, 64
  %1514 = trunc i160 %1513 to i64
  br i1 %1511, label %1553, label %1573

1515:                                             ; preds = %1474
  %1516 = add i32 %1494, 2127912214
  %1517 = shl i32 %1494, 12
  %1518 = add i32 %1516, %1517
  %1519 = ashr i32 %1518, 19
  %1520 = xor i32 %1518, %1519
  %1521 = xor i32 %1520, -949894596
  %1522 = add i32 %1521, 374761393
  %1523 = shl i32 %1521, 5
  %1524 = add i32 %1522, %1523
  %1525 = add i32 %1524, -744332180
  %1526 = shl i32 %1524, 9
  %1527 = xor i32 %1525, %1526
  %1528 = add i32 %1527, -42973499
  %1529 = shl i32 %1527, 3
  %1530 = add i32 %1528, %1529
  %1531 = ashr i32 %1530, 16
  %1532 = xor i32 %1530, %1531
  %1533 = xor i32 %1532, -1252372727
  %1534 = load i32, ptr %30, align 8
  %1535 = add i32 %1534, -1
  %1536 = and i32 %1535, %1533
  %1537 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1538 = load ptr, ptr %34, align 8
  %1539 = sext i32 %1536 to i64
  %1540 = shl nsw i64 %1539, 5
  %1541 = getelementptr i8, ptr %1538, i64 %1540
  %1542 = load ptr, ptr %1541, align 8
  %1543 = getelementptr i8, ptr %1541, i64 8
  %1544 = load i160, ptr %1543, align 4
  store ptr %1479, ptr %1541, align 8
  store i64 %1476, ptr %1543, align 4
  %1545 = getelementptr i8, ptr %1541, i64 16
  store i64 %1475, ptr %1545, align 4
  %1546 = getelementptr i8, ptr %1541, i64 24
  store i32 %1480, ptr %1546, align 4
  %1547 = icmp ne ptr %1542, @nil_typ
  %1548 = icmp ne ptr %1542, null
  %1549 = and i1 %1547, %1548
  %1550 = trunc i160 %1544 to i64
  %1551 = lshr i160 %1544, 64
  %1552 = trunc i160 %1551 to i64
  br i1 %1549, label %1553, label %1573

1553:                                             ; preds = %1515, %1495
  %1554 = phi i64 [ %1512, %1495 ], [ %1550, %1515 ]
  %1555 = phi i64 [ %1514, %1495 ], [ %1552, %1515 ]
  %1556 = phi ptr [ %1504, %1495 ], [ %1542, %1515 ]
  %1557 = getelementptr i8, ptr %1556, i64 8
  %1558 = getelementptr i8, ptr %1556, i64 16
  %1559 = getelementptr i8, ptr %1556, i64 40
  %1560 = load i64, ptr %1557, align 4
  %1561 = load i64, ptr %1558, align 4
  %1562 = load ptr, ptr %1559, align 8
  %1563 = mul i64 %1560, 4015701072841558310
  %1564 = lshr i64 %1563, 32
  %1565 = xor i64 %1564, %1563
  %1566 = and i64 %1565, %1561
  %1567 = getelementptr i32, ptr %1562, i64 %1566
  %1568 = load i32, ptr %1567, align 4
  %1569 = xor i1 %1478, true
  %1570 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1571 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1572 = icmp eq i32 %1490, 100
  br i1 %1572, label %1577, label %1474

1573:                                             ; preds = %1515, %1495
  %1574 = load i32, ptr %67, align 4
  %1575 = add i32 %1574, 1
  %1576 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1575, ptr %67, align 4
  br label %1577

1577:                                             ; preds = %1573, %1553
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1578

1578:                                             ; preds = %1577, %1445
  %1579 = add nuw nsw i64 %1446, 1
  %1580 = icmp eq i64 %1579, %1444
  br i1 %1580, label %1581, label %1445

1581:                                             ; preds = %1578
  %1582 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1583

1583:                                             ; preds = %1716, %1581
  %1584 = phi i64 [ 0, %1581 ], [ %1717, %1716 ]
  %1585 = shl nuw nsw i64 %1584, 5
  %1586 = getelementptr i8, ptr %1432, i64 %1585
  %1587 = load ptr, ptr %1586, align 8
  %1588 = icmp ne ptr %1587, @nil_typ
  %1589 = icmp ne ptr %1587, null
  %1590 = and i1 %1588, %1589
  br i1 %1590, label %1591, label %1716

1591:                                             ; preds = %1583
  %1592 = getelementptr i8, ptr %1586, i64 8
  %1593 = load i64, ptr %1592, align 4
  %1594 = getelementptr i8, ptr %1586, i64 16
  %1595 = load i64, ptr %1594, align 4
  %1596 = getelementptr i8, ptr %1587, i64 8
  %1597 = getelementptr i8, ptr %1587, i64 16
  %1598 = getelementptr i8, ptr %1587, i64 40
  %1599 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1600 = load i64, ptr %1596, align 4, !noalias !25
  %1601 = load i64, ptr %1597, align 4, !noalias !25
  %1602 = load ptr, ptr %1598, align 8, !noalias !25
  %1603 = mul i64 %1600, 4015701072841558310
  %1604 = lshr i64 %1603, 32
  %1605 = xor i64 %1604, %1603
  %1606 = and i64 %1605, %1601
  %1607 = getelementptr i32, ptr %1602, i64 %1606
  %1608 = load i32, ptr %1607, align 4, !noalias !362
  %1609 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1610 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1611 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1612

1612:                                             ; preds = %1691, %1591
  %1613 = phi i64 [ %1595, %1591 ], [ %1693, %1691 ]
  %1614 = phi i64 [ %1593, %1591 ], [ %1692, %1691 ]
  %1615 = phi i32 [ 0, %1591 ], [ %1628, %1691 ]
  %1616 = phi i1 [ true, %1591 ], [ %1707, %1691 ]
  %1617 = phi ptr [ %1587, %1591 ], [ %1694, %1691 ]
  %1618 = phi i32 [ %1608, %1591 ], [ %1706, %1691 ]
  %1619 = inttoptr i64 %1613 to ptr
  %1620 = inttoptr i64 %1614 to ptr
  %1621 = sext i32 %1618 to i64
  %1622 = getelementptr ptr, ptr %1617, i64 %1621
  %1623 = getelementptr i8, ptr %1622, i64 64
  %1624 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1617, 0
  %1625 = insertvalue { ptr, ptr, ptr, i32 } %1624, ptr %1620, 1
  %1626 = insertvalue { ptr, ptr, ptr, i32 } %1625, ptr %1619, 2
  %1627 = insertvalue { ptr, ptr, ptr, i32 } %1626, i32 %1618, 3
  %1628 = add nuw nsw i32 %1615, 1
  %1629 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1617)
  %1630 = load ptr, ptr %1623, align 8
  %1631 = call align 4 ptr %1630({ ptr, ptr, ptr, i32 } %1627, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1632 = call i32 %1631({ ptr, ptr, ptr, i32 } %1627, { ptr, ptr, ptr, i32 } %1627, ptr nonnull align 8 %2) #28
  br i1 %1616, label %1633, label %1653

1633:                                             ; preds = %1612
  %1634 = load i32, ptr %30, align 8
  %1635 = add i32 %1634, -1
  %1636 = and i32 %1635, %1632
  %1637 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1638 = load ptr, ptr %32, align 8
  %1639 = sext i32 %1636 to i64
  %1640 = shl nsw i64 %1639, 5
  %1641 = getelementptr i8, ptr %1638, i64 %1640
  %1642 = load ptr, ptr %1641, align 8
  %1643 = getelementptr i8, ptr %1641, i64 8
  %1644 = load i160, ptr %1643, align 4
  store ptr %1617, ptr %1641, align 8
  store i64 %1614, ptr %1643, align 4
  %1645 = getelementptr i8, ptr %1641, i64 16
  store i64 %1613, ptr %1645, align 4
  %1646 = getelementptr i8, ptr %1641, i64 24
  store i32 %1618, ptr %1646, align 4
  %1647 = icmp ne ptr %1642, @nil_typ
  %1648 = icmp ne ptr %1642, null
  %1649 = and i1 %1647, %1648
  %1650 = trunc i160 %1644 to i64
  %1651 = lshr i160 %1644, 64
  %1652 = trunc i160 %1651 to i64
  br i1 %1649, label %1691, label %1711

1653:                                             ; preds = %1612
  %1654 = add i32 %1632, 2127912214
  %1655 = shl i32 %1632, 12
  %1656 = add i32 %1654, %1655
  %1657 = ashr i32 %1656, 19
  %1658 = xor i32 %1656, %1657
  %1659 = xor i32 %1658, -949894596
  %1660 = add i32 %1659, 374761393
  %1661 = shl i32 %1659, 5
  %1662 = add i32 %1660, %1661
  %1663 = add i32 %1662, -744332180
  %1664 = shl i32 %1662, 9
  %1665 = xor i32 %1663, %1664
  %1666 = add i32 %1665, -42973499
  %1667 = shl i32 %1665, 3
  %1668 = add i32 %1666, %1667
  %1669 = ashr i32 %1668, 16
  %1670 = xor i32 %1668, %1669
  %1671 = xor i32 %1670, -1252372727
  %1672 = load i32, ptr %30, align 8
  %1673 = add i32 %1672, -1
  %1674 = and i32 %1673, %1671
  %1675 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1676 = load ptr, ptr %34, align 8
  %1677 = sext i32 %1674 to i64
  %1678 = shl nsw i64 %1677, 5
  %1679 = getelementptr i8, ptr %1676, i64 %1678
  %1680 = load ptr, ptr %1679, align 8
  %1681 = getelementptr i8, ptr %1679, i64 8
  %1682 = load i160, ptr %1681, align 4
  store ptr %1617, ptr %1679, align 8
  store i64 %1614, ptr %1681, align 4
  %1683 = getelementptr i8, ptr %1679, i64 16
  store i64 %1613, ptr %1683, align 4
  %1684 = getelementptr i8, ptr %1679, i64 24
  store i32 %1618, ptr %1684, align 4
  %1685 = icmp ne ptr %1680, @nil_typ
  %1686 = icmp ne ptr %1680, null
  %1687 = and i1 %1685, %1686
  %1688 = trunc i160 %1682 to i64
  %1689 = lshr i160 %1682, 64
  %1690 = trunc i160 %1689 to i64
  br i1 %1687, label %1691, label %1711

1691:                                             ; preds = %1653, %1633
  %1692 = phi i64 [ %1650, %1633 ], [ %1688, %1653 ]
  %1693 = phi i64 [ %1652, %1633 ], [ %1690, %1653 ]
  %1694 = phi ptr [ %1642, %1633 ], [ %1680, %1653 ]
  %1695 = getelementptr i8, ptr %1694, i64 8
  %1696 = getelementptr i8, ptr %1694, i64 16
  %1697 = getelementptr i8, ptr %1694, i64 40
  %1698 = load i64, ptr %1695, align 4
  %1699 = load i64, ptr %1696, align 4
  %1700 = load ptr, ptr %1697, align 8
  %1701 = mul i64 %1698, 4015701072841558310
  %1702 = lshr i64 %1701, 32
  %1703 = xor i64 %1702, %1701
  %1704 = and i64 %1703, %1699
  %1705 = getelementptr i32, ptr %1700, i64 %1704
  %1706 = load i32, ptr %1705, align 4
  %1707 = xor i1 %1616, true
  %1708 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1709 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %1710 = icmp eq i32 %1628, 100
  br i1 %1710, label %1715, label %1612

1711:                                             ; preds = %1653, %1633
  %1712 = load i32, ptr %67, align 4
  %1713 = add i32 %1712, 1
  %1714 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1713, ptr %67, align 4
  br label %1715

1715:                                             ; preds = %1711, %1691
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %1716

1716:                                             ; preds = %1715, %1583
  %1717 = add nuw nsw i64 %1584, 1
  %1718 = icmp eq i64 %1717, %1444
  br i1 %1718, label %1719, label %1583

1719:                                             ; preds = %1716, %1441, %1425, %1016, %457, %301
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1720 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %1721 = sext i32 %73 to i64
  %1722 = shl nsw i64 %1721, 2
  %1723 = getelementptr i8, ptr %38, i64 %1722
  store i32 %76, ptr %1723, align 4
  store i1 true, ptr %7, align 8
  %1724 = load i8, ptr %7, align 8
  %1725 = zext i8 %1724 to i160
  %1726 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %1725, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1727 = load ptr, ptr %52, align 8
  %1728 = call i32 %1727({ ptr, i160 } %78) #28
  %1729 = load i32, ptr %54, align 8
  %1730 = add i32 %1729, -1
  %1731 = and i32 %1730, %1728
  %1732 = load ptr, ptr %56, align 8
  %1733 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1734 = sext i32 %1731 to i64
  %1735 = shl nsw i64 %1734, 5
  %1736 = getelementptr i8, ptr %1732, i64 %1735
  %1737 = load ptr, ptr %1736, align 8
  %1738 = getelementptr i8, ptr %1736, i64 8
  %1739 = icmp ne ptr %1737, @nil_typ
  %1740 = icmp ne ptr %1737, null
  %1741 = and i1 %1739, %1740
  br i1 %1741, label %1742, label %1865

1742:                                             ; preds = %1719
  %1743 = load i64, ptr %1738, align 4
  %1744 = getelementptr i8, ptr %1736, i64 16
  %1745 = load i64, ptr %1744, align 4
  %1746 = inttoptr i64 %1743 to ptr
  %1747 = inttoptr i64 %1745 to ptr
  %1748 = getelementptr i8, ptr %1737, i64 8
  %1749 = getelementptr i8, ptr %1737, i64 16
  %1750 = getelementptr i8, ptr %1737, i64 40
  %1751 = load i64, ptr %1748, align 4, !noalias !365
  %1752 = load i64, ptr %1749, align 4, !noalias !365
  %1753 = load ptr, ptr %1750, align 8, !noalias !365
  %1754 = mul i64 %1751, 4015701072841558310
  %1755 = lshr i64 %1754, 32
  %1756 = xor i64 %1755, %1754
  %1757 = and i64 %1756, %1752
  %1758 = getelementptr i32, ptr %1753, i64 %1757
  %1759 = load i32, ptr %1758, align 4, !noalias !365
  %1760 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1737, 0
  %1761 = insertvalue { ptr, ptr, ptr, i32 } %1760, ptr %1746, 1
  %1762 = insertvalue { ptr, ptr, ptr, i32 } %1761, ptr %1747, 2
  %1763 = insertvalue { ptr, ptr, ptr, i32 } %1762, i32 %1759, 3
  %1764 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1765 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1737) #43
  %1766 = sext i32 %1759 to i64
  %1767 = getelementptr ptr, ptr %1737, i64 %1766
  %1768 = getelementptr i8, ptr %1767, i64 64
  %1769 = load ptr, ptr %1768, align 8
  %1770 = call align 4 ptr %1769({ ptr, ptr, ptr, i32 } %1763, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1771 = call i32 %1770({ ptr, ptr, ptr, i32 } %1763, { ptr, ptr, ptr, i32 } %1763, ptr nonnull align 8 %2) #28
  %1772 = icmp eq i32 %1771, %1728
  br i1 %1772, label %1773, label %1865

1773:                                             ; preds = %1742
  %1774 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1775 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1737)
  %1776 = getelementptr i8, ptr %1767, i64 48
  %1777 = load ptr, ptr %1776, align 8
  %1778 = call align 4 ptr %1777({ ptr, ptr, ptr, i32 } %1763, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1779 = call { ptr, i160 } %1778({ ptr, ptr, ptr, i32 } %1763, { ptr, ptr, ptr, i32 } %1763, ptr nonnull align 8 %2) #28
  %1780 = load ptr, ptr %53, align 8
  %1781 = call i1 %1780({ ptr, i160 } %1779, { ptr, i160 } %78) #28
  br i1 %1781, label %1782, label %1865

1782:                                             ; preds = %1773
  %1783 = load ptr, ptr %40, align 8
  %1784 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1785 = load ptr, ptr %41, align 8
  %1786 = load ptr, ptr %1783, align 8, !alias.scope !368
  %1787 = getelementptr i8, ptr %1786, i64 72
  %1788 = load ptr, ptr %1787, align 8, !alias.scope !368
  %1789 = call { i64, i64 } %1788(ptr nocapture nofree nonnull readonly align 8 %1783) #2, !alias.scope !368
  %1790 = extractvalue { i64, i64 } %1789, 0
  %1791 = extractvalue { i64, i64 } %1789, 1
  %1792 = urem i64 20, %1791
  %1793 = icmp eq i64 %1792, 0
  %1794 = sub i64 %1791, %1792
  %1795 = select i1 %1793, i64 0, i64 %1794
  %1796 = add i64 %1790, 20
  %1797 = add i64 %1796, %1795
  %1798 = load ptr, ptr %1785, align 8, !alias.scope !368
  %1799 = getelementptr i8, ptr %1798, i64 72
  %1800 = load ptr, ptr %1799, align 8, !alias.scope !368
  %1801 = call { i64, i64 } %1800(ptr nocapture nofree nonnull readonly align 8 %1785) #2, !alias.scope !368
  %1802 = extractvalue { i64, i64 } %1801, 0
  %1803 = extractvalue { i64, i64 } %1801, 1
  %1804 = call i64 @llvm.umax.i64(i64 %1791, i64 %1803) #44
  %1805 = call i64 @llvm.umax.i64(i64 %1804, i64 noundef 8) #44, !range !18
  %1806 = urem i64 %1797, %1803
  %1807 = icmp eq i64 %1806, 0
  %1808 = sub i64 %1803, %1806
  %1809 = select i1 %1807, i64 0, i64 %1808
  %1810 = add i64 %1802, %1797
  %1811 = add i64 %1810, %1809
  %1812 = urem i64 %1811, %1805
  %1813 = icmp eq i64 %1812, 0
  %1814 = sub i64 %1805, %1812
  %1815 = select i1 %1813, i64 0, i64 %1814
  %1816 = add i64 %1815, %1811
  %1817 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1816, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1783, ptr %1817, align 8
  %1818 = getelementptr inbounds i8, ptr %1817, i64 8
  store ptr %1785, ptr %1818, align 8
  %1819 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1817)
  %1820 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1821 = load ptr, ptr %1783, align 8
  %1822 = getelementptr i8, ptr %1821, i64 72
  %1823 = load ptr, ptr %1822, align 8
  %1824 = call { i64, i64 } %1823(ptr nocapture nofree nonnull readonly align 8 %1783) #2
  %1825 = extractvalue { i64, i64 } %1824, 1
  %1826 = urem i64 20, %1825
  %1827 = icmp eq i64 %1826, 0
  %1828 = sub i64 %1825, %1826
  %1829 = add i64 %1828, 20
  %1830 = select i1 %1827, i64 20, i64 %1829
  %1831 = getelementptr i8, ptr %1817, i64 %1830
  %1832 = getelementptr i8, ptr %1821, i64 64
  %1833 = load ptr, ptr %1832, align 8
  call void %1833({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %1783, ptr nocapture nofree writeonly %1831) #8
  %1834 = load ptr, ptr %1817, align 8
  %1835 = load ptr, ptr %1834, align 8
  %1836 = getelementptr i8, ptr %1835, i64 72
  %1837 = load ptr, ptr %1836, align 8
  %1838 = call { i64, i64 } %1837(ptr nocapture nofree nonnull readonly align 8 %1834) #2
  %1839 = extractvalue { i64, i64 } %1838, 0
  %1840 = extractvalue { i64, i64 } %1838, 1
  %1841 = urem i64 20, %1840
  %1842 = icmp eq i64 %1841, 0
  %1843 = sub i64 %1840, %1841
  %1844 = select i1 %1842, i64 0, i64 %1843
  %1845 = add i64 %1839, 20
  %1846 = add i64 %1845, %1844
  %1847 = load ptr, ptr %1818, align 8
  %1848 = load ptr, ptr %1847, align 8
  %1849 = getelementptr i8, ptr %1848, i64 72
  %1850 = load ptr, ptr %1849, align 8
  %1851 = call { i64, i64 } %1850(ptr nocapture nofree nonnull readonly align 8 %1847) #2
  %1852 = extractvalue { i64, i64 } %1851, 1
  %1853 = urem i64 %1846, %1852
  %1854 = icmp eq i64 %1853, 0
  %1855 = sub i64 %1852, %1853
  %1856 = select i1 %1854, i64 0, i64 %1855
  %1857 = getelementptr i8, ptr %1817, i64 %1846
  %1858 = getelementptr i8, ptr %1857, i64 %1856
  %1859 = getelementptr i8, ptr %1848, i64 64
  %1860 = load ptr, ptr %1859, align 8
  call void %1860({ ptr, i160 } %1726, ptr nocapture nofree nonnull readonly align 8 %1847, ptr nocapture nofree writeonly %1858) #8
  %1861 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1862 = getelementptr inbounds i8, ptr %1817, i64 16
  store i32 %1728, ptr %1862, align 8
  store ptr @Entry, ptr %1736, align 8
  %1863 = ptrtoint ptr %1817 to i64
  store i64 %1863, ptr %1738, align 4
  %1864 = getelementptr i8, ptr %1736, i64 24
  store i32 10, ptr %1864, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3197

1865:                                             ; preds = %1773, %1742, %1719
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1866 = add i32 %1728, 2127912214
  %1867 = shl i32 %1728, 12
  %1868 = add i32 %1866, %1867
  %1869 = ashr i32 %1868, 19
  %1870 = xor i32 %1868, %1869
  %1871 = xor i32 %1870, -949894596
  %1872 = add i32 %1871, 374761393
  %1873 = shl i32 %1871, 5
  %1874 = add i32 %1872, %1873
  %1875 = add i32 %1874, -744332180
  %1876 = shl i32 %1874, 9
  %1877 = xor i32 %1875, %1876
  %1878 = add i32 %1877, -42973499
  %1879 = shl i32 %1877, 3
  %1880 = add i32 %1878, %1879
  %1881 = ashr i32 %1880, 16
  %1882 = xor i32 %1880, %1881
  %1883 = xor i32 %1882, -1252372727
  %1884 = load i32, ptr %54, align 8
  %1885 = add i32 %1884, -1
  %1886 = and i32 %1885, %1883
  %1887 = load ptr, ptr %58, align 8
  %1888 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1889 = sext i32 %1886 to i64
  %1890 = shl nsw i64 %1889, 5
  %1891 = getelementptr i8, ptr %1887, i64 %1890
  %1892 = load ptr, ptr %1891, align 8
  %1893 = getelementptr i8, ptr %1891, i64 8
  %1894 = icmp ne ptr %1892, @nil_typ
  %1895 = icmp ne ptr %1892, null
  %1896 = and i1 %1894, %1895
  br i1 %1896, label %1897, label %2021

1897:                                             ; preds = %1865
  %1898 = load i64, ptr %1893, align 4
  %1899 = getelementptr i8, ptr %1891, i64 16
  %1900 = load i64, ptr %1899, align 4
  %1901 = inttoptr i64 %1898 to ptr
  %1902 = inttoptr i64 %1900 to ptr
  %1903 = getelementptr i8, ptr %1892, i64 8
  %1904 = getelementptr i8, ptr %1892, i64 16
  %1905 = getelementptr i8, ptr %1892, i64 40
  %1906 = load i64, ptr %1903, align 4, !noalias !371
  %1907 = load i64, ptr %1904, align 4, !noalias !371
  %1908 = load ptr, ptr %1905, align 8, !noalias !371
  %1909 = mul i64 %1906, 4015701072841558310
  %1910 = lshr i64 %1909, 32
  %1911 = xor i64 %1910, %1909
  %1912 = and i64 %1911, %1907
  %1913 = getelementptr i32, ptr %1908, i64 %1912
  %1914 = load i32, ptr %1913, align 4, !noalias !371
  %1915 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1892, 0
  %1916 = insertvalue { ptr, ptr, ptr, i32 } %1915, ptr %1901, 1
  %1917 = insertvalue { ptr, ptr, ptr, i32 } %1916, ptr %1902, 2
  %1918 = insertvalue { ptr, ptr, ptr, i32 } %1917, i32 %1914, 3
  %1919 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %1920 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1892) #43
  %1921 = sext i32 %1914 to i64
  %1922 = getelementptr ptr, ptr %1892, i64 %1921
  %1923 = getelementptr i8, ptr %1922, i64 64
  %1924 = load ptr, ptr %1923, align 8
  %1925 = call align 4 ptr %1924({ ptr, ptr, ptr, i32 } %1918, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1926 = call i32 %1925({ ptr, ptr, ptr, i32 } %1918, { ptr, ptr, ptr, i32 } %1918, ptr nonnull align 8 %2) #28
  %1927 = icmp eq i32 %1926, %1728
  br i1 %1927, label %1928, label %2021

1928:                                             ; preds = %1897
  %1929 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %1930 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1892)
  %1931 = getelementptr i8, ptr %1922, i64 48
  %1932 = load ptr, ptr %1931, align 8
  %1933 = call align 4 ptr %1932({ ptr, ptr, ptr, i32 } %1918, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %1934 = call { ptr, i160 } %1933({ ptr, ptr, ptr, i32 } %1918, { ptr, ptr, ptr, i32 } %1918, ptr nonnull align 8 %2) #28
  %1935 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1936 = load ptr, ptr %53, align 8
  %1937 = call i1 %1936({ ptr, i160 } %1934, { ptr, i160 } %78) #28
  br i1 %1937, label %1938, label %2021

1938:                                             ; preds = %1928
  %1939 = load ptr, ptr %40, align 8
  %1940 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1941 = load ptr, ptr %41, align 8
  %1942 = load ptr, ptr %1939, align 8, !alias.scope !374
  %1943 = getelementptr i8, ptr %1942, i64 72
  %1944 = load ptr, ptr %1943, align 8, !alias.scope !374
  %1945 = call { i64, i64 } %1944(ptr nocapture nofree nonnull readonly align 8 %1939) #2, !alias.scope !374
  %1946 = extractvalue { i64, i64 } %1945, 0
  %1947 = extractvalue { i64, i64 } %1945, 1
  %1948 = urem i64 20, %1947
  %1949 = icmp eq i64 %1948, 0
  %1950 = sub i64 %1947, %1948
  %1951 = select i1 %1949, i64 0, i64 %1950
  %1952 = add i64 %1946, 20
  %1953 = add i64 %1952, %1951
  %1954 = load ptr, ptr %1941, align 8, !alias.scope !374
  %1955 = getelementptr i8, ptr %1954, i64 72
  %1956 = load ptr, ptr %1955, align 8, !alias.scope !374
  %1957 = call { i64, i64 } %1956(ptr nocapture nofree nonnull readonly align 8 %1941) #2, !alias.scope !374
  %1958 = extractvalue { i64, i64 } %1957, 0
  %1959 = extractvalue { i64, i64 } %1957, 1
  %1960 = call i64 @llvm.umax.i64(i64 %1947, i64 %1959) #44
  %1961 = call i64 @llvm.umax.i64(i64 %1960, i64 noundef 8) #44, !range !18
  %1962 = urem i64 %1953, %1959
  %1963 = icmp eq i64 %1962, 0
  %1964 = sub i64 %1959, %1962
  %1965 = select i1 %1963, i64 0, i64 %1964
  %1966 = add i64 %1958, %1953
  %1967 = add i64 %1966, %1965
  %1968 = urem i64 %1967, %1961
  %1969 = icmp eq i64 %1968, 0
  %1970 = sub i64 %1961, %1968
  %1971 = select i1 %1969, i64 0, i64 %1970
  %1972 = add i64 %1971, %1967
  %1973 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %1972, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1939, ptr %1973, align 8
  %1974 = getelementptr inbounds i8, ptr %1973, i64 8
  store ptr %1941, ptr %1974, align 8
  %1975 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1973)
  %1976 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1977 = load ptr, ptr %1939, align 8
  %1978 = getelementptr i8, ptr %1977, i64 72
  %1979 = load ptr, ptr %1978, align 8
  %1980 = call { i64, i64 } %1979(ptr nocapture nofree nonnull readonly align 8 %1939) #2
  %1981 = extractvalue { i64, i64 } %1980, 1
  %1982 = urem i64 20, %1981
  %1983 = icmp eq i64 %1982, 0
  %1984 = sub i64 %1981, %1982
  %1985 = add i64 %1984, 20
  %1986 = select i1 %1983, i64 20, i64 %1985
  %1987 = getelementptr i8, ptr %1973, i64 %1986
  %1988 = getelementptr i8, ptr %1977, i64 64
  %1989 = load ptr, ptr %1988, align 8
  call void %1989({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %1939, ptr nocapture nofree writeonly %1987) #8
  %1990 = load ptr, ptr %1973, align 8
  %1991 = load ptr, ptr %1990, align 8
  %1992 = getelementptr i8, ptr %1991, i64 72
  %1993 = load ptr, ptr %1992, align 8
  %1994 = call { i64, i64 } %1993(ptr nocapture nofree nonnull readonly align 8 %1990) #2
  %1995 = extractvalue { i64, i64 } %1994, 0
  %1996 = extractvalue { i64, i64 } %1994, 1
  %1997 = urem i64 20, %1996
  %1998 = icmp eq i64 %1997, 0
  %1999 = sub i64 %1996, %1997
  %2000 = select i1 %1998, i64 0, i64 %1999
  %2001 = add i64 %1995, 20
  %2002 = add i64 %2001, %2000
  %2003 = load ptr, ptr %1974, align 8
  %2004 = load ptr, ptr %2003, align 8
  %2005 = getelementptr i8, ptr %2004, i64 72
  %2006 = load ptr, ptr %2005, align 8
  %2007 = call { i64, i64 } %2006(ptr nocapture nofree nonnull readonly align 8 %2003) #2
  %2008 = extractvalue { i64, i64 } %2007, 1
  %2009 = urem i64 %2002, %2008
  %2010 = icmp eq i64 %2009, 0
  %2011 = sub i64 %2008, %2009
  %2012 = select i1 %2010, i64 0, i64 %2011
  %2013 = getelementptr i8, ptr %1973, i64 %2002
  %2014 = getelementptr i8, ptr %2013, i64 %2012
  %2015 = getelementptr i8, ptr %2004, i64 64
  %2016 = load ptr, ptr %2015, align 8
  call void %2016({ ptr, i160 } %1726, ptr nocapture nofree nonnull readonly align 8 %2003, ptr nocapture nofree writeonly %2014) #8
  %2017 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2018 = getelementptr inbounds i8, ptr %1973, i64 16
  store i32 %1728, ptr %2018, align 8
  store ptr @Entry, ptr %1891, align 8
  %2019 = ptrtoint ptr %1973 to i64
  store i64 %2019, ptr %1893, align 4
  %2020 = getelementptr i8, ptr %1891, i64 24
  store i32 10, ptr %2020, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3197

2021:                                             ; preds = %1928, %1897, %1865
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2022 = load i32, ptr %68, align 4
  %2023 = load i32, ptr %54, align 8
  %2024 = icmp slt i32 %2022, %2023
  br i1 %2024, label %2311, label %2025

2025:                                             ; preds = %2021
  %2026 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2027 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2028 = load ptr, ptr %56, align 8
  %2029 = load ptr, ptr %58, align 8
  %2030 = shl i32 %2023, 1
  %2031 = call i32 @llvm.smax.i32(i32 %2030, i32 noundef 16) #43
  store i32 %2031, ptr %54, align 8
  %2032 = zext nneg i32 %2031 to i64
  %2033 = shl nuw nsw i64 %2032, 5
  %2034 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2033, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2034, ptr %56, align 8
  %2035 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2033, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2035, ptr %58, align 8
  store i32 0, ptr %68, align 4
  %2036 = icmp sgt i32 %2023, 0
  br i1 %2036, label %2037, label %2311

2037:                                             ; preds = %2025
  %2038 = zext nneg i32 %2023 to i64
  br label %2039

2039:                                             ; preds = %2172, %2037
  %2040 = phi i64 [ 0, %2037 ], [ %2173, %2172 ]
  %2041 = shl nuw nsw i64 %2040, 5
  %2042 = getelementptr i8, ptr %2028, i64 %2041
  %2043 = load ptr, ptr %2042, align 8
  %2044 = icmp ne ptr %2043, @nil_typ
  %2045 = icmp ne ptr %2043, null
  %2046 = and i1 %2044, %2045
  br i1 %2046, label %2047, label %2172

2047:                                             ; preds = %2039
  %2048 = getelementptr i8, ptr %2042, i64 8
  %2049 = load i64, ptr %2048, align 4
  %2050 = getelementptr i8, ptr %2042, i64 16
  %2051 = load i64, ptr %2050, align 4
  %2052 = getelementptr i8, ptr %2043, i64 8
  %2053 = getelementptr i8, ptr %2043, i64 16
  %2054 = getelementptr i8, ptr %2043, i64 40
  %2055 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2056 = load i64, ptr %2052, align 4, !noalias !25
  %2057 = load i64, ptr %2053, align 4, !noalias !25
  %2058 = load ptr, ptr %2054, align 8, !noalias !25
  %2059 = mul i64 %2056, 4015701072841558310
  %2060 = lshr i64 %2059, 32
  %2061 = xor i64 %2060, %2059
  %2062 = and i64 %2061, %2057
  %2063 = getelementptr i32, ptr %2058, i64 %2062
  %2064 = load i32, ptr %2063, align 4, !noalias !377
  %2065 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2066 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2067 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2068

2068:                                             ; preds = %2147, %2047
  %2069 = phi i64 [ %2051, %2047 ], [ %2149, %2147 ]
  %2070 = phi i64 [ %2049, %2047 ], [ %2148, %2147 ]
  %2071 = phi i32 [ 0, %2047 ], [ %2084, %2147 ]
  %2072 = phi i1 [ true, %2047 ], [ %2163, %2147 ]
  %2073 = phi ptr [ %2043, %2047 ], [ %2150, %2147 ]
  %2074 = phi i32 [ %2064, %2047 ], [ %2162, %2147 ]
  %2075 = inttoptr i64 %2069 to ptr
  %2076 = inttoptr i64 %2070 to ptr
  %2077 = sext i32 %2074 to i64
  %2078 = getelementptr ptr, ptr %2073, i64 %2077
  %2079 = getelementptr i8, ptr %2078, i64 64
  %2080 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2073, 0
  %2081 = insertvalue { ptr, ptr, ptr, i32 } %2080, ptr %2076, 1
  %2082 = insertvalue { ptr, ptr, ptr, i32 } %2081, ptr %2075, 2
  %2083 = insertvalue { ptr, ptr, ptr, i32 } %2082, i32 %2074, 3
  %2084 = add nuw nsw i32 %2071, 1
  %2085 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2073)
  %2086 = load ptr, ptr %2079, align 8
  %2087 = call align 4 ptr %2086({ ptr, ptr, ptr, i32 } %2083, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2088 = call i32 %2087({ ptr, ptr, ptr, i32 } %2083, { ptr, ptr, ptr, i32 } %2083, ptr nonnull align 8 %2) #28
  br i1 %2072, label %2089, label %2109

2089:                                             ; preds = %2068
  %2090 = load i32, ptr %54, align 8
  %2091 = add i32 %2090, -1
  %2092 = and i32 %2091, %2088
  %2093 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2094 = load ptr, ptr %56, align 8
  %2095 = sext i32 %2092 to i64
  %2096 = shl nsw i64 %2095, 5
  %2097 = getelementptr i8, ptr %2094, i64 %2096
  %2098 = load ptr, ptr %2097, align 8
  %2099 = getelementptr i8, ptr %2097, i64 8
  %2100 = load i160, ptr %2099, align 4
  store ptr %2073, ptr %2097, align 8
  store i64 %2070, ptr %2099, align 4
  %2101 = getelementptr i8, ptr %2097, i64 16
  store i64 %2069, ptr %2101, align 4
  %2102 = getelementptr i8, ptr %2097, i64 24
  store i32 %2074, ptr %2102, align 4
  %2103 = icmp ne ptr %2098, @nil_typ
  %2104 = icmp ne ptr %2098, null
  %2105 = and i1 %2103, %2104
  %2106 = trunc i160 %2100 to i64
  %2107 = lshr i160 %2100, 64
  %2108 = trunc i160 %2107 to i64
  br i1 %2105, label %2147, label %2167

2109:                                             ; preds = %2068
  %2110 = add i32 %2088, 2127912214
  %2111 = shl i32 %2088, 12
  %2112 = add i32 %2110, %2111
  %2113 = ashr i32 %2112, 19
  %2114 = xor i32 %2112, %2113
  %2115 = xor i32 %2114, -949894596
  %2116 = add i32 %2115, 374761393
  %2117 = shl i32 %2115, 5
  %2118 = add i32 %2116, %2117
  %2119 = add i32 %2118, -744332180
  %2120 = shl i32 %2118, 9
  %2121 = xor i32 %2119, %2120
  %2122 = add i32 %2121, -42973499
  %2123 = shl i32 %2121, 3
  %2124 = add i32 %2122, %2123
  %2125 = ashr i32 %2124, 16
  %2126 = xor i32 %2124, %2125
  %2127 = xor i32 %2126, -1252372727
  %2128 = load i32, ptr %54, align 8
  %2129 = add i32 %2128, -1
  %2130 = and i32 %2129, %2127
  %2131 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2132 = load ptr, ptr %58, align 8
  %2133 = sext i32 %2130 to i64
  %2134 = shl nsw i64 %2133, 5
  %2135 = getelementptr i8, ptr %2132, i64 %2134
  %2136 = load ptr, ptr %2135, align 8
  %2137 = getelementptr i8, ptr %2135, i64 8
  %2138 = load i160, ptr %2137, align 4
  store ptr %2073, ptr %2135, align 8
  store i64 %2070, ptr %2137, align 4
  %2139 = getelementptr i8, ptr %2135, i64 16
  store i64 %2069, ptr %2139, align 4
  %2140 = getelementptr i8, ptr %2135, i64 24
  store i32 %2074, ptr %2140, align 4
  %2141 = icmp ne ptr %2136, @nil_typ
  %2142 = icmp ne ptr %2136, null
  %2143 = and i1 %2141, %2142
  %2144 = trunc i160 %2138 to i64
  %2145 = lshr i160 %2138, 64
  %2146 = trunc i160 %2145 to i64
  br i1 %2143, label %2147, label %2167

2147:                                             ; preds = %2109, %2089
  %2148 = phi i64 [ %2106, %2089 ], [ %2144, %2109 ]
  %2149 = phi i64 [ %2108, %2089 ], [ %2146, %2109 ]
  %2150 = phi ptr [ %2098, %2089 ], [ %2136, %2109 ]
  %2151 = getelementptr i8, ptr %2150, i64 8
  %2152 = getelementptr i8, ptr %2150, i64 16
  %2153 = getelementptr i8, ptr %2150, i64 40
  %2154 = load i64, ptr %2151, align 4
  %2155 = load i64, ptr %2152, align 4
  %2156 = load ptr, ptr %2153, align 8
  %2157 = mul i64 %2154, 4015701072841558310
  %2158 = lshr i64 %2157, 32
  %2159 = xor i64 %2158, %2157
  %2160 = and i64 %2159, %2155
  %2161 = getelementptr i32, ptr %2156, i64 %2160
  %2162 = load i32, ptr %2161, align 4
  %2163 = xor i1 %2072, true
  %2164 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2165 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2166 = icmp eq i32 %2084, 100
  br i1 %2166, label %2171, label %2068

2167:                                             ; preds = %2109, %2089
  %2168 = load i32, ptr %68, align 4
  %2169 = add i32 %2168, 1
  %2170 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2169, ptr %68, align 4
  br label %2171

2171:                                             ; preds = %2167, %2147
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2172

2172:                                             ; preds = %2171, %2039
  %2173 = add nuw nsw i64 %2040, 1
  %2174 = icmp eq i64 %2173, %2038
  br i1 %2174, label %2175, label %2039

2175:                                             ; preds = %2308, %2172
  %2176 = phi i64 [ %2309, %2308 ], [ 0, %2172 ]
  %2177 = shl nuw nsw i64 %2176, 5
  %2178 = getelementptr i8, ptr %2029, i64 %2177
  %2179 = load ptr, ptr %2178, align 8
  %2180 = icmp ne ptr %2179, @nil_typ
  %2181 = icmp ne ptr %2179, null
  %2182 = and i1 %2180, %2181
  br i1 %2182, label %2183, label %2308

2183:                                             ; preds = %2175
  %2184 = getelementptr i8, ptr %2178, i64 8
  %2185 = load i64, ptr %2184, align 4
  %2186 = getelementptr i8, ptr %2178, i64 16
  %2187 = load i64, ptr %2186, align 4
  %2188 = getelementptr i8, ptr %2179, i64 8
  %2189 = getelementptr i8, ptr %2179, i64 16
  %2190 = getelementptr i8, ptr %2179, i64 40
  %2191 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2192 = load i64, ptr %2188, align 4, !noalias !25
  %2193 = load i64, ptr %2189, align 4, !noalias !25
  %2194 = load ptr, ptr %2190, align 8, !noalias !25
  %2195 = mul i64 %2192, 4015701072841558310
  %2196 = lshr i64 %2195, 32
  %2197 = xor i64 %2196, %2195
  %2198 = and i64 %2197, %2193
  %2199 = getelementptr i32, ptr %2194, i64 %2198
  %2200 = load i32, ptr %2199, align 4, !noalias !380
  %2201 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2202 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2203 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2204

2204:                                             ; preds = %2283, %2183
  %2205 = phi i64 [ %2187, %2183 ], [ %2285, %2283 ]
  %2206 = phi i64 [ %2185, %2183 ], [ %2284, %2283 ]
  %2207 = phi i32 [ 0, %2183 ], [ %2220, %2283 ]
  %2208 = phi i1 [ true, %2183 ], [ %2299, %2283 ]
  %2209 = phi ptr [ %2179, %2183 ], [ %2286, %2283 ]
  %2210 = phi i32 [ %2200, %2183 ], [ %2298, %2283 ]
  %2211 = inttoptr i64 %2205 to ptr
  %2212 = inttoptr i64 %2206 to ptr
  %2213 = sext i32 %2210 to i64
  %2214 = getelementptr ptr, ptr %2209, i64 %2213
  %2215 = getelementptr i8, ptr %2214, i64 64
  %2216 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2209, 0
  %2217 = insertvalue { ptr, ptr, ptr, i32 } %2216, ptr %2212, 1
  %2218 = insertvalue { ptr, ptr, ptr, i32 } %2217, ptr %2211, 2
  %2219 = insertvalue { ptr, ptr, ptr, i32 } %2218, i32 %2210, 3
  %2220 = add nuw nsw i32 %2207, 1
  %2221 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2209)
  %2222 = load ptr, ptr %2215, align 8
  %2223 = call align 4 ptr %2222({ ptr, ptr, ptr, i32 } %2219, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2224 = call i32 %2223({ ptr, ptr, ptr, i32 } %2219, { ptr, ptr, ptr, i32 } %2219, ptr nonnull align 8 %2) #28
  br i1 %2208, label %2225, label %2245

2225:                                             ; preds = %2204
  %2226 = load i32, ptr %54, align 8
  %2227 = add i32 %2226, -1
  %2228 = and i32 %2227, %2224
  %2229 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2230 = load ptr, ptr %56, align 8
  %2231 = sext i32 %2228 to i64
  %2232 = shl nsw i64 %2231, 5
  %2233 = getelementptr i8, ptr %2230, i64 %2232
  %2234 = load ptr, ptr %2233, align 8
  %2235 = getelementptr i8, ptr %2233, i64 8
  %2236 = load i160, ptr %2235, align 4
  store ptr %2209, ptr %2233, align 8
  store i64 %2206, ptr %2235, align 4
  %2237 = getelementptr i8, ptr %2233, i64 16
  store i64 %2205, ptr %2237, align 4
  %2238 = getelementptr i8, ptr %2233, i64 24
  store i32 %2210, ptr %2238, align 4
  %2239 = icmp ne ptr %2234, @nil_typ
  %2240 = icmp ne ptr %2234, null
  %2241 = and i1 %2239, %2240
  %2242 = trunc i160 %2236 to i64
  %2243 = lshr i160 %2236, 64
  %2244 = trunc i160 %2243 to i64
  br i1 %2241, label %2283, label %2303

2245:                                             ; preds = %2204
  %2246 = add i32 %2224, 2127912214
  %2247 = shl i32 %2224, 12
  %2248 = add i32 %2246, %2247
  %2249 = ashr i32 %2248, 19
  %2250 = xor i32 %2248, %2249
  %2251 = xor i32 %2250, -949894596
  %2252 = add i32 %2251, 374761393
  %2253 = shl i32 %2251, 5
  %2254 = add i32 %2252, %2253
  %2255 = add i32 %2254, -744332180
  %2256 = shl i32 %2254, 9
  %2257 = xor i32 %2255, %2256
  %2258 = add i32 %2257, -42973499
  %2259 = shl i32 %2257, 3
  %2260 = add i32 %2258, %2259
  %2261 = ashr i32 %2260, 16
  %2262 = xor i32 %2260, %2261
  %2263 = xor i32 %2262, -1252372727
  %2264 = load i32, ptr %54, align 8
  %2265 = add i32 %2264, -1
  %2266 = and i32 %2265, %2263
  %2267 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2268 = load ptr, ptr %58, align 8
  %2269 = sext i32 %2266 to i64
  %2270 = shl nsw i64 %2269, 5
  %2271 = getelementptr i8, ptr %2268, i64 %2270
  %2272 = load ptr, ptr %2271, align 8
  %2273 = getelementptr i8, ptr %2271, i64 8
  %2274 = load i160, ptr %2273, align 4
  store ptr %2209, ptr %2271, align 8
  store i64 %2206, ptr %2273, align 4
  %2275 = getelementptr i8, ptr %2271, i64 16
  store i64 %2205, ptr %2275, align 4
  %2276 = getelementptr i8, ptr %2271, i64 24
  store i32 %2210, ptr %2276, align 4
  %2277 = icmp ne ptr %2272, @nil_typ
  %2278 = icmp ne ptr %2272, null
  %2279 = and i1 %2277, %2278
  %2280 = trunc i160 %2274 to i64
  %2281 = lshr i160 %2274, 64
  %2282 = trunc i160 %2281 to i64
  br i1 %2279, label %2283, label %2303

2283:                                             ; preds = %2245, %2225
  %2284 = phi i64 [ %2242, %2225 ], [ %2280, %2245 ]
  %2285 = phi i64 [ %2244, %2225 ], [ %2282, %2245 ]
  %2286 = phi ptr [ %2234, %2225 ], [ %2272, %2245 ]
  %2287 = getelementptr i8, ptr %2286, i64 8
  %2288 = getelementptr i8, ptr %2286, i64 16
  %2289 = getelementptr i8, ptr %2286, i64 40
  %2290 = load i64, ptr %2287, align 4
  %2291 = load i64, ptr %2288, align 4
  %2292 = load ptr, ptr %2289, align 8
  %2293 = mul i64 %2290, 4015701072841558310
  %2294 = lshr i64 %2293, 32
  %2295 = xor i64 %2294, %2293
  %2296 = and i64 %2295, %2291
  %2297 = getelementptr i32, ptr %2292, i64 %2296
  %2298 = load i32, ptr %2297, align 4
  %2299 = xor i1 %2208, true
  %2300 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2301 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2302 = icmp eq i32 %2220, 100
  br i1 %2302, label %2307, label %2204

2303:                                             ; preds = %2245, %2225
  %2304 = load i32, ptr %68, align 4
  %2305 = add i32 %2304, 1
  %2306 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2305, ptr %68, align 4
  br label %2307

2307:                                             ; preds = %2303, %2283
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2308

2308:                                             ; preds = %2307, %2175
  %2309 = add nuw nsw i64 %2176, 1
  %2310 = icmp eq i64 %2309, %2038
  br i1 %2310, label %2311, label %2175

2311:                                             ; preds = %2308, %2025, %2021
  %2312 = load ptr, ptr %40, align 8
  %2313 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2314 = load ptr, ptr %41, align 8
  %2315 = load ptr, ptr %2312, align 8
  %2316 = getelementptr i8, ptr %2315, i64 72
  %2317 = load ptr, ptr %2316, align 8
  %2318 = call { i64, i64 } %2317(ptr nocapture nofree nonnull readonly align 8 %2312) #2
  %2319 = extractvalue { i64, i64 } %2318, 0
  %2320 = extractvalue { i64, i64 } %2318, 1
  %2321 = urem i64 20, %2320
  %2322 = icmp eq i64 %2321, 0
  %2323 = sub i64 %2320, %2321
  %2324 = select i1 %2322, i64 0, i64 %2323
  %2325 = add i64 %2319, 20
  %2326 = add i64 %2325, %2324
  %2327 = load ptr, ptr %2314, align 8
  %2328 = getelementptr i8, ptr %2327, i64 72
  %2329 = load ptr, ptr %2328, align 8
  %2330 = call { i64, i64 } %2329(ptr nocapture nofree nonnull readonly align 8 %2314) #2
  %2331 = extractvalue { i64, i64 } %2330, 0
  %2332 = extractvalue { i64, i64 } %2330, 1
  %2333 = call i64 @llvm.umax.i64(i64 %2320, i64 %2332) #44
  %2334 = call i64 @llvm.umax.i64(i64 %2333, i64 noundef 8) #44, !range !18
  %2335 = urem i64 %2326, %2332
  %2336 = icmp eq i64 %2335, 0
  %2337 = sub i64 %2332, %2335
  %2338 = select i1 %2336, i64 0, i64 %2337
  %2339 = add i64 %2331, %2326
  %2340 = add i64 %2339, %2338
  %2341 = urem i64 %2340, %2334
  %2342 = icmp eq i64 %2341, 0
  %2343 = sub i64 %2334, %2341
  %2344 = select i1 %2342, i64 0, i64 %2343
  %2345 = add i64 %2344, %2340
  %2346 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %2345, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2312, ptr %2346, align 8
  %2347 = getelementptr inbounds i8, ptr %2346, i64 8
  store ptr %2314, ptr %2347, align 8
  %2348 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %2346)
  %2349 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2350 = load ptr, ptr %2312, align 8
  %2351 = getelementptr i8, ptr %2350, i64 72
  %2352 = load ptr, ptr %2351, align 8
  %2353 = call { i64, i64 } %2352(ptr nocapture nofree nonnull readonly align 8 %2312) #2
  %2354 = extractvalue { i64, i64 } %2353, 1
  %2355 = urem i64 20, %2354
  %2356 = icmp eq i64 %2355, 0
  %2357 = sub i64 %2354, %2355
  %2358 = add i64 %2357, 20
  %2359 = select i1 %2356, i64 20, i64 %2358
  %2360 = getelementptr i8, ptr %2346, i64 %2359
  %2361 = getelementptr i8, ptr %2350, i64 64
  %2362 = load ptr, ptr %2361, align 8
  call void %2362({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %2312, ptr nocapture nofree writeonly %2360) #8
  %2363 = load ptr, ptr %2346, align 8
  %2364 = load ptr, ptr %2363, align 8
  %2365 = getelementptr i8, ptr %2364, i64 72
  %2366 = load ptr, ptr %2365, align 8
  %2367 = call { i64, i64 } %2366(ptr nocapture nofree nonnull readonly align 8 %2363) #2
  %2368 = extractvalue { i64, i64 } %2367, 0
  %2369 = extractvalue { i64, i64 } %2367, 1
  %2370 = urem i64 20, %2369
  %2371 = icmp eq i64 %2370, 0
  %2372 = sub i64 %2369, %2370
  %2373 = select i1 %2371, i64 0, i64 %2372
  %2374 = add i64 %2368, 20
  %2375 = add i64 %2374, %2373
  %2376 = load ptr, ptr %2347, align 8
  %2377 = load ptr, ptr %2376, align 8
  %2378 = getelementptr i8, ptr %2377, i64 72
  %2379 = load ptr, ptr %2378, align 8
  %2380 = call { i64, i64 } %2379(ptr nocapture nofree nonnull readonly align 8 %2376) #2
  %2381 = extractvalue { i64, i64 } %2380, 1
  %2382 = urem i64 %2375, %2381
  %2383 = icmp eq i64 %2382, 0
  %2384 = sub i64 %2381, %2382
  %2385 = select i1 %2383, i64 0, i64 %2384
  %2386 = getelementptr i8, ptr %2346, i64 %2375
  %2387 = getelementptr i8, ptr %2386, i64 %2385
  %2388 = getelementptr i8, ptr %2377, i64 64
  %2389 = load ptr, ptr %2388, align 8
  call void %2389({ ptr, i160 } %1726, ptr nocapture nofree nonnull readonly align 8 %2376, ptr nocapture nofree writeonly %2387) #8
  %2390 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2391 = getelementptr inbounds i8, ptr %2346, i64 16
  store i32 %1728, ptr %2391, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2392 = ptrtoint ptr %2346 to i64
  %2393 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2394 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2395 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2396

2396:                                             ; preds = %2475, %2311
  %2397 = phi i64 [ undef, %2311 ], [ %2477, %2475 ]
  %2398 = phi i64 [ %2392, %2311 ], [ %2476, %2475 ]
  %2399 = phi i32 [ 0, %2311 ], [ %2412, %2475 ]
  %2400 = phi i1 [ true, %2311 ], [ %2493, %2475 ]
  %2401 = phi ptr [ @Entry, %2311 ], [ %2478, %2475 ]
  %2402 = phi ptr [ %2346, %2311 ], [ %2479, %2475 ]
  %2403 = phi ptr [ undef, %2311 ], [ %2480, %2475 ]
  %2404 = phi i32 [ 10, %2311 ], [ %2492, %2475 ]
  %2405 = sext i32 %2404 to i64
  %2406 = getelementptr ptr, ptr %2401, i64 %2405
  %2407 = getelementptr i8, ptr %2406, i64 64
  %2408 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2401, 0
  %2409 = insertvalue { ptr, ptr, ptr, i32 } %2408, ptr %2402, 1
  %2410 = insertvalue { ptr, ptr, ptr, i32 } %2409, ptr %2403, 2
  %2411 = insertvalue { ptr, ptr, ptr, i32 } %2410, i32 %2404, 3
  %2412 = add nuw nsw i32 %2399, 1
  %2413 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2401)
  %2414 = load ptr, ptr %2407, align 8
  %2415 = call align 4 ptr %2414({ ptr, ptr, ptr, i32 } %2411, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2416 = call i32 %2415({ ptr, ptr, ptr, i32 } %2411, { ptr, ptr, ptr, i32 } %2411, ptr nonnull align 8 %2) #28
  br i1 %2400, label %2417, label %2437

2417:                                             ; preds = %2396
  %2418 = load i32, ptr %54, align 8
  %2419 = add i32 %2418, -1
  %2420 = and i32 %2419, %2416
  %2421 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2422 = load ptr, ptr %56, align 8
  %2423 = sext i32 %2420 to i64
  %2424 = shl nsw i64 %2423, 5
  %2425 = getelementptr i8, ptr %2422, i64 %2424
  %2426 = load ptr, ptr %2425, align 8
  %2427 = getelementptr i8, ptr %2425, i64 8
  %2428 = load i160, ptr %2427, align 4
  store ptr %2401, ptr %2425, align 8
  store i64 %2398, ptr %2427, align 4
  %2429 = getelementptr i8, ptr %2425, i64 16
  store i64 %2397, ptr %2429, align 4
  %2430 = getelementptr i8, ptr %2425, i64 24
  store i32 %2404, ptr %2430, align 4
  %2431 = icmp ne ptr %2426, @nil_typ
  %2432 = icmp ne ptr %2426, null
  %2433 = and i1 %2431, %2432
  %2434 = trunc i160 %2428 to i64
  %2435 = lshr i160 %2428, 64
  %2436 = trunc i160 %2435 to i64
  br i1 %2433, label %2475, label %2497

2437:                                             ; preds = %2396
  %2438 = add i32 %2416, 2127912214
  %2439 = shl i32 %2416, 12
  %2440 = add i32 %2438, %2439
  %2441 = ashr i32 %2440, 19
  %2442 = xor i32 %2440, %2441
  %2443 = xor i32 %2442, -949894596
  %2444 = add i32 %2443, 374761393
  %2445 = shl i32 %2443, 5
  %2446 = add i32 %2444, %2445
  %2447 = add i32 %2446, -744332180
  %2448 = shl i32 %2446, 9
  %2449 = xor i32 %2447, %2448
  %2450 = add i32 %2449, -42973499
  %2451 = shl i32 %2449, 3
  %2452 = add i32 %2450, %2451
  %2453 = ashr i32 %2452, 16
  %2454 = xor i32 %2452, %2453
  %2455 = xor i32 %2454, -1252372727
  %2456 = load i32, ptr %54, align 8
  %2457 = add i32 %2456, -1
  %2458 = and i32 %2457, %2455
  %2459 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2460 = load ptr, ptr %58, align 8
  %2461 = sext i32 %2458 to i64
  %2462 = shl nsw i64 %2461, 5
  %2463 = getelementptr i8, ptr %2460, i64 %2462
  %2464 = load ptr, ptr %2463, align 8
  %2465 = getelementptr i8, ptr %2463, i64 8
  %2466 = load i160, ptr %2465, align 4
  store ptr %2401, ptr %2463, align 8
  store i64 %2398, ptr %2465, align 4
  %2467 = getelementptr i8, ptr %2463, i64 16
  store i64 %2397, ptr %2467, align 4
  %2468 = getelementptr i8, ptr %2463, i64 24
  store i32 %2404, ptr %2468, align 4
  %2469 = icmp ne ptr %2464, @nil_typ
  %2470 = icmp ne ptr %2464, null
  %2471 = and i1 %2469, %2470
  %2472 = trunc i160 %2466 to i64
  %2473 = lshr i160 %2466, 64
  %2474 = trunc i160 %2473 to i64
  br i1 %2471, label %2475, label %2497

2475:                                             ; preds = %2437, %2417
  %2476 = phi i64 [ %2434, %2417 ], [ %2472, %2437 ]
  %2477 = phi i64 [ %2436, %2417 ], [ %2474, %2437 ]
  %2478 = phi ptr [ %2426, %2417 ], [ %2464, %2437 ]
  %2479 = inttoptr i64 %2476 to ptr
  %2480 = inttoptr i64 %2477 to ptr
  %2481 = getelementptr i8, ptr %2478, i64 8
  %2482 = getelementptr i8, ptr %2478, i64 16
  %2483 = getelementptr i8, ptr %2478, i64 40
  %2484 = load i64, ptr %2481, align 4
  %2485 = load i64, ptr %2482, align 4
  %2486 = load ptr, ptr %2483, align 8
  %2487 = mul i64 %2484, 4015701072841558310
  %2488 = lshr i64 %2487, 32
  %2489 = xor i64 %2488, %2487
  %2490 = and i64 %2489, %2485
  %2491 = getelementptr i32, ptr %2486, i64 %2490
  %2492 = load i32, ptr %2491, align 4
  %2493 = xor i1 %2400, true
  %2494 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2495 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2496 = icmp eq i32 %2412, 100
  br i1 %2496, label %2501, label %2396

2497:                                             ; preds = %2437, %2417
  %2498 = load i32, ptr %68, align 4
  %2499 = add i32 %2498, 1
  %2500 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2499, ptr %68, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3197

2501:                                             ; preds = %2475
  %2502 = getelementptr i8, ptr %2478, i64 8
  %2503 = getelementptr i8, ptr %2478, i64 16
  %2504 = getelementptr i8, ptr %2478, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2505 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2506 = load ptr, ptr %56, align 8
  %2507 = load ptr, ptr %58, align 8
  %2508 = load i32, ptr %54, align 8
  %2509 = shl i32 %2508, 1
  %2510 = call i32 @llvm.smax.i32(i32 %2509, i32 noundef 16) #43
  store i32 %2510, ptr %54, align 8
  %2511 = zext nneg i32 %2510 to i64
  %2512 = shl nuw nsw i64 %2511, 5
  %2513 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2512, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2513, ptr %56, align 8
  %2514 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2512, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2514, ptr %58, align 8
  store i32 0, ptr %68, align 4
  %2515 = icmp sgt i32 %2508, 0
  br i1 %2515, label %2516, label %2790

2516:                                             ; preds = %2501
  %2517 = zext nneg i32 %2508 to i64
  br label %2518

2518:                                             ; preds = %2651, %2516
  %2519 = phi i64 [ 0, %2516 ], [ %2652, %2651 ]
  %2520 = shl nuw nsw i64 %2519, 5
  %2521 = getelementptr i8, ptr %2506, i64 %2520
  %2522 = load ptr, ptr %2521, align 8
  %2523 = icmp ne ptr %2522, @nil_typ
  %2524 = icmp ne ptr %2522, null
  %2525 = and i1 %2523, %2524
  br i1 %2525, label %2526, label %2651

2526:                                             ; preds = %2518
  %2527 = getelementptr i8, ptr %2521, i64 8
  %2528 = load i64, ptr %2527, align 4
  %2529 = getelementptr i8, ptr %2521, i64 16
  %2530 = load i64, ptr %2529, align 4
  %2531 = getelementptr i8, ptr %2522, i64 8
  %2532 = getelementptr i8, ptr %2522, i64 16
  %2533 = getelementptr i8, ptr %2522, i64 40
  %2534 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2535 = load i64, ptr %2531, align 4, !noalias !25
  %2536 = load i64, ptr %2532, align 4, !noalias !25
  %2537 = load ptr, ptr %2533, align 8, !noalias !25
  %2538 = mul i64 %2535, 4015701072841558310
  %2539 = lshr i64 %2538, 32
  %2540 = xor i64 %2539, %2538
  %2541 = and i64 %2540, %2536
  %2542 = getelementptr i32, ptr %2537, i64 %2541
  %2543 = load i32, ptr %2542, align 4, !noalias !383
  %2544 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2545 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2546 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2547

2547:                                             ; preds = %2626, %2526
  %2548 = phi i64 [ %2530, %2526 ], [ %2628, %2626 ]
  %2549 = phi i64 [ %2528, %2526 ], [ %2627, %2626 ]
  %2550 = phi i32 [ 0, %2526 ], [ %2563, %2626 ]
  %2551 = phi i1 [ true, %2526 ], [ %2642, %2626 ]
  %2552 = phi ptr [ %2522, %2526 ], [ %2629, %2626 ]
  %2553 = phi i32 [ %2543, %2526 ], [ %2641, %2626 ]
  %2554 = inttoptr i64 %2548 to ptr
  %2555 = inttoptr i64 %2549 to ptr
  %2556 = sext i32 %2553 to i64
  %2557 = getelementptr ptr, ptr %2552, i64 %2556
  %2558 = getelementptr i8, ptr %2557, i64 64
  %2559 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2552, 0
  %2560 = insertvalue { ptr, ptr, ptr, i32 } %2559, ptr %2555, 1
  %2561 = insertvalue { ptr, ptr, ptr, i32 } %2560, ptr %2554, 2
  %2562 = insertvalue { ptr, ptr, ptr, i32 } %2561, i32 %2553, 3
  %2563 = add nuw nsw i32 %2550, 1
  %2564 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2552)
  %2565 = load ptr, ptr %2558, align 8
  %2566 = call align 4 ptr %2565({ ptr, ptr, ptr, i32 } %2562, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2567 = call i32 %2566({ ptr, ptr, ptr, i32 } %2562, { ptr, ptr, ptr, i32 } %2562, ptr nonnull align 8 %2) #28
  br i1 %2551, label %2568, label %2588

2568:                                             ; preds = %2547
  %2569 = load i32, ptr %54, align 8
  %2570 = add i32 %2569, -1
  %2571 = and i32 %2570, %2567
  %2572 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2573 = load ptr, ptr %56, align 8
  %2574 = sext i32 %2571 to i64
  %2575 = shl nsw i64 %2574, 5
  %2576 = getelementptr i8, ptr %2573, i64 %2575
  %2577 = load ptr, ptr %2576, align 8
  %2578 = getelementptr i8, ptr %2576, i64 8
  %2579 = load i160, ptr %2578, align 4
  store ptr %2552, ptr %2576, align 8
  store i64 %2549, ptr %2578, align 4
  %2580 = getelementptr i8, ptr %2576, i64 16
  store i64 %2548, ptr %2580, align 4
  %2581 = getelementptr i8, ptr %2576, i64 24
  store i32 %2553, ptr %2581, align 4
  %2582 = icmp ne ptr %2577, @nil_typ
  %2583 = icmp ne ptr %2577, null
  %2584 = and i1 %2582, %2583
  %2585 = trunc i160 %2579 to i64
  %2586 = lshr i160 %2579, 64
  %2587 = trunc i160 %2586 to i64
  br i1 %2584, label %2626, label %2646

2588:                                             ; preds = %2547
  %2589 = add i32 %2567, 2127912214
  %2590 = shl i32 %2567, 12
  %2591 = add i32 %2589, %2590
  %2592 = ashr i32 %2591, 19
  %2593 = xor i32 %2591, %2592
  %2594 = xor i32 %2593, -949894596
  %2595 = add i32 %2594, 374761393
  %2596 = shl i32 %2594, 5
  %2597 = add i32 %2595, %2596
  %2598 = add i32 %2597, -744332180
  %2599 = shl i32 %2597, 9
  %2600 = xor i32 %2598, %2599
  %2601 = add i32 %2600, -42973499
  %2602 = shl i32 %2600, 3
  %2603 = add i32 %2601, %2602
  %2604 = ashr i32 %2603, 16
  %2605 = xor i32 %2603, %2604
  %2606 = xor i32 %2605, -1252372727
  %2607 = load i32, ptr %54, align 8
  %2608 = add i32 %2607, -1
  %2609 = and i32 %2608, %2606
  %2610 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2611 = load ptr, ptr %58, align 8
  %2612 = sext i32 %2609 to i64
  %2613 = shl nsw i64 %2612, 5
  %2614 = getelementptr i8, ptr %2611, i64 %2613
  %2615 = load ptr, ptr %2614, align 8
  %2616 = getelementptr i8, ptr %2614, i64 8
  %2617 = load i160, ptr %2616, align 4
  store ptr %2552, ptr %2614, align 8
  store i64 %2549, ptr %2616, align 4
  %2618 = getelementptr i8, ptr %2614, i64 16
  store i64 %2548, ptr %2618, align 4
  %2619 = getelementptr i8, ptr %2614, i64 24
  store i32 %2553, ptr %2619, align 4
  %2620 = icmp ne ptr %2615, @nil_typ
  %2621 = icmp ne ptr %2615, null
  %2622 = and i1 %2620, %2621
  %2623 = trunc i160 %2617 to i64
  %2624 = lshr i160 %2617, 64
  %2625 = trunc i160 %2624 to i64
  br i1 %2622, label %2626, label %2646

2626:                                             ; preds = %2588, %2568
  %2627 = phi i64 [ %2585, %2568 ], [ %2623, %2588 ]
  %2628 = phi i64 [ %2587, %2568 ], [ %2625, %2588 ]
  %2629 = phi ptr [ %2577, %2568 ], [ %2615, %2588 ]
  %2630 = getelementptr i8, ptr %2629, i64 8
  %2631 = getelementptr i8, ptr %2629, i64 16
  %2632 = getelementptr i8, ptr %2629, i64 40
  %2633 = load i64, ptr %2630, align 4
  %2634 = load i64, ptr %2631, align 4
  %2635 = load ptr, ptr %2632, align 8
  %2636 = mul i64 %2633, 4015701072841558310
  %2637 = lshr i64 %2636, 32
  %2638 = xor i64 %2637, %2636
  %2639 = and i64 %2638, %2634
  %2640 = getelementptr i32, ptr %2635, i64 %2639
  %2641 = load i32, ptr %2640, align 4
  %2642 = xor i1 %2551, true
  %2643 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2644 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2645 = icmp eq i32 %2563, 100
  br i1 %2645, label %2650, label %2547

2646:                                             ; preds = %2588, %2568
  %2647 = load i32, ptr %68, align 4
  %2648 = add i32 %2647, 1
  %2649 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2648, ptr %68, align 4
  br label %2650

2650:                                             ; preds = %2646, %2626
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2651

2651:                                             ; preds = %2650, %2518
  %2652 = add nuw nsw i64 %2519, 1
  %2653 = icmp eq i64 %2652, %2517
  br i1 %2653, label %2654, label %2518

2654:                                             ; preds = %2787, %2651
  %2655 = phi i64 [ %2788, %2787 ], [ 0, %2651 ]
  %2656 = shl nuw nsw i64 %2655, 5
  %2657 = getelementptr i8, ptr %2507, i64 %2656
  %2658 = load ptr, ptr %2657, align 8
  %2659 = icmp ne ptr %2658, @nil_typ
  %2660 = icmp ne ptr %2658, null
  %2661 = and i1 %2659, %2660
  br i1 %2661, label %2662, label %2787

2662:                                             ; preds = %2654
  %2663 = getelementptr i8, ptr %2657, i64 8
  %2664 = load i64, ptr %2663, align 4
  %2665 = getelementptr i8, ptr %2657, i64 16
  %2666 = load i64, ptr %2665, align 4
  %2667 = getelementptr i8, ptr %2658, i64 8
  %2668 = getelementptr i8, ptr %2658, i64 16
  %2669 = getelementptr i8, ptr %2658, i64 40
  %2670 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2671 = load i64, ptr %2667, align 4, !noalias !25
  %2672 = load i64, ptr %2668, align 4, !noalias !25
  %2673 = load ptr, ptr %2669, align 8, !noalias !25
  %2674 = mul i64 %2671, 4015701072841558310
  %2675 = lshr i64 %2674, 32
  %2676 = xor i64 %2675, %2674
  %2677 = and i64 %2676, %2672
  %2678 = getelementptr i32, ptr %2673, i64 %2677
  %2679 = load i32, ptr %2678, align 4, !noalias !386
  %2680 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2681 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2682 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2683

2683:                                             ; preds = %2762, %2662
  %2684 = phi i64 [ %2666, %2662 ], [ %2764, %2762 ]
  %2685 = phi i64 [ %2664, %2662 ], [ %2763, %2762 ]
  %2686 = phi i32 [ 0, %2662 ], [ %2699, %2762 ]
  %2687 = phi i1 [ true, %2662 ], [ %2778, %2762 ]
  %2688 = phi ptr [ %2658, %2662 ], [ %2765, %2762 ]
  %2689 = phi i32 [ %2679, %2662 ], [ %2777, %2762 ]
  %2690 = inttoptr i64 %2684 to ptr
  %2691 = inttoptr i64 %2685 to ptr
  %2692 = sext i32 %2689 to i64
  %2693 = getelementptr ptr, ptr %2688, i64 %2692
  %2694 = getelementptr i8, ptr %2693, i64 64
  %2695 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2688, 0
  %2696 = insertvalue { ptr, ptr, ptr, i32 } %2695, ptr %2691, 1
  %2697 = insertvalue { ptr, ptr, ptr, i32 } %2696, ptr %2690, 2
  %2698 = insertvalue { ptr, ptr, ptr, i32 } %2697, i32 %2689, 3
  %2699 = add nuw nsw i32 %2686, 1
  %2700 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2688)
  %2701 = load ptr, ptr %2694, align 8
  %2702 = call align 4 ptr %2701({ ptr, ptr, ptr, i32 } %2698, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2703 = call i32 %2702({ ptr, ptr, ptr, i32 } %2698, { ptr, ptr, ptr, i32 } %2698, ptr nonnull align 8 %2) #28
  br i1 %2687, label %2704, label %2724

2704:                                             ; preds = %2683
  %2705 = load i32, ptr %54, align 8
  %2706 = add i32 %2705, -1
  %2707 = and i32 %2706, %2703
  %2708 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2709 = load ptr, ptr %56, align 8
  %2710 = sext i32 %2707 to i64
  %2711 = shl nsw i64 %2710, 5
  %2712 = getelementptr i8, ptr %2709, i64 %2711
  %2713 = load ptr, ptr %2712, align 8
  %2714 = getelementptr i8, ptr %2712, i64 8
  %2715 = load i160, ptr %2714, align 4
  store ptr %2688, ptr %2712, align 8
  store i64 %2685, ptr %2714, align 4
  %2716 = getelementptr i8, ptr %2712, i64 16
  store i64 %2684, ptr %2716, align 4
  %2717 = getelementptr i8, ptr %2712, i64 24
  store i32 %2689, ptr %2717, align 4
  %2718 = icmp ne ptr %2713, @nil_typ
  %2719 = icmp ne ptr %2713, null
  %2720 = and i1 %2718, %2719
  %2721 = trunc i160 %2715 to i64
  %2722 = lshr i160 %2715, 64
  %2723 = trunc i160 %2722 to i64
  br i1 %2720, label %2762, label %2782

2724:                                             ; preds = %2683
  %2725 = add i32 %2703, 2127912214
  %2726 = shl i32 %2703, 12
  %2727 = add i32 %2725, %2726
  %2728 = ashr i32 %2727, 19
  %2729 = xor i32 %2727, %2728
  %2730 = xor i32 %2729, -949894596
  %2731 = add i32 %2730, 374761393
  %2732 = shl i32 %2730, 5
  %2733 = add i32 %2731, %2732
  %2734 = add i32 %2733, -744332180
  %2735 = shl i32 %2733, 9
  %2736 = xor i32 %2734, %2735
  %2737 = add i32 %2736, -42973499
  %2738 = shl i32 %2736, 3
  %2739 = add i32 %2737, %2738
  %2740 = ashr i32 %2739, 16
  %2741 = xor i32 %2739, %2740
  %2742 = xor i32 %2741, -1252372727
  %2743 = load i32, ptr %54, align 8
  %2744 = add i32 %2743, -1
  %2745 = and i32 %2744, %2742
  %2746 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2747 = load ptr, ptr %58, align 8
  %2748 = sext i32 %2745 to i64
  %2749 = shl nsw i64 %2748, 5
  %2750 = getelementptr i8, ptr %2747, i64 %2749
  %2751 = load ptr, ptr %2750, align 8
  %2752 = getelementptr i8, ptr %2750, i64 8
  %2753 = load i160, ptr %2752, align 4
  store ptr %2688, ptr %2750, align 8
  store i64 %2685, ptr %2752, align 4
  %2754 = getelementptr i8, ptr %2750, i64 16
  store i64 %2684, ptr %2754, align 4
  %2755 = getelementptr i8, ptr %2750, i64 24
  store i32 %2689, ptr %2755, align 4
  %2756 = icmp ne ptr %2751, @nil_typ
  %2757 = icmp ne ptr %2751, null
  %2758 = and i1 %2756, %2757
  %2759 = trunc i160 %2753 to i64
  %2760 = lshr i160 %2753, 64
  %2761 = trunc i160 %2760 to i64
  br i1 %2758, label %2762, label %2782

2762:                                             ; preds = %2724, %2704
  %2763 = phi i64 [ %2721, %2704 ], [ %2759, %2724 ]
  %2764 = phi i64 [ %2723, %2704 ], [ %2761, %2724 ]
  %2765 = phi ptr [ %2713, %2704 ], [ %2751, %2724 ]
  %2766 = getelementptr i8, ptr %2765, i64 8
  %2767 = getelementptr i8, ptr %2765, i64 16
  %2768 = getelementptr i8, ptr %2765, i64 40
  %2769 = load i64, ptr %2766, align 4
  %2770 = load i64, ptr %2767, align 4
  %2771 = load ptr, ptr %2768, align 8
  %2772 = mul i64 %2769, 4015701072841558310
  %2773 = lshr i64 %2772, 32
  %2774 = xor i64 %2773, %2772
  %2775 = and i64 %2774, %2770
  %2776 = getelementptr i32, ptr %2771, i64 %2775
  %2777 = load i32, ptr %2776, align 4
  %2778 = xor i1 %2687, true
  %2779 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2780 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2781 = icmp eq i32 %2699, 100
  br i1 %2781, label %2786, label %2683

2782:                                             ; preds = %2724, %2704
  %2783 = load i32, ptr %68, align 4
  %2784 = add i32 %2783, 1
  %2785 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2784, ptr %68, align 4
  br label %2786

2786:                                             ; preds = %2782, %2762
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2787

2787:                                             ; preds = %2786, %2654
  %2788 = add nuw nsw i64 %2655, 1
  %2789 = icmp eq i64 %2788, %2517
  br i1 %2789, label %2790, label %2654

2790:                                             ; preds = %2787, %2501
  %2791 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2792 = load i64, ptr %2502, align 4, !noalias !25
  %2793 = load i64, ptr %2503, align 4, !noalias !25
  %2794 = load ptr, ptr %2504, align 8, !noalias !25
  %2795 = mul i64 %2792, 4015701072841558310
  %2796 = lshr i64 %2795, 32
  %2797 = xor i64 %2796, %2795
  %2798 = and i64 %2797, %2793
  %2799 = getelementptr i32, ptr %2794, i64 %2798
  %2800 = load i32, ptr %2799, align 4, !noalias !389
  %2801 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2802 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2803 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2804

2804:                                             ; preds = %2883, %2790
  %2805 = phi i64 [ %2477, %2790 ], [ %2885, %2883 ]
  %2806 = phi i64 [ %2476, %2790 ], [ %2884, %2883 ]
  %2807 = phi i32 [ 0, %2790 ], [ %2820, %2883 ]
  %2808 = phi i1 [ true, %2790 ], [ %2899, %2883 ]
  %2809 = phi ptr [ %2478, %2790 ], [ %2886, %2883 ]
  %2810 = phi i32 [ %2800, %2790 ], [ %2898, %2883 ]
  %2811 = inttoptr i64 %2805 to ptr
  %2812 = inttoptr i64 %2806 to ptr
  %2813 = sext i32 %2810 to i64
  %2814 = getelementptr ptr, ptr %2809, i64 %2813
  %2815 = getelementptr i8, ptr %2814, i64 64
  %2816 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2809, 0
  %2817 = insertvalue { ptr, ptr, ptr, i32 } %2816, ptr %2812, 1
  %2818 = insertvalue { ptr, ptr, ptr, i32 } %2817, ptr %2811, 2
  %2819 = insertvalue { ptr, ptr, ptr, i32 } %2818, i32 %2810, 3
  %2820 = add nuw nsw i32 %2807, 1
  %2821 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2809)
  %2822 = load ptr, ptr %2815, align 8
  %2823 = call align 4 ptr %2822({ ptr, ptr, ptr, i32 } %2819, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2824 = call i32 %2823({ ptr, ptr, ptr, i32 } %2819, { ptr, ptr, ptr, i32 } %2819, ptr nonnull align 8 %2) #28
  br i1 %2808, label %2825, label %2845

2825:                                             ; preds = %2804
  %2826 = load i32, ptr %54, align 8
  %2827 = add i32 %2826, -1
  %2828 = and i32 %2827, %2824
  %2829 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2830 = load ptr, ptr %56, align 8
  %2831 = sext i32 %2828 to i64
  %2832 = shl nsw i64 %2831, 5
  %2833 = getelementptr i8, ptr %2830, i64 %2832
  %2834 = load ptr, ptr %2833, align 8
  %2835 = getelementptr i8, ptr %2833, i64 8
  %2836 = load i160, ptr %2835, align 4
  store ptr %2809, ptr %2833, align 8
  store i64 %2806, ptr %2835, align 4
  %2837 = getelementptr i8, ptr %2833, i64 16
  store i64 %2805, ptr %2837, align 4
  %2838 = getelementptr i8, ptr %2833, i64 24
  store i32 %2810, ptr %2838, align 4
  %2839 = icmp ne ptr %2834, @nil_typ
  %2840 = icmp ne ptr %2834, null
  %2841 = and i1 %2839, %2840
  %2842 = trunc i160 %2836 to i64
  %2843 = lshr i160 %2836, 64
  %2844 = trunc i160 %2843 to i64
  br i1 %2841, label %2883, label %2903

2845:                                             ; preds = %2804
  %2846 = add i32 %2824, 2127912214
  %2847 = shl i32 %2824, 12
  %2848 = add i32 %2846, %2847
  %2849 = ashr i32 %2848, 19
  %2850 = xor i32 %2848, %2849
  %2851 = xor i32 %2850, -949894596
  %2852 = add i32 %2851, 374761393
  %2853 = shl i32 %2851, 5
  %2854 = add i32 %2852, %2853
  %2855 = add i32 %2854, -744332180
  %2856 = shl i32 %2854, 9
  %2857 = xor i32 %2855, %2856
  %2858 = add i32 %2857, -42973499
  %2859 = shl i32 %2857, 3
  %2860 = add i32 %2858, %2859
  %2861 = ashr i32 %2860, 16
  %2862 = xor i32 %2860, %2861
  %2863 = xor i32 %2862, -1252372727
  %2864 = load i32, ptr %54, align 8
  %2865 = add i32 %2864, -1
  %2866 = and i32 %2865, %2863
  %2867 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2868 = load ptr, ptr %58, align 8
  %2869 = sext i32 %2866 to i64
  %2870 = shl nsw i64 %2869, 5
  %2871 = getelementptr i8, ptr %2868, i64 %2870
  %2872 = load ptr, ptr %2871, align 8
  %2873 = getelementptr i8, ptr %2871, i64 8
  %2874 = load i160, ptr %2873, align 4
  store ptr %2809, ptr %2871, align 8
  store i64 %2806, ptr %2873, align 4
  %2875 = getelementptr i8, ptr %2871, i64 16
  store i64 %2805, ptr %2875, align 4
  %2876 = getelementptr i8, ptr %2871, i64 24
  store i32 %2810, ptr %2876, align 4
  %2877 = icmp ne ptr %2872, @nil_typ
  %2878 = icmp ne ptr %2872, null
  %2879 = and i1 %2877, %2878
  %2880 = trunc i160 %2874 to i64
  %2881 = lshr i160 %2874, 64
  %2882 = trunc i160 %2881 to i64
  br i1 %2879, label %2883, label %2903

2883:                                             ; preds = %2845, %2825
  %2884 = phi i64 [ %2842, %2825 ], [ %2880, %2845 ]
  %2885 = phi i64 [ %2844, %2825 ], [ %2882, %2845 ]
  %2886 = phi ptr [ %2834, %2825 ], [ %2872, %2845 ]
  %2887 = getelementptr i8, ptr %2886, i64 8
  %2888 = getelementptr i8, ptr %2886, i64 16
  %2889 = getelementptr i8, ptr %2886, i64 40
  %2890 = load i64, ptr %2887, align 4
  %2891 = load i64, ptr %2888, align 4
  %2892 = load ptr, ptr %2889, align 8
  %2893 = mul i64 %2890, 4015701072841558310
  %2894 = lshr i64 %2893, 32
  %2895 = xor i64 %2894, %2893
  %2896 = and i64 %2895, %2891
  %2897 = getelementptr i32, ptr %2892, i64 %2896
  %2898 = load i32, ptr %2897, align 4
  %2899 = xor i1 %2808, true
  %2900 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2901 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2902 = icmp eq i32 %2820, 100
  br i1 %2902, label %2907, label %2804

2903:                                             ; preds = %2845, %2825
  %2904 = load i32, ptr %68, align 4
  %2905 = add i32 %2904, 1
  %2906 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2905, ptr %68, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3197

2907:                                             ; preds = %2883
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2908 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2909 = load ptr, ptr %56, align 8
  %2910 = load ptr, ptr %58, align 8
  %2911 = load i32, ptr %54, align 8
  %2912 = shl i32 %2911, 1
  %2913 = call i32 @llvm.smax.i32(i32 %2912, i32 noundef 16) #43
  store i32 %2913, ptr %54, align 8
  %2914 = zext nneg i32 %2913 to i64
  %2915 = shl nuw nsw i64 %2914, 5
  %2916 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2915, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2916, ptr %56, align 8
  %2917 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2915, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2917, ptr %58, align 8
  store i32 0, ptr %68, align 4
  %2918 = icmp sgt i32 %2911, 0
  br i1 %2918, label %2921, label %2919

2919:                                             ; preds = %2907
  %2920 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %3197

2921:                                             ; preds = %2907
  %2922 = zext nneg i32 %2911 to i64
  br label %2923

2923:                                             ; preds = %3056, %2921
  %2924 = phi i64 [ 0, %2921 ], [ %3057, %3056 ]
  %2925 = shl nuw nsw i64 %2924, 5
  %2926 = getelementptr i8, ptr %2909, i64 %2925
  %2927 = load ptr, ptr %2926, align 8
  %2928 = icmp ne ptr %2927, @nil_typ
  %2929 = icmp ne ptr %2927, null
  %2930 = and i1 %2928, %2929
  br i1 %2930, label %2931, label %3056

2931:                                             ; preds = %2923
  %2932 = getelementptr i8, ptr %2926, i64 8
  %2933 = load i64, ptr %2932, align 4
  %2934 = getelementptr i8, ptr %2926, i64 16
  %2935 = load i64, ptr %2934, align 4
  %2936 = getelementptr i8, ptr %2927, i64 8
  %2937 = getelementptr i8, ptr %2927, i64 16
  %2938 = getelementptr i8, ptr %2927, i64 40
  %2939 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %2940 = load i64, ptr %2936, align 4, !noalias !25
  %2941 = load i64, ptr %2937, align 4, !noalias !25
  %2942 = load ptr, ptr %2938, align 8, !noalias !25
  %2943 = mul i64 %2940, 4015701072841558310
  %2944 = lshr i64 %2943, 32
  %2945 = xor i64 %2944, %2943
  %2946 = and i64 %2945, %2941
  %2947 = getelementptr i32, ptr %2942, i64 %2946
  %2948 = load i32, ptr %2947, align 4, !noalias !392
  %2949 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2950 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %2951 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %2952

2952:                                             ; preds = %3031, %2931
  %2953 = phi i64 [ %2935, %2931 ], [ %3033, %3031 ]
  %2954 = phi i64 [ %2933, %2931 ], [ %3032, %3031 ]
  %2955 = phi i32 [ 0, %2931 ], [ %2968, %3031 ]
  %2956 = phi i1 [ true, %2931 ], [ %3047, %3031 ]
  %2957 = phi ptr [ %2927, %2931 ], [ %3034, %3031 ]
  %2958 = phi i32 [ %2948, %2931 ], [ %3046, %3031 ]
  %2959 = inttoptr i64 %2953 to ptr
  %2960 = inttoptr i64 %2954 to ptr
  %2961 = sext i32 %2958 to i64
  %2962 = getelementptr ptr, ptr %2957, i64 %2961
  %2963 = getelementptr i8, ptr %2962, i64 64
  %2964 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2957, 0
  %2965 = insertvalue { ptr, ptr, ptr, i32 } %2964, ptr %2960, 1
  %2966 = insertvalue { ptr, ptr, ptr, i32 } %2965, ptr %2959, 2
  %2967 = insertvalue { ptr, ptr, ptr, i32 } %2966, i32 %2958, 3
  %2968 = add nuw nsw i32 %2955, 1
  %2969 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2957)
  %2970 = load ptr, ptr %2963, align 8
  %2971 = call align 4 ptr %2970({ ptr, ptr, ptr, i32 } %2967, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %2972 = call i32 %2971({ ptr, ptr, ptr, i32 } %2967, { ptr, ptr, ptr, i32 } %2967, ptr nonnull align 8 %2) #28
  br i1 %2956, label %2973, label %2993

2973:                                             ; preds = %2952
  %2974 = load i32, ptr %54, align 8
  %2975 = add i32 %2974, -1
  %2976 = and i32 %2975, %2972
  %2977 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2978 = load ptr, ptr %56, align 8
  %2979 = sext i32 %2976 to i64
  %2980 = shl nsw i64 %2979, 5
  %2981 = getelementptr i8, ptr %2978, i64 %2980
  %2982 = load ptr, ptr %2981, align 8
  %2983 = getelementptr i8, ptr %2981, i64 8
  %2984 = load i160, ptr %2983, align 4
  store ptr %2957, ptr %2981, align 8
  store i64 %2954, ptr %2983, align 4
  %2985 = getelementptr i8, ptr %2981, i64 16
  store i64 %2953, ptr %2985, align 4
  %2986 = getelementptr i8, ptr %2981, i64 24
  store i32 %2958, ptr %2986, align 4
  %2987 = icmp ne ptr %2982, @nil_typ
  %2988 = icmp ne ptr %2982, null
  %2989 = and i1 %2987, %2988
  %2990 = trunc i160 %2984 to i64
  %2991 = lshr i160 %2984, 64
  %2992 = trunc i160 %2991 to i64
  br i1 %2989, label %3031, label %3051

2993:                                             ; preds = %2952
  %2994 = add i32 %2972, 2127912214
  %2995 = shl i32 %2972, 12
  %2996 = add i32 %2994, %2995
  %2997 = ashr i32 %2996, 19
  %2998 = xor i32 %2996, %2997
  %2999 = xor i32 %2998, -949894596
  %3000 = add i32 %2999, 374761393
  %3001 = shl i32 %2999, 5
  %3002 = add i32 %3000, %3001
  %3003 = add i32 %3002, -744332180
  %3004 = shl i32 %3002, 9
  %3005 = xor i32 %3003, %3004
  %3006 = add i32 %3005, -42973499
  %3007 = shl i32 %3005, 3
  %3008 = add i32 %3006, %3007
  %3009 = ashr i32 %3008, 16
  %3010 = xor i32 %3008, %3009
  %3011 = xor i32 %3010, -1252372727
  %3012 = load i32, ptr %54, align 8
  %3013 = add i32 %3012, -1
  %3014 = and i32 %3013, %3011
  %3015 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3016 = load ptr, ptr %58, align 8
  %3017 = sext i32 %3014 to i64
  %3018 = shl nsw i64 %3017, 5
  %3019 = getelementptr i8, ptr %3016, i64 %3018
  %3020 = load ptr, ptr %3019, align 8
  %3021 = getelementptr i8, ptr %3019, i64 8
  %3022 = load i160, ptr %3021, align 4
  store ptr %2957, ptr %3019, align 8
  store i64 %2954, ptr %3021, align 4
  %3023 = getelementptr i8, ptr %3019, i64 16
  store i64 %2953, ptr %3023, align 4
  %3024 = getelementptr i8, ptr %3019, i64 24
  store i32 %2958, ptr %3024, align 4
  %3025 = icmp ne ptr %3020, @nil_typ
  %3026 = icmp ne ptr %3020, null
  %3027 = and i1 %3025, %3026
  %3028 = trunc i160 %3022 to i64
  %3029 = lshr i160 %3022, 64
  %3030 = trunc i160 %3029 to i64
  br i1 %3027, label %3031, label %3051

3031:                                             ; preds = %2993, %2973
  %3032 = phi i64 [ %2990, %2973 ], [ %3028, %2993 ]
  %3033 = phi i64 [ %2992, %2973 ], [ %3030, %2993 ]
  %3034 = phi ptr [ %2982, %2973 ], [ %3020, %2993 ]
  %3035 = getelementptr i8, ptr %3034, i64 8
  %3036 = getelementptr i8, ptr %3034, i64 16
  %3037 = getelementptr i8, ptr %3034, i64 40
  %3038 = load i64, ptr %3035, align 4
  %3039 = load i64, ptr %3036, align 4
  %3040 = load ptr, ptr %3037, align 8
  %3041 = mul i64 %3038, 4015701072841558310
  %3042 = lshr i64 %3041, 32
  %3043 = xor i64 %3042, %3041
  %3044 = and i64 %3043, %3039
  %3045 = getelementptr i32, ptr %3040, i64 %3044
  %3046 = load i32, ptr %3045, align 4
  %3047 = xor i1 %2956, true
  %3048 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3049 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3050 = icmp eq i32 %2968, 100
  br i1 %3050, label %3055, label %2952

3051:                                             ; preds = %2993, %2973
  %3052 = load i32, ptr %68, align 4
  %3053 = add i32 %3052, 1
  %3054 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %3053, ptr %68, align 4
  br label %3055

3055:                                             ; preds = %3051, %3031
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3056

3056:                                             ; preds = %3055, %2923
  %3057 = add nuw nsw i64 %2924, 1
  %3058 = icmp eq i64 %3057, %2922
  br i1 %3058, label %3059, label %2923

3059:                                             ; preds = %3056
  %3060 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %3061

3061:                                             ; preds = %3194, %3059
  %3062 = phi i64 [ 0, %3059 ], [ %3195, %3194 ]
  %3063 = shl nuw nsw i64 %3062, 5
  %3064 = getelementptr i8, ptr %2910, i64 %3063
  %3065 = load ptr, ptr %3064, align 8
  %3066 = icmp ne ptr %3065, @nil_typ
  %3067 = icmp ne ptr %3065, null
  %3068 = and i1 %3066, %3067
  br i1 %3068, label %3069, label %3194

3069:                                             ; preds = %3061
  %3070 = getelementptr i8, ptr %3064, i64 8
  %3071 = load i64, ptr %3070, align 4
  %3072 = getelementptr i8, ptr %3064, i64 16
  %3073 = load i64, ptr %3072, align 4
  %3074 = getelementptr i8, ptr %3065, i64 8
  %3075 = getelementptr i8, ptr %3065, i64 16
  %3076 = getelementptr i8, ptr %3065, i64 40
  %3077 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3078 = load i64, ptr %3074, align 4, !noalias !25
  %3079 = load i64, ptr %3075, align 4, !noalias !25
  %3080 = load ptr, ptr %3076, align 8, !noalias !25
  %3081 = mul i64 %3078, 4015701072841558310
  %3082 = lshr i64 %3081, 32
  %3083 = xor i64 %3082, %3081
  %3084 = and i64 %3083, %3079
  %3085 = getelementptr i32, ptr %3080, i64 %3084
  %3086 = load i32, ptr %3085, align 4, !noalias !395
  %3087 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3088 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3089 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3090

3090:                                             ; preds = %3169, %3069
  %3091 = phi i64 [ %3073, %3069 ], [ %3171, %3169 ]
  %3092 = phi i64 [ %3071, %3069 ], [ %3170, %3169 ]
  %3093 = phi i32 [ 0, %3069 ], [ %3106, %3169 ]
  %3094 = phi i1 [ true, %3069 ], [ %3185, %3169 ]
  %3095 = phi ptr [ %3065, %3069 ], [ %3172, %3169 ]
  %3096 = phi i32 [ %3086, %3069 ], [ %3184, %3169 ]
  %3097 = inttoptr i64 %3091 to ptr
  %3098 = inttoptr i64 %3092 to ptr
  %3099 = sext i32 %3096 to i64
  %3100 = getelementptr ptr, ptr %3095, i64 %3099
  %3101 = getelementptr i8, ptr %3100, i64 64
  %3102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3095, 0
  %3103 = insertvalue { ptr, ptr, ptr, i32 } %3102, ptr %3098, 1
  %3104 = insertvalue { ptr, ptr, ptr, i32 } %3103, ptr %3097, 2
  %3105 = insertvalue { ptr, ptr, ptr, i32 } %3104, i32 %3096, 3
  %3106 = add nuw nsw i32 %3093, 1
  %3107 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %3095)
  %3108 = load ptr, ptr %3101, align 8
  %3109 = call align 4 ptr %3108({ ptr, ptr, ptr, i32 } %3105, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3110 = call i32 %3109({ ptr, ptr, ptr, i32 } %3105, { ptr, ptr, ptr, i32 } %3105, ptr nonnull align 8 %2) #28
  br i1 %3094, label %3111, label %3131

3111:                                             ; preds = %3090
  %3112 = load i32, ptr %54, align 8
  %3113 = add i32 %3112, -1
  %3114 = and i32 %3113, %3110
  %3115 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3116 = load ptr, ptr %56, align 8
  %3117 = sext i32 %3114 to i64
  %3118 = shl nsw i64 %3117, 5
  %3119 = getelementptr i8, ptr %3116, i64 %3118
  %3120 = load ptr, ptr %3119, align 8
  %3121 = getelementptr i8, ptr %3119, i64 8
  %3122 = load i160, ptr %3121, align 4
  store ptr %3095, ptr %3119, align 8
  store i64 %3092, ptr %3121, align 4
  %3123 = getelementptr i8, ptr %3119, i64 16
  store i64 %3091, ptr %3123, align 4
  %3124 = getelementptr i8, ptr %3119, i64 24
  store i32 %3096, ptr %3124, align 4
  %3125 = icmp ne ptr %3120, @nil_typ
  %3126 = icmp ne ptr %3120, null
  %3127 = and i1 %3125, %3126
  %3128 = trunc i160 %3122 to i64
  %3129 = lshr i160 %3122, 64
  %3130 = trunc i160 %3129 to i64
  br i1 %3127, label %3169, label %3189

3131:                                             ; preds = %3090
  %3132 = add i32 %3110, 2127912214
  %3133 = shl i32 %3110, 12
  %3134 = add i32 %3132, %3133
  %3135 = ashr i32 %3134, 19
  %3136 = xor i32 %3134, %3135
  %3137 = xor i32 %3136, -949894596
  %3138 = add i32 %3137, 374761393
  %3139 = shl i32 %3137, 5
  %3140 = add i32 %3138, %3139
  %3141 = add i32 %3140, -744332180
  %3142 = shl i32 %3140, 9
  %3143 = xor i32 %3141, %3142
  %3144 = add i32 %3143, -42973499
  %3145 = shl i32 %3143, 3
  %3146 = add i32 %3144, %3145
  %3147 = ashr i32 %3146, 16
  %3148 = xor i32 %3146, %3147
  %3149 = xor i32 %3148, -1252372727
  %3150 = load i32, ptr %54, align 8
  %3151 = add i32 %3150, -1
  %3152 = and i32 %3151, %3149
  %3153 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3154 = load ptr, ptr %58, align 8
  %3155 = sext i32 %3152 to i64
  %3156 = shl nsw i64 %3155, 5
  %3157 = getelementptr i8, ptr %3154, i64 %3156
  %3158 = load ptr, ptr %3157, align 8
  %3159 = getelementptr i8, ptr %3157, i64 8
  %3160 = load i160, ptr %3159, align 4
  store ptr %3095, ptr %3157, align 8
  store i64 %3092, ptr %3159, align 4
  %3161 = getelementptr i8, ptr %3157, i64 16
  store i64 %3091, ptr %3161, align 4
  %3162 = getelementptr i8, ptr %3157, i64 24
  store i32 %3096, ptr %3162, align 4
  %3163 = icmp ne ptr %3158, @nil_typ
  %3164 = icmp ne ptr %3158, null
  %3165 = and i1 %3163, %3164
  %3166 = trunc i160 %3160 to i64
  %3167 = lshr i160 %3160, 64
  %3168 = trunc i160 %3167 to i64
  br i1 %3165, label %3169, label %3189

3169:                                             ; preds = %3131, %3111
  %3170 = phi i64 [ %3128, %3111 ], [ %3166, %3131 ]
  %3171 = phi i64 [ %3130, %3111 ], [ %3168, %3131 ]
  %3172 = phi ptr [ %3120, %3111 ], [ %3158, %3131 ]
  %3173 = getelementptr i8, ptr %3172, i64 8
  %3174 = getelementptr i8, ptr %3172, i64 16
  %3175 = getelementptr i8, ptr %3172, i64 40
  %3176 = load i64, ptr %3173, align 4
  %3177 = load i64, ptr %3174, align 4
  %3178 = load ptr, ptr %3175, align 8
  %3179 = mul i64 %3176, 4015701072841558310
  %3180 = lshr i64 %3179, 32
  %3181 = xor i64 %3180, %3179
  %3182 = and i64 %3181, %3177
  %3183 = getelementptr i32, ptr %3178, i64 %3182
  %3184 = load i32, ptr %3183, align 4
  %3185 = xor i1 %3094, true
  %3186 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %3187 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3188 = icmp eq i32 %3106, 100
  br i1 %3188, label %3193, label %3090

3189:                                             ; preds = %3131, %3111
  %3190 = load i32, ptr %68, align 4
  %3191 = add i32 %3190, 1
  %3192 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %3191, ptr %68, align 4
  br label %3193

3193:                                             ; preds = %3189, %3169
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3194

3194:                                             ; preds = %3193, %3061
  %3195 = add nuw nsw i64 %3062, 1
  %3196 = icmp eq i64 %3195, %2922
  br i1 %3196, label %3197, label %3061

3197:                                             ; preds = %3194, %2919, %2903, %2497, %1938, %1782
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3198 = add nsw i32 %73, 1
  br label %3199

3199:                                             ; preds = %3197, %237
  %3200 = phi i32 [ %3198, %3197 ], [ %73, %237 ]
  %3201 = add nuw nsw i32 %72, 1
  %3202 = icmp slt i32 %3200, %0
  %3203 = icmp slt i32 %3201, %60
  %3204 = select i1 %3202, i1 %3203, i1 false
  br i1 %3204, label %70, label %3205

3205:                                             ; preds = %3199, %1
  %3206 = phi i32 [ 0, %1 ], [ %3200, %3199 ]
  %3207 = icmp slt i32 %3206, %0
  br i1 %3207, label %3208, label %3224

3208:                                             ; preds = %3205
  %3209 = call noalias nonnull align 32 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <29 x i8> <i8 87, i8 97, i8 114, i8 110, i8 105, i8 110, i8 103, i8 58, i8 32, i8 67, i8 111, i8 117, i8 108, i8 100, i8 32, i8 111, i8 110, i8 108, i8 121, i8 32, i8 103, i8 101, i8 110, i8 101, i8 114, i8 97, i8 116, i8 101, i8 32>, ptr %3209, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3210 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3211 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3212 = call noalias nonnull align 4 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(30) %3212, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(30) %3209, i64 noundef 29, i1 noundef false)
  %3213 = getelementptr inbounds i8, ptr %3212, i64 29
  store i8 0, ptr %3213, align 1
  %3214 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(30) %3212) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3215 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3206) #25
  %3216 = call noalias nonnull align 32 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <29 x i8> <i8 32, i8 117, i8 110, i8 105, i8 113, i8 117, i8 101, i8 32, i8 107, i8 101, i8 121, i8 115, i8 32, i8 102, i8 111, i8 114, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 116, i8 101, i8 115, i8 116, i8 46>, ptr %3216, align 32
  %3217 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3218 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3219 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3220 = call noalias nonnull align 4 dereferenceable(30) ptr @bump_malloc_inner(i64 noundef 30, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(30) %3220, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(30) %3216, i64 noundef 29, i1 noundef false)
  %3221 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3222 = getelementptr inbounds i8, ptr %3220, i64 29
  store i8 0, ptr %3222, align 1
  %3223 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(30) %3220) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3224

3224:                                             ; preds = %3208, %3205
  %3225 = phi i32 [ %3206, %3208 ], [ %0, %3205 ]
  %3226 = call i64 @clock()
  %3227 = icmp sgt i32 %3225, 0
  br i1 %3227, label %3228, label %3448

3228:                                             ; preds = %3224
  %3229 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %3230 = zext nneg i32 %3225 to i64
  %3231 = getelementptr inbounds i8, ptr %16, i64 44
  br label %3232

3232:                                             ; preds = %3443, %3228
  %3233 = phi i64 [ 0, %3228 ], [ %3446, %3443 ]
  %3234 = phi i32 [ 0, %3228 ], [ %3445, %3443 ]
  %3235 = phi i1 [ true, %3228 ], [ %3444, %3443 ]
  %3236 = shl i64 %3233, 2
  %3237 = getelementptr i8, ptr %38, i64 %3236
  %3238 = load i32, ptr %3237, align 4
  %3239 = zext i32 %3238 to i160
  %3240 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %3239, 1
  %3241 = load ptr, ptr %28, align 8
  %3242 = call i32 %3241({ ptr, i160 } %3240) #28
  %3243 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %3244 = load i32, ptr %30, align 8
  %3245 = add i32 %3244, -1
  %3246 = and i32 %3245, %3242
  %3247 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3248 = sext i32 %3246 to i64
  %3249 = shl nsw i64 %3248, 5
  %3250 = getelementptr i8, ptr %3247, i64 %3249
  %3251 = load ptr, ptr %3250, align 8
  %3252 = icmp ne ptr %3251, @nil_typ
  %3253 = icmp ne ptr %3251, null
  %3254 = and i1 %3252, %3253
  br i1 %3254, label %3255, label %3297

3255:                                             ; preds = %3232
  %3256 = getelementptr i8, ptr %3250, i64 8
  %3257 = load i64, ptr %3256, align 4
  %3258 = getelementptr i8, ptr %3250, i64 16
  %3259 = load i64, ptr %3258, align 4
  %3260 = inttoptr i64 %3257 to ptr
  %3261 = inttoptr i64 %3259 to ptr
  %3262 = getelementptr i8, ptr %3251, i64 8
  %3263 = getelementptr i8, ptr %3251, i64 16
  %3264 = getelementptr i8, ptr %3251, i64 40
  %3265 = load i64, ptr %3262, align 4, !noalias !398
  %3266 = load i64, ptr %3263, align 4, !noalias !398
  %3267 = load ptr, ptr %3264, align 8, !noalias !398
  %3268 = mul i64 %3265, 4015701072841558310
  %3269 = lshr i64 %3268, 32
  %3270 = xor i64 %3269, %3268
  %3271 = and i64 %3270, %3266
  %3272 = getelementptr i32, ptr %3267, i64 %3271
  %3273 = load i32, ptr %3272, align 4, !noalias !398
  %3274 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3251, 0
  %3275 = insertvalue { ptr, ptr, ptr, i32 } %3274, ptr %3260, 1
  %3276 = insertvalue { ptr, ptr, ptr, i32 } %3275, ptr %3261, 2
  %3277 = insertvalue { ptr, ptr, ptr, i32 } %3276, i32 %3273, 3
  %3278 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3279 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3251) #43
  %3280 = sext i32 %3273 to i64
  %3281 = getelementptr ptr, ptr %3251, i64 %3280
  %3282 = getelementptr i8, ptr %3281, i64 64
  %3283 = load ptr, ptr %3282, align 8
  %3284 = call align 4 ptr %3283({ ptr, ptr, ptr, i32 } %3277, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3285 = call i32 %3284({ ptr, ptr, ptr, i32 } %3277, { ptr, ptr, ptr, i32 } %3277, ptr nonnull align 8 %2) #28
  %3286 = icmp eq i32 %3285, %3242
  br i1 %3286, label %3287, label %3297

3287:                                             ; preds = %3255
  %3288 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3289 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3251)
  %3290 = getelementptr i8, ptr %3281, i64 48
  %3291 = load ptr, ptr %3290, align 8
  %3292 = call align 4 ptr %3291({ ptr, ptr, ptr, i32 } %3277, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3293 = call { ptr, i160 } %3292({ ptr, ptr, ptr, i32 } %3277, { ptr, ptr, ptr, i32 } %3277, ptr nonnull align 8 %2) #28
  %3294 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3295 = load ptr, ptr %29, align 8
  %3296 = call i1 %3295({ ptr, i160 } %3293, { ptr, i160 } %3240) #28
  br i1 %3296, label %3298, label %3297

3297:                                             ; preds = %3287, %3255, %3232
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3312

3298:                                             ; preds = %3287
  %3299 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3300 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3251)
  %3301 = getelementptr i8, ptr %3281, i64 56
  %3302 = load ptr, ptr %3301, align 8
  %3303 = call align 4 ptr %3302({ ptr, ptr, ptr, i32 } %3277, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3304 = call { ptr, i160 } %3303({ ptr, ptr, ptr, i32 } %3277, { ptr, ptr, ptr, i32 } %3277, ptr nonnull align 8 %2) #28
  %3305 = extractvalue { ptr, i160 } %3304, 0
  store ptr @nil_typ, ptr %3250, align 8
  %3306 = load i32, ptr %3231, align 4
  %3307 = add i32 %3306, -1
  store i32 %3307, ptr %3231, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3308 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3309 = icmp ne ptr %3305, @nil_typ
  %3310 = icmp ne ptr %3305, null
  %3311 = and i1 %3309, %3310
  br i1 %3311, label %3407, label %3312

3312:                                             ; preds = %3298, %3297
  %3313 = add i32 %3242, 2127912214
  %3314 = shl i32 %3242, 12
  %3315 = add i32 %3313, %3314
  %3316 = ashr i32 %3315, 19
  %3317 = xor i32 %3315, %3316
  %3318 = xor i32 %3317, -949894596
  %3319 = add i32 %3318, 374761393
  %3320 = shl i32 %3318, 5
  %3321 = add i32 %3319, %3320
  %3322 = add i32 %3321, -744332180
  %3323 = shl i32 %3321, 9
  %3324 = xor i32 %3322, %3323
  %3325 = add i32 %3324, -42973499
  %3326 = shl i32 %3324, 3
  %3327 = add i32 %3325, %3326
  %3328 = ashr i32 %3327, 16
  %3329 = xor i32 %3327, %3328
  %3330 = xor i32 %3329, -1252372727
  %3331 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3332 = load i32, ptr %30, align 8
  %3333 = add i32 %3332, -1
  %3334 = and i32 %3333, %3330
  %3335 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3336 = sext i32 %3334 to i64
  %3337 = shl nsw i64 %3336, 5
  %3338 = getelementptr i8, ptr %3335, i64 %3337
  %3339 = load ptr, ptr %3338, align 8
  %3340 = icmp ne ptr %3339, @nil_typ
  %3341 = icmp ne ptr %3339, null
  %3342 = and i1 %3340, %3341
  br i1 %3342, label %3343, label %3396

3343:                                             ; preds = %3312
  %3344 = getelementptr i8, ptr %3338, i64 8
  %3345 = load i64, ptr %3344, align 4
  %3346 = getelementptr i8, ptr %3338, i64 16
  %3347 = load i64, ptr %3346, align 4
  %3348 = inttoptr i64 %3345 to ptr
  %3349 = inttoptr i64 %3347 to ptr
  %3350 = getelementptr i8, ptr %3339, i64 8
  %3351 = getelementptr i8, ptr %3339, i64 16
  %3352 = getelementptr i8, ptr %3339, i64 40
  %3353 = load i64, ptr %3350, align 4, !noalias !401
  %3354 = load i64, ptr %3351, align 4, !noalias !401
  %3355 = load ptr, ptr %3352, align 8, !noalias !401
  %3356 = mul i64 %3353, 4015701072841558310
  %3357 = lshr i64 %3356, 32
  %3358 = xor i64 %3357, %3356
  %3359 = and i64 %3358, %3354
  %3360 = getelementptr i32, ptr %3355, i64 %3359
  %3361 = load i32, ptr %3360, align 4, !noalias !401
  %3362 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3339, 0
  %3363 = insertvalue { ptr, ptr, ptr, i32 } %3362, ptr %3348, 1
  %3364 = insertvalue { ptr, ptr, ptr, i32 } %3363, ptr %3349, 2
  %3365 = insertvalue { ptr, ptr, ptr, i32 } %3364, i32 %3361, 3
  %3366 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3367 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3339) #43
  %3368 = sext i32 %3361 to i64
  %3369 = getelementptr ptr, ptr %3339, i64 %3368
  %3370 = getelementptr i8, ptr %3369, i64 64
  %3371 = load ptr, ptr %3370, align 8
  %3372 = call align 4 ptr %3371({ ptr, ptr, ptr, i32 } %3365, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3373 = call i32 %3372({ ptr, ptr, ptr, i32 } %3365, { ptr, ptr, ptr, i32 } %3365, ptr nonnull align 8 %2) #28
  %3374 = icmp eq i32 %3373, %3242
  br i1 %3374, label %3375, label %3396

3375:                                             ; preds = %3343
  %3376 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3377 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3339)
  %3378 = getelementptr i8, ptr %3369, i64 48
  %3379 = load ptr, ptr %3378, align 8
  %3380 = call align 4 ptr %3379({ ptr, ptr, ptr, i32 } %3365, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3381 = call { ptr, i160 } %3380({ ptr, ptr, ptr, i32 } %3365, { ptr, ptr, ptr, i32 } %3365, ptr nonnull align 8 %2) #28
  %3382 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3383 = load ptr, ptr %29, align 8
  %3384 = call i1 %3383({ ptr, i160 } %3381, { ptr, i160 } %3240) #28
  br i1 %3384, label %3385, label %3396

3385:                                             ; preds = %3375
  %3386 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3387 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3339)
  %3388 = getelementptr i8, ptr %3369, i64 56
  %3389 = load ptr, ptr %3388, align 8
  %3390 = call align 4 ptr %3389({ ptr, ptr, ptr, i32 } %3365, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3391 = call { ptr, i160 } %3390({ ptr, ptr, ptr, i32 } %3365, { ptr, ptr, ptr, i32 } %3365, ptr nonnull align 8 %2) #28
  %3392 = extractvalue { ptr, i160 } %3391, 0
  %3393 = extractvalue { ptr, i160 } %3391, 1
  store ptr @nil_typ, ptr %3338, align 8
  %3394 = load i32, ptr %3231, align 4
  %3395 = add i32 %3394, -1
  store i32 %3395, ptr %3231, align 4
  br label %3396

3396:                                             ; preds = %3385, %3375, %3343, %3312
  %3397 = phi i160 [ %3393, %3385 ], [ poison, %3375 ], [ poison, %3312 ], [ poison, %3343 ]
  %3398 = phi ptr [ %3392, %3385 ], [ @nil_typ, %3375 ], [ @nil_typ, %3312 ], [ @nil_typ, %3343 ]
  %3399 = insertvalue { ptr, i160 } poison, ptr %3398, 0
  %3400 = insertvalue { ptr, i160 } %3399, i160 %3397, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3401 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3402 = icmp ne ptr %3398, @nil_typ
  %3403 = icmp ne ptr %3398, null
  %3404 = and i1 %3402, %3403
  %3405 = freeze i1 %3404
  %3406 = select i1 %3405, ptr %3398, ptr @nil_typ
  br label %3407

3407:                                             ; preds = %3396, %3298
  %3408 = phi { ptr, i160 } [ %3304, %3298 ], [ %3400, %3396 ]
  %3409 = phi ptr [ %3305, %3298 ], [ %3406, %3396 ]
  %3410 = icmp ne ptr %3409, @nil_typ
  %3411 = icmp ne ptr %3409, null
  %3412 = and i1 %3410, %3411
  br i1 %3412, label %3413, label %3432

3413:                                             ; preds = %3407
  %3414 = extractvalue { ptr, i160 } %3408, 1
  %3415 = trunc i160 %3414 to i32
  %3416 = add i32 %3238, 1
  %3417 = icmp eq i32 %3416, %3415
  br i1 %3417, label %3429, label %3418

3418:                                             ; preds = %3413
  %3419 = call noalias nonnull align 64 dereferenceable(46) ptr @bump_malloc_inner(i64 noundef 46, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %3420 = load <45 x i8>, ptr @vvjwi_Warning_Remove_returned_wrong_value_for_key_, align 64
  store <45 x i8> %3420, ptr %3419, align 64
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3421 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3422 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3423 = call noalias nonnull align 4 dereferenceable(46) ptr @bump_malloc_inner(i64 noundef 46, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(46) %3423, ptr noalias nocapture nofree noundef nonnull readonly align 64 dereferenceable(46) %3419, i64 noundef 45, i1 noundef false)
  %3424 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3425 = getelementptr inbounds i8, ptr %3423, i64 45
  store i8 0, ptr %3425, align 1
  %3426 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(46) %3423) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3427 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  %3428 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3238) #25
  br label %3429

3429:                                             ; preds = %3418, %3413
  %3430 = phi i1 [ false, %3418 ], [ %3235, %3413 ]
  %3431 = add i32 %3234, 1
  br label %3443

3432:                                             ; preds = %3407
  %3433 = call noalias nonnull align 64 dereferenceable(38) ptr @bump_malloc_inner(i64 noundef 38, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %3434 = load <37 x i8>, ptr @vqfwb_Warning_Remove_returned_Nil_for_key_, align 64
  store <37 x i8> %3434, ptr %3433, align 64
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3435 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3436 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3437 = call noalias nonnull align 4 dereferenceable(38) ptr @bump_malloc_inner(i64 noundef 38, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(38) %3437, ptr noalias nocapture nofree noundef nonnull readonly align 64 dereferenceable(38) %3433, i64 noundef 37, i1 noundef false)
  %3438 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3439 = getelementptr inbounds i8, ptr %3437, i64 37
  store i8 0, ptr %3439, align 1
  %3440 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(38) %3437) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3441 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  %3442 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3238) #25
  br label %3443

3443:                                             ; preds = %3432, %3429
  %3444 = phi i1 [ %3430, %3429 ], [ false, %3432 ]
  %3445 = phi i32 [ %3431, %3429 ], [ %3234, %3432 ]
  %3446 = add nuw nsw i64 %3233, 1
  %3447 = icmp eq i64 %3446, %3230
  br i1 %3447, label %3448, label %3232

3448:                                             ; preds = %3443, %3224
  %3449 = phi i1 [ true, %3224 ], [ %3444, %3443 ]
  %3450 = phi i32 [ 0, %3224 ], [ %3445, %3443 ]
  %3451 = call i64 @clock()
  %3452 = icmp eq i32 %3450, %3225
  %3453 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3454 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %3455 = getelementptr inbounds i8, ptr %16, i64 44
  %3456 = load i32, ptr %3455, align 4
  %3457 = icmp eq i32 %3456, 0
  %3458 = select i1 %3457, i1 %3452, i1 false
  %3459 = select i1 %3458, i1 %3449, i1 false
  br i1 %3227, label %3460, label %3629

3460:                                             ; preds = %3448
  %3461 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %3462 = load i32, ptr %38, align 4
  %3463 = zext i32 %3462 to i160
  %3464 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %3463, 1
  %3465 = load ptr, ptr %28, align 8
  %3466 = call i32 %3465({ ptr, i160 } %3464) #28
  %3467 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %3468 = load i32, ptr %30, align 8
  %3469 = add i32 %3468, -1
  %3470 = and i32 %3469, %3466
  %3471 = load ptr, ptr %32, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3472 = sext i32 %3470 to i64
  %3473 = shl nsw i64 %3472, 5
  %3474 = getelementptr i8, ptr %3471, i64 %3473
  %3475 = load ptr, ptr %3474, align 8
  %3476 = icmp ne ptr %3475, @nil_typ
  %3477 = icmp ne ptr %3475, null
  %3478 = and i1 %3476, %3477
  br i1 %3478, label %3479, label %3521

3479:                                             ; preds = %3460
  %3480 = getelementptr i8, ptr %3474, i64 8
  %3481 = load i64, ptr %3480, align 4
  %3482 = getelementptr i8, ptr %3474, i64 16
  %3483 = load i64, ptr %3482, align 4
  %3484 = inttoptr i64 %3481 to ptr
  %3485 = inttoptr i64 %3483 to ptr
  %3486 = getelementptr i8, ptr %3475, i64 8
  %3487 = getelementptr i8, ptr %3475, i64 16
  %3488 = getelementptr i8, ptr %3475, i64 40
  %3489 = load i64, ptr %3486, align 4, !noalias !404
  %3490 = load i64, ptr %3487, align 4, !noalias !404
  %3491 = load ptr, ptr %3488, align 8, !noalias !404
  %3492 = mul i64 %3489, 4015701072841558310
  %3493 = lshr i64 %3492, 32
  %3494 = xor i64 %3493, %3492
  %3495 = and i64 %3494, %3490
  %3496 = getelementptr i32, ptr %3491, i64 %3495
  %3497 = load i32, ptr %3496, align 4, !noalias !404
  %3498 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3475, 0
  %3499 = insertvalue { ptr, ptr, ptr, i32 } %3498, ptr %3484, 1
  %3500 = insertvalue { ptr, ptr, ptr, i32 } %3499, ptr %3485, 2
  %3501 = insertvalue { ptr, ptr, ptr, i32 } %3500, i32 %3497, 3
  %3502 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3503 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3475) #43
  %3504 = sext i32 %3497 to i64
  %3505 = getelementptr ptr, ptr %3475, i64 %3504
  %3506 = getelementptr i8, ptr %3505, i64 64
  %3507 = load ptr, ptr %3506, align 8
  %3508 = call align 4 ptr %3507({ ptr, ptr, ptr, i32 } %3501, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3509 = call i32 %3508({ ptr, ptr, ptr, i32 } %3501, { ptr, ptr, ptr, i32 } %3501, ptr nonnull align 8 %2) #28
  %3510 = icmp eq i32 %3509, %3466
  br i1 %3510, label %3511, label %3521

3511:                                             ; preds = %3479
  %3512 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3513 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3475)
  %3514 = getelementptr i8, ptr %3505, i64 48
  %3515 = load ptr, ptr %3514, align 8
  %3516 = call align 4 ptr %3515({ ptr, ptr, ptr, i32 } %3501, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3517 = call { ptr, i160 } %3516({ ptr, ptr, ptr, i32 } %3501, { ptr, ptr, ptr, i32 } %3501, ptr nonnull align 8 %2) #28
  %3518 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3519 = load ptr, ptr %29, align 8
  %3520 = call i1 %3519({ ptr, i160 } %3517, { ptr, i160 } %3464) #28
  br i1 %3520, label %3522, label %3521

3521:                                             ; preds = %3511, %3479, %3460
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  br label %3534

3522:                                             ; preds = %3511
  %3523 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3524 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3475)
  %3525 = getelementptr i8, ptr %3505, i64 56
  %3526 = load ptr, ptr %3525, align 8
  %3527 = call align 4 ptr %3526({ ptr, ptr, ptr, i32 } %3501, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3528 = call { ptr, i160 } %3527({ ptr, ptr, ptr, i32 } %3501, { ptr, ptr, ptr, i32 } %3501, ptr nonnull align 8 %2) #28
  %3529 = extractvalue { ptr, i160 } %3528, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3530 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3531 = icmp ne ptr %3529, @nil_typ
  %3532 = icmp ne ptr %3529, null
  %3533 = and i1 %3531, %3532
  br i1 %3533, label %3623, label %3534

3534:                                             ; preds = %3522, %3521
  %3535 = add i32 %3466, 2127912214
  %3536 = shl i32 %3466, 12
  %3537 = add i32 %3535, %3536
  %3538 = ashr i32 %3537, 19
  %3539 = xor i32 %3537, %3538
  %3540 = xor i32 %3539, -949894596
  %3541 = add i32 %3540, 374761393
  %3542 = shl i32 %3540, 5
  %3543 = add i32 %3541, %3542
  %3544 = add i32 %3543, -744332180
  %3545 = shl i32 %3543, 9
  %3546 = xor i32 %3544, %3545
  %3547 = add i32 %3546, -42973499
  %3548 = shl i32 %3546, 3
  %3549 = add i32 %3547, %3548
  %3550 = ashr i32 %3549, 16
  %3551 = xor i32 %3549, %3550
  %3552 = xor i32 %3551, -1252372727
  %3553 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3554 = load i32, ptr %30, align 8
  %3555 = add i32 %3554, -1
  %3556 = and i32 %3555, %3552
  %3557 = load ptr, ptr %34, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3558 = sext i32 %3556 to i64
  %3559 = shl nsw i64 %3558, 5
  %3560 = getelementptr i8, ptr %3557, i64 %3559
  %3561 = load ptr, ptr %3560, align 8
  %3562 = icmp ne ptr %3561, @nil_typ
  %3563 = icmp ne ptr %3561, null
  %3564 = and i1 %3562, %3563
  br i1 %3564, label %3565, label %3615

3565:                                             ; preds = %3534
  %3566 = getelementptr i8, ptr %3560, i64 8
  %3567 = load i64, ptr %3566, align 4
  %3568 = getelementptr i8, ptr %3560, i64 16
  %3569 = load i64, ptr %3568, align 4
  %3570 = inttoptr i64 %3567 to ptr
  %3571 = inttoptr i64 %3569 to ptr
  %3572 = getelementptr i8, ptr %3561, i64 8
  %3573 = getelementptr i8, ptr %3561, i64 16
  %3574 = getelementptr i8, ptr %3561, i64 40
  %3575 = load i64, ptr %3572, align 4, !noalias !407
  %3576 = load i64, ptr %3573, align 4, !noalias !407
  %3577 = load ptr, ptr %3574, align 8, !noalias !407
  %3578 = mul i64 %3575, 4015701072841558310
  %3579 = lshr i64 %3578, 32
  %3580 = xor i64 %3579, %3578
  %3581 = and i64 %3580, %3576
  %3582 = getelementptr i32, ptr %3577, i64 %3581
  %3583 = load i32, ptr %3582, align 4, !noalias !407
  %3584 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3561, 0
  %3585 = insertvalue { ptr, ptr, ptr, i32 } %3584, ptr %3570, 1
  %3586 = insertvalue { ptr, ptr, ptr, i32 } %3585, ptr %3571, 2
  %3587 = insertvalue { ptr, ptr, ptr, i32 } %3586, i32 %3583, 3
  %3588 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3589 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3561) #43
  %3590 = sext i32 %3583 to i64
  %3591 = getelementptr ptr, ptr %3561, i64 %3590
  %3592 = getelementptr i8, ptr %3591, i64 64
  %3593 = load ptr, ptr %3592, align 8
  %3594 = call align 4 ptr %3593({ ptr, ptr, ptr, i32 } %3587, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3595 = call i32 %3594({ ptr, ptr, ptr, i32 } %3587, { ptr, ptr, ptr, i32 } %3587, ptr nonnull align 8 %2) #28
  %3596 = icmp eq i32 %3595, %3466
  br i1 %3596, label %3597, label %3615

3597:                                             ; preds = %3565
  %3598 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3599 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3561)
  %3600 = getelementptr i8, ptr %3591, i64 48
  %3601 = load ptr, ptr %3600, align 8
  %3602 = call align 4 ptr %3601({ ptr, ptr, ptr, i32 } %3587, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3603 = call { ptr, i160 } %3602({ ptr, ptr, ptr, i32 } %3587, { ptr, ptr, ptr, i32 } %3587, ptr nonnull align 8 %2) #28
  %3604 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3605 = load ptr, ptr %29, align 8
  %3606 = call i1 %3605({ ptr, i160 } %3603, { ptr, i160 } %3464) #28
  br i1 %3606, label %3607, label %3615

3607:                                             ; preds = %3597
  %3608 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3609 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %3561)
  %3610 = getelementptr i8, ptr %3591, i64 56
  %3611 = load ptr, ptr %3610, align 8
  %3612 = call align 4 ptr %3611({ ptr, ptr, ptr, i32 } %3587, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  %3613 = call { ptr, i160 } %3612({ ptr, ptr, ptr, i32 } %3587, { ptr, ptr, ptr, i32 } %3587, ptr nonnull align 8 %2) #28
  %3614 = extractvalue { ptr, i160 } %3613, 0
  br label %3615

3615:                                             ; preds = %3607, %3597, %3565, %3534
  %3616 = phi ptr [ %3614, %3607 ], [ @nil_typ, %3597 ], [ @nil_typ, %3534 ], [ @nil_typ, %3565 ]
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3617 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3618 = icmp ne ptr %3616, @nil_typ
  %3619 = icmp ne ptr %3616, null
  %3620 = and i1 %3618, %3619
  %3621 = freeze i1 %3620
  %3622 = select i1 %3621, ptr %3616, ptr @nil_typ
  br label %3623

3623:                                             ; preds = %3615, %3522
  %3624 = phi ptr [ %3529, %3522 ], [ %3622, %3615 ]
  %3625 = icmp eq ptr %3624, @nil_typ
  %3626 = icmp eq ptr %3624, null
  %3627 = or i1 %3625, %3626
  %3628 = select i1 %3627, i1 %3459, i1 false
  br label %3629

3629:                                             ; preds = %3623, %3448
  %3630 = phi i1 [ %3459, %3448 ], [ %3628, %3623 ]
  %3631 = call noalias nonnull align 16 dereferenceable(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <13 x i8> <i8 82, i8 101, i8 109, i8 111, i8 118, i8 101, i8 32, i8 82, i8 97, i8 110, i8 100, i8 111, i8 109>, ptr %3631, align 16
  %3632 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3633 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3634 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3635 = call noalias nonnull align 4 dereferenceable(14) ptr @bump_malloc_inner(i64 noundef 14, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(14) %3635, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(14) %3631, i64 noundef 13, i1 noundef false)
  %3636 = sub i64 %3451, %3226
  %3637 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3638 = getelementptr inbounds i8, ptr %3635, i64 13
  store i8 0, ptr %3638, align 1
  %3639 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(14) %3635) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3640 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %3640, align 16
  %3641 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3641, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3640, i64 noundef 14, i1 noundef false)
  %3642 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3641) #28
  %3643 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3225) #25
  %3644 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %3644, align 16
  %3645 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3645, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3644, i64 noundef 14, i1 noundef false)
  %3646 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3645) #28
  %3647 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3636) #25
  %3648 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %3648, align 4
  %3649 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3649, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3648, i64 noundef 3, i1 noundef false)
  %3650 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3649) #28
  br i1 %3227, label %3651, label %3667

3651:                                             ; preds = %3629
  %3652 = icmp sgt i64 %3636, 0
  br i1 %3652, label %3653, label %3657

3653:                                             ; preds = %3651
  %3654 = mul i64 %3636, 1000000
  %3655 = zext nneg i32 %3225 to i64
  %3656 = sdiv i64 %3654, %3655
  br label %3657

3657:                                             ; preds = %3653, %3651
  %3658 = phi i64 [ %3656, %3653 ], [ 0, %3651 ]
  %3659 = call noalias nonnull align 16 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %3659, align 16
  %3660 = call noalias nonnull align 4 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(16) %3660, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(16) %3659, i64 noundef 15, i1 noundef false)
  %3661 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %3660) #28
  %3662 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3658) #25
  %3663 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %3663, align 4
  %3664 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3664, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3663, i64 noundef 3, i1 noundef false)
  %3665 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3666 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3664) #28
  br label %3667

3667:                                             ; preds = %3657, %3629
  %3668 = call noalias nonnull align 32 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %3668, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3669 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3670 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3671 = call noalias nonnull align 4 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(19) %3671, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(19) %3668, i64 noundef 18, i1 noundef false)
  %3672 = getelementptr inbounds i8, ptr %3671, i64 18
  store i8 0, ptr %3672, align 2
  %3673 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %3671) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3674 = select i1 %3630, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %3675 = select i1 %3630, ptr %8, ptr %12
  %3676 = select i1 %3630, ptr %9, ptr %13
  %3677 = select i1 %3630, ptr %10, ptr %14
  %3678 = select i1 %3630, ptr %11, ptr %15
  store ptr @_parameterization_Bufferi8, ptr %3675, align 8
  %3679 = select i1 %3630, ptr %8, ptr %12
  %3680 = getelementptr inbounds i8, ptr %3679, i64 8
  store ptr @_parameterization_i32, ptr %3680, align 8
  %3681 = select i1 %3630, ptr %8, ptr %12
  %3682 = getelementptr inbounds i8, ptr %3681, i64 16
  store ptr @_parameterization_i32, ptr %3682, align 8
  %3683 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %3675)
  store ptr @buffer_typ, ptr %3676, align 8
  %3684 = select i1 %3630, ptr %9, ptr %13
  %3685 = getelementptr inbounds i8, ptr %3684, i64 8
  store ptr @i32_typ, ptr %3685, align 8
  %3686 = select i1 %3630, ptr %9, ptr %13
  %3687 = getelementptr inbounds i8, ptr %3686, i64 16
  store ptr @i32_typ, ptr %3687, align 8
  %3688 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %3676) #43
  store ptr @_parameterization_String, ptr %3677, align 8
  %3689 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3677)
  store ptr @String, ptr %3678, align 8
  %3690 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %3678) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3691 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3692 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3693 = call noalias nonnull align 4 dereferenceable(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <4 x i8> %3674, ptr %3693, align 4
  %3694 = getelementptr inbounds i8, ptr %3693, i64 4
  store i8 0, ptr %3694, align 4
  %3695 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %3693) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3696 = call noalias nonnull align 32 dereferenceable(21) ptr @bump_malloc_inner(i64 noundef 21, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <20 x i8> <i8 32, i8 32, i8 32, i8 32, i8 40, i8 73, i8 116, i8 101, i8 109, i8 115, i8 32, i8 114, i8 101, i8 109, i8 111, i8 118, i8 101, i8 100, i8 58, i8 32>, ptr %3696, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3697 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3698 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3699 = call noalias nonnull align 4 dereferenceable(21) ptr @bump_malloc_inner(i64 noundef 21, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(21) %3699, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(21) %3696, i64 noundef 20, i1 noundef false)
  %3700 = getelementptr inbounds i8, ptr %3699, i64 20
  store i8 0, ptr %3700, align 4
  %3701 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(21) %3699) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3702 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %3450) #25
  %3703 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  %3704 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %3705 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %2) #43
  %3706 = call noalias nonnull align 4 dereferenceable(2) ptr @bump_malloc_inner(i64 noundef 2, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store i8 41, ptr %3706, align 4
  %3707 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3708 = getelementptr inbounds i8, ptr %3706, i64 1
  store i8 0, ptr %3708, align 1
  %3709 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(2) %3706) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2)
  ret void
}

define dso_local noundef i32 @main() local_unnamed_addr #30 {
  %1 = alloca [0 x ptr], align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [3 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca { ptr }, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [3 x ptr], align 8
  %15 = alloca { ptr, ptr, ptr }, align 8
  %16 = alloca [1 x ptr], align 8
  %17 = alloca { ptr }, align 8
  %18 = alloca [3 x ptr], align 8
  %19 = alloca { ptr, ptr, ptr }, align 8
  %20 = alloca [1 x ptr], align 8
  %21 = alloca { ptr }, align 8
  call void @setup_landing_pad()
  %22 = call noalias nonnull align 32 dereferenceable(23) ptr @bump_malloc_inner(i64 noundef 23, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <22 x i8> <i8 45, i8 45, i8 45, i8 32, i8 77, i8 97, i8 112, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 45, i8 45, i8 45>, ptr %22, align 32
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %26 = call noalias nonnull align 4 dereferenceable(23) ptr @bump_malloc_inner(i64 noundef 23, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(23) %26, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(23) %22, i64 noundef 22, i1 noundef false)
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %28 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(23) %26) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %14)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %15)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %16)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %17)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %18)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %19)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %20)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %21)
  %29 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr @_parameterization_i32, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %29) #43
  %33 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %13)
  %34 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %33, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %13) #28
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %13)
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %33, ptr noalias nofree noundef nonnull readnone align 4 @ptvlruaxpt, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %35 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %33) #47
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %33) #43
  %37 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %12)
  %38 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %37, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %12) #28
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %12)
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %37, ptr noalias nofree noundef nonnull readnone align 4 @yycrreevvs, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %39 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %37) #47
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %37) #43
  %41 = getelementptr inbounds i8, ptr %29, i64 48
  store ptr %35, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %29, i64 56
  store ptr %39, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %29, i64 40
  store i32 8, ptr %43, align 8
  %44 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %45 = getelementptr inbounds i8, ptr %29, i64 24
  store ptr %44, ptr %45, align 8
  %46 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %47 = getelementptr inbounds i8, ptr %29, i64 32
  store ptr %46, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %49 = call i64 @clock()
  %50 = getelementptr inbounds i8, ptr %29, i64 44
  %51 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %29, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr undef, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 10, 3
  br label %54

54:                                               ; preds = %1330, %0
  %55 = phi i32 [ %56, %1330 ], [ 0, %0 ]
  %56 = add nuw nsw i32 %55, 1
  %57 = zext nneg i32 %55 to i160
  %58 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %57, 1
  %59 = zext nneg i32 %56 to i160
  %60 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %59, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %61 = load ptr, ptr %41, align 8
  %62 = call i32 %61({ ptr, i160 } %58) #28
  %63 = load i32, ptr %43, align 8
  %64 = add i32 %63, -1
  %65 = and i32 %64, %62
  %66 = load ptr, ptr %45, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %68 = sext i32 %65 to i64
  %69 = shl nsw i64 %68, 5
  %70 = getelementptr i8, ptr %66, i64 %69
  %71 = load ptr, ptr %70, align 8
  %72 = getelementptr i8, ptr %70, i64 8
  %73 = icmp ne ptr %71, @nil_typ
  %74 = icmp ne ptr %71, null
  %75 = and i1 %73, %74
  br i1 %75, label %76, label %199

76:                                               ; preds = %54
  %77 = load i64, ptr %72, align 4
  %78 = getelementptr i8, ptr %70, i64 16
  %79 = load i64, ptr %78, align 4
  %80 = inttoptr i64 %77 to ptr
  %81 = inttoptr i64 %79 to ptr
  %82 = getelementptr i8, ptr %71, i64 8
  %83 = getelementptr i8, ptr %71, i64 16
  %84 = getelementptr i8, ptr %71, i64 40
  %85 = load i64, ptr %82, align 4, !noalias !410
  %86 = load i64, ptr %83, align 4, !noalias !410
  %87 = load ptr, ptr %84, align 8, !noalias !410
  %88 = mul i64 %85, 4015701072841558310
  %89 = lshr i64 %88, 32
  %90 = xor i64 %89, %88
  %91 = and i64 %90, %86
  %92 = getelementptr i32, ptr %87, i64 %91
  %93 = load i32, ptr %92, align 4, !noalias !410
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %71, 0
  %95 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %80, 1
  %96 = insertvalue { ptr, ptr, ptr, i32 } %95, ptr %81, 2
  %97 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %93, 3
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %71) #43
  %100 = sext i32 %93 to i64
  %101 = getelementptr ptr, ptr %71, i64 %100
  %102 = getelementptr i8, ptr %101, i64 64
  %103 = load ptr, ptr %102, align 8
  %104 = call align 4 ptr %103({ ptr, ptr, ptr, i32 } %97, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %105 = call i32 %104({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull align 8 %1) #28
  %106 = icmp eq i32 %105, %62
  br i1 %106, label %107, label %199

107:                                              ; preds = %76
  %108 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %109 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %71)
  %110 = getelementptr i8, ptr %101, i64 48
  %111 = load ptr, ptr %110, align 8
  %112 = call align 4 ptr %111({ ptr, ptr, ptr, i32 } %97, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %113 = call { ptr, i160 } %112({ ptr, ptr, ptr, i32 } %97, { ptr, ptr, ptr, i32 } %97, ptr nonnull align 8 %1) #28
  %114 = load ptr, ptr %42, align 8
  %115 = call i1 %114({ ptr, i160 } %113, { ptr, i160 } %58) #28
  br i1 %115, label %116, label %199

116:                                              ; preds = %107
  %117 = load ptr, ptr %29, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %119 = load ptr, ptr %30, align 8
  %120 = load ptr, ptr %117, align 8, !alias.scope !413
  %121 = getelementptr i8, ptr %120, i64 72
  %122 = load ptr, ptr %121, align 8, !alias.scope !413
  %123 = call { i64, i64 } %122(ptr nocapture nofree nonnull readonly align 8 %117) #2, !alias.scope !413
  %124 = extractvalue { i64, i64 } %123, 0
  %125 = extractvalue { i64, i64 } %123, 1
  %126 = urem i64 20, %125
  %127 = icmp eq i64 %126, 0
  %128 = sub i64 %125, %126
  %129 = select i1 %127, i64 0, i64 %128
  %130 = add i64 %124, 20
  %131 = add i64 %130, %129
  %132 = load ptr, ptr %119, align 8, !alias.scope !413
  %133 = getelementptr i8, ptr %132, i64 72
  %134 = load ptr, ptr %133, align 8, !alias.scope !413
  %135 = call { i64, i64 } %134(ptr nocapture nofree nonnull readonly align 8 %119) #2, !alias.scope !413
  %136 = extractvalue { i64, i64 } %135, 0
  %137 = extractvalue { i64, i64 } %135, 1
  %138 = call i64 @llvm.umax.i64(i64 %125, i64 %137) #44
  %139 = call i64 @llvm.umax.i64(i64 %138, i64 noundef 8) #44, !range !18
  %140 = urem i64 %131, %137
  %141 = icmp eq i64 %140, 0
  %142 = sub i64 %137, %140
  %143 = select i1 %141, i64 0, i64 %142
  %144 = add i64 %136, %131
  %145 = add i64 %144, %143
  %146 = urem i64 %145, %139
  %147 = icmp eq i64 %146, 0
  %148 = sub i64 %139, %146
  %149 = select i1 %147, i64 0, i64 %148
  %150 = add i64 %149, %145
  %151 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %150, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %117, ptr %151, align 8
  %152 = getelementptr inbounds i8, ptr %151, i64 8
  store ptr %119, ptr %152, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %151)
  %154 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %155 = load ptr, ptr %117, align 8
  %156 = getelementptr i8, ptr %155, i64 72
  %157 = load ptr, ptr %156, align 8
  %158 = call { i64, i64 } %157(ptr nocapture nofree nonnull readonly align 8 %117) #2
  %159 = extractvalue { i64, i64 } %158, 1
  %160 = urem i64 20, %159
  %161 = icmp eq i64 %160, 0
  %162 = sub i64 %159, %160
  %163 = add i64 %162, 20
  %164 = select i1 %161, i64 20, i64 %163
  %165 = getelementptr i8, ptr %151, i64 %164
  %166 = getelementptr i8, ptr %155, i64 64
  %167 = load ptr, ptr %166, align 8
  call void %167({ ptr, i160 } %58, ptr nocapture nofree nonnull readonly align 8 %117, ptr nocapture nofree writeonly %165) #8
  %168 = load ptr, ptr %151, align 8
  %169 = load ptr, ptr %168, align 8
  %170 = getelementptr i8, ptr %169, i64 72
  %171 = load ptr, ptr %170, align 8
  %172 = call { i64, i64 } %171(ptr nocapture nofree nonnull readonly align 8 %168) #2
  %173 = extractvalue { i64, i64 } %172, 0
  %174 = extractvalue { i64, i64 } %172, 1
  %175 = urem i64 20, %174
  %176 = icmp eq i64 %175, 0
  %177 = sub i64 %174, %175
  %178 = select i1 %176, i64 0, i64 %177
  %179 = add i64 %173, 20
  %180 = add i64 %179, %178
  %181 = load ptr, ptr %152, align 8
  %182 = load ptr, ptr %181, align 8
  %183 = getelementptr i8, ptr %182, i64 72
  %184 = load ptr, ptr %183, align 8
  %185 = call { i64, i64 } %184(ptr nocapture nofree nonnull readonly align 8 %181) #2
  %186 = extractvalue { i64, i64 } %185, 1
  %187 = urem i64 %180, %186
  %188 = icmp eq i64 %187, 0
  %189 = sub i64 %186, %187
  %190 = select i1 %188, i64 0, i64 %189
  %191 = getelementptr i8, ptr %151, i64 %180
  %192 = getelementptr i8, ptr %191, i64 %190
  %193 = getelementptr i8, ptr %182, i64 64
  %194 = load ptr, ptr %193, align 8
  call void %194({ ptr, i160 } %60, ptr nocapture nofree nonnull readonly align 8 %181, ptr nocapture nofree writeonly %192) #8
  %195 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %196 = getelementptr inbounds i8, ptr %151, i64 16
  store i32 %62, ptr %196, align 8
  store ptr @Entry, ptr %70, align 8
  %197 = ptrtoint ptr %151 to i64
  store i64 %197, ptr %72, align 4
  %198 = getelementptr i8, ptr %70, i64 24
  store i32 10, ptr %198, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1330

199:                                              ; preds = %107, %76, %54
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %200 = add i32 %62, 2127912214
  %201 = shl i32 %62, 12
  %202 = add i32 %200, %201
  %203 = ashr i32 %202, 19
  %204 = xor i32 %202, %203
  %205 = xor i32 %204, -949894596
  %206 = add i32 %205, 374761393
  %207 = shl i32 %205, 5
  %208 = add i32 %206, %207
  %209 = add i32 %208, -744332180
  %210 = shl i32 %208, 9
  %211 = xor i32 %209, %210
  %212 = add i32 %211, -42973499
  %213 = shl i32 %211, 3
  %214 = add i32 %212, %213
  %215 = ashr i32 %214, 16
  %216 = xor i32 %214, %215
  %217 = xor i32 %216, -1252372727
  %218 = load i32, ptr %43, align 8
  %219 = add i32 %218, -1
  %220 = and i32 %219, %217
  %221 = load ptr, ptr %47, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %223 = sext i32 %220 to i64
  %224 = shl nsw i64 %223, 5
  %225 = getelementptr i8, ptr %221, i64 %224
  %226 = load ptr, ptr %225, align 8
  %227 = getelementptr i8, ptr %225, i64 8
  %228 = icmp ne ptr %226, @nil_typ
  %229 = icmp ne ptr %226, null
  %230 = and i1 %228, %229
  br i1 %230, label %231, label %354

231:                                              ; preds = %199
  %232 = load i64, ptr %227, align 4
  %233 = getelementptr i8, ptr %225, i64 16
  %234 = load i64, ptr %233, align 4
  %235 = inttoptr i64 %232 to ptr
  %236 = inttoptr i64 %234 to ptr
  %237 = getelementptr i8, ptr %226, i64 8
  %238 = getelementptr i8, ptr %226, i64 16
  %239 = getelementptr i8, ptr %226, i64 40
  %240 = load i64, ptr %237, align 4, !noalias !416
  %241 = load i64, ptr %238, align 4, !noalias !416
  %242 = load ptr, ptr %239, align 8, !noalias !416
  %243 = mul i64 %240, 4015701072841558310
  %244 = lshr i64 %243, 32
  %245 = xor i64 %244, %243
  %246 = and i64 %245, %241
  %247 = getelementptr i32, ptr %242, i64 %246
  %248 = load i32, ptr %247, align 4, !noalias !416
  %249 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %226, 0
  %250 = insertvalue { ptr, ptr, ptr, i32 } %249, ptr %235, 1
  %251 = insertvalue { ptr, ptr, ptr, i32 } %250, ptr %236, 2
  %252 = insertvalue { ptr, ptr, ptr, i32 } %251, i32 %248, 3
  %253 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %254 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %226) #43
  %255 = sext i32 %248 to i64
  %256 = getelementptr ptr, ptr %226, i64 %255
  %257 = getelementptr i8, ptr %256, i64 64
  %258 = load ptr, ptr %257, align 8
  %259 = call align 4 ptr %258({ ptr, ptr, ptr, i32 } %252, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %260 = call i32 %259({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr nonnull align 8 %1) #28
  %261 = icmp eq i32 %260, %62
  br i1 %261, label %262, label %354

262:                                              ; preds = %231
  %263 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %264 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %226)
  %265 = getelementptr i8, ptr %256, i64 48
  %266 = load ptr, ptr %265, align 8
  %267 = call align 4 ptr %266({ ptr, ptr, ptr, i32 } %252, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %268 = call { ptr, i160 } %267({ ptr, ptr, ptr, i32 } %252, { ptr, ptr, ptr, i32 } %252, ptr nonnull align 8 %1) #28
  %269 = load ptr, ptr %42, align 8
  %270 = call i1 %269({ ptr, i160 } %268, { ptr, i160 } %58) #28
  br i1 %270, label %271, label %354

271:                                              ; preds = %262
  %272 = load ptr, ptr %29, align 8
  %273 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %274 = load ptr, ptr %30, align 8
  %275 = load ptr, ptr %272, align 8, !alias.scope !419
  %276 = getelementptr i8, ptr %275, i64 72
  %277 = load ptr, ptr %276, align 8, !alias.scope !419
  %278 = call { i64, i64 } %277(ptr nocapture nofree nonnull readonly align 8 %272) #2, !alias.scope !419
  %279 = extractvalue { i64, i64 } %278, 0
  %280 = extractvalue { i64, i64 } %278, 1
  %281 = urem i64 20, %280
  %282 = icmp eq i64 %281, 0
  %283 = sub i64 %280, %281
  %284 = select i1 %282, i64 0, i64 %283
  %285 = add i64 %279, 20
  %286 = add i64 %285, %284
  %287 = load ptr, ptr %274, align 8, !alias.scope !419
  %288 = getelementptr i8, ptr %287, i64 72
  %289 = load ptr, ptr %288, align 8, !alias.scope !419
  %290 = call { i64, i64 } %289(ptr nocapture nofree nonnull readonly align 8 %274) #2, !alias.scope !419
  %291 = extractvalue { i64, i64 } %290, 0
  %292 = extractvalue { i64, i64 } %290, 1
  %293 = call i64 @llvm.umax.i64(i64 %280, i64 %292) #44
  %294 = call i64 @llvm.umax.i64(i64 %293, i64 noundef 8) #44, !range !18
  %295 = urem i64 %286, %292
  %296 = icmp eq i64 %295, 0
  %297 = sub i64 %292, %295
  %298 = select i1 %296, i64 0, i64 %297
  %299 = add i64 %291, %286
  %300 = add i64 %299, %298
  %301 = urem i64 %300, %294
  %302 = icmp eq i64 %301, 0
  %303 = sub i64 %294, %301
  %304 = select i1 %302, i64 0, i64 %303
  %305 = add i64 %304, %300
  %306 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %305, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %272, ptr %306, align 8
  %307 = getelementptr inbounds i8, ptr %306, i64 8
  store ptr %274, ptr %307, align 8
  %308 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %306)
  %309 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %310 = load ptr, ptr %272, align 8
  %311 = getelementptr i8, ptr %310, i64 72
  %312 = load ptr, ptr %311, align 8
  %313 = call { i64, i64 } %312(ptr nocapture nofree nonnull readonly align 8 %272) #2
  %314 = extractvalue { i64, i64 } %313, 1
  %315 = urem i64 20, %314
  %316 = icmp eq i64 %315, 0
  %317 = sub i64 %314, %315
  %318 = add i64 %317, 20
  %319 = select i1 %316, i64 20, i64 %318
  %320 = getelementptr i8, ptr %306, i64 %319
  %321 = getelementptr i8, ptr %310, i64 64
  %322 = load ptr, ptr %321, align 8
  call void %322({ ptr, i160 } %58, ptr nocapture nofree nonnull readonly align 8 %272, ptr nocapture nofree writeonly %320) #8
  %323 = load ptr, ptr %306, align 8
  %324 = load ptr, ptr %323, align 8
  %325 = getelementptr i8, ptr %324, i64 72
  %326 = load ptr, ptr %325, align 8
  %327 = call { i64, i64 } %326(ptr nocapture nofree nonnull readonly align 8 %323) #2
  %328 = extractvalue { i64, i64 } %327, 0
  %329 = extractvalue { i64, i64 } %327, 1
  %330 = urem i64 20, %329
  %331 = icmp eq i64 %330, 0
  %332 = sub i64 %329, %330
  %333 = select i1 %331, i64 0, i64 %332
  %334 = add i64 %328, 20
  %335 = add i64 %334, %333
  %336 = load ptr, ptr %307, align 8
  %337 = load ptr, ptr %336, align 8
  %338 = getelementptr i8, ptr %337, i64 72
  %339 = load ptr, ptr %338, align 8
  %340 = call { i64, i64 } %339(ptr nocapture nofree nonnull readonly align 8 %336) #2
  %341 = extractvalue { i64, i64 } %340, 1
  %342 = urem i64 %335, %341
  %343 = icmp eq i64 %342, 0
  %344 = sub i64 %341, %342
  %345 = select i1 %343, i64 0, i64 %344
  %346 = getelementptr i8, ptr %306, i64 %335
  %347 = getelementptr i8, ptr %346, i64 %345
  %348 = getelementptr i8, ptr %337, i64 64
  %349 = load ptr, ptr %348, align 8
  call void %349({ ptr, i160 } %60, ptr nocapture nofree nonnull readonly align 8 %336, ptr nocapture nofree writeonly %347) #8
  %350 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %351 = getelementptr inbounds i8, ptr %306, i64 16
  store i32 %62, ptr %351, align 8
  store ptr @Entry, ptr %225, align 8
  %352 = ptrtoint ptr %306 to i64
  store i64 %352, ptr %227, align 4
  %353 = getelementptr i8, ptr %225, i64 24
  store i32 10, ptr %353, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1330

354:                                              ; preds = %262, %231, %199
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %355 = load i32, ptr %50, align 4
  %356 = load i32, ptr %43, align 8
  %357 = icmp slt i32 %355, %356
  br i1 %357, label %444, label %358

358:                                              ; preds = %354
  %359 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %360 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %361 = load ptr, ptr %45, align 8
  %362 = load ptr, ptr %47, align 8
  %363 = shl i32 %356, 1
  %364 = call i32 @llvm.smax.i32(i32 %363, i32 noundef 16) #43
  store i32 %364, ptr %43, align 8
  %365 = zext nneg i32 %364 to i64
  %366 = shl nuw nsw i64 %365, 5
  %367 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %366, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %367, ptr %45, align 8
  %368 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %366, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %368, ptr %47, align 8
  store i32 0, ptr %50, align 4
  %369 = icmp sgt i32 %356, 0
  br i1 %369, label %370, label %444

370:                                              ; preds = %358
  %371 = zext nneg i32 %356 to i64
  br label %372

372:                                              ; preds = %405, %370
  %373 = phi i64 [ 0, %370 ], [ %406, %405 ]
  %374 = shl nuw nsw i64 %373, 5
  %375 = getelementptr i8, ptr %361, i64 %374
  %376 = load ptr, ptr %375, align 8
  %377 = icmp ne ptr %376, @nil_typ
  %378 = icmp ne ptr %376, null
  %379 = and i1 %377, %378
  br i1 %379, label %380, label %405

380:                                              ; preds = %372
  %381 = getelementptr i8, ptr %375, i64 8
  %382 = load i64, ptr %381, align 4
  %383 = getelementptr i8, ptr %375, i64 16
  %384 = load i64, ptr %383, align 4
  %385 = inttoptr i64 %382 to ptr
  %386 = inttoptr i64 %384 to ptr
  %387 = getelementptr i8, ptr %376, i64 8
  %388 = getelementptr i8, ptr %376, i64 16
  %389 = getelementptr i8, ptr %376, i64 40
  %390 = load i64, ptr %387, align 4, !noalias !25
  %391 = load i64, ptr %388, align 4, !noalias !25
  %392 = load ptr, ptr %389, align 8, !noalias !25
  %393 = mul i64 %390, 4015701072841558310
  %394 = lshr i64 %393, 32
  %395 = xor i64 %394, %393
  %396 = and i64 %395, %391
  %397 = getelementptr i32, ptr %392, i64 %396
  %398 = load i32, ptr %397, align 4, !noalias !422
  %399 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %376, 0
  %400 = insertvalue { ptr, ptr, ptr, i32 } %399, ptr %385, 1
  %401 = insertvalue { ptr, ptr, ptr, i32 } %400, ptr %386, 2
  %402 = insertvalue { ptr, ptr, ptr, i32 } %401, i32 %398, 3
  %403 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %404 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %402) #28
  br label %405

405:                                              ; preds = %380, %372
  %406 = add nuw nsw i64 %373, 1
  %407 = icmp eq i64 %406, %371
  br i1 %407, label %408, label %372

408:                                              ; preds = %441, %405
  %409 = phi i64 [ %442, %441 ], [ 0, %405 ]
  %410 = shl nuw nsw i64 %409, 5
  %411 = getelementptr i8, ptr %362, i64 %410
  %412 = load ptr, ptr %411, align 8
  %413 = icmp ne ptr %412, @nil_typ
  %414 = icmp ne ptr %412, null
  %415 = and i1 %413, %414
  br i1 %415, label %416, label %441

416:                                              ; preds = %408
  %417 = getelementptr i8, ptr %411, i64 8
  %418 = load i64, ptr %417, align 4
  %419 = getelementptr i8, ptr %411, i64 16
  %420 = load i64, ptr %419, align 4
  %421 = inttoptr i64 %418 to ptr
  %422 = inttoptr i64 %420 to ptr
  %423 = getelementptr i8, ptr %412, i64 8
  %424 = getelementptr i8, ptr %412, i64 16
  %425 = getelementptr i8, ptr %412, i64 40
  %426 = load i64, ptr %423, align 4, !noalias !25
  %427 = load i64, ptr %424, align 4, !noalias !25
  %428 = load ptr, ptr %425, align 8, !noalias !25
  %429 = mul i64 %426, 4015701072841558310
  %430 = lshr i64 %429, 32
  %431 = xor i64 %430, %429
  %432 = and i64 %431, %427
  %433 = getelementptr i32, ptr %428, i64 %432
  %434 = load i32, ptr %433, align 4, !noalias !425
  %435 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %412, 0
  %436 = insertvalue { ptr, ptr, ptr, i32 } %435, ptr %421, 1
  %437 = insertvalue { ptr, ptr, ptr, i32 } %436, ptr %422, 2
  %438 = insertvalue { ptr, ptr, ptr, i32 } %437, i32 %434, 3
  %439 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %440 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %438) #28
  br label %441

441:                                              ; preds = %416, %408
  %442 = add nuw nsw i64 %409, 1
  %443 = icmp eq i64 %442, %371
  br i1 %443, label %444, label %408

444:                                              ; preds = %441, %358, %354
  %445 = load ptr, ptr %29, align 8
  %446 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %447 = load ptr, ptr %30, align 8
  %448 = load ptr, ptr %445, align 8
  %449 = getelementptr i8, ptr %448, i64 72
  %450 = load ptr, ptr %449, align 8
  %451 = call { i64, i64 } %450(ptr nocapture nofree nonnull readonly align 8 %445) #2
  %452 = extractvalue { i64, i64 } %451, 0
  %453 = extractvalue { i64, i64 } %451, 1
  %454 = urem i64 20, %453
  %455 = icmp eq i64 %454, 0
  %456 = sub i64 %453, %454
  %457 = select i1 %455, i64 0, i64 %456
  %458 = add i64 %452, 20
  %459 = add i64 %458, %457
  %460 = load ptr, ptr %447, align 8
  %461 = getelementptr i8, ptr %460, i64 72
  %462 = load ptr, ptr %461, align 8
  %463 = call { i64, i64 } %462(ptr nocapture nofree nonnull readonly align 8 %447) #2
  %464 = extractvalue { i64, i64 } %463, 0
  %465 = extractvalue { i64, i64 } %463, 1
  %466 = call i64 @llvm.umax.i64(i64 %453, i64 %465) #44
  %467 = call i64 @llvm.umax.i64(i64 %466, i64 noundef 8) #44, !range !18
  %468 = urem i64 %459, %465
  %469 = icmp eq i64 %468, 0
  %470 = sub i64 %465, %468
  %471 = select i1 %469, i64 0, i64 %470
  %472 = add i64 %464, %459
  %473 = add i64 %472, %471
  %474 = urem i64 %473, %467
  %475 = icmp eq i64 %474, 0
  %476 = sub i64 %467, %474
  %477 = select i1 %475, i64 0, i64 %476
  %478 = add i64 %477, %473
  %479 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %478, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %445, ptr %479, align 8
  %480 = getelementptr inbounds i8, ptr %479, i64 8
  store ptr %447, ptr %480, align 8
  %481 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %479)
  %482 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %483 = load ptr, ptr %445, align 8
  %484 = getelementptr i8, ptr %483, i64 72
  %485 = load ptr, ptr %484, align 8
  %486 = call { i64, i64 } %485(ptr nocapture nofree nonnull readonly align 8 %445) #2
  %487 = extractvalue { i64, i64 } %486, 1
  %488 = urem i64 20, %487
  %489 = icmp eq i64 %488, 0
  %490 = sub i64 %487, %488
  %491 = add i64 %490, 20
  %492 = select i1 %489, i64 20, i64 %491
  %493 = getelementptr i8, ptr %479, i64 %492
  %494 = getelementptr i8, ptr %483, i64 64
  %495 = load ptr, ptr %494, align 8
  call void %495({ ptr, i160 } %58, ptr nocapture nofree nonnull readonly align 8 %445, ptr nocapture nofree writeonly %493) #8
  %496 = load ptr, ptr %479, align 8
  %497 = load ptr, ptr %496, align 8
  %498 = getelementptr i8, ptr %497, i64 72
  %499 = load ptr, ptr %498, align 8
  %500 = call { i64, i64 } %499(ptr nocapture nofree nonnull readonly align 8 %496) #2
  %501 = extractvalue { i64, i64 } %500, 0
  %502 = extractvalue { i64, i64 } %500, 1
  %503 = urem i64 20, %502
  %504 = icmp eq i64 %503, 0
  %505 = sub i64 %502, %503
  %506 = select i1 %504, i64 0, i64 %505
  %507 = add i64 %501, 20
  %508 = add i64 %507, %506
  %509 = load ptr, ptr %480, align 8
  %510 = load ptr, ptr %509, align 8
  %511 = getelementptr i8, ptr %510, i64 72
  %512 = load ptr, ptr %511, align 8
  %513 = call { i64, i64 } %512(ptr nocapture nofree nonnull readonly align 8 %509) #2
  %514 = extractvalue { i64, i64 } %513, 1
  %515 = urem i64 %508, %514
  %516 = icmp eq i64 %515, 0
  %517 = sub i64 %514, %515
  %518 = select i1 %516, i64 0, i64 %517
  %519 = getelementptr i8, ptr %479, i64 %508
  %520 = getelementptr i8, ptr %519, i64 %518
  %521 = getelementptr i8, ptr %510, i64 64
  %522 = load ptr, ptr %521, align 8
  call void %522({ ptr, i160 } %60, ptr nocapture nofree nonnull readonly align 8 %509, ptr nocapture nofree writeonly %520) #8
  %523 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %524 = getelementptr inbounds i8, ptr %479, i64 16
  store i32 %62, ptr %524, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %525 = ptrtoint ptr %479 to i64
  %526 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %527 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %528 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %529

529:                                              ; preds = %608, %444
  %530 = phi i64 [ undef, %444 ], [ %610, %608 ]
  %531 = phi i64 [ %525, %444 ], [ %609, %608 ]
  %532 = phi i32 [ 0, %444 ], [ %545, %608 ]
  %533 = phi i1 [ true, %444 ], [ %626, %608 ]
  %534 = phi ptr [ @Entry, %444 ], [ %611, %608 ]
  %535 = phi ptr [ %479, %444 ], [ %612, %608 ]
  %536 = phi ptr [ undef, %444 ], [ %613, %608 ]
  %537 = phi i32 [ 10, %444 ], [ %625, %608 ]
  %538 = sext i32 %537 to i64
  %539 = getelementptr ptr, ptr %534, i64 %538
  %540 = getelementptr i8, ptr %539, i64 64
  %541 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %534, 0
  %542 = insertvalue { ptr, ptr, ptr, i32 } %541, ptr %535, 1
  %543 = insertvalue { ptr, ptr, ptr, i32 } %542, ptr %536, 2
  %544 = insertvalue { ptr, ptr, ptr, i32 } %543, i32 %537, 3
  %545 = add nuw nsw i32 %532, 1
  %546 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %534)
  %547 = load ptr, ptr %540, align 8
  %548 = call align 4 ptr %547({ ptr, ptr, ptr, i32 } %544, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %549 = call i32 %548({ ptr, ptr, ptr, i32 } %544, { ptr, ptr, ptr, i32 } %544, ptr nonnull align 8 %1) #28
  br i1 %533, label %550, label %570

550:                                              ; preds = %529
  %551 = load i32, ptr %43, align 8
  %552 = add i32 %551, -1
  %553 = and i32 %552, %549
  %554 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %555 = load ptr, ptr %45, align 8
  %556 = sext i32 %553 to i64
  %557 = shl nsw i64 %556, 5
  %558 = getelementptr i8, ptr %555, i64 %557
  %559 = load ptr, ptr %558, align 8
  %560 = getelementptr i8, ptr %558, i64 8
  %561 = load i160, ptr %560, align 4
  store ptr %534, ptr %558, align 8
  store i64 %531, ptr %560, align 4
  %562 = getelementptr i8, ptr %558, i64 16
  store i64 %530, ptr %562, align 4
  %563 = getelementptr i8, ptr %558, i64 24
  store i32 %537, ptr %563, align 4
  %564 = icmp ne ptr %559, @nil_typ
  %565 = icmp ne ptr %559, null
  %566 = and i1 %564, %565
  %567 = trunc i160 %561 to i64
  %568 = lshr i160 %561, 64
  %569 = trunc i160 %568 to i64
  br i1 %566, label %608, label %630

570:                                              ; preds = %529
  %571 = add i32 %549, 2127912214
  %572 = shl i32 %549, 12
  %573 = add i32 %571, %572
  %574 = ashr i32 %573, 19
  %575 = xor i32 %573, %574
  %576 = xor i32 %575, -949894596
  %577 = add i32 %576, 374761393
  %578 = shl i32 %576, 5
  %579 = add i32 %577, %578
  %580 = add i32 %579, -744332180
  %581 = shl i32 %579, 9
  %582 = xor i32 %580, %581
  %583 = add i32 %582, -42973499
  %584 = shl i32 %582, 3
  %585 = add i32 %583, %584
  %586 = ashr i32 %585, 16
  %587 = xor i32 %585, %586
  %588 = xor i32 %587, -1252372727
  %589 = load i32, ptr %43, align 8
  %590 = add i32 %589, -1
  %591 = and i32 %590, %588
  %592 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %593 = load ptr, ptr %47, align 8
  %594 = sext i32 %591 to i64
  %595 = shl nsw i64 %594, 5
  %596 = getelementptr i8, ptr %593, i64 %595
  %597 = load ptr, ptr %596, align 8
  %598 = getelementptr i8, ptr %596, i64 8
  %599 = load i160, ptr %598, align 4
  store ptr %534, ptr %596, align 8
  store i64 %531, ptr %598, align 4
  %600 = getelementptr i8, ptr %596, i64 16
  store i64 %530, ptr %600, align 4
  %601 = getelementptr i8, ptr %596, i64 24
  store i32 %537, ptr %601, align 4
  %602 = icmp ne ptr %597, @nil_typ
  %603 = icmp ne ptr %597, null
  %604 = and i1 %602, %603
  %605 = trunc i160 %599 to i64
  %606 = lshr i160 %599, 64
  %607 = trunc i160 %606 to i64
  br i1 %604, label %608, label %630

608:                                              ; preds = %570, %550
  %609 = phi i64 [ %567, %550 ], [ %605, %570 ]
  %610 = phi i64 [ %569, %550 ], [ %607, %570 ]
  %611 = phi ptr [ %559, %550 ], [ %597, %570 ]
  %612 = inttoptr i64 %609 to ptr
  %613 = inttoptr i64 %610 to ptr
  %614 = getelementptr i8, ptr %611, i64 8
  %615 = getelementptr i8, ptr %611, i64 16
  %616 = getelementptr i8, ptr %611, i64 40
  %617 = load i64, ptr %614, align 4
  %618 = load i64, ptr %615, align 4
  %619 = load ptr, ptr %616, align 8
  %620 = mul i64 %617, 4015701072841558310
  %621 = lshr i64 %620, 32
  %622 = xor i64 %621, %620
  %623 = and i64 %622, %618
  %624 = getelementptr i32, ptr %619, i64 %623
  %625 = load i32, ptr %624, align 4
  %626 = xor i1 %533, true
  %627 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %628 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %629 = icmp eq i32 %545, 100
  br i1 %629, label %634, label %529

630:                                              ; preds = %570, %550
  %631 = load i32, ptr %50, align 4
  %632 = add i32 %631, 1
  %633 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %632, ptr %50, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1330

634:                                              ; preds = %608
  %635 = getelementptr i8, ptr %611, i64 8
  %636 = getelementptr i8, ptr %611, i64 16
  %637 = getelementptr i8, ptr %611, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %638 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %639 = load ptr, ptr %45, align 8
  %640 = load ptr, ptr %47, align 8
  %641 = load i32, ptr %43, align 8
  %642 = shl i32 %641, 1
  %643 = call i32 @llvm.smax.i32(i32 %642, i32 noundef 16) #43
  store i32 %643, ptr %43, align 8
  %644 = zext nneg i32 %643 to i64
  %645 = shl nuw nsw i64 %644, 5
  %646 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %645, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %646, ptr %45, align 8
  %647 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %645, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %647, ptr %47, align 8
  store i32 0, ptr %50, align 4
  %648 = icmp sgt i32 %641, 0
  br i1 %648, label %649, label %923

649:                                              ; preds = %634
  %650 = zext nneg i32 %641 to i64
  br label %651

651:                                              ; preds = %784, %649
  %652 = phi i64 [ 0, %649 ], [ %785, %784 ]
  %653 = shl nuw nsw i64 %652, 5
  %654 = getelementptr i8, ptr %639, i64 %653
  %655 = load ptr, ptr %654, align 8
  %656 = icmp ne ptr %655, @nil_typ
  %657 = icmp ne ptr %655, null
  %658 = and i1 %656, %657
  br i1 %658, label %659, label %784

659:                                              ; preds = %651
  %660 = getelementptr i8, ptr %654, i64 8
  %661 = load i64, ptr %660, align 4
  %662 = getelementptr i8, ptr %654, i64 16
  %663 = load i64, ptr %662, align 4
  %664 = getelementptr i8, ptr %655, i64 8
  %665 = getelementptr i8, ptr %655, i64 16
  %666 = getelementptr i8, ptr %655, i64 40
  %667 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %668 = load i64, ptr %664, align 4, !noalias !25
  %669 = load i64, ptr %665, align 4, !noalias !25
  %670 = load ptr, ptr %666, align 8, !noalias !25
  %671 = mul i64 %668, 4015701072841558310
  %672 = lshr i64 %671, 32
  %673 = xor i64 %672, %671
  %674 = and i64 %673, %669
  %675 = getelementptr i32, ptr %670, i64 %674
  %676 = load i32, ptr %675, align 4, !noalias !428
  %677 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %678 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %679 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %680

680:                                              ; preds = %759, %659
  %681 = phi i64 [ %663, %659 ], [ %761, %759 ]
  %682 = phi i64 [ %661, %659 ], [ %760, %759 ]
  %683 = phi i32 [ 0, %659 ], [ %696, %759 ]
  %684 = phi i1 [ true, %659 ], [ %775, %759 ]
  %685 = phi ptr [ %655, %659 ], [ %762, %759 ]
  %686 = phi i32 [ %676, %659 ], [ %774, %759 ]
  %687 = inttoptr i64 %681 to ptr
  %688 = inttoptr i64 %682 to ptr
  %689 = sext i32 %686 to i64
  %690 = getelementptr ptr, ptr %685, i64 %689
  %691 = getelementptr i8, ptr %690, i64 64
  %692 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %685, 0
  %693 = insertvalue { ptr, ptr, ptr, i32 } %692, ptr %688, 1
  %694 = insertvalue { ptr, ptr, ptr, i32 } %693, ptr %687, 2
  %695 = insertvalue { ptr, ptr, ptr, i32 } %694, i32 %686, 3
  %696 = add nuw nsw i32 %683, 1
  %697 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %685)
  %698 = load ptr, ptr %691, align 8
  %699 = call align 4 ptr %698({ ptr, ptr, ptr, i32 } %695, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %700 = call i32 %699({ ptr, ptr, ptr, i32 } %695, { ptr, ptr, ptr, i32 } %695, ptr nonnull align 8 %1) #28
  br i1 %684, label %701, label %721

701:                                              ; preds = %680
  %702 = load i32, ptr %43, align 8
  %703 = add i32 %702, -1
  %704 = and i32 %703, %700
  %705 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %706 = load ptr, ptr %45, align 8
  %707 = sext i32 %704 to i64
  %708 = shl nsw i64 %707, 5
  %709 = getelementptr i8, ptr %706, i64 %708
  %710 = load ptr, ptr %709, align 8
  %711 = getelementptr i8, ptr %709, i64 8
  %712 = load i160, ptr %711, align 4
  store ptr %685, ptr %709, align 8
  store i64 %682, ptr %711, align 4
  %713 = getelementptr i8, ptr %709, i64 16
  store i64 %681, ptr %713, align 4
  %714 = getelementptr i8, ptr %709, i64 24
  store i32 %686, ptr %714, align 4
  %715 = icmp ne ptr %710, @nil_typ
  %716 = icmp ne ptr %710, null
  %717 = and i1 %715, %716
  %718 = trunc i160 %712 to i64
  %719 = lshr i160 %712, 64
  %720 = trunc i160 %719 to i64
  br i1 %717, label %759, label %779

721:                                              ; preds = %680
  %722 = add i32 %700, 2127912214
  %723 = shl i32 %700, 12
  %724 = add i32 %722, %723
  %725 = ashr i32 %724, 19
  %726 = xor i32 %724, %725
  %727 = xor i32 %726, -949894596
  %728 = add i32 %727, 374761393
  %729 = shl i32 %727, 5
  %730 = add i32 %728, %729
  %731 = add i32 %730, -744332180
  %732 = shl i32 %730, 9
  %733 = xor i32 %731, %732
  %734 = add i32 %733, -42973499
  %735 = shl i32 %733, 3
  %736 = add i32 %734, %735
  %737 = ashr i32 %736, 16
  %738 = xor i32 %736, %737
  %739 = xor i32 %738, -1252372727
  %740 = load i32, ptr %43, align 8
  %741 = add i32 %740, -1
  %742 = and i32 %741, %739
  %743 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %744 = load ptr, ptr %47, align 8
  %745 = sext i32 %742 to i64
  %746 = shl nsw i64 %745, 5
  %747 = getelementptr i8, ptr %744, i64 %746
  %748 = load ptr, ptr %747, align 8
  %749 = getelementptr i8, ptr %747, i64 8
  %750 = load i160, ptr %749, align 4
  store ptr %685, ptr %747, align 8
  store i64 %682, ptr %749, align 4
  %751 = getelementptr i8, ptr %747, i64 16
  store i64 %681, ptr %751, align 4
  %752 = getelementptr i8, ptr %747, i64 24
  store i32 %686, ptr %752, align 4
  %753 = icmp ne ptr %748, @nil_typ
  %754 = icmp ne ptr %748, null
  %755 = and i1 %753, %754
  %756 = trunc i160 %750 to i64
  %757 = lshr i160 %750, 64
  %758 = trunc i160 %757 to i64
  br i1 %755, label %759, label %779

759:                                              ; preds = %721, %701
  %760 = phi i64 [ %718, %701 ], [ %756, %721 ]
  %761 = phi i64 [ %720, %701 ], [ %758, %721 ]
  %762 = phi ptr [ %710, %701 ], [ %748, %721 ]
  %763 = getelementptr i8, ptr %762, i64 8
  %764 = getelementptr i8, ptr %762, i64 16
  %765 = getelementptr i8, ptr %762, i64 40
  %766 = load i64, ptr %763, align 4
  %767 = load i64, ptr %764, align 4
  %768 = load ptr, ptr %765, align 8
  %769 = mul i64 %766, 4015701072841558310
  %770 = lshr i64 %769, 32
  %771 = xor i64 %770, %769
  %772 = and i64 %771, %767
  %773 = getelementptr i32, ptr %768, i64 %772
  %774 = load i32, ptr %773, align 4
  %775 = xor i1 %684, true
  %776 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %777 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %778 = icmp eq i32 %696, 100
  br i1 %778, label %783, label %680

779:                                              ; preds = %721, %701
  %780 = load i32, ptr %50, align 4
  %781 = add i32 %780, 1
  %782 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %781, ptr %50, align 4
  br label %783

783:                                              ; preds = %779, %759
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %784

784:                                              ; preds = %783, %651
  %785 = add nuw nsw i64 %652, 1
  %786 = icmp eq i64 %785, %650
  br i1 %786, label %787, label %651

787:                                              ; preds = %920, %784
  %788 = phi i64 [ %921, %920 ], [ 0, %784 ]
  %789 = shl nuw nsw i64 %788, 5
  %790 = getelementptr i8, ptr %640, i64 %789
  %791 = load ptr, ptr %790, align 8
  %792 = icmp ne ptr %791, @nil_typ
  %793 = icmp ne ptr %791, null
  %794 = and i1 %792, %793
  br i1 %794, label %795, label %920

795:                                              ; preds = %787
  %796 = getelementptr i8, ptr %790, i64 8
  %797 = load i64, ptr %796, align 4
  %798 = getelementptr i8, ptr %790, i64 16
  %799 = load i64, ptr %798, align 4
  %800 = getelementptr i8, ptr %791, i64 8
  %801 = getelementptr i8, ptr %791, i64 16
  %802 = getelementptr i8, ptr %791, i64 40
  %803 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %804 = load i64, ptr %800, align 4, !noalias !25
  %805 = load i64, ptr %801, align 4, !noalias !25
  %806 = load ptr, ptr %802, align 8, !noalias !25
  %807 = mul i64 %804, 4015701072841558310
  %808 = lshr i64 %807, 32
  %809 = xor i64 %808, %807
  %810 = and i64 %809, %805
  %811 = getelementptr i32, ptr %806, i64 %810
  %812 = load i32, ptr %811, align 4, !noalias !431
  %813 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %814 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %815 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %816

816:                                              ; preds = %895, %795
  %817 = phi i64 [ %799, %795 ], [ %897, %895 ]
  %818 = phi i64 [ %797, %795 ], [ %896, %895 ]
  %819 = phi i32 [ 0, %795 ], [ %832, %895 ]
  %820 = phi i1 [ true, %795 ], [ %911, %895 ]
  %821 = phi ptr [ %791, %795 ], [ %898, %895 ]
  %822 = phi i32 [ %812, %795 ], [ %910, %895 ]
  %823 = inttoptr i64 %817 to ptr
  %824 = inttoptr i64 %818 to ptr
  %825 = sext i32 %822 to i64
  %826 = getelementptr ptr, ptr %821, i64 %825
  %827 = getelementptr i8, ptr %826, i64 64
  %828 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %821, 0
  %829 = insertvalue { ptr, ptr, ptr, i32 } %828, ptr %824, 1
  %830 = insertvalue { ptr, ptr, ptr, i32 } %829, ptr %823, 2
  %831 = insertvalue { ptr, ptr, ptr, i32 } %830, i32 %822, 3
  %832 = add nuw nsw i32 %819, 1
  %833 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %821)
  %834 = load ptr, ptr %827, align 8
  %835 = call align 4 ptr %834({ ptr, ptr, ptr, i32 } %831, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %836 = call i32 %835({ ptr, ptr, ptr, i32 } %831, { ptr, ptr, ptr, i32 } %831, ptr nonnull align 8 %1) #28
  br i1 %820, label %837, label %857

837:                                              ; preds = %816
  %838 = load i32, ptr %43, align 8
  %839 = add i32 %838, -1
  %840 = and i32 %839, %836
  %841 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %842 = load ptr, ptr %45, align 8
  %843 = sext i32 %840 to i64
  %844 = shl nsw i64 %843, 5
  %845 = getelementptr i8, ptr %842, i64 %844
  %846 = load ptr, ptr %845, align 8
  %847 = getelementptr i8, ptr %845, i64 8
  %848 = load i160, ptr %847, align 4
  store ptr %821, ptr %845, align 8
  store i64 %818, ptr %847, align 4
  %849 = getelementptr i8, ptr %845, i64 16
  store i64 %817, ptr %849, align 4
  %850 = getelementptr i8, ptr %845, i64 24
  store i32 %822, ptr %850, align 4
  %851 = icmp ne ptr %846, @nil_typ
  %852 = icmp ne ptr %846, null
  %853 = and i1 %851, %852
  %854 = trunc i160 %848 to i64
  %855 = lshr i160 %848, 64
  %856 = trunc i160 %855 to i64
  br i1 %853, label %895, label %915

857:                                              ; preds = %816
  %858 = add i32 %836, 2127912214
  %859 = shl i32 %836, 12
  %860 = add i32 %858, %859
  %861 = ashr i32 %860, 19
  %862 = xor i32 %860, %861
  %863 = xor i32 %862, -949894596
  %864 = add i32 %863, 374761393
  %865 = shl i32 %863, 5
  %866 = add i32 %864, %865
  %867 = add i32 %866, -744332180
  %868 = shl i32 %866, 9
  %869 = xor i32 %867, %868
  %870 = add i32 %869, -42973499
  %871 = shl i32 %869, 3
  %872 = add i32 %870, %871
  %873 = ashr i32 %872, 16
  %874 = xor i32 %872, %873
  %875 = xor i32 %874, -1252372727
  %876 = load i32, ptr %43, align 8
  %877 = add i32 %876, -1
  %878 = and i32 %877, %875
  %879 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %880 = load ptr, ptr %47, align 8
  %881 = sext i32 %878 to i64
  %882 = shl nsw i64 %881, 5
  %883 = getelementptr i8, ptr %880, i64 %882
  %884 = load ptr, ptr %883, align 8
  %885 = getelementptr i8, ptr %883, i64 8
  %886 = load i160, ptr %885, align 4
  store ptr %821, ptr %883, align 8
  store i64 %818, ptr %885, align 4
  %887 = getelementptr i8, ptr %883, i64 16
  store i64 %817, ptr %887, align 4
  %888 = getelementptr i8, ptr %883, i64 24
  store i32 %822, ptr %888, align 4
  %889 = icmp ne ptr %884, @nil_typ
  %890 = icmp ne ptr %884, null
  %891 = and i1 %889, %890
  %892 = trunc i160 %886 to i64
  %893 = lshr i160 %886, 64
  %894 = trunc i160 %893 to i64
  br i1 %891, label %895, label %915

895:                                              ; preds = %857, %837
  %896 = phi i64 [ %854, %837 ], [ %892, %857 ]
  %897 = phi i64 [ %856, %837 ], [ %894, %857 ]
  %898 = phi ptr [ %846, %837 ], [ %884, %857 ]
  %899 = getelementptr i8, ptr %898, i64 8
  %900 = getelementptr i8, ptr %898, i64 16
  %901 = getelementptr i8, ptr %898, i64 40
  %902 = load i64, ptr %899, align 4
  %903 = load i64, ptr %900, align 4
  %904 = load ptr, ptr %901, align 8
  %905 = mul i64 %902, 4015701072841558310
  %906 = lshr i64 %905, 32
  %907 = xor i64 %906, %905
  %908 = and i64 %907, %903
  %909 = getelementptr i32, ptr %904, i64 %908
  %910 = load i32, ptr %909, align 4
  %911 = xor i1 %820, true
  %912 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %913 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %914 = icmp eq i32 %832, 100
  br i1 %914, label %919, label %816

915:                                              ; preds = %857, %837
  %916 = load i32, ptr %50, align 4
  %917 = add i32 %916, 1
  %918 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %917, ptr %50, align 4
  br label %919

919:                                              ; preds = %915, %895
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %920

920:                                              ; preds = %919, %787
  %921 = add nuw nsw i64 %788, 1
  %922 = icmp eq i64 %921, %650
  br i1 %922, label %923, label %787

923:                                              ; preds = %920, %634
  %924 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %925 = load i64, ptr %635, align 4, !noalias !25
  %926 = load i64, ptr %636, align 4, !noalias !25
  %927 = load ptr, ptr %637, align 8, !noalias !25
  %928 = mul i64 %925, 4015701072841558310
  %929 = lshr i64 %928, 32
  %930 = xor i64 %929, %928
  %931 = and i64 %930, %926
  %932 = getelementptr i32, ptr %927, i64 %931
  %933 = load i32, ptr %932, align 4, !noalias !434
  %934 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %935 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %936 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %937

937:                                              ; preds = %1016, %923
  %938 = phi i64 [ %610, %923 ], [ %1018, %1016 ]
  %939 = phi i64 [ %609, %923 ], [ %1017, %1016 ]
  %940 = phi i32 [ 0, %923 ], [ %953, %1016 ]
  %941 = phi i1 [ true, %923 ], [ %1032, %1016 ]
  %942 = phi ptr [ %611, %923 ], [ %1019, %1016 ]
  %943 = phi i32 [ %933, %923 ], [ %1031, %1016 ]
  %944 = inttoptr i64 %938 to ptr
  %945 = inttoptr i64 %939 to ptr
  %946 = sext i32 %943 to i64
  %947 = getelementptr ptr, ptr %942, i64 %946
  %948 = getelementptr i8, ptr %947, i64 64
  %949 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %942, 0
  %950 = insertvalue { ptr, ptr, ptr, i32 } %949, ptr %945, 1
  %951 = insertvalue { ptr, ptr, ptr, i32 } %950, ptr %944, 2
  %952 = insertvalue { ptr, ptr, ptr, i32 } %951, i32 %943, 3
  %953 = add nuw nsw i32 %940, 1
  %954 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %942)
  %955 = load ptr, ptr %948, align 8
  %956 = call align 4 ptr %955({ ptr, ptr, ptr, i32 } %952, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %957 = call i32 %956({ ptr, ptr, ptr, i32 } %952, { ptr, ptr, ptr, i32 } %952, ptr nonnull align 8 %1) #28
  br i1 %941, label %958, label %978

958:                                              ; preds = %937
  %959 = load i32, ptr %43, align 8
  %960 = add i32 %959, -1
  %961 = and i32 %960, %957
  %962 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %963 = load ptr, ptr %45, align 8
  %964 = sext i32 %961 to i64
  %965 = shl nsw i64 %964, 5
  %966 = getelementptr i8, ptr %963, i64 %965
  %967 = load ptr, ptr %966, align 8
  %968 = getelementptr i8, ptr %966, i64 8
  %969 = load i160, ptr %968, align 4
  store ptr %942, ptr %966, align 8
  store i64 %939, ptr %968, align 4
  %970 = getelementptr i8, ptr %966, i64 16
  store i64 %938, ptr %970, align 4
  %971 = getelementptr i8, ptr %966, i64 24
  store i32 %943, ptr %971, align 4
  %972 = icmp ne ptr %967, @nil_typ
  %973 = icmp ne ptr %967, null
  %974 = and i1 %972, %973
  %975 = trunc i160 %969 to i64
  %976 = lshr i160 %969, 64
  %977 = trunc i160 %976 to i64
  br i1 %974, label %1016, label %1036

978:                                              ; preds = %937
  %979 = add i32 %957, 2127912214
  %980 = shl i32 %957, 12
  %981 = add i32 %979, %980
  %982 = ashr i32 %981, 19
  %983 = xor i32 %981, %982
  %984 = xor i32 %983, -949894596
  %985 = add i32 %984, 374761393
  %986 = shl i32 %984, 5
  %987 = add i32 %985, %986
  %988 = add i32 %987, -744332180
  %989 = shl i32 %987, 9
  %990 = xor i32 %988, %989
  %991 = add i32 %990, -42973499
  %992 = shl i32 %990, 3
  %993 = add i32 %991, %992
  %994 = ashr i32 %993, 16
  %995 = xor i32 %993, %994
  %996 = xor i32 %995, -1252372727
  %997 = load i32, ptr %43, align 8
  %998 = add i32 %997, -1
  %999 = and i32 %998, %996
  %1000 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1001 = load ptr, ptr %47, align 8
  %1002 = sext i32 %999 to i64
  %1003 = shl nsw i64 %1002, 5
  %1004 = getelementptr i8, ptr %1001, i64 %1003
  %1005 = load ptr, ptr %1004, align 8
  %1006 = getelementptr i8, ptr %1004, i64 8
  %1007 = load i160, ptr %1006, align 4
  store ptr %942, ptr %1004, align 8
  store i64 %939, ptr %1006, align 4
  %1008 = getelementptr i8, ptr %1004, i64 16
  store i64 %938, ptr %1008, align 4
  %1009 = getelementptr i8, ptr %1004, i64 24
  store i32 %943, ptr %1009, align 4
  %1010 = icmp ne ptr %1005, @nil_typ
  %1011 = icmp ne ptr %1005, null
  %1012 = and i1 %1010, %1011
  %1013 = trunc i160 %1007 to i64
  %1014 = lshr i160 %1007, 64
  %1015 = trunc i160 %1014 to i64
  br i1 %1012, label %1016, label %1036

1016:                                             ; preds = %978, %958
  %1017 = phi i64 [ %975, %958 ], [ %1013, %978 ]
  %1018 = phi i64 [ %977, %958 ], [ %1015, %978 ]
  %1019 = phi ptr [ %967, %958 ], [ %1005, %978 ]
  %1020 = getelementptr i8, ptr %1019, i64 8
  %1021 = getelementptr i8, ptr %1019, i64 16
  %1022 = getelementptr i8, ptr %1019, i64 40
  %1023 = load i64, ptr %1020, align 4
  %1024 = load i64, ptr %1021, align 4
  %1025 = load ptr, ptr %1022, align 8
  %1026 = mul i64 %1023, 4015701072841558310
  %1027 = lshr i64 %1026, 32
  %1028 = xor i64 %1027, %1026
  %1029 = and i64 %1028, %1024
  %1030 = getelementptr i32, ptr %1025, i64 %1029
  %1031 = load i32, ptr %1030, align 4
  %1032 = xor i1 %941, true
  %1033 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1034 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1035 = icmp eq i32 %953, 100
  br i1 %1035, label %1040, label %937

1036:                                             ; preds = %978, %958
  %1037 = load i32, ptr %50, align 4
  %1038 = add i32 %1037, 1
  %1039 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1038, ptr %50, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1330

1040:                                             ; preds = %1016
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1041 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1042 = load ptr, ptr %45, align 8
  %1043 = load ptr, ptr %47, align 8
  %1044 = load i32, ptr %43, align 8
  %1045 = shl i32 %1044, 1
  %1046 = call i32 @llvm.smax.i32(i32 %1045, i32 noundef 16) #43
  store i32 %1046, ptr %43, align 8
  %1047 = zext nneg i32 %1046 to i64
  %1048 = shl nuw nsw i64 %1047, 5
  %1049 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1048, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1049, ptr %45, align 8
  %1050 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1048, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1050, ptr %47, align 8
  store i32 0, ptr %50, align 4
  %1051 = icmp sgt i32 %1044, 0
  br i1 %1051, label %1054, label %1052

1052:                                             ; preds = %1040
  %1053 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1330

1054:                                             ; preds = %1040
  %1055 = zext nneg i32 %1044 to i64
  br label %1056

1056:                                             ; preds = %1189, %1054
  %1057 = phi i64 [ 0, %1054 ], [ %1190, %1189 ]
  %1058 = shl nuw nsw i64 %1057, 5
  %1059 = getelementptr i8, ptr %1042, i64 %1058
  %1060 = load ptr, ptr %1059, align 8
  %1061 = icmp ne ptr %1060, @nil_typ
  %1062 = icmp ne ptr %1060, null
  %1063 = and i1 %1061, %1062
  br i1 %1063, label %1064, label %1189

1064:                                             ; preds = %1056
  %1065 = getelementptr i8, ptr %1059, i64 8
  %1066 = load i64, ptr %1065, align 4
  %1067 = getelementptr i8, ptr %1059, i64 16
  %1068 = load i64, ptr %1067, align 4
  %1069 = getelementptr i8, ptr %1060, i64 8
  %1070 = getelementptr i8, ptr %1060, i64 16
  %1071 = getelementptr i8, ptr %1060, i64 40
  %1072 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1073 = load i64, ptr %1069, align 4, !noalias !25
  %1074 = load i64, ptr %1070, align 4, !noalias !25
  %1075 = load ptr, ptr %1071, align 8, !noalias !25
  %1076 = mul i64 %1073, 4015701072841558310
  %1077 = lshr i64 %1076, 32
  %1078 = xor i64 %1077, %1076
  %1079 = and i64 %1078, %1074
  %1080 = getelementptr i32, ptr %1075, i64 %1079
  %1081 = load i32, ptr %1080, align 4, !noalias !437
  %1082 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1083 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1084 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1085

1085:                                             ; preds = %1164, %1064
  %1086 = phi i64 [ %1068, %1064 ], [ %1166, %1164 ]
  %1087 = phi i64 [ %1066, %1064 ], [ %1165, %1164 ]
  %1088 = phi i32 [ 0, %1064 ], [ %1101, %1164 ]
  %1089 = phi i1 [ true, %1064 ], [ %1180, %1164 ]
  %1090 = phi ptr [ %1060, %1064 ], [ %1167, %1164 ]
  %1091 = phi i32 [ %1081, %1064 ], [ %1179, %1164 ]
  %1092 = inttoptr i64 %1086 to ptr
  %1093 = inttoptr i64 %1087 to ptr
  %1094 = sext i32 %1091 to i64
  %1095 = getelementptr ptr, ptr %1090, i64 %1094
  %1096 = getelementptr i8, ptr %1095, i64 64
  %1097 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1090, 0
  %1098 = insertvalue { ptr, ptr, ptr, i32 } %1097, ptr %1093, 1
  %1099 = insertvalue { ptr, ptr, ptr, i32 } %1098, ptr %1092, 2
  %1100 = insertvalue { ptr, ptr, ptr, i32 } %1099, i32 %1091, 3
  %1101 = add nuw nsw i32 %1088, 1
  %1102 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1090)
  %1103 = load ptr, ptr %1096, align 8
  %1104 = call align 4 ptr %1103({ ptr, ptr, ptr, i32 } %1100, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1105 = call i32 %1104({ ptr, ptr, ptr, i32 } %1100, { ptr, ptr, ptr, i32 } %1100, ptr nonnull align 8 %1) #28
  br i1 %1089, label %1106, label %1126

1106:                                             ; preds = %1085
  %1107 = load i32, ptr %43, align 8
  %1108 = add i32 %1107, -1
  %1109 = and i32 %1108, %1105
  %1110 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1111 = load ptr, ptr %45, align 8
  %1112 = sext i32 %1109 to i64
  %1113 = shl nsw i64 %1112, 5
  %1114 = getelementptr i8, ptr %1111, i64 %1113
  %1115 = load ptr, ptr %1114, align 8
  %1116 = getelementptr i8, ptr %1114, i64 8
  %1117 = load i160, ptr %1116, align 4
  store ptr %1090, ptr %1114, align 8
  store i64 %1087, ptr %1116, align 4
  %1118 = getelementptr i8, ptr %1114, i64 16
  store i64 %1086, ptr %1118, align 4
  %1119 = getelementptr i8, ptr %1114, i64 24
  store i32 %1091, ptr %1119, align 4
  %1120 = icmp ne ptr %1115, @nil_typ
  %1121 = icmp ne ptr %1115, null
  %1122 = and i1 %1120, %1121
  %1123 = trunc i160 %1117 to i64
  %1124 = lshr i160 %1117, 64
  %1125 = trunc i160 %1124 to i64
  br i1 %1122, label %1164, label %1184

1126:                                             ; preds = %1085
  %1127 = add i32 %1105, 2127912214
  %1128 = shl i32 %1105, 12
  %1129 = add i32 %1127, %1128
  %1130 = ashr i32 %1129, 19
  %1131 = xor i32 %1129, %1130
  %1132 = xor i32 %1131, -949894596
  %1133 = add i32 %1132, 374761393
  %1134 = shl i32 %1132, 5
  %1135 = add i32 %1133, %1134
  %1136 = add i32 %1135, -744332180
  %1137 = shl i32 %1135, 9
  %1138 = xor i32 %1136, %1137
  %1139 = add i32 %1138, -42973499
  %1140 = shl i32 %1138, 3
  %1141 = add i32 %1139, %1140
  %1142 = ashr i32 %1141, 16
  %1143 = xor i32 %1141, %1142
  %1144 = xor i32 %1143, -1252372727
  %1145 = load i32, ptr %43, align 8
  %1146 = add i32 %1145, -1
  %1147 = and i32 %1146, %1144
  %1148 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1149 = load ptr, ptr %47, align 8
  %1150 = sext i32 %1147 to i64
  %1151 = shl nsw i64 %1150, 5
  %1152 = getelementptr i8, ptr %1149, i64 %1151
  %1153 = load ptr, ptr %1152, align 8
  %1154 = getelementptr i8, ptr %1152, i64 8
  %1155 = load i160, ptr %1154, align 4
  store ptr %1090, ptr %1152, align 8
  store i64 %1087, ptr %1154, align 4
  %1156 = getelementptr i8, ptr %1152, i64 16
  store i64 %1086, ptr %1156, align 4
  %1157 = getelementptr i8, ptr %1152, i64 24
  store i32 %1091, ptr %1157, align 4
  %1158 = icmp ne ptr %1153, @nil_typ
  %1159 = icmp ne ptr %1153, null
  %1160 = and i1 %1158, %1159
  %1161 = trunc i160 %1155 to i64
  %1162 = lshr i160 %1155, 64
  %1163 = trunc i160 %1162 to i64
  br i1 %1160, label %1164, label %1184

1164:                                             ; preds = %1126, %1106
  %1165 = phi i64 [ %1123, %1106 ], [ %1161, %1126 ]
  %1166 = phi i64 [ %1125, %1106 ], [ %1163, %1126 ]
  %1167 = phi ptr [ %1115, %1106 ], [ %1153, %1126 ]
  %1168 = getelementptr i8, ptr %1167, i64 8
  %1169 = getelementptr i8, ptr %1167, i64 16
  %1170 = getelementptr i8, ptr %1167, i64 40
  %1171 = load i64, ptr %1168, align 4
  %1172 = load i64, ptr %1169, align 4
  %1173 = load ptr, ptr %1170, align 8
  %1174 = mul i64 %1171, 4015701072841558310
  %1175 = lshr i64 %1174, 32
  %1176 = xor i64 %1175, %1174
  %1177 = and i64 %1176, %1172
  %1178 = getelementptr i32, ptr %1173, i64 %1177
  %1179 = load i32, ptr %1178, align 4
  %1180 = xor i1 %1089, true
  %1181 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1182 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1183 = icmp eq i32 %1101, 100
  br i1 %1183, label %1188, label %1085

1184:                                             ; preds = %1126, %1106
  %1185 = load i32, ptr %50, align 4
  %1186 = add i32 %1185, 1
  %1187 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1186, ptr %50, align 4
  br label %1188

1188:                                             ; preds = %1184, %1164
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1189

1189:                                             ; preds = %1188, %1056
  %1190 = add nuw nsw i64 %1057, 1
  %1191 = icmp eq i64 %1190, %1055
  br i1 %1191, label %1192, label %1056

1192:                                             ; preds = %1189
  %1193 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %1194

1194:                                             ; preds = %1327, %1192
  %1195 = phi i64 [ 0, %1192 ], [ %1328, %1327 ]
  %1196 = shl nuw nsw i64 %1195, 5
  %1197 = getelementptr i8, ptr %1043, i64 %1196
  %1198 = load ptr, ptr %1197, align 8
  %1199 = icmp ne ptr %1198, @nil_typ
  %1200 = icmp ne ptr %1198, null
  %1201 = and i1 %1199, %1200
  br i1 %1201, label %1202, label %1327

1202:                                             ; preds = %1194
  %1203 = getelementptr i8, ptr %1197, i64 8
  %1204 = load i64, ptr %1203, align 4
  %1205 = getelementptr i8, ptr %1197, i64 16
  %1206 = load i64, ptr %1205, align 4
  %1207 = getelementptr i8, ptr %1198, i64 8
  %1208 = getelementptr i8, ptr %1198, i64 16
  %1209 = getelementptr i8, ptr %1198, i64 40
  %1210 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1211 = load i64, ptr %1207, align 4, !noalias !25
  %1212 = load i64, ptr %1208, align 4, !noalias !25
  %1213 = load ptr, ptr %1209, align 8, !noalias !25
  %1214 = mul i64 %1211, 4015701072841558310
  %1215 = lshr i64 %1214, 32
  %1216 = xor i64 %1215, %1214
  %1217 = and i64 %1216, %1212
  %1218 = getelementptr i32, ptr %1213, i64 %1217
  %1219 = load i32, ptr %1218, align 4, !noalias !440
  %1220 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1221 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1222 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1223

1223:                                             ; preds = %1302, %1202
  %1224 = phi i64 [ %1206, %1202 ], [ %1304, %1302 ]
  %1225 = phi i64 [ %1204, %1202 ], [ %1303, %1302 ]
  %1226 = phi i32 [ 0, %1202 ], [ %1239, %1302 ]
  %1227 = phi i1 [ true, %1202 ], [ %1318, %1302 ]
  %1228 = phi ptr [ %1198, %1202 ], [ %1305, %1302 ]
  %1229 = phi i32 [ %1219, %1202 ], [ %1317, %1302 ]
  %1230 = inttoptr i64 %1224 to ptr
  %1231 = inttoptr i64 %1225 to ptr
  %1232 = sext i32 %1229 to i64
  %1233 = getelementptr ptr, ptr %1228, i64 %1232
  %1234 = getelementptr i8, ptr %1233, i64 64
  %1235 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1228, 0
  %1236 = insertvalue { ptr, ptr, ptr, i32 } %1235, ptr %1231, 1
  %1237 = insertvalue { ptr, ptr, ptr, i32 } %1236, ptr %1230, 2
  %1238 = insertvalue { ptr, ptr, ptr, i32 } %1237, i32 %1229, 3
  %1239 = add nuw nsw i32 %1226, 1
  %1240 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %1228)
  %1241 = load ptr, ptr %1234, align 8
  %1242 = call align 4 ptr %1241({ ptr, ptr, ptr, i32 } %1238, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1243 = call i32 %1242({ ptr, ptr, ptr, i32 } %1238, { ptr, ptr, ptr, i32 } %1238, ptr nonnull align 8 %1) #28
  br i1 %1227, label %1244, label %1264

1244:                                             ; preds = %1223
  %1245 = load i32, ptr %43, align 8
  %1246 = add i32 %1245, -1
  %1247 = and i32 %1246, %1243
  %1248 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1249 = load ptr, ptr %45, align 8
  %1250 = sext i32 %1247 to i64
  %1251 = shl nsw i64 %1250, 5
  %1252 = getelementptr i8, ptr %1249, i64 %1251
  %1253 = load ptr, ptr %1252, align 8
  %1254 = getelementptr i8, ptr %1252, i64 8
  %1255 = load i160, ptr %1254, align 4
  store ptr %1228, ptr %1252, align 8
  store i64 %1225, ptr %1254, align 4
  %1256 = getelementptr i8, ptr %1252, i64 16
  store i64 %1224, ptr %1256, align 4
  %1257 = getelementptr i8, ptr %1252, i64 24
  store i32 %1229, ptr %1257, align 4
  %1258 = icmp ne ptr %1253, @nil_typ
  %1259 = icmp ne ptr %1253, null
  %1260 = and i1 %1258, %1259
  %1261 = trunc i160 %1255 to i64
  %1262 = lshr i160 %1255, 64
  %1263 = trunc i160 %1262 to i64
  br i1 %1260, label %1302, label %1322

1264:                                             ; preds = %1223
  %1265 = add i32 %1243, 2127912214
  %1266 = shl i32 %1243, 12
  %1267 = add i32 %1265, %1266
  %1268 = ashr i32 %1267, 19
  %1269 = xor i32 %1267, %1268
  %1270 = xor i32 %1269, -949894596
  %1271 = add i32 %1270, 374761393
  %1272 = shl i32 %1270, 5
  %1273 = add i32 %1271, %1272
  %1274 = add i32 %1273, -744332180
  %1275 = shl i32 %1273, 9
  %1276 = xor i32 %1274, %1275
  %1277 = add i32 %1276, -42973499
  %1278 = shl i32 %1276, 3
  %1279 = add i32 %1277, %1278
  %1280 = ashr i32 %1279, 16
  %1281 = xor i32 %1279, %1280
  %1282 = xor i32 %1281, -1252372727
  %1283 = load i32, ptr %43, align 8
  %1284 = add i32 %1283, -1
  %1285 = and i32 %1284, %1282
  %1286 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1287 = load ptr, ptr %47, align 8
  %1288 = sext i32 %1285 to i64
  %1289 = shl nsw i64 %1288, 5
  %1290 = getelementptr i8, ptr %1287, i64 %1289
  %1291 = load ptr, ptr %1290, align 8
  %1292 = getelementptr i8, ptr %1290, i64 8
  %1293 = load i160, ptr %1292, align 4
  store ptr %1228, ptr %1290, align 8
  store i64 %1225, ptr %1292, align 4
  %1294 = getelementptr i8, ptr %1290, i64 16
  store i64 %1224, ptr %1294, align 4
  %1295 = getelementptr i8, ptr %1290, i64 24
  store i32 %1229, ptr %1295, align 4
  %1296 = icmp ne ptr %1291, @nil_typ
  %1297 = icmp ne ptr %1291, null
  %1298 = and i1 %1296, %1297
  %1299 = trunc i160 %1293 to i64
  %1300 = lshr i160 %1293, 64
  %1301 = trunc i160 %1300 to i64
  br i1 %1298, label %1302, label %1322

1302:                                             ; preds = %1264, %1244
  %1303 = phi i64 [ %1261, %1244 ], [ %1299, %1264 ]
  %1304 = phi i64 [ %1263, %1244 ], [ %1301, %1264 ]
  %1305 = phi ptr [ %1253, %1244 ], [ %1291, %1264 ]
  %1306 = getelementptr i8, ptr %1305, i64 8
  %1307 = getelementptr i8, ptr %1305, i64 16
  %1308 = getelementptr i8, ptr %1305, i64 40
  %1309 = load i64, ptr %1306, align 4
  %1310 = load i64, ptr %1307, align 4
  %1311 = load ptr, ptr %1308, align 8
  %1312 = mul i64 %1309, 4015701072841558310
  %1313 = lshr i64 %1312, 32
  %1314 = xor i64 %1313, %1312
  %1315 = and i64 %1314, %1310
  %1316 = getelementptr i32, ptr %1311, i64 %1315
  %1317 = load i32, ptr %1316, align 4
  %1318 = xor i1 %1227, true
  %1319 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %1320 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1321 = icmp eq i32 %1239, 100
  br i1 %1321, label %1326, label %1223

1322:                                             ; preds = %1264, %1244
  %1323 = load i32, ptr %50, align 4
  %1324 = add i32 %1323, 1
  %1325 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %1324, ptr %50, align 4
  br label %1326

1326:                                             ; preds = %1322, %1302
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1327

1327:                                             ; preds = %1326, %1194
  %1328 = add nuw nsw i64 %1195, 1
  %1329 = icmp eq i64 %1328, %1055
  br i1 %1329, label %1330, label %1194

1330:                                             ; preds = %1327, %1052, %1036, %630, %271, %116
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1331 = icmp eq i32 %56, 1000000
  br i1 %1331, label %1332, label %54

1332:                                             ; preds = %1330
  %1333 = call i64 @clock()
  %1334 = load ptr, ptr %41, align 8
  %1335 = call i32 %1334({ ptr, i160 } { ptr @i32_typ, i160 999999 }) #28
  %1336 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1337 = load i32, ptr %43, align 8
  %1338 = add i32 %1337, -1
  %1339 = and i32 %1338, %1335
  %1340 = load ptr, ptr %45, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1341 = sext i32 %1339 to i64
  %1342 = shl nsw i64 %1341, 5
  %1343 = getelementptr i8, ptr %1340, i64 %1342
  %1344 = load ptr, ptr %1343, align 8
  %1345 = icmp ne ptr %1344, @nil_typ
  %1346 = icmp ne ptr %1344, null
  %1347 = and i1 %1345, %1346
  br i1 %1347, label %1348, label %1390

1348:                                             ; preds = %1332
  %1349 = getelementptr i8, ptr %1343, i64 8
  %1350 = load i64, ptr %1349, align 4
  %1351 = getelementptr i8, ptr %1343, i64 16
  %1352 = load i64, ptr %1351, align 4
  %1353 = inttoptr i64 %1350 to ptr
  %1354 = inttoptr i64 %1352 to ptr
  %1355 = getelementptr i8, ptr %1344, i64 8
  %1356 = getelementptr i8, ptr %1344, i64 16
  %1357 = getelementptr i8, ptr %1344, i64 40
  %1358 = load i64, ptr %1355, align 4, !noalias !443
  %1359 = load i64, ptr %1356, align 4, !noalias !443
  %1360 = load ptr, ptr %1357, align 8, !noalias !443
  %1361 = mul i64 %1358, 4015701072841558310
  %1362 = lshr i64 %1361, 32
  %1363 = xor i64 %1362, %1361
  %1364 = and i64 %1363, %1359
  %1365 = getelementptr i32, ptr %1360, i64 %1364
  %1366 = load i32, ptr %1365, align 4, !noalias !443
  %1367 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1344, 0
  %1368 = insertvalue { ptr, ptr, ptr, i32 } %1367, ptr %1353, 1
  %1369 = insertvalue { ptr, ptr, ptr, i32 } %1368, ptr %1354, 2
  %1370 = insertvalue { ptr, ptr, ptr, i32 } %1369, i32 %1366, 3
  %1371 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1372 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1344) #43
  %1373 = sext i32 %1366 to i64
  %1374 = getelementptr ptr, ptr %1344, i64 %1373
  %1375 = getelementptr i8, ptr %1374, i64 64
  %1376 = load ptr, ptr %1375, align 8
  %1377 = call align 4 ptr %1376({ ptr, ptr, ptr, i32 } %1370, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1378 = call i32 %1377({ ptr, ptr, ptr, i32 } %1370, { ptr, ptr, ptr, i32 } %1370, ptr nonnull align 8 %1) #28
  %1379 = icmp eq i32 %1378, %1335
  br i1 %1379, label %1380, label %1390

1380:                                             ; preds = %1348
  %1381 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1382 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1344)
  %1383 = getelementptr i8, ptr %1374, i64 48
  %1384 = load ptr, ptr %1383, align 8
  %1385 = call align 4 ptr %1384({ ptr, ptr, ptr, i32 } %1370, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1386 = call { ptr, i160 } %1385({ ptr, ptr, ptr, i32 } %1370, { ptr, ptr, ptr, i32 } %1370, ptr nonnull align 8 %1) #28
  %1387 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1388 = load ptr, ptr %42, align 8
  %1389 = call i1 %1388({ ptr, i160 } %1386, { ptr, i160 } { ptr @i32_typ, i160 999999 }) #28
  br i1 %1389, label %1391, label %1390

1390:                                             ; preds = %1380, %1348, %1332
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %1402

1391:                                             ; preds = %1380
  %1392 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1393 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1344)
  %1394 = getelementptr i8, ptr %1374, i64 56
  %1395 = load ptr, ptr %1394, align 8
  %1396 = call align 4 ptr %1395({ ptr, ptr, ptr, i32 } %1370, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1397 = call { ptr, i160 } %1396({ ptr, ptr, ptr, i32 } %1370, { ptr, ptr, ptr, i32 } %1370, ptr nonnull align 8 %1) #28
  %1398 = extractvalue { ptr, i160 } %1397, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1399 = icmp ne ptr %1398, @nil_typ
  %1400 = icmp ne ptr %1398, null
  %1401 = and i1 %1399, %1400
  br i1 %1401, label %1494, label %1402

1402:                                             ; preds = %1391, %1390
  %1403 = add i32 %1335, 2127912214
  %1404 = shl i32 %1335, 12
  %1405 = add i32 %1403, %1404
  %1406 = ashr i32 %1405, 19
  %1407 = xor i32 %1405, %1406
  %1408 = xor i32 %1407, -949894596
  %1409 = add i32 %1408, 374761393
  %1410 = shl i32 %1408, 5
  %1411 = add i32 %1409, %1410
  %1412 = add i32 %1411, -744332180
  %1413 = shl i32 %1411, 9
  %1414 = xor i32 %1412, %1413
  %1415 = add i32 %1414, -42973499
  %1416 = shl i32 %1414, 3
  %1417 = add i32 %1415, %1416
  %1418 = ashr i32 %1417, 16
  %1419 = xor i32 %1417, %1418
  %1420 = xor i32 %1419, -1252372727
  %1421 = load i32, ptr %43, align 8
  %1422 = add i32 %1421, -1
  %1423 = and i32 %1422, %1420
  %1424 = load ptr, ptr %47, align 8
  %1425 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1426 = sext i32 %1423 to i64
  %1427 = shl nsw i64 %1426, 5
  %1428 = getelementptr i8, ptr %1424, i64 %1427
  %1429 = load ptr, ptr %1428, align 8
  %1430 = icmp ne ptr %1429, @nil_typ
  %1431 = icmp ne ptr %1429, null
  %1432 = and i1 %1430, %1431
  br i1 %1432, label %1433, label %1484

1433:                                             ; preds = %1402
  %1434 = getelementptr i8, ptr %1428, i64 8
  %1435 = load i64, ptr %1434, align 4
  %1436 = getelementptr i8, ptr %1428, i64 16
  %1437 = load i64, ptr %1436, align 4
  %1438 = inttoptr i64 %1435 to ptr
  %1439 = inttoptr i64 %1437 to ptr
  %1440 = getelementptr i8, ptr %1429, i64 8
  %1441 = getelementptr i8, ptr %1429, i64 16
  %1442 = getelementptr i8, ptr %1429, i64 40
  %1443 = load i64, ptr %1440, align 4, !noalias !446
  %1444 = load i64, ptr %1441, align 4, !noalias !446
  %1445 = load ptr, ptr %1442, align 8, !noalias !446
  %1446 = mul i64 %1443, 4015701072841558310
  %1447 = lshr i64 %1446, 32
  %1448 = xor i64 %1447, %1446
  %1449 = and i64 %1448, %1444
  %1450 = getelementptr i32, ptr %1445, i64 %1449
  %1451 = load i32, ptr %1450, align 4, !noalias !446
  %1452 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1429, 0
  %1453 = insertvalue { ptr, ptr, ptr, i32 } %1452, ptr %1438, 1
  %1454 = insertvalue { ptr, ptr, ptr, i32 } %1453, ptr %1439, 2
  %1455 = insertvalue { ptr, ptr, ptr, i32 } %1454, i32 %1451, 3
  %1456 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1457 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1429) #43
  %1458 = sext i32 %1451 to i64
  %1459 = getelementptr ptr, ptr %1429, i64 %1458
  %1460 = getelementptr i8, ptr %1459, i64 64
  %1461 = load ptr, ptr %1460, align 8
  %1462 = call align 4 ptr %1461({ ptr, ptr, ptr, i32 } %1455, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1463 = call i32 %1462({ ptr, ptr, ptr, i32 } %1455, { ptr, ptr, ptr, i32 } %1455, ptr nonnull align 8 %1) #28
  %1464 = icmp eq i32 %1463, %1335
  br i1 %1464, label %1465, label %1484

1465:                                             ; preds = %1433
  %1466 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1467 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1429)
  %1468 = getelementptr i8, ptr %1459, i64 48
  %1469 = load ptr, ptr %1468, align 8
  %1470 = call align 4 ptr %1469({ ptr, ptr, ptr, i32 } %1455, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1471 = call { ptr, i160 } %1470({ ptr, ptr, ptr, i32 } %1455, { ptr, ptr, ptr, i32 } %1455, ptr nonnull align 8 %1) #28
  %1472 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1473 = load ptr, ptr %42, align 8
  %1474 = call i1 %1473({ ptr, i160 } %1471, { ptr, i160 } { ptr @i32_typ, i160 999999 }) #28
  br i1 %1474, label %1475, label %1484

1475:                                             ; preds = %1465
  %1476 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1477 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1429)
  %1478 = getelementptr i8, ptr %1459, i64 56
  %1479 = load ptr, ptr %1478, align 8
  %1480 = call align 4 ptr %1479({ ptr, ptr, ptr, i32 } %1455, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1481 = call { ptr, i160 } %1480({ ptr, ptr, ptr, i32 } %1455, { ptr, ptr, ptr, i32 } %1455, ptr nonnull align 8 %1) #28
  %1482 = extractvalue { ptr, i160 } %1481, 0
  %1483 = extractvalue { ptr, i160 } %1481, 1
  br label %1484

1484:                                             ; preds = %1475, %1465, %1433, %1402
  %1485 = phi i160 [ %1483, %1475 ], [ poison, %1465 ], [ poison, %1402 ], [ poison, %1433 ]
  %1486 = phi ptr [ %1482, %1475 ], [ @nil_typ, %1465 ], [ @nil_typ, %1402 ], [ @nil_typ, %1433 ]
  %1487 = insertvalue { ptr, i160 } poison, ptr %1486, 0
  %1488 = insertvalue { ptr, i160 } %1487, i160 %1485, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1489 = icmp ne ptr %1486, @nil_typ
  %1490 = icmp ne ptr %1486, null
  %1491 = and i1 %1489, %1490
  %1492 = freeze i1 %1491
  %1493 = select i1 %1492, ptr %1486, ptr @nil_typ
  br label %1494

1494:                                             ; preds = %1484, %1391
  %1495 = phi { ptr, i160 } [ %1397, %1391 ], [ %1488, %1484 ]
  %1496 = phi ptr [ %1398, %1391 ], [ %1493, %1484 ]
  %1497 = icmp ne ptr %1496, @nil_typ
  %1498 = icmp ne ptr %1496, null
  %1499 = and i1 %1497, %1498
  br i1 %1499, label %1500, label %1504

1500:                                             ; preds = %1494
  %1501 = extractvalue { ptr, i160 } %1495, 1
  %1502 = trunc i160 %1501 to i32
  %1503 = icmp eq i32 %1502, 1000000
  br label %1504

1504:                                             ; preds = %1500, %1494
  %1505 = phi i1 [ %1503, %1500 ], [ false, %1494 ]
  %1506 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1507 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1508 = load i32, ptr %50, align 4
  %1509 = icmp eq i32 %1508, 1000000
  %1510 = select i1 %1509, i1 %1505, i1 false
  %1511 = call noalias nonnull align 32 dereferenceable(18) ptr @bump_malloc_inner(i64 noundef 18, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <17 x i8> <i8 73, i8 110, i8 115, i8 101, i8 114, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108>, ptr %1511, align 32
  %1512 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1513 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1514 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1515 = call noalias nonnull align 4 dereferenceable(18) ptr @bump_malloc_inner(i64 noundef 18, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(18) %1515, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(18) %1511, i64 noundef 17, i1 noundef false)
  %1516 = sub i64 %1333, %49
  %1517 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1518 = getelementptr inbounds i8, ptr %1515, i64 17
  store i8 0, ptr %1518, align 1
  %1519 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(18) %1515) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1520 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %1520, align 16
  %1521 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %1521, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %1520, i64 noundef 14, i1 noundef false)
  %1522 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %1521) #28
  %1523 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 noundef 1000000) #25
  %1524 = call noalias nonnull align 16 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %1524, align 16
  %1525 = call noalias nonnull align 4 dereferenceable(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %1525, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %1524, i64 noundef 14, i1 noundef false)
  %1526 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %1525) #28
  %1527 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %1516) #25
  %1528 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %1528, align 4
  %1529 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %1529, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %1528, i64 noundef 3, i1 noundef false)
  %1530 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %1529) #28
  %1531 = icmp sgt i64 %1516, 0
  br i1 %1531, label %1532, label %1535

1532:                                             ; preds = %1504
  %1533 = mul i64 %1516, 1000000
  %1534 = sdiv i64 %1533, 1000000
  br label %1535

1535:                                             ; preds = %1532, %1504
  %1536 = phi i64 [ %1534, %1532 ], [ 0, %1504 ]
  %1537 = call noalias nonnull align 16 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %1537, align 16
  %1538 = call noalias nonnull align 4 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(16) %1538, ptr noalias nocapture nofree noundef nonnull readonly align 16 dereferenceable(16) %1537, i64 noundef 15, i1 noundef false)
  %1539 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %1538) #28
  %1540 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %1536) #25
  %1541 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %1541, align 4
  %1542 = call noalias nonnull align 4 dereferenceable(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %1542, ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %1541, i64 noundef 3, i1 noundef false)
  %1543 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %1542) #28
  %1544 = call noalias nonnull align 32 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %1544, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1545 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1546 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1547 = call noalias nonnull align 4 dereferenceable(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 4 dereferenceable(19) %1547, ptr noalias nocapture nofree noundef nonnull readonly align 32 dereferenceable(19) %1544, i64 noundef 18, i1 noundef false)
  %1548 = getelementptr inbounds i8, ptr %1547, i64 18
  store i8 0, ptr %1548, align 2
  %1549 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %1547) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1550 = select i1 %1510, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %1551 = select i1 %1510, ptr %14, ptr %18
  %1552 = select i1 %1510, ptr %15, ptr %19
  %1553 = select i1 %1510, ptr %16, ptr %20
  %1554 = select i1 %1510, ptr %17, ptr %21
  store ptr @_parameterization_Bufferi8, ptr %1551, align 8
  %1555 = select i1 %1510, ptr %14, ptr %18
  %1556 = getelementptr inbounds i8, ptr %1555, i64 8
  store ptr @_parameterization_i32, ptr %1556, align 8
  %1557 = select i1 %1510, ptr %14, ptr %18
  %1558 = getelementptr inbounds i8, ptr %1557, i64 16
  store ptr @_parameterization_i32, ptr %1558, align 8
  %1559 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1551)
  store ptr @buffer_typ, ptr %1552, align 8
  %1560 = select i1 %1510, ptr %15, ptr %19
  %1561 = getelementptr inbounds i8, ptr %1560, i64 8
  store ptr @i32_typ, ptr %1561, align 8
  %1562 = select i1 %1510, ptr %15, ptr %19
  %1563 = getelementptr inbounds i8, ptr %1562, i64 16
  store ptr @i32_typ, ptr %1563, align 8
  %1564 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %1552) #43
  store ptr @_parameterization_String, ptr %1553, align 8
  %1565 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1553)
  %1566 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store ptr @String, ptr %1554, align 8
  %1567 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %1554) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1568 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1569 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1570 = call noalias nonnull align 4 dereferenceable(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <4 x i8> %1550, ptr %1570, align 4
  %1571 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %1572 = getelementptr inbounds i8, ptr %1570, i64 4
  store i8 0, ptr %1572, align 4
  %1573 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %1570) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %14)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %15)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %16)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %17)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %18)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %19)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %20)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(8) %21)
  call void @benchmark_insert_random(i32 noundef 1000000)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %4)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %5)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %8)
  call void @llvm.lifetime.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %9)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %10)
  call void @llvm.lifetime.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  %1574 = call noalias nonnull align 8 dereferenceable(64) ptr @bump_malloc_inner(i64 noundef 64, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @_parameterization_i32, ptr %1574, align 8
  %1575 = getelementptr inbounds i8, ptr %1574, i64 8
  store ptr @_parameterization_i32, ptr %1575, align 8
  %1576 = getelementptr inbounds i8, ptr %1574, i64 16
  store ptr @_parameterization_Pairi32._i32, ptr %1576, align 8
  %1577 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(64) %1574) #43
  %1578 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3)
  %1579 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %1578, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %3) #28
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %3)
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %1578, ptr noalias nofree noundef nonnull readnone align 4 @ryesqrruad, ptr noalias nofree noundef nonnull readnone align 4 @i32_hasher) #43
  %1580 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %1578) #47
  %1581 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %1578) #43
  %1582 = call noalias align 4 dereferenceable_or_null(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.lifetime.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %2)
  %1583 = call i32 @VirtualProtect(ptr nofree noundef align 4 dereferenceable_or_null(24) %1582, i64 noundef 16, i32 noundef 64, ptr nofree noundef nonnull align 4 dereferenceable(4) %2) #28
  call void @llvm.lifetime.end.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 4 dereferenceable(4) %2)
  call void @llvm.init.trampoline(ptr nocapture nofree noundef writeonly align 4 dereferenceable_or_null(24) %1582, ptr noalias nofree noundef nonnull readnone align 4 @elwawarosi, ptr noalias nofree noundef nonnull readnone align 4 @i32_eq) #43
  %1584 = call align 4 ptr @llvm.adjust.trampoline(ptr nofree noundef readonly align 4 dereferenceable_or_null(24) %1582) #47
  %1585 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 4 dereferenceable_or_null(24) %1582) #43
  %1586 = getelementptr inbounds i8, ptr %1574, i64 48
  store ptr %1580, ptr %1586, align 8
  %1587 = getelementptr inbounds i8, ptr %1574, i64 56
  store ptr %1584, ptr %1587, align 8
  %1588 = getelementptr inbounds i8, ptr %1574, i64 40
  store i32 8, ptr %1588, align 8
  %1589 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %1590 = getelementptr inbounds i8, ptr %1574, i64 24
  store ptr %1589, ptr %1590, align 8
  %1591 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %1592 = getelementptr inbounds i8, ptr %1574, i64 32
  store ptr %1591, ptr %1592, align 8
  %1593 = getelementptr inbounds i8, ptr %1574, i64 44
  %1594 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMap, ptr undef, ptr undef, i32 undef }, ptr %1574, 1
  %1595 = insertvalue { ptr, ptr, ptr, i32 } %1594, ptr undef, 2
  %1596 = insertvalue { ptr, ptr, ptr, i32 } %1595, i32 10, 3
  br label %1597

1597:                                             ; preds = %2873, %1535
  %1598 = phi i64 [ %1599, %2873 ], [ 0, %1535 ]
  %1599 = add nuw nsw i64 %1598, 1
  %1600 = zext nneg i64 %1598 to i160
  %1601 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %1600, 1
  %1602 = zext nneg i64 %1599 to i160
  %1603 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %1602, 1
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1604 = load ptr, ptr %1586, align 8
  %1605 = call i32 %1604({ ptr, i160 } %1601) #28
  %1606 = load i32, ptr %1588, align 8
  %1607 = add i32 %1606, -1
  %1608 = and i32 %1607, %1605
  %1609 = load ptr, ptr %1590, align 8
  %1610 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1611 = sext i32 %1608 to i64
  %1612 = shl nsw i64 %1611, 5
  %1613 = getelementptr i8, ptr %1609, i64 %1612
  %1614 = load ptr, ptr %1613, align 8
  %1615 = getelementptr i8, ptr %1613, i64 8
  %1616 = icmp ne ptr %1614, @nil_typ
  %1617 = icmp ne ptr %1614, null
  %1618 = and i1 %1616, %1617
  br i1 %1618, label %1619, label %1742

1619:                                             ; preds = %1597
  %1620 = load i64, ptr %1615, align 4
  %1621 = getelementptr i8, ptr %1613, i64 16
  %1622 = load i64, ptr %1621, align 4
  %1623 = inttoptr i64 %1620 to ptr
  %1624 = inttoptr i64 %1622 to ptr
  %1625 = getelementptr i8, ptr %1614, i64 8
  %1626 = getelementptr i8, ptr %1614, i64 16
  %1627 = getelementptr i8, ptr %1614, i64 40
  %1628 = load i64, ptr %1625, align 4, !noalias !449
  %1629 = load i64, ptr %1626, align 4, !noalias !449
  %1630 = load ptr, ptr %1627, align 8, !noalias !449
  %1631 = mul i64 %1628, 4015701072841558310
  %1632 = lshr i64 %1631, 32
  %1633 = xor i64 %1632, %1631
  %1634 = and i64 %1633, %1629
  %1635 = getelementptr i32, ptr %1630, i64 %1634
  %1636 = load i32, ptr %1635, align 4, !noalias !449
  %1637 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1614, 0
  %1638 = insertvalue { ptr, ptr, ptr, i32 } %1637, ptr %1623, 1
  %1639 = insertvalue { ptr, ptr, ptr, i32 } %1638, ptr %1624, 2
  %1640 = insertvalue { ptr, ptr, ptr, i32 } %1639, i32 %1636, 3
  %1641 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1642 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1614) #43
  %1643 = sext i32 %1636 to i64
  %1644 = getelementptr ptr, ptr %1614, i64 %1643
  %1645 = getelementptr i8, ptr %1644, i64 64
  %1646 = load ptr, ptr %1645, align 8
  %1647 = call align 4 ptr %1646({ ptr, ptr, ptr, i32 } %1640, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1648 = call i32 %1647({ ptr, ptr, ptr, i32 } %1640, { ptr, ptr, ptr, i32 } %1640, ptr nonnull align 8 %1) #28
  %1649 = icmp eq i32 %1648, %1605
  br i1 %1649, label %1650, label %1742

1650:                                             ; preds = %1619
  %1651 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1652 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1614)
  %1653 = getelementptr i8, ptr %1644, i64 48
  %1654 = load ptr, ptr %1653, align 8
  %1655 = call align 4 ptr %1654({ ptr, ptr, ptr, i32 } %1640, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1656 = call { ptr, i160 } %1655({ ptr, ptr, ptr, i32 } %1640, { ptr, ptr, ptr, i32 } %1640, ptr nonnull align 8 %1) #28
  %1657 = load ptr, ptr %1587, align 8
  %1658 = call i1 %1657({ ptr, i160 } %1656, { ptr, i160 } %1601) #28
  br i1 %1658, label %1659, label %1742

1659:                                             ; preds = %1650
  %1660 = load ptr, ptr %1574, align 8
  %1661 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1662 = load ptr, ptr %1575, align 8
  %1663 = load ptr, ptr %1660, align 8, !alias.scope !452
  %1664 = getelementptr i8, ptr %1663, i64 72
  %1665 = load ptr, ptr %1664, align 8, !alias.scope !452
  %1666 = call { i64, i64 } %1665(ptr nocapture nofree nonnull readonly align 8 %1660) #2, !alias.scope !452
  %1667 = extractvalue { i64, i64 } %1666, 0
  %1668 = extractvalue { i64, i64 } %1666, 1
  %1669 = urem i64 20, %1668
  %1670 = icmp eq i64 %1669, 0
  %1671 = sub i64 %1668, %1669
  %1672 = select i1 %1670, i64 0, i64 %1671
  %1673 = add i64 %1667, 20
  %1674 = add i64 %1673, %1672
  %1675 = load ptr, ptr %1662, align 8, !alias.scope !452
  %1676 = getelementptr i8, ptr %1675, i64 72
  %1677 = load ptr, ptr %1676, align 8, !alias.scope !452
  %1678 = call { i64, i64 } %1677(ptr nocapture nofree nonnull readonly align 8 %1662) #2, !alias.scope !452
  %1679 = extractvalue { i64, i64 } %1678, 0
  %1680 = extractvalue { i64, i64 } %1678, 1
  %1681 = call i64 @llvm.umax.i64(i64 %1668, i64 %1680) #44
  %1682 = call i64 @llvm.umax.i64(i64 %1681, i64 noundef 8) #44, !range !18
  %1683 = urem i64 %1674, %1680
  %1684 = icmp eq i64 %1683, 0
  %1685 = sub i64 %1680, %1683
  %1686 = select i1 %1684, i64 0, i64 %1685
  %1687 = add i64 %1679, %1674
  %1688 = add i64 %1687, %1686
  %1689 = urem i64 %1688, %1682
  %1690 = icmp eq i64 %1689, 0
  %1691 = sub i64 %1682, %1689
  %1692 = select i1 %1690, i64 0, i64 %1691
  %1693 = add i64 %1692, %1688
  %1694 = call noalias nonnull align 8 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef %1693, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1660, ptr %1694, align 8
  %1695 = getelementptr inbounds i8, ptr %1694, i64 8
  store ptr %1662, ptr %1695, align 8
  %1696 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1694)
  %1697 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1698 = load ptr, ptr %1660, align 8
  %1699 = getelementptr i8, ptr %1698, i64 72
  %1700 = load ptr, ptr %1699, align 8
  %1701 = call { i64, i64 } %1700(ptr nocapture nofree nonnull readonly align 8 %1660) #2
  %1702 = extractvalue { i64, i64 } %1701, 1
  %1703 = urem i64 20, %1702
  %1704 = icmp eq i64 %1703, 0
  %1705 = sub i64 %1702, %1703
  %1706 = add i64 %1705, 20
  %1707 = select i1 %1704, i64 20, i64 %1706
  %1708 = getelementptr i8, ptr %1694, i64 %1707
  %1709 = getelementptr i8, ptr %1698, i64 64
  %1710 = load ptr, ptr %1709, align 8
  call void %1710({ ptr, i160 } %1601, ptr nocapture nofree nonnull readonly align 8 %1660, ptr nocapture nofree writeonly %1708) #8
  %1711 = load ptr, ptr %1694, align 8
  %1712 = load ptr, ptr %1711, align 8
  %1713 = getelementptr i8, ptr %1712, i64 72
  %1714 = load ptr, ptr %1713, align 8
  %1715 = call { i64, i64 } %1714(ptr nocapture nofree nonnull readonly align 8 %1711) #2
  %1716 = extractvalue { i64, i64 } %1715, 0
  %1717 = extractvalue { i64, i64 } %1715, 1
  %1718 = urem i64 20, %1717
  %1719 = icmp eq i64 %1718, 0
  %1720 = sub i64 %1717, %1718
  %1721 = select i1 %1719, i64 0, i64 %1720
  %1722 = add i64 %1716, 20
  %1723 = add i64 %1722, %1721
  %1724 = load ptr, ptr %1695, align 8
  %1725 = load ptr, ptr %1724, align 8
  %1726 = getelementptr i8, ptr %1725, i64 72
  %1727 = load ptr, ptr %1726, align 8
  %1728 = call { i64, i64 } %1727(ptr nocapture nofree nonnull readonly align 8 %1724) #2
  %1729 = extractvalue { i64, i64 } %1728, 1
  %1730 = urem i64 %1723, %1729
  %1731 = icmp eq i64 %1730, 0
  %1732 = sub i64 %1729, %1730
  %1733 = select i1 %1731, i64 0, i64 %1732
  %1734 = getelementptr i8, ptr %1694, i64 %1723
  %1735 = getelementptr i8, ptr %1734, i64 %1733
  %1736 = getelementptr i8, ptr %1725, i64 64
  %1737 = load ptr, ptr %1736, align 8
  call void %1737({ ptr, i160 } %1603, ptr nocapture nofree nonnull readonly align 8 %1724, ptr nocapture nofree writeonly %1735) #8
  %1738 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1739 = getelementptr inbounds i8, ptr %1694, i64 16
  store i32 %1605, ptr %1739, align 8
  store ptr @Entry, ptr %1613, align 8
  %1740 = ptrtoint ptr %1694 to i64
  store i64 %1740, ptr %1615, align 4
  %1741 = getelementptr i8, ptr %1613, i64 24
  store i32 10, ptr %1741, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2873

1742:                                             ; preds = %1650, %1619, %1597
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1743 = add i32 %1605, 2127912214
  %1744 = shl i32 %1605, 12
  %1745 = add i32 %1743, %1744
  %1746 = ashr i32 %1745, 19
  %1747 = xor i32 %1745, %1746
  %1748 = xor i32 %1747, -949894596
  %1749 = add i32 %1748, 374761393
  %1750 = shl i32 %1748, 5
  %1751 = add i32 %1749, %1750
  %1752 = add i32 %1751, -744332180
  %1753 = shl i32 %1751, 9
  %1754 = xor i32 %1752, %1753
  %1755 = add i32 %1754, -42973499
  %1756 = shl i32 %1754, 3
  %1757 = add i32 %1755, %1756
  %1758 = ashr i32 %1757, 16
  %1759 = xor i32 %1757, %1758
  %1760 = xor i32 %1759, -1252372727
  %1761 = load i32, ptr %1588, align 8
  %1762 = add i32 %1761, -1
  %1763 = and i32 %1762, %1760
  %1764 = load ptr, ptr %1592, align 8
  %1765 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1766 = sext i32 %1763 to i64
  %1767 = shl nsw i64 %1766, 5
  %1768 = getelementptr i8, ptr %1764, i64 %1767
  %1769 = load ptr, ptr %1768, align 8
  %1770 = getelementptr i8, ptr %1768, i64 8
  %1771 = icmp ne ptr %1769, @nil_typ
  %1772 = icmp ne ptr %1769, null
  %1773 = and i1 %1771, %1772
  br i1 %1773, label %1774, label %1897

1774:                                             ; preds = %1742
  %1775 = load i64, ptr %1770, align 4
  %1776 = getelementptr i8, ptr %1768, i64 16
  %1777 = load i64, ptr %1776, align 4
  %1778 = inttoptr i64 %1775 to ptr
  %1779 = inttoptr i64 %1777 to ptr
  %1780 = getelementptr i8, ptr %1769, i64 8
  %1781 = getelementptr i8, ptr %1769, i64 16
  %1782 = getelementptr i8, ptr %1769, i64 40
  %1783 = load i64, ptr %1780, align 4, !noalias !455
  %1784 = load i64, ptr %1781, align 4, !noalias !455
  %1785 = load ptr, ptr %1782, align 8, !noalias !455
  %1786 = mul i64 %1783, 4015701072841558310
  %1787 = lshr i64 %1786, 32
  %1788 = xor i64 %1787, %1786
  %1789 = and i64 %1788, %1784
  %1790 = getelementptr i32, ptr %1785, i64 %1789
  %1791 = load i32, ptr %1790, align 4, !noalias !455
  %1792 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1769, 0
  %1793 = insertvalue { ptr, ptr, ptr, i32 } %1792, ptr %1778, 1
  %1794 = insertvalue { ptr, ptr, ptr, i32 } %1793, ptr %1779, 2
  %1795 = insertvalue { ptr, ptr, ptr, i32 } %1794, i32 %1791, 3
  %1796 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %1797 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1769) #43
  %1798 = sext i32 %1791 to i64
  %1799 = getelementptr ptr, ptr %1769, i64 %1798
  %1800 = getelementptr i8, ptr %1799, i64 64
  %1801 = load ptr, ptr %1800, align 8
  %1802 = call align 4 ptr %1801({ ptr, ptr, ptr, i32 } %1795, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1803 = call i32 %1802({ ptr, ptr, ptr, i32 } %1795, { ptr, ptr, ptr, i32 } %1795, ptr nonnull align 8 %1) #28
  %1804 = icmp eq i32 %1803, %1605
  br i1 %1804, label %1805, label %1897

1805:                                             ; preds = %1774
  %1806 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1807 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %1769)
  %1808 = getelementptr i8, ptr %1799, i64 48
  %1809 = load ptr, ptr %1808, align 8
  %1810 = call align 4 ptr %1809({ ptr, ptr, ptr, i32 } %1795, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %1811 = call { ptr, i160 } %1810({ ptr, ptr, ptr, i32 } %1795, { ptr, ptr, ptr, i32 } %1795, ptr nonnull align 8 %1) #28
  %1812 = load ptr, ptr %1587, align 8
  %1813 = call i1 %1812({ ptr, i160 } %1811, { ptr, i160 } %1601) #28
  br i1 %1813, label %1814, label %1897

1814:                                             ; preds = %1805
  %1815 = load ptr, ptr %1574, align 8
  %1816 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1817 = load ptr, ptr %1575, align 8
  %1818 = load ptr, ptr %1815, align 8, !alias.scope !458
  %1819 = getelementptr i8, ptr %1818, i64 72
  %1820 = load ptr, ptr %1819, align 8, !alias.scope !458
  %1821 = call { i64, i64 } %1820(ptr nocapture nofree nonnull readonly align 8 %1815) #2, !alias.scope !458
  %1822 = extractvalue { i64, i64 } %1821, 0
  %1823 = extractvalue { i64, i64 } %1821, 1
  %1824 = urem i64 20, %1823
  %1825 = icmp eq i64 %1824, 0
  %1826 = sub i64 %1823, %1824
  %1827 = select i1 %1825, i64 0, i64 %1826
  %1828 = add i64 %1822, 20
  %1829 = add i64 %1828, %1827
  %1830 = load ptr, ptr %1817, align 8, !alias.scope !458
  %1831 = getelementptr i8, ptr %1830, i64 72
  %1832 = load ptr, ptr %1831, align 8, !alias.scope !458
  %1833 = call { i64, i64 } %1832(ptr nocapture nofree nonnull readonly align 8 %1817) #2, !alias.scope !458
  %1834 = extractvalue { i64, i64 } %1833, 0
  %1835 = extractvalue { i64, i64 } %1833, 1
  %1836 = call i64 @llvm.umax.i64(i64 %1823, i64 %1835) #44
  %1837 = call i64 @llvm.umax.i64(i64 %1836, i64 noundef 8) #44, !range !18
  %1838 = urem i64 %1829, %1835
  %1839 = icmp eq i64 %1838, 0
  %1840 = sub i64 %1835, %1838
  %1841 = select i1 %1839, i64 0, i64 %1840
  %1842 = add i64 %1834, %1829
  %1843 = add i64 %1842, %1841
  %1844 = urem i64 %1843, %1837
  %1845 = icmp eq i64 %1844, 0
  %1846 = sub i64 %1837, %1844
  %1847 = select i1 %1845, i64 0, i64 %1846
  %1848 = add i64 %1847, %1843
  %1849 = call noalias nonnull align 8 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef %1848, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1815, ptr %1849, align 8
  %1850 = getelementptr inbounds i8, ptr %1849, i64 8
  store ptr %1817, ptr %1850, align 8
  %1851 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %1849)
  %1852 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1853 = load ptr, ptr %1815, align 8
  %1854 = getelementptr i8, ptr %1853, i64 72
  %1855 = load ptr, ptr %1854, align 8
  %1856 = call { i64, i64 } %1855(ptr nocapture nofree nonnull readonly align 8 %1815) #2
  %1857 = extractvalue { i64, i64 } %1856, 1
  %1858 = urem i64 20, %1857
  %1859 = icmp eq i64 %1858, 0
  %1860 = sub i64 %1857, %1858
  %1861 = add i64 %1860, 20
  %1862 = select i1 %1859, i64 20, i64 %1861
  %1863 = getelementptr i8, ptr %1849, i64 %1862
  %1864 = getelementptr i8, ptr %1853, i64 64
  %1865 = load ptr, ptr %1864, align 8
  call void %1865({ ptr, i160 } %1601, ptr nocapture nofree nonnull readonly align 8 %1815, ptr nocapture nofree writeonly %1863) #8
  %1866 = load ptr, ptr %1849, align 8
  %1867 = load ptr, ptr %1866, align 8
  %1868 = getelementptr i8, ptr %1867, i64 72
  %1869 = load ptr, ptr %1868, align 8
  %1870 = call { i64, i64 } %1869(ptr nocapture nofree nonnull readonly align 8 %1866) #2
  %1871 = extractvalue { i64, i64 } %1870, 0
  %1872 = extractvalue { i64, i64 } %1870, 1
  %1873 = urem i64 20, %1872
  %1874 = icmp eq i64 %1873, 0
  %1875 = sub i64 %1872, %1873
  %1876 = select i1 %1874, i64 0, i64 %1875
  %1877 = add i64 %1871, 20
  %1878 = add i64 %1877, %1876
  %1879 = load ptr, ptr %1850, align 8
  %1880 = load ptr, ptr %1879, align 8
  %1881 = getelementptr i8, ptr %1880, i64 72
  %1882 = load ptr, ptr %1881, align 8
  %1883 = call { i64, i64 } %1882(ptr nocapture nofree nonnull readonly align 8 %1879) #2
  %1884 = extractvalue { i64, i64 } %1883, 1
  %1885 = urem i64 %1878, %1884
  %1886 = icmp eq i64 %1885, 0
  %1887 = sub i64 %1884, %1885
  %1888 = select i1 %1886, i64 0, i64 %1887
  %1889 = getelementptr i8, ptr %1849, i64 %1878
  %1890 = getelementptr i8, ptr %1889, i64 %1888
  %1891 = getelementptr i8, ptr %1880, i64 64
  %1892 = load ptr, ptr %1891, align 8
  call void %1892({ ptr, i160 } %1603, ptr nocapture nofree nonnull readonly align 8 %1879, ptr nocapture nofree writeonly %1890) #8
  %1893 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %1894 = getelementptr inbounds i8, ptr %1849, i64 16
  store i32 %1605, ptr %1894, align 8
  store ptr @Entry, ptr %1768, align 8
  %1895 = ptrtoint ptr %1849 to i64
  store i64 %1895, ptr %1770, align 4
  %1896 = getelementptr i8, ptr %1768, i64 24
  store i32 10, ptr %1896, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2873

1897:                                             ; preds = %1805, %1774, %1742
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1898 = load i32, ptr %1593, align 4
  %1899 = load i32, ptr %1588, align 8
  %1900 = icmp slt i32 %1898, %1899
  br i1 %1900, label %1987, label %1901

1901:                                             ; preds = %1897
  %1902 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %1903 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %1904 = load ptr, ptr %1590, align 8
  %1905 = load ptr, ptr %1592, align 8
  %1906 = shl i32 %1899, 1
  %1907 = call i32 @llvm.smax.i32(i32 %1906, i32 noundef 16) #43
  store i32 %1907, ptr %1588, align 8
  %1908 = zext nneg i32 %1907 to i64
  %1909 = shl nuw nsw i64 %1908, 5
  %1910 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1909, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1910, ptr %1590, align 8
  %1911 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %1909, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1911, ptr %1592, align 8
  store i32 0, ptr %1593, align 4
  %1912 = icmp sgt i32 %1899, 0
  br i1 %1912, label %1913, label %1987

1913:                                             ; preds = %1901
  %1914 = zext nneg i32 %1899 to i64
  br label %1915

1915:                                             ; preds = %1948, %1913
  %1916 = phi i64 [ 0, %1913 ], [ %1949, %1948 ]
  %1917 = shl nuw nsw i64 %1916, 5
  %1918 = getelementptr i8, ptr %1904, i64 %1917
  %1919 = load ptr, ptr %1918, align 8
  %1920 = icmp ne ptr %1919, @nil_typ
  %1921 = icmp ne ptr %1919, null
  %1922 = and i1 %1920, %1921
  br i1 %1922, label %1923, label %1948

1923:                                             ; preds = %1915
  %1924 = getelementptr i8, ptr %1918, i64 8
  %1925 = load i64, ptr %1924, align 4
  %1926 = getelementptr i8, ptr %1918, i64 16
  %1927 = load i64, ptr %1926, align 4
  %1928 = inttoptr i64 %1925 to ptr
  %1929 = inttoptr i64 %1927 to ptr
  %1930 = getelementptr i8, ptr %1919, i64 8
  %1931 = getelementptr i8, ptr %1919, i64 16
  %1932 = getelementptr i8, ptr %1919, i64 40
  %1933 = load i64, ptr %1930, align 4, !noalias !25
  %1934 = load i64, ptr %1931, align 4, !noalias !25
  %1935 = load ptr, ptr %1932, align 8, !noalias !25
  %1936 = mul i64 %1933, 4015701072841558310
  %1937 = lshr i64 %1936, 32
  %1938 = xor i64 %1937, %1936
  %1939 = and i64 %1938, %1934
  %1940 = getelementptr i32, ptr %1935, i64 %1939
  %1941 = load i32, ptr %1940, align 4, !noalias !461
  %1942 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1919, 0
  %1943 = insertvalue { ptr, ptr, ptr, i32 } %1942, ptr %1928, 1
  %1944 = insertvalue { ptr, ptr, ptr, i32 } %1943, ptr %1929, 2
  %1945 = insertvalue { ptr, ptr, ptr, i32 } %1944, i32 %1941, 3
  %1946 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1947 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1596, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %1945) #28
  br label %1948

1948:                                             ; preds = %1923, %1915
  %1949 = add nuw nsw i64 %1916, 1
  %1950 = icmp eq i64 %1949, %1914
  br i1 %1950, label %1951, label %1915

1951:                                             ; preds = %1984, %1948
  %1952 = phi i64 [ %1985, %1984 ], [ 0, %1948 ]
  %1953 = shl nuw nsw i64 %1952, 5
  %1954 = getelementptr i8, ptr %1905, i64 %1953
  %1955 = load ptr, ptr %1954, align 8
  %1956 = icmp ne ptr %1955, @nil_typ
  %1957 = icmp ne ptr %1955, null
  %1958 = and i1 %1956, %1957
  br i1 %1958, label %1959, label %1984

1959:                                             ; preds = %1951
  %1960 = getelementptr i8, ptr %1954, i64 8
  %1961 = load i64, ptr %1960, align 4
  %1962 = getelementptr i8, ptr %1954, i64 16
  %1963 = load i64, ptr %1962, align 4
  %1964 = inttoptr i64 %1961 to ptr
  %1965 = inttoptr i64 %1963 to ptr
  %1966 = getelementptr i8, ptr %1955, i64 8
  %1967 = getelementptr i8, ptr %1955, i64 16
  %1968 = getelementptr i8, ptr %1955, i64 40
  %1969 = load i64, ptr %1966, align 4, !noalias !25
  %1970 = load i64, ptr %1967, align 4, !noalias !25
  %1971 = load ptr, ptr %1968, align 8, !noalias !25
  %1972 = mul i64 %1969, 4015701072841558310
  %1973 = lshr i64 %1972, 32
  %1974 = xor i64 %1973, %1972
  %1975 = and i64 %1974, %1970
  %1976 = getelementptr i32, ptr %1971, i64 %1975
  %1977 = load i32, ptr %1976, align 4, !noalias !464
  %1978 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1955, 0
  %1979 = insertvalue { ptr, ptr, ptr, i32 } %1978, ptr %1964, 1
  %1980 = insertvalue { ptr, ptr, ptr, i32 } %1979, ptr %1965, 2
  %1981 = insertvalue { ptr, ptr, ptr, i32 } %1980, i32 %1977, 3
  %1982 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %1983 = call { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %1596, { ptr, ptr, ptr, i32 } poison, ptr nofree nonnull align 8 poison, { ptr, ptr, ptr, i32 } %1981) #28
  br label %1984

1984:                                             ; preds = %1959, %1951
  %1985 = add nuw nsw i64 %1952, 1
  %1986 = icmp eq i64 %1985, %1914
  br i1 %1986, label %1987, label %1951

1987:                                             ; preds = %1984, %1901, %1897
  %1988 = load ptr, ptr %1574, align 8
  %1989 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %1990 = load ptr, ptr %1575, align 8
  %1991 = load ptr, ptr %1988, align 8
  %1992 = getelementptr i8, ptr %1991, i64 72
  %1993 = load ptr, ptr %1992, align 8
  %1994 = call { i64, i64 } %1993(ptr nocapture nofree nonnull readonly align 8 %1988) #2
  %1995 = extractvalue { i64, i64 } %1994, 0
  %1996 = extractvalue { i64, i64 } %1994, 1
  %1997 = urem i64 20, %1996
  %1998 = icmp eq i64 %1997, 0
  %1999 = sub i64 %1996, %1997
  %2000 = select i1 %1998, i64 0, i64 %1999
  %2001 = add i64 %1995, 20
  %2002 = add i64 %2001, %2000
  %2003 = load ptr, ptr %1990, align 8
  %2004 = getelementptr i8, ptr %2003, i64 72
  %2005 = load ptr, ptr %2004, align 8
  %2006 = call { i64, i64 } %2005(ptr nocapture nofree nonnull readonly align 8 %1990) #2
  %2007 = extractvalue { i64, i64 } %2006, 0
  %2008 = extractvalue { i64, i64 } %2006, 1
  %2009 = call i64 @llvm.umax.i64(i64 %1996, i64 %2008) #44
  %2010 = call i64 @llvm.umax.i64(i64 %2009, i64 noundef 8) #44, !range !18
  %2011 = urem i64 %2002, %2008
  %2012 = icmp eq i64 %2011, 0
  %2013 = sub i64 %2008, %2011
  %2014 = select i1 %2012, i64 0, i64 %2013
  %2015 = add i64 %2007, %2002
  %2016 = add i64 %2015, %2014
  %2017 = urem i64 %2016, %2010
  %2018 = icmp eq i64 %2017, 0
  %2019 = sub i64 %2010, %2017
  %2020 = select i1 %2018, i64 0, i64 %2019
  %2021 = add i64 %2020, %2016
  %2022 = call noalias nonnull align 8 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef %2021, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %1988, ptr %2022, align 8
  %2023 = getelementptr inbounds i8, ptr %2022, i64 8
  store ptr %1990, ptr %2023, align 8
  %2024 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %2022)
  %2025 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2026 = load ptr, ptr %1988, align 8
  %2027 = getelementptr i8, ptr %2026, i64 72
  %2028 = load ptr, ptr %2027, align 8
  %2029 = call { i64, i64 } %2028(ptr nocapture nofree nonnull readonly align 8 %1988) #2
  %2030 = extractvalue { i64, i64 } %2029, 1
  %2031 = urem i64 20, %2030
  %2032 = icmp eq i64 %2031, 0
  %2033 = sub i64 %2030, %2031
  %2034 = add i64 %2033, 20
  %2035 = select i1 %2032, i64 20, i64 %2034
  %2036 = getelementptr i8, ptr %2022, i64 %2035
  %2037 = getelementptr i8, ptr %2026, i64 64
  %2038 = load ptr, ptr %2037, align 8
  call void %2038({ ptr, i160 } %1601, ptr nocapture nofree nonnull readonly align 8 %1988, ptr nocapture nofree writeonly %2036) #8
  %2039 = load ptr, ptr %2022, align 8
  %2040 = load ptr, ptr %2039, align 8
  %2041 = getelementptr i8, ptr %2040, i64 72
  %2042 = load ptr, ptr %2041, align 8
  %2043 = call { i64, i64 } %2042(ptr nocapture nofree nonnull readonly align 8 %2039) #2
  %2044 = extractvalue { i64, i64 } %2043, 0
  %2045 = extractvalue { i64, i64 } %2043, 1
  %2046 = urem i64 20, %2045
  %2047 = icmp eq i64 %2046, 0
  %2048 = sub i64 %2045, %2046
  %2049 = select i1 %2047, i64 0, i64 %2048
  %2050 = add i64 %2044, 20
  %2051 = add i64 %2050, %2049
  %2052 = load ptr, ptr %2023, align 8
  %2053 = load ptr, ptr %2052, align 8
  %2054 = getelementptr i8, ptr %2053, i64 72
  %2055 = load ptr, ptr %2054, align 8
  %2056 = call { i64, i64 } %2055(ptr nocapture nofree nonnull readonly align 8 %2052) #2
  %2057 = extractvalue { i64, i64 } %2056, 1
  %2058 = urem i64 %2051, %2057
  %2059 = icmp eq i64 %2058, 0
  %2060 = sub i64 %2057, %2058
  %2061 = select i1 %2059, i64 0, i64 %2060
  %2062 = getelementptr i8, ptr %2022, i64 %2051
  %2063 = getelementptr i8, ptr %2062, i64 %2061
  %2064 = getelementptr i8, ptr %2053, i64 64
  %2065 = load ptr, ptr %2064, align 8
  call void %2065({ ptr, i160 } %1603, ptr nocapture nofree nonnull readonly align 8 %2052, ptr nocapture nofree writeonly %2063) #8
  %2066 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %2067 = getelementptr inbounds i8, ptr %2022, i64 16
  store i32 %1605, ptr %2067, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2068 = ptrtoint ptr %2022 to i64
  %2069 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2070 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2071 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2072

2072:                                             ; preds = %2151, %1987
  %2073 = phi i64 [ undef, %1987 ], [ %2153, %2151 ]
  %2074 = phi i64 [ %2068, %1987 ], [ %2152, %2151 ]
  %2075 = phi i32 [ 0, %1987 ], [ %2088, %2151 ]
  %2076 = phi i1 [ true, %1987 ], [ %2169, %2151 ]
  %2077 = phi ptr [ @Entry, %1987 ], [ %2154, %2151 ]
  %2078 = phi ptr [ %2022, %1987 ], [ %2155, %2151 ]
  %2079 = phi ptr [ undef, %1987 ], [ %2156, %2151 ]
  %2080 = phi i32 [ 10, %1987 ], [ %2168, %2151 ]
  %2081 = sext i32 %2080 to i64
  %2082 = getelementptr ptr, ptr %2077, i64 %2081
  %2083 = getelementptr i8, ptr %2082, i64 64
  %2084 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2077, 0
  %2085 = insertvalue { ptr, ptr, ptr, i32 } %2084, ptr %2078, 1
  %2086 = insertvalue { ptr, ptr, ptr, i32 } %2085, ptr %2079, 2
  %2087 = insertvalue { ptr, ptr, ptr, i32 } %2086, i32 %2080, 3
  %2088 = add nuw nsw i32 %2075, 1
  %2089 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2077)
  %2090 = load ptr, ptr %2083, align 8
  %2091 = call align 4 ptr %2090({ ptr, ptr, ptr, i32 } %2087, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2092 = call i32 %2091({ ptr, ptr, ptr, i32 } %2087, { ptr, ptr, ptr, i32 } %2087, ptr nonnull align 8 %1) #28
  br i1 %2076, label %2093, label %2113

2093:                                             ; preds = %2072
  %2094 = load i32, ptr %1588, align 8
  %2095 = add i32 %2094, -1
  %2096 = and i32 %2095, %2092
  %2097 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2098 = load ptr, ptr %1590, align 8
  %2099 = sext i32 %2096 to i64
  %2100 = shl nsw i64 %2099, 5
  %2101 = getelementptr i8, ptr %2098, i64 %2100
  %2102 = load ptr, ptr %2101, align 8
  %2103 = getelementptr i8, ptr %2101, i64 8
  %2104 = load i160, ptr %2103, align 4
  store ptr %2077, ptr %2101, align 8
  store i64 %2074, ptr %2103, align 4
  %2105 = getelementptr i8, ptr %2101, i64 16
  store i64 %2073, ptr %2105, align 4
  %2106 = getelementptr i8, ptr %2101, i64 24
  store i32 %2080, ptr %2106, align 4
  %2107 = icmp ne ptr %2102, @nil_typ
  %2108 = icmp ne ptr %2102, null
  %2109 = and i1 %2107, %2108
  %2110 = trunc i160 %2104 to i64
  %2111 = lshr i160 %2104, 64
  %2112 = trunc i160 %2111 to i64
  br i1 %2109, label %2151, label %2173

2113:                                             ; preds = %2072
  %2114 = add i32 %2092, 2127912214
  %2115 = shl i32 %2092, 12
  %2116 = add i32 %2114, %2115
  %2117 = ashr i32 %2116, 19
  %2118 = xor i32 %2116, %2117
  %2119 = xor i32 %2118, -949894596
  %2120 = add i32 %2119, 374761393
  %2121 = shl i32 %2119, 5
  %2122 = add i32 %2120, %2121
  %2123 = add i32 %2122, -744332180
  %2124 = shl i32 %2122, 9
  %2125 = xor i32 %2123, %2124
  %2126 = add i32 %2125, -42973499
  %2127 = shl i32 %2125, 3
  %2128 = add i32 %2126, %2127
  %2129 = ashr i32 %2128, 16
  %2130 = xor i32 %2128, %2129
  %2131 = xor i32 %2130, -1252372727
  %2132 = load i32, ptr %1588, align 8
  %2133 = add i32 %2132, -1
  %2134 = and i32 %2133, %2131
  %2135 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2136 = load ptr, ptr %1592, align 8
  %2137 = sext i32 %2134 to i64
  %2138 = shl nsw i64 %2137, 5
  %2139 = getelementptr i8, ptr %2136, i64 %2138
  %2140 = load ptr, ptr %2139, align 8
  %2141 = getelementptr i8, ptr %2139, i64 8
  %2142 = load i160, ptr %2141, align 4
  store ptr %2077, ptr %2139, align 8
  store i64 %2074, ptr %2141, align 4
  %2143 = getelementptr i8, ptr %2139, i64 16
  store i64 %2073, ptr %2143, align 4
  %2144 = getelementptr i8, ptr %2139, i64 24
  store i32 %2080, ptr %2144, align 4
  %2145 = icmp ne ptr %2140, @nil_typ
  %2146 = icmp ne ptr %2140, null
  %2147 = and i1 %2145, %2146
  %2148 = trunc i160 %2142 to i64
  %2149 = lshr i160 %2142, 64
  %2150 = trunc i160 %2149 to i64
  br i1 %2147, label %2151, label %2173

2151:                                             ; preds = %2113, %2093
  %2152 = phi i64 [ %2110, %2093 ], [ %2148, %2113 ]
  %2153 = phi i64 [ %2112, %2093 ], [ %2150, %2113 ]
  %2154 = phi ptr [ %2102, %2093 ], [ %2140, %2113 ]
  %2155 = inttoptr i64 %2152 to ptr
  %2156 = inttoptr i64 %2153 to ptr
  %2157 = getelementptr i8, ptr %2154, i64 8
  %2158 = getelementptr i8, ptr %2154, i64 16
  %2159 = getelementptr i8, ptr %2154, i64 40
  %2160 = load i64, ptr %2157, align 4
  %2161 = load i64, ptr %2158, align 4
  %2162 = load ptr, ptr %2159, align 8
  %2163 = mul i64 %2160, 4015701072841558310
  %2164 = lshr i64 %2163, 32
  %2165 = xor i64 %2164, %2163
  %2166 = and i64 %2165, %2161
  %2167 = getelementptr i32, ptr %2162, i64 %2166
  %2168 = load i32, ptr %2167, align 4
  %2169 = xor i1 %2076, true
  %2170 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2171 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2172 = icmp eq i32 %2088, 100
  br i1 %2172, label %2177, label %2072

2173:                                             ; preds = %2113, %2093
  %2174 = load i32, ptr %1593, align 4
  %2175 = add i32 %2174, 1
  %2176 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2175, ptr %1593, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2873

2177:                                             ; preds = %2151
  %2178 = getelementptr i8, ptr %2154, i64 8
  %2179 = getelementptr i8, ptr %2154, i64 16
  %2180 = getelementptr i8, ptr %2154, i64 40
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2181 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2182 = load ptr, ptr %1590, align 8
  %2183 = load ptr, ptr %1592, align 8
  %2184 = load i32, ptr %1588, align 8
  %2185 = shl i32 %2184, 1
  %2186 = call i32 @llvm.smax.i32(i32 %2185, i32 noundef 16) #43
  store i32 %2186, ptr %1588, align 8
  %2187 = zext nneg i32 %2186 to i64
  %2188 = shl nuw nsw i64 %2187, 5
  %2189 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2188, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2189, ptr %1590, align 8
  %2190 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2188, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2190, ptr %1592, align 8
  store i32 0, ptr %1593, align 4
  %2191 = icmp sgt i32 %2184, 0
  br i1 %2191, label %2192, label %2466

2192:                                             ; preds = %2177
  %2193 = zext nneg i32 %2184 to i64
  br label %2194

2194:                                             ; preds = %2327, %2192
  %2195 = phi i64 [ 0, %2192 ], [ %2328, %2327 ]
  %2196 = shl nuw nsw i64 %2195, 5
  %2197 = getelementptr i8, ptr %2182, i64 %2196
  %2198 = load ptr, ptr %2197, align 8
  %2199 = icmp ne ptr %2198, @nil_typ
  %2200 = icmp ne ptr %2198, null
  %2201 = and i1 %2199, %2200
  br i1 %2201, label %2202, label %2327

2202:                                             ; preds = %2194
  %2203 = getelementptr i8, ptr %2197, i64 8
  %2204 = load i64, ptr %2203, align 4
  %2205 = getelementptr i8, ptr %2197, i64 16
  %2206 = load i64, ptr %2205, align 4
  %2207 = getelementptr i8, ptr %2198, i64 8
  %2208 = getelementptr i8, ptr %2198, i64 16
  %2209 = getelementptr i8, ptr %2198, i64 40
  %2210 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2211 = load i64, ptr %2207, align 4, !noalias !25
  %2212 = load i64, ptr %2208, align 4, !noalias !25
  %2213 = load ptr, ptr %2209, align 8, !noalias !25
  %2214 = mul i64 %2211, 4015701072841558310
  %2215 = lshr i64 %2214, 32
  %2216 = xor i64 %2215, %2214
  %2217 = and i64 %2216, %2212
  %2218 = getelementptr i32, ptr %2213, i64 %2217
  %2219 = load i32, ptr %2218, align 4, !noalias !467
  %2220 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2221 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2222 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2223

2223:                                             ; preds = %2302, %2202
  %2224 = phi i64 [ %2206, %2202 ], [ %2304, %2302 ]
  %2225 = phi i64 [ %2204, %2202 ], [ %2303, %2302 ]
  %2226 = phi i32 [ 0, %2202 ], [ %2239, %2302 ]
  %2227 = phi i1 [ true, %2202 ], [ %2318, %2302 ]
  %2228 = phi ptr [ %2198, %2202 ], [ %2305, %2302 ]
  %2229 = phi i32 [ %2219, %2202 ], [ %2317, %2302 ]
  %2230 = inttoptr i64 %2224 to ptr
  %2231 = inttoptr i64 %2225 to ptr
  %2232 = sext i32 %2229 to i64
  %2233 = getelementptr ptr, ptr %2228, i64 %2232
  %2234 = getelementptr i8, ptr %2233, i64 64
  %2235 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2228, 0
  %2236 = insertvalue { ptr, ptr, ptr, i32 } %2235, ptr %2231, 1
  %2237 = insertvalue { ptr, ptr, ptr, i32 } %2236, ptr %2230, 2
  %2238 = insertvalue { ptr, ptr, ptr, i32 } %2237, i32 %2229, 3
  %2239 = add nuw nsw i32 %2226, 1
  %2240 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2228)
  %2241 = load ptr, ptr %2234, align 8
  %2242 = call align 4 ptr %2241({ ptr, ptr, ptr, i32 } %2238, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2243 = call i32 %2242({ ptr, ptr, ptr, i32 } %2238, { ptr, ptr, ptr, i32 } %2238, ptr nonnull align 8 %1) #28
  br i1 %2227, label %2244, label %2264

2244:                                             ; preds = %2223
  %2245 = load i32, ptr %1588, align 8
  %2246 = add i32 %2245, -1
  %2247 = and i32 %2246, %2243
  %2248 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2249 = load ptr, ptr %1590, align 8
  %2250 = sext i32 %2247 to i64
  %2251 = shl nsw i64 %2250, 5
  %2252 = getelementptr i8, ptr %2249, i64 %2251
  %2253 = load ptr, ptr %2252, align 8
  %2254 = getelementptr i8, ptr %2252, i64 8
  %2255 = load i160, ptr %2254, align 4
  store ptr %2228, ptr %2252, align 8
  store i64 %2225, ptr %2254, align 4
  %2256 = getelementptr i8, ptr %2252, i64 16
  store i64 %2224, ptr %2256, align 4
  %2257 = getelementptr i8, ptr %2252, i64 24
  store i32 %2229, ptr %2257, align 4
  %2258 = icmp ne ptr %2253, @nil_typ
  %2259 = icmp ne ptr %2253, null
  %2260 = and i1 %2258, %2259
  %2261 = trunc i160 %2255 to i64
  %2262 = lshr i160 %2255, 64
  %2263 = trunc i160 %2262 to i64
  br i1 %2260, label %2302, label %2322

2264:                                             ; preds = %2223
  %2265 = add i32 %2243, 2127912214
  %2266 = shl i32 %2243, 12
  %2267 = add i32 %2265, %2266
  %2268 = ashr i32 %2267, 19
  %2269 = xor i32 %2267, %2268
  %2270 = xor i32 %2269, -949894596
  %2271 = add i32 %2270, 374761393
  %2272 = shl i32 %2270, 5
  %2273 = add i32 %2271, %2272
  %2274 = add i32 %2273, -744332180
  %2275 = shl i32 %2273, 9
  %2276 = xor i32 %2274, %2275
  %2277 = add i32 %2276, -42973499
  %2278 = shl i32 %2276, 3
  %2279 = add i32 %2277, %2278
  %2280 = ashr i32 %2279, 16
  %2281 = xor i32 %2279, %2280
  %2282 = xor i32 %2281, -1252372727
  %2283 = load i32, ptr %1588, align 8
  %2284 = add i32 %2283, -1
  %2285 = and i32 %2284, %2282
  %2286 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2287 = load ptr, ptr %1592, align 8
  %2288 = sext i32 %2285 to i64
  %2289 = shl nsw i64 %2288, 5
  %2290 = getelementptr i8, ptr %2287, i64 %2289
  %2291 = load ptr, ptr %2290, align 8
  %2292 = getelementptr i8, ptr %2290, i64 8
  %2293 = load i160, ptr %2292, align 4
  store ptr %2228, ptr %2290, align 8
  store i64 %2225, ptr %2292, align 4
  %2294 = getelementptr i8, ptr %2290, i64 16
  store i64 %2224, ptr %2294, align 4
  %2295 = getelementptr i8, ptr %2290, i64 24
  store i32 %2229, ptr %2295, align 4
  %2296 = icmp ne ptr %2291, @nil_typ
  %2297 = icmp ne ptr %2291, null
  %2298 = and i1 %2296, %2297
  %2299 = trunc i160 %2293 to i64
  %2300 = lshr i160 %2293, 64
  %2301 = trunc i160 %2300 to i64
  br i1 %2298, label %2302, label %2322

2302:                                             ; preds = %2264, %2244
  %2303 = phi i64 [ %2261, %2244 ], [ %2299, %2264 ]
  %2304 = phi i64 [ %2263, %2244 ], [ %2301, %2264 ]
  %2305 = phi ptr [ %2253, %2244 ], [ %2291, %2264 ]
  %2306 = getelementptr i8, ptr %2305, i64 8
  %2307 = getelementptr i8, ptr %2305, i64 16
  %2308 = getelementptr i8, ptr %2305, i64 40
  %2309 = load i64, ptr %2306, align 4
  %2310 = load i64, ptr %2307, align 4
  %2311 = load ptr, ptr %2308, align 8
  %2312 = mul i64 %2309, 4015701072841558310
  %2313 = lshr i64 %2312, 32
  %2314 = xor i64 %2313, %2312
  %2315 = and i64 %2314, %2310
  %2316 = getelementptr i32, ptr %2311, i64 %2315
  %2317 = load i32, ptr %2316, align 4
  %2318 = xor i1 %2227, true
  %2319 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2320 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2321 = icmp eq i32 %2239, 100
  br i1 %2321, label %2326, label %2223

2322:                                             ; preds = %2264, %2244
  %2323 = load i32, ptr %1593, align 4
  %2324 = add i32 %2323, 1
  %2325 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2324, ptr %1593, align 4
  br label %2326

2326:                                             ; preds = %2322, %2302
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2327

2327:                                             ; preds = %2326, %2194
  %2328 = add nuw nsw i64 %2195, 1
  %2329 = icmp eq i64 %2328, %2193
  br i1 %2329, label %2330, label %2194

2330:                                             ; preds = %2463, %2327
  %2331 = phi i64 [ %2464, %2463 ], [ 0, %2327 ]
  %2332 = shl nuw nsw i64 %2331, 5
  %2333 = getelementptr i8, ptr %2183, i64 %2332
  %2334 = load ptr, ptr %2333, align 8
  %2335 = icmp ne ptr %2334, @nil_typ
  %2336 = icmp ne ptr %2334, null
  %2337 = and i1 %2335, %2336
  br i1 %2337, label %2338, label %2463

2338:                                             ; preds = %2330
  %2339 = getelementptr i8, ptr %2333, i64 8
  %2340 = load i64, ptr %2339, align 4
  %2341 = getelementptr i8, ptr %2333, i64 16
  %2342 = load i64, ptr %2341, align 4
  %2343 = getelementptr i8, ptr %2334, i64 8
  %2344 = getelementptr i8, ptr %2334, i64 16
  %2345 = getelementptr i8, ptr %2334, i64 40
  %2346 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2347 = load i64, ptr %2343, align 4, !noalias !25
  %2348 = load i64, ptr %2344, align 4, !noalias !25
  %2349 = load ptr, ptr %2345, align 8, !noalias !25
  %2350 = mul i64 %2347, 4015701072841558310
  %2351 = lshr i64 %2350, 32
  %2352 = xor i64 %2351, %2350
  %2353 = and i64 %2352, %2348
  %2354 = getelementptr i32, ptr %2349, i64 %2353
  %2355 = load i32, ptr %2354, align 4, !noalias !470
  %2356 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2357 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2358 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2359

2359:                                             ; preds = %2438, %2338
  %2360 = phi i64 [ %2342, %2338 ], [ %2440, %2438 ]
  %2361 = phi i64 [ %2340, %2338 ], [ %2439, %2438 ]
  %2362 = phi i32 [ 0, %2338 ], [ %2375, %2438 ]
  %2363 = phi i1 [ true, %2338 ], [ %2454, %2438 ]
  %2364 = phi ptr [ %2334, %2338 ], [ %2441, %2438 ]
  %2365 = phi i32 [ %2355, %2338 ], [ %2453, %2438 ]
  %2366 = inttoptr i64 %2360 to ptr
  %2367 = inttoptr i64 %2361 to ptr
  %2368 = sext i32 %2365 to i64
  %2369 = getelementptr ptr, ptr %2364, i64 %2368
  %2370 = getelementptr i8, ptr %2369, i64 64
  %2371 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2364, 0
  %2372 = insertvalue { ptr, ptr, ptr, i32 } %2371, ptr %2367, 1
  %2373 = insertvalue { ptr, ptr, ptr, i32 } %2372, ptr %2366, 2
  %2374 = insertvalue { ptr, ptr, ptr, i32 } %2373, i32 %2365, 3
  %2375 = add nuw nsw i32 %2362, 1
  %2376 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2364)
  %2377 = load ptr, ptr %2370, align 8
  %2378 = call align 4 ptr %2377({ ptr, ptr, ptr, i32 } %2374, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2379 = call i32 %2378({ ptr, ptr, ptr, i32 } %2374, { ptr, ptr, ptr, i32 } %2374, ptr nonnull align 8 %1) #28
  br i1 %2363, label %2380, label %2400

2380:                                             ; preds = %2359
  %2381 = load i32, ptr %1588, align 8
  %2382 = add i32 %2381, -1
  %2383 = and i32 %2382, %2379
  %2384 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2385 = load ptr, ptr %1590, align 8
  %2386 = sext i32 %2383 to i64
  %2387 = shl nsw i64 %2386, 5
  %2388 = getelementptr i8, ptr %2385, i64 %2387
  %2389 = load ptr, ptr %2388, align 8
  %2390 = getelementptr i8, ptr %2388, i64 8
  %2391 = load i160, ptr %2390, align 4
  store ptr %2364, ptr %2388, align 8
  store i64 %2361, ptr %2390, align 4
  %2392 = getelementptr i8, ptr %2388, i64 16
  store i64 %2360, ptr %2392, align 4
  %2393 = getelementptr i8, ptr %2388, i64 24
  store i32 %2365, ptr %2393, align 4
  %2394 = icmp ne ptr %2389, @nil_typ
  %2395 = icmp ne ptr %2389, null
  %2396 = and i1 %2394, %2395
  %2397 = trunc i160 %2391 to i64
  %2398 = lshr i160 %2391, 64
  %2399 = trunc i160 %2398 to i64
  br i1 %2396, label %2438, label %2458

2400:                                             ; preds = %2359
  %2401 = add i32 %2379, 2127912214
  %2402 = shl i32 %2379, 12
  %2403 = add i32 %2401, %2402
  %2404 = ashr i32 %2403, 19
  %2405 = xor i32 %2403, %2404
  %2406 = xor i32 %2405, -949894596
  %2407 = add i32 %2406, 374761393
  %2408 = shl i32 %2406, 5
  %2409 = add i32 %2407, %2408
  %2410 = add i32 %2409, -744332180
  %2411 = shl i32 %2409, 9
  %2412 = xor i32 %2410, %2411
  %2413 = add i32 %2412, -42973499
  %2414 = shl i32 %2412, 3
  %2415 = add i32 %2413, %2414
  %2416 = ashr i32 %2415, 16
  %2417 = xor i32 %2415, %2416
  %2418 = xor i32 %2417, -1252372727
  %2419 = load i32, ptr %1588, align 8
  %2420 = add i32 %2419, -1
  %2421 = and i32 %2420, %2418
  %2422 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2423 = load ptr, ptr %1592, align 8
  %2424 = sext i32 %2421 to i64
  %2425 = shl nsw i64 %2424, 5
  %2426 = getelementptr i8, ptr %2423, i64 %2425
  %2427 = load ptr, ptr %2426, align 8
  %2428 = getelementptr i8, ptr %2426, i64 8
  %2429 = load i160, ptr %2428, align 4
  store ptr %2364, ptr %2426, align 8
  store i64 %2361, ptr %2428, align 4
  %2430 = getelementptr i8, ptr %2426, i64 16
  store i64 %2360, ptr %2430, align 4
  %2431 = getelementptr i8, ptr %2426, i64 24
  store i32 %2365, ptr %2431, align 4
  %2432 = icmp ne ptr %2427, @nil_typ
  %2433 = icmp ne ptr %2427, null
  %2434 = and i1 %2432, %2433
  %2435 = trunc i160 %2429 to i64
  %2436 = lshr i160 %2429, 64
  %2437 = trunc i160 %2436 to i64
  br i1 %2434, label %2438, label %2458

2438:                                             ; preds = %2400, %2380
  %2439 = phi i64 [ %2397, %2380 ], [ %2435, %2400 ]
  %2440 = phi i64 [ %2399, %2380 ], [ %2437, %2400 ]
  %2441 = phi ptr [ %2389, %2380 ], [ %2427, %2400 ]
  %2442 = getelementptr i8, ptr %2441, i64 8
  %2443 = getelementptr i8, ptr %2441, i64 16
  %2444 = getelementptr i8, ptr %2441, i64 40
  %2445 = load i64, ptr %2442, align 4
  %2446 = load i64, ptr %2443, align 4
  %2447 = load ptr, ptr %2444, align 8
  %2448 = mul i64 %2445, 4015701072841558310
  %2449 = lshr i64 %2448, 32
  %2450 = xor i64 %2449, %2448
  %2451 = and i64 %2450, %2446
  %2452 = getelementptr i32, ptr %2447, i64 %2451
  %2453 = load i32, ptr %2452, align 4
  %2454 = xor i1 %2363, true
  %2455 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2456 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2457 = icmp eq i32 %2375, 100
  br i1 %2457, label %2462, label %2359

2458:                                             ; preds = %2400, %2380
  %2459 = load i32, ptr %1593, align 4
  %2460 = add i32 %2459, 1
  %2461 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2460, ptr %1593, align 4
  br label %2462

2462:                                             ; preds = %2458, %2438
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2463

2463:                                             ; preds = %2462, %2330
  %2464 = add nuw nsw i64 %2331, 1
  %2465 = icmp eq i64 %2464, %2193
  br i1 %2465, label %2466, label %2330

2466:                                             ; preds = %2463, %2177
  %2467 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2468 = load i64, ptr %2178, align 4, !noalias !25
  %2469 = load i64, ptr %2179, align 4, !noalias !25
  %2470 = load ptr, ptr %2180, align 8, !noalias !25
  %2471 = mul i64 %2468, 4015701072841558310
  %2472 = lshr i64 %2471, 32
  %2473 = xor i64 %2472, %2471
  %2474 = and i64 %2473, %2469
  %2475 = getelementptr i32, ptr %2470, i64 %2474
  %2476 = load i32, ptr %2475, align 4, !noalias !473
  %2477 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2478 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2479 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2480

2480:                                             ; preds = %2559, %2466
  %2481 = phi i64 [ %2153, %2466 ], [ %2561, %2559 ]
  %2482 = phi i64 [ %2152, %2466 ], [ %2560, %2559 ]
  %2483 = phi i32 [ 0, %2466 ], [ %2496, %2559 ]
  %2484 = phi i1 [ true, %2466 ], [ %2575, %2559 ]
  %2485 = phi ptr [ %2154, %2466 ], [ %2562, %2559 ]
  %2486 = phi i32 [ %2476, %2466 ], [ %2574, %2559 ]
  %2487 = inttoptr i64 %2481 to ptr
  %2488 = inttoptr i64 %2482 to ptr
  %2489 = sext i32 %2486 to i64
  %2490 = getelementptr ptr, ptr %2485, i64 %2489
  %2491 = getelementptr i8, ptr %2490, i64 64
  %2492 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2485, 0
  %2493 = insertvalue { ptr, ptr, ptr, i32 } %2492, ptr %2488, 1
  %2494 = insertvalue { ptr, ptr, ptr, i32 } %2493, ptr %2487, 2
  %2495 = insertvalue { ptr, ptr, ptr, i32 } %2494, i32 %2486, 3
  %2496 = add nuw nsw i32 %2483, 1
  %2497 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2485)
  %2498 = load ptr, ptr %2491, align 8
  %2499 = call align 4 ptr %2498({ ptr, ptr, ptr, i32 } %2495, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2500 = call i32 %2499({ ptr, ptr, ptr, i32 } %2495, { ptr, ptr, ptr, i32 } %2495, ptr nonnull align 8 %1) #28
  br i1 %2484, label %2501, label %2521

2501:                                             ; preds = %2480
  %2502 = load i32, ptr %1588, align 8
  %2503 = add i32 %2502, -1
  %2504 = and i32 %2503, %2500
  %2505 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2506 = load ptr, ptr %1590, align 8
  %2507 = sext i32 %2504 to i64
  %2508 = shl nsw i64 %2507, 5
  %2509 = getelementptr i8, ptr %2506, i64 %2508
  %2510 = load ptr, ptr %2509, align 8
  %2511 = getelementptr i8, ptr %2509, i64 8
  %2512 = load i160, ptr %2511, align 4
  store ptr %2485, ptr %2509, align 8
  store i64 %2482, ptr %2511, align 4
  %2513 = getelementptr i8, ptr %2509, i64 16
  store i64 %2481, ptr %2513, align 4
  %2514 = getelementptr i8, ptr %2509, i64 24
  store i32 %2486, ptr %2514, align 4
  %2515 = icmp ne ptr %2510, @nil_typ
  %2516 = icmp ne ptr %2510, null
  %2517 = and i1 %2515, %2516
  %2518 = trunc i160 %2512 to i64
  %2519 = lshr i160 %2512, 64
  %2520 = trunc i160 %2519 to i64
  br i1 %2517, label %2559, label %2579

2521:                                             ; preds = %2480
  %2522 = add i32 %2500, 2127912214
  %2523 = shl i32 %2500, 12
  %2524 = add i32 %2522, %2523
  %2525 = ashr i32 %2524, 19
  %2526 = xor i32 %2524, %2525
  %2527 = xor i32 %2526, -949894596
  %2528 = add i32 %2527, 374761393
  %2529 = shl i32 %2527, 5
  %2530 = add i32 %2528, %2529
  %2531 = add i32 %2530, -744332180
  %2532 = shl i32 %2530, 9
  %2533 = xor i32 %2531, %2532
  %2534 = add i32 %2533, -42973499
  %2535 = shl i32 %2533, 3
  %2536 = add i32 %2534, %2535
  %2537 = ashr i32 %2536, 16
  %2538 = xor i32 %2536, %2537
  %2539 = xor i32 %2538, -1252372727
  %2540 = load i32, ptr %1588, align 8
  %2541 = add i32 %2540, -1
  %2542 = and i32 %2541, %2539
  %2543 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2544 = load ptr, ptr %1592, align 8
  %2545 = sext i32 %2542 to i64
  %2546 = shl nsw i64 %2545, 5
  %2547 = getelementptr i8, ptr %2544, i64 %2546
  %2548 = load ptr, ptr %2547, align 8
  %2549 = getelementptr i8, ptr %2547, i64 8
  %2550 = load i160, ptr %2549, align 4
  store ptr %2485, ptr %2547, align 8
  store i64 %2482, ptr %2549, align 4
  %2551 = getelementptr i8, ptr %2547, i64 16
  store i64 %2481, ptr %2551, align 4
  %2552 = getelementptr i8, ptr %2547, i64 24
  store i32 %2486, ptr %2552, align 4
  %2553 = icmp ne ptr %2548, @nil_typ
  %2554 = icmp ne ptr %2548, null
  %2555 = and i1 %2553, %2554
  %2556 = trunc i160 %2550 to i64
  %2557 = lshr i160 %2550, 64
  %2558 = trunc i160 %2557 to i64
  br i1 %2555, label %2559, label %2579

2559:                                             ; preds = %2521, %2501
  %2560 = phi i64 [ %2518, %2501 ], [ %2556, %2521 ]
  %2561 = phi i64 [ %2520, %2501 ], [ %2558, %2521 ]
  %2562 = phi ptr [ %2510, %2501 ], [ %2548, %2521 ]
  %2563 = getelementptr i8, ptr %2562, i64 8
  %2564 = getelementptr i8, ptr %2562, i64 16
  %2565 = getelementptr i8, ptr %2562, i64 40
  %2566 = load i64, ptr %2563, align 4
  %2567 = load i64, ptr %2564, align 4
  %2568 = load ptr, ptr %2565, align 8
  %2569 = mul i64 %2566, 4015701072841558310
  %2570 = lshr i64 %2569, 32
  %2571 = xor i64 %2570, %2569
  %2572 = and i64 %2571, %2567
  %2573 = getelementptr i32, ptr %2568, i64 %2572
  %2574 = load i32, ptr %2573, align 4
  %2575 = xor i1 %2484, true
  %2576 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2577 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2578 = icmp eq i32 %2496, 100
  br i1 %2578, label %2583, label %2480

2579:                                             ; preds = %2521, %2501
  %2580 = load i32, ptr %1593, align 4
  %2581 = add i32 %2580, 1
  %2582 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2581, ptr %1593, align 4
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2873

2583:                                             ; preds = %2559
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2584 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2585 = load ptr, ptr %1590, align 8
  %2586 = load ptr, ptr %1592, align 8
  %2587 = load i32, ptr %1588, align 8
  %2588 = shl i32 %2587, 1
  %2589 = call i32 @llvm.smax.i32(i32 %2588, i32 noundef 16) #43
  store i32 %2589, ptr %1588, align 8
  %2590 = zext nneg i32 %2589 to i64
  %2591 = shl nuw nsw i64 %2590, 5
  %2592 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2591, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2592, ptr %1590, align 8
  %2593 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %2591, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %2593, ptr %1592, align 8
  store i32 0, ptr %1593, align 4
  %2594 = icmp sgt i32 %2587, 0
  br i1 %2594, label %2597, label %2595

2595:                                             ; preds = %2583
  %2596 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %2873

2597:                                             ; preds = %2583
  %2598 = zext nneg i32 %2587 to i64
  br label %2599

2599:                                             ; preds = %2732, %2597
  %2600 = phi i64 [ 0, %2597 ], [ %2733, %2732 ]
  %2601 = shl nuw nsw i64 %2600, 5
  %2602 = getelementptr i8, ptr %2585, i64 %2601
  %2603 = load ptr, ptr %2602, align 8
  %2604 = icmp ne ptr %2603, @nil_typ
  %2605 = icmp ne ptr %2603, null
  %2606 = and i1 %2604, %2605
  br i1 %2606, label %2607, label %2732

2607:                                             ; preds = %2599
  %2608 = getelementptr i8, ptr %2602, i64 8
  %2609 = load i64, ptr %2608, align 4
  %2610 = getelementptr i8, ptr %2602, i64 16
  %2611 = load i64, ptr %2610, align 4
  %2612 = getelementptr i8, ptr %2603, i64 8
  %2613 = getelementptr i8, ptr %2603, i64 16
  %2614 = getelementptr i8, ptr %2603, i64 40
  %2615 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2616 = load i64, ptr %2612, align 4, !noalias !25
  %2617 = load i64, ptr %2613, align 4, !noalias !25
  %2618 = load ptr, ptr %2614, align 8, !noalias !25
  %2619 = mul i64 %2616, 4015701072841558310
  %2620 = lshr i64 %2619, 32
  %2621 = xor i64 %2620, %2619
  %2622 = and i64 %2621, %2617
  %2623 = getelementptr i32, ptr %2618, i64 %2622
  %2624 = load i32, ptr %2623, align 4, !noalias !476
  %2625 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2626 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2627 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2628

2628:                                             ; preds = %2707, %2607
  %2629 = phi i64 [ %2611, %2607 ], [ %2709, %2707 ]
  %2630 = phi i64 [ %2609, %2607 ], [ %2708, %2707 ]
  %2631 = phi i32 [ 0, %2607 ], [ %2644, %2707 ]
  %2632 = phi i1 [ true, %2607 ], [ %2723, %2707 ]
  %2633 = phi ptr [ %2603, %2607 ], [ %2710, %2707 ]
  %2634 = phi i32 [ %2624, %2607 ], [ %2722, %2707 ]
  %2635 = inttoptr i64 %2629 to ptr
  %2636 = inttoptr i64 %2630 to ptr
  %2637 = sext i32 %2634 to i64
  %2638 = getelementptr ptr, ptr %2633, i64 %2637
  %2639 = getelementptr i8, ptr %2638, i64 64
  %2640 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2633, 0
  %2641 = insertvalue { ptr, ptr, ptr, i32 } %2640, ptr %2636, 1
  %2642 = insertvalue { ptr, ptr, ptr, i32 } %2641, ptr %2635, 2
  %2643 = insertvalue { ptr, ptr, ptr, i32 } %2642, i32 %2634, 3
  %2644 = add nuw nsw i32 %2631, 1
  %2645 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2633)
  %2646 = load ptr, ptr %2639, align 8
  %2647 = call align 4 ptr %2646({ ptr, ptr, ptr, i32 } %2643, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2648 = call i32 %2647({ ptr, ptr, ptr, i32 } %2643, { ptr, ptr, ptr, i32 } %2643, ptr nonnull align 8 %1) #28
  br i1 %2632, label %2649, label %2669

2649:                                             ; preds = %2628
  %2650 = load i32, ptr %1588, align 8
  %2651 = add i32 %2650, -1
  %2652 = and i32 %2651, %2648
  %2653 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2654 = load ptr, ptr %1590, align 8
  %2655 = sext i32 %2652 to i64
  %2656 = shl nsw i64 %2655, 5
  %2657 = getelementptr i8, ptr %2654, i64 %2656
  %2658 = load ptr, ptr %2657, align 8
  %2659 = getelementptr i8, ptr %2657, i64 8
  %2660 = load i160, ptr %2659, align 4
  store ptr %2633, ptr %2657, align 8
  store i64 %2630, ptr %2659, align 4
  %2661 = getelementptr i8, ptr %2657, i64 16
  store i64 %2629, ptr %2661, align 4
  %2662 = getelementptr i8, ptr %2657, i64 24
  store i32 %2634, ptr %2662, align 4
  %2663 = icmp ne ptr %2658, @nil_typ
  %2664 = icmp ne ptr %2658, null
  %2665 = and i1 %2663, %2664
  %2666 = trunc i160 %2660 to i64
  %2667 = lshr i160 %2660, 64
  %2668 = trunc i160 %2667 to i64
  br i1 %2665, label %2707, label %2727

2669:                                             ; preds = %2628
  %2670 = add i32 %2648, 2127912214
  %2671 = shl i32 %2648, 12
  %2672 = add i32 %2670, %2671
  %2673 = ashr i32 %2672, 19
  %2674 = xor i32 %2672, %2673
  %2675 = xor i32 %2674, -949894596
  %2676 = add i32 %2675, 374761393
  %2677 = shl i32 %2675, 5
  %2678 = add i32 %2676, %2677
  %2679 = add i32 %2678, -744332180
  %2680 = shl i32 %2678, 9
  %2681 = xor i32 %2679, %2680
  %2682 = add i32 %2681, -42973499
  %2683 = shl i32 %2681, 3
  %2684 = add i32 %2682, %2683
  %2685 = ashr i32 %2684, 16
  %2686 = xor i32 %2684, %2685
  %2687 = xor i32 %2686, -1252372727
  %2688 = load i32, ptr %1588, align 8
  %2689 = add i32 %2688, -1
  %2690 = and i32 %2689, %2687
  %2691 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2692 = load ptr, ptr %1592, align 8
  %2693 = sext i32 %2690 to i64
  %2694 = shl nsw i64 %2693, 5
  %2695 = getelementptr i8, ptr %2692, i64 %2694
  %2696 = load ptr, ptr %2695, align 8
  %2697 = getelementptr i8, ptr %2695, i64 8
  %2698 = load i160, ptr %2697, align 4
  store ptr %2633, ptr %2695, align 8
  store i64 %2630, ptr %2697, align 4
  %2699 = getelementptr i8, ptr %2695, i64 16
  store i64 %2629, ptr %2699, align 4
  %2700 = getelementptr i8, ptr %2695, i64 24
  store i32 %2634, ptr %2700, align 4
  %2701 = icmp ne ptr %2696, @nil_typ
  %2702 = icmp ne ptr %2696, null
  %2703 = and i1 %2701, %2702
  %2704 = trunc i160 %2698 to i64
  %2705 = lshr i160 %2698, 64
  %2706 = trunc i160 %2705 to i64
  br i1 %2703, label %2707, label %2727

2707:                                             ; preds = %2669, %2649
  %2708 = phi i64 [ %2666, %2649 ], [ %2704, %2669 ]
  %2709 = phi i64 [ %2668, %2649 ], [ %2706, %2669 ]
  %2710 = phi ptr [ %2658, %2649 ], [ %2696, %2669 ]
  %2711 = getelementptr i8, ptr %2710, i64 8
  %2712 = getelementptr i8, ptr %2710, i64 16
  %2713 = getelementptr i8, ptr %2710, i64 40
  %2714 = load i64, ptr %2711, align 4
  %2715 = load i64, ptr %2712, align 4
  %2716 = load ptr, ptr %2713, align 8
  %2717 = mul i64 %2714, 4015701072841558310
  %2718 = lshr i64 %2717, 32
  %2719 = xor i64 %2718, %2717
  %2720 = and i64 %2719, %2715
  %2721 = getelementptr i32, ptr %2716, i64 %2720
  %2722 = load i32, ptr %2721, align 4
  %2723 = xor i1 %2632, true
  %2724 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2725 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2726 = icmp eq i32 %2644, 100
  br i1 %2726, label %2731, label %2628

2727:                                             ; preds = %2669, %2649
  %2728 = load i32, ptr %1593, align 4
  %2729 = add i32 %2728, 1
  %2730 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2729, ptr %1593, align 4
  br label %2731

2731:                                             ; preds = %2727, %2707
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2732

2732:                                             ; preds = %2731, %2599
  %2733 = add nuw nsw i64 %2600, 1
  %2734 = icmp eq i64 %2733, %2598
  br i1 %2734, label %2735, label %2599

2735:                                             ; preds = %2732
  %2736 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  br label %2737

2737:                                             ; preds = %2870, %2735
  %2738 = phi i64 [ 0, %2735 ], [ %2871, %2870 ]
  %2739 = shl nuw nsw i64 %2738, 5
  %2740 = getelementptr i8, ptr %2586, i64 %2739
  %2741 = load ptr, ptr %2740, align 8
  %2742 = icmp ne ptr %2741, @nil_typ
  %2743 = icmp ne ptr %2741, null
  %2744 = and i1 %2742, %2743
  br i1 %2744, label %2745, label %2870

2745:                                             ; preds = %2737
  %2746 = getelementptr i8, ptr %2740, i64 8
  %2747 = load i64, ptr %2746, align 4
  %2748 = getelementptr i8, ptr %2740, i64 16
  %2749 = load i64, ptr %2748, align 4
  %2750 = getelementptr i8, ptr %2741, i64 8
  %2751 = getelementptr i8, ptr %2741, i64 16
  %2752 = getelementptr i8, ptr %2741, i64 40
  %2753 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2754 = load i64, ptr %2750, align 4, !noalias !25
  %2755 = load i64, ptr %2751, align 4, !noalias !25
  %2756 = load ptr, ptr %2752, align 8, !noalias !25
  %2757 = mul i64 %2754, 4015701072841558310
  %2758 = lshr i64 %2757, 32
  %2759 = xor i64 %2758, %2757
  %2760 = and i64 %2759, %2755
  %2761 = getelementptr i32, ptr %2756, i64 %2760
  %2762 = load i32, ptr %2761, align 4, !noalias !479
  %2763 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2764 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2765 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2766

2766:                                             ; preds = %2845, %2745
  %2767 = phi i64 [ %2749, %2745 ], [ %2847, %2845 ]
  %2768 = phi i64 [ %2747, %2745 ], [ %2846, %2845 ]
  %2769 = phi i32 [ 0, %2745 ], [ %2782, %2845 ]
  %2770 = phi i1 [ true, %2745 ], [ %2861, %2845 ]
  %2771 = phi ptr [ %2741, %2745 ], [ %2848, %2845 ]
  %2772 = phi i32 [ %2762, %2745 ], [ %2860, %2845 ]
  %2773 = inttoptr i64 %2767 to ptr
  %2774 = inttoptr i64 %2768 to ptr
  %2775 = sext i32 %2772 to i64
  %2776 = getelementptr ptr, ptr %2771, i64 %2775
  %2777 = getelementptr i8, ptr %2776, i64 64
  %2778 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2771, 0
  %2779 = insertvalue { ptr, ptr, ptr, i32 } %2778, ptr %2774, 1
  %2780 = insertvalue { ptr, ptr, ptr, i32 } %2779, ptr %2773, 2
  %2781 = insertvalue { ptr, ptr, ptr, i32 } %2780, i32 %2772, 3
  %2782 = add nuw nsw i32 %2769, 1
  %2783 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %2771)
  %2784 = load ptr, ptr %2777, align 8
  %2785 = call align 4 ptr %2784({ ptr, ptr, ptr, i32 } %2781, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2786 = call i32 %2785({ ptr, ptr, ptr, i32 } %2781, { ptr, ptr, ptr, i32 } %2781, ptr nonnull align 8 %1) #28
  br i1 %2770, label %2787, label %2807

2787:                                             ; preds = %2766
  %2788 = load i32, ptr %1588, align 8
  %2789 = add i32 %2788, -1
  %2790 = and i32 %2789, %2786
  %2791 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2792 = load ptr, ptr %1590, align 8
  %2793 = sext i32 %2790 to i64
  %2794 = shl nsw i64 %2793, 5
  %2795 = getelementptr i8, ptr %2792, i64 %2794
  %2796 = load ptr, ptr %2795, align 8
  %2797 = getelementptr i8, ptr %2795, i64 8
  %2798 = load i160, ptr %2797, align 4
  store ptr %2771, ptr %2795, align 8
  store i64 %2768, ptr %2797, align 4
  %2799 = getelementptr i8, ptr %2795, i64 16
  store i64 %2767, ptr %2799, align 4
  %2800 = getelementptr i8, ptr %2795, i64 24
  store i32 %2772, ptr %2800, align 4
  %2801 = icmp ne ptr %2796, @nil_typ
  %2802 = icmp ne ptr %2796, null
  %2803 = and i1 %2801, %2802
  %2804 = trunc i160 %2798 to i64
  %2805 = lshr i160 %2798, 64
  %2806 = trunc i160 %2805 to i64
  br i1 %2803, label %2845, label %2865

2807:                                             ; preds = %2766
  %2808 = add i32 %2786, 2127912214
  %2809 = shl i32 %2786, 12
  %2810 = add i32 %2808, %2809
  %2811 = ashr i32 %2810, 19
  %2812 = xor i32 %2810, %2811
  %2813 = xor i32 %2812, -949894596
  %2814 = add i32 %2813, 374761393
  %2815 = shl i32 %2813, 5
  %2816 = add i32 %2814, %2815
  %2817 = add i32 %2816, -744332180
  %2818 = shl i32 %2816, 9
  %2819 = xor i32 %2817, %2818
  %2820 = add i32 %2819, -42973499
  %2821 = shl i32 %2819, 3
  %2822 = add i32 %2820, %2821
  %2823 = ashr i32 %2822, 16
  %2824 = xor i32 %2822, %2823
  %2825 = xor i32 %2824, -1252372727
  %2826 = load i32, ptr %1588, align 8
  %2827 = add i32 %2826, -1
  %2828 = and i32 %2827, %2825
  %2829 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2830 = load ptr, ptr %1592, align 8
  %2831 = sext i32 %2828 to i64
  %2832 = shl nsw i64 %2831, 5
  %2833 = getelementptr i8, ptr %2830, i64 %2832
  %2834 = load ptr, ptr %2833, align 8
  %2835 = getelementptr i8, ptr %2833, i64 8
  %2836 = load i160, ptr %2835, align 4
  store ptr %2771, ptr %2833, align 8
  store i64 %2768, ptr %2835, align 4
  %2837 = getelementptr i8, ptr %2833, i64 16
  store i64 %2767, ptr %2837, align 4
  %2838 = getelementptr i8, ptr %2833, i64 24
  store i32 %2772, ptr %2838, align 4
  %2839 = icmp ne ptr %2834, @nil_typ
  %2840 = icmp ne ptr %2834, null
  %2841 = and i1 %2839, %2840
  %2842 = trunc i160 %2836 to i64
  %2843 = lshr i160 %2836, 64
  %2844 = trunc i160 %2843 to i64
  br i1 %2841, label %2845, label %2865

2845:                                             ; preds = %2807, %2787
  %2846 = phi i64 [ %2804, %2787 ], [ %2842, %2807 ]
  %2847 = phi i64 [ %2806, %2787 ], [ %2844, %2807 ]
  %2848 = phi ptr [ %2796, %2787 ], [ %2834, %2807 ]
  %2849 = getelementptr i8, ptr %2848, i64 8
  %2850 = getelementptr i8, ptr %2848, i64 16
  %2851 = getelementptr i8, ptr %2848, i64 40
  %2852 = load i64, ptr %2849, align 4
  %2853 = load i64, ptr %2850, align 4
  %2854 = load ptr, ptr %2851, align 8
  %2855 = mul i64 %2852, 4015701072841558310
  %2856 = lshr i64 %2855, 32
  %2857 = xor i64 %2856, %2855
  %2858 = and i64 %2857, %2853
  %2859 = getelementptr i32, ptr %2854, i64 %2858
  %2860 = load i32, ptr %2859, align 4
  %2861 = xor i1 %2770, true
  %2862 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %2863 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %2864 = icmp eq i32 %2782, 100
  br i1 %2864, label %2869, label %2766

2865:                                             ; preds = %2807, %2787
  %2866 = load i32, ptr %1593, align 4
  %2867 = add i32 %2866, 1
  %2868 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  store i32 %2867, ptr %1593, align 4
  br label %2869

2869:                                             ; preds = %2865, %2845
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2870

2870:                                             ; preds = %2869, %2737
  %2871 = add nuw nsw i64 %2738, 1
  %2872 = icmp eq i64 %2871, %2598
  br i1 %2872, label %2873, label %2737

2873:                                             ; preds = %2870, %2595, %2579, %2173, %1814, %1659
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2874 = icmp eq i64 %1599, 1000000
  br i1 %2874, label %2875, label %1597

2875:                                             ; preds = %2873
  %2876 = call i64 @clock()
  br label %2877

2877:                                             ; preds = %3068, %2875
  %2878 = phi i32 [ 0, %2875 ], [ %3071, %3068 ]
  %2879 = phi i64 [ 0, %2875 ], [ %3070, %3068 ]
  %2880 = phi i1 [ true, %2875 ], [ %3069, %3068 ]
  %2881 = zext nneg i32 %2878 to i160
  %2882 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %2881, 1
  %2883 = load ptr, ptr %1586, align 8
  %2884 = call i32 %2883({ ptr, i160 } %2882) #28
  %2885 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %2886 = load i32, ptr %1588, align 8
  %2887 = add i32 %2886, -1
  %2888 = and i32 %2887, %2884
  %2889 = load ptr, ptr %1590, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2890 = sext i32 %2888 to i64
  %2891 = shl nsw i64 %2890, 5
  %2892 = getelementptr i8, ptr %2889, i64 %2891
  %2893 = load ptr, ptr %2892, align 8
  %2894 = icmp ne ptr %2893, @nil_typ
  %2895 = icmp ne ptr %2893, null
  %2896 = and i1 %2894, %2895
  br i1 %2896, label %2897, label %2939

2897:                                             ; preds = %2877
  %2898 = getelementptr i8, ptr %2892, i64 8
  %2899 = load i64, ptr %2898, align 4
  %2900 = getelementptr i8, ptr %2892, i64 16
  %2901 = load i64, ptr %2900, align 4
  %2902 = inttoptr i64 %2899 to ptr
  %2903 = inttoptr i64 %2901 to ptr
  %2904 = getelementptr i8, ptr %2893, i64 8
  %2905 = getelementptr i8, ptr %2893, i64 16
  %2906 = getelementptr i8, ptr %2893, i64 40
  %2907 = load i64, ptr %2904, align 4, !noalias !482
  %2908 = load i64, ptr %2905, align 4, !noalias !482
  %2909 = load ptr, ptr %2906, align 8, !noalias !482
  %2910 = mul i64 %2907, 4015701072841558310
  %2911 = lshr i64 %2910, 32
  %2912 = xor i64 %2911, %2910
  %2913 = and i64 %2912, %2908
  %2914 = getelementptr i32, ptr %2909, i64 %2913
  %2915 = load i32, ptr %2914, align 4, !noalias !482
  %2916 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2893, 0
  %2917 = insertvalue { ptr, ptr, ptr, i32 } %2916, ptr %2902, 1
  %2918 = insertvalue { ptr, ptr, ptr, i32 } %2917, ptr %2903, 2
  %2919 = insertvalue { ptr, ptr, ptr, i32 } %2918, i32 %2915, 3
  %2920 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %2921 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2893) #43
  %2922 = sext i32 %2915 to i64
  %2923 = getelementptr ptr, ptr %2893, i64 %2922
  %2924 = getelementptr i8, ptr %2923, i64 64
  %2925 = load ptr, ptr %2924, align 8
  %2926 = call align 4 ptr %2925({ ptr, ptr, ptr, i32 } %2919, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2927 = call i32 %2926({ ptr, ptr, ptr, i32 } %2919, { ptr, ptr, ptr, i32 } %2919, ptr nonnull align 8 %1) #28
  %2928 = icmp eq i32 %2927, %2884
  br i1 %2928, label %2929, label %2939

2929:                                             ; preds = %2897
  %2930 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2931 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2893)
  %2932 = getelementptr i8, ptr %2923, i64 48
  %2933 = load ptr, ptr %2932, align 8
  %2934 = call align 4 ptr %2933({ ptr, ptr, ptr, i32 } %2919, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2935 = call { ptr, i160 } %2934({ ptr, ptr, ptr, i32 } %2919, { ptr, ptr, ptr, i32 } %2919, ptr nonnull align 8 %1) #28
  %2936 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2937 = load ptr, ptr %1587, align 8
  %2938 = call i1 %2937({ ptr, i160 } %2935, { ptr, i160 } %2882) #28
  br i1 %2938, label %2940, label %2939

2939:                                             ; preds = %2929, %2897, %2877
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  br label %2952

2940:                                             ; preds = %2929
  %2941 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2942 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2893)
  %2943 = getelementptr i8, ptr %2923, i64 56
  %2944 = load ptr, ptr %2943, align 8
  %2945 = call align 4 ptr %2944({ ptr, ptr, ptr, i32 } %2919, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %2946 = call { ptr, i160 } %2945({ ptr, ptr, ptr, i32 } %2919, { ptr, ptr, ptr, i32 } %2919, ptr nonnull align 8 %1) #28
  %2947 = extractvalue { ptr, i160 } %2946, 0
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2948 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2949 = icmp ne ptr %2947, @nil_typ
  %2950 = icmp ne ptr %2947, null
  %2951 = and i1 %2949, %2950
  br i1 %2951, label %3045, label %2952

2952:                                             ; preds = %2940, %2939
  %2953 = add i32 %2884, 2127912214
  %2954 = shl i32 %2884, 12
  %2955 = add i32 %2953, %2954
  %2956 = ashr i32 %2955, 19
  %2957 = xor i32 %2955, %2956
  %2958 = xor i32 %2957, -949894596
  %2959 = add i32 %2958, 374761393
  %2960 = shl i32 %2958, 5
  %2961 = add i32 %2959, %2960
  %2962 = add i32 %2961, -744332180
  %2963 = shl i32 %2961, 9
  %2964 = xor i32 %2962, %2963
  %2965 = add i32 %2964, -42973499
  %2966 = shl i32 %2964, 3
  %2967 = add i32 %2965, %2966
  %2968 = ashr i32 %2967, 16
  %2969 = xor i32 %2967, %2968
  %2970 = xor i32 %2969, -1252372727
  %2971 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %2972 = load i32, ptr %1588, align 8
  %2973 = add i32 %2972, -1
  %2974 = and i32 %2973, %2970
  %2975 = load ptr, ptr %1592, align 8
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %2976 = sext i32 %2974 to i64
  %2977 = shl nsw i64 %2976, 5
  %2978 = getelementptr i8, ptr %2975, i64 %2977
  %2979 = load ptr, ptr %2978, align 8
  %2980 = icmp ne ptr %2979, @nil_typ
  %2981 = icmp ne ptr %2979, null
  %2982 = and i1 %2980, %2981
  br i1 %2982, label %2983, label %3034

2983:                                             ; preds = %2952
  %2984 = getelementptr i8, ptr %2978, i64 8
  %2985 = load i64, ptr %2984, align 4
  %2986 = getelementptr i8, ptr %2978, i64 16
  %2987 = load i64, ptr %2986, align 4
  %2988 = inttoptr i64 %2985 to ptr
  %2989 = inttoptr i64 %2987 to ptr
  %2990 = getelementptr i8, ptr %2979, i64 8
  %2991 = getelementptr i8, ptr %2979, i64 16
  %2992 = getelementptr i8, ptr %2979, i64 40
  %2993 = load i64, ptr %2990, align 4, !noalias !485
  %2994 = load i64, ptr %2991, align 4, !noalias !485
  %2995 = load ptr, ptr %2992, align 8, !noalias !485
  %2996 = mul i64 %2993, 4015701072841558310
  %2997 = lshr i64 %2996, 32
  %2998 = xor i64 %2997, %2996
  %2999 = and i64 %2998, %2994
  %3000 = getelementptr i32, ptr %2995, i64 %2999
  %3001 = load i32, ptr %3000, align 4, !noalias !485
  %3002 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2979, 0
  %3003 = insertvalue { ptr, ptr, ptr, i32 } %3002, ptr %2988, 1
  %3004 = insertvalue { ptr, ptr, ptr, i32 } %3003, ptr %2989, 2
  %3005 = insertvalue { ptr, ptr, ptr, i32 } %3004, i32 %3001, 3
  %3006 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %3007 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2979) #43
  %3008 = sext i32 %3001 to i64
  %3009 = getelementptr ptr, ptr %2979, i64 %3008
  %3010 = getelementptr i8, ptr %3009, i64 64
  %3011 = load ptr, ptr %3010, align 8
  %3012 = call align 4 ptr %3011({ ptr, ptr, ptr, i32 } %3005, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %3013 = call i32 %3012({ ptr, ptr, ptr, i32 } %3005, { ptr, ptr, ptr, i32 } %3005, ptr nonnull align 8 %1) #28
  %3014 = icmp eq i32 %3013, %2884
  br i1 %3014, label %3015, label %3034

3015:                                             ; preds = %2983
  %3016 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3017 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2979)
  %3018 = getelementptr i8, ptr %3009, i64 48
  %3019 = load ptr, ptr %3018, align 8
  %3020 = call align 4 ptr %3019({ ptr, ptr, ptr, i32 } %3005, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %3021 = call { ptr, i160 } %3020({ ptr, ptr, ptr, i32 } %3005, { ptr, ptr, ptr, i32 } %3005, ptr nonnull align 8 %1) #28
  %3022 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3023 = load ptr, ptr %1587, align 8
  %3024 = call i1 %3023({ ptr, i160 } %3021, { ptr, i160 } %2882) #28
  br i1 %3024, label %3025, label %3034

3025:                                             ; preds = %3015
  %3026 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3027 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %2979)
  %3028 = getelementptr i8, ptr %3009, i64 56
  %3029 = load ptr, ptr %3028, align 8
  %3030 = call align 4 ptr %3029({ ptr, ptr, ptr, i32 } %3005, ptr nocapture nofree noundef nonnull readonly align 8 %1) #10
  %3031 = call { ptr, i160 } %3030({ ptr, ptr, ptr, i32 } %3005, { ptr, ptr, ptr, i32 } %3005, ptr nonnull align 8 %1) #28
  %3032 = extractvalue { ptr, i160 } %3031, 0
  %3033 = extractvalue { ptr, i160 } %3031, 1
  br label %3034

3034:                                             ; preds = %3025, %3015, %2983, %2952
  %3035 = phi i160 [ %3033, %3025 ], [ poison, %3015 ], [ poison, %2952 ], [ poison, %2983 ]
  %3036 = phi ptr [ %3032, %3025 ], [ @nil_typ, %3015 ], [ @nil_typ, %2952 ], [ @nil_typ, %2983 ]
  %3037 = insertvalue { ptr, i160 } poison, ptr %3036, 0
  %3038 = insertvalue { ptr, i160 } %3037, i160 %3035, 1
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3039 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap)
  %3040 = icmp ne ptr %3036, @nil_typ
  %3041 = icmp ne ptr %3036, null
  %3042 = and i1 %3040, %3041
  %3043 = freeze i1 %3042
  %3044 = select i1 %3043, ptr %3036, ptr @nil_typ
  br label %3045

3045:                                             ; preds = %3034, %2940
  %3046 = phi { ptr, i160 } [ %2946, %2940 ], [ %3038, %3034 ]
  %3047 = phi ptr [ %2947, %2940 ], [ %3044, %3034 ]
  %3048 = icmp ne ptr %3047, @nil_typ
  %3049 = icmp ne ptr %3047, null
  %3050 = and i1 %3048, %3049
  br i1 %3050, label %3051, label %3057

3051:                                             ; preds = %3045
  %3052 = extractvalue { ptr, i160 } %3046, 1
  %3053 = trunc i160 %3052 to i64
  %3054 = shl i64 %3053, 32
  %3055 = ashr exact i64 %3054, 32
  %3056 = add i64 %3055, %2879
  br label %3068

3057:                                             ; preds = %3045
  %3058 = call noalias align 64 dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %3059 = load <55 x i8>, ptr @rwhsb_Error_Nil_returned_during_sequential_hit_test_for_key_, align 64
  store <55 x i8> %3059, ptr %3058, align 64
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3060 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %3061 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %3062 = call noalias align 4 dereferenceable_or_null(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(56) %3062, ptr nocapture nofree noundef nonnull readonly align 64 dereferenceable(56) %3058, i64 noundef 55, i1 noundef false)
  %3063 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3064 = getelementptr i8, ptr %3062, i64 55
  store i8 0, ptr %3064, align 1
  %3065 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(56) %3062) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3066 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  %3067 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %2878) #25
  br label %3068

3068:                                             ; preds = %3057, %3051
  %3069 = phi i1 [ %2880, %3051 ], [ false, %3057 ]
  %3070 = phi i64 [ %3056, %3051 ], [ %2879, %3057 ]
  %3071 = add nuw nsw i32 %2878, 1
  %3072 = icmp eq i32 %3071, 1000000
  br i1 %3072, label %3073, label %2877

3073:                                             ; preds = %3068
  %3074 = call i64 @clock()
  %3075 = call noalias align 32 dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <18 x i8> <i8 71, i8 101, i8 116, i8 32, i8 83, i8 101, i8 113, i8 117, i8 101, i8 110, i8 116, i8 105, i8 97, i8 108, i8 32, i8 72, i8 105, i8 116>, ptr %3075, align 32
  %3076 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3077 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %3078 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %3079 = call noalias align 4 dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(19) %3079, ptr nocapture nofree noundef nonnull readonly align 32 dereferenceable(19) %3075, i64 noundef 18, i1 noundef false)
  %3080 = sub i64 %3074, %2876
  %3081 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3082 = getelementptr i8, ptr %3079, i64 18
  store i8 0, ptr %3082, align 2
  %3083 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %3079) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3084 = call noalias align 16 dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 79, i8 112, i8 101, i8 114, i8 97, i8 116, i8 105, i8 111, i8 110, i8 115, i8 58, i8 32>, ptr %3084, align 16
  %3085 = call noalias align 4 dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3085, ptr nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3084, i64 noundef 14, i1 noundef false)
  %3086 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3085) #28
  %3087 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 noundef 1000000) #25
  %3088 = call noalias align 16 dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <14 x i8> <i8 32, i8 32, i8 84, i8 111, i8 116, i8 97, i8 108, i8 32, i8 84, i8 105, i8 109, i8 101, i8 58, i8 32>, ptr %3088, align 16
  %3089 = call noalias align 4 dereferenceable_or_null(15) ptr @bump_malloc_inner(i64 noundef 15, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(15) %3089, ptr nocapture nofree noundef nonnull readonly align 16 dereferenceable(15) %3088, i64 noundef 14, i1 noundef false)
  %3090 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(15) %3089) #28
  %3091 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3080) #25
  %3092 = call noalias align 4 dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 109, i8 115>, ptr %3092, align 4
  %3093 = call noalias align 4 dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3093, ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3092, i64 noundef 3, i1 noundef false)
  %3094 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3093) #28
  %3095 = icmp sgt i64 %3080, 0
  br i1 %3095, label %3096, label %3099

3096:                                             ; preds = %3073
  %3097 = mul i64 %3080, 1000000
  %3098 = sdiv i64 %3097, 1000000
  br label %3099

3099:                                             ; preds = %3096, %3073
  %3100 = phi i64 [ %3098, %3096 ], [ 0, %3073 ]
  %3101 = call noalias align 16 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <15 x i8> <i8 32, i8 32, i8 84, i8 105, i8 109, i8 101, i8 47, i8 79, i8 112, i8 58, i8 32, i8 32, i8 32, i8 32, i8 126>, ptr %3101, align 16
  %3102 = call noalias align 4 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(16) %3102, ptr nocapture nofree noundef nonnull readonly align 16 dereferenceable(16) %3101, i64 noundef 15, i1 noundef false)
  %3103 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(16) %3102) #28
  %3104 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %3100) #25
  %3105 = call noalias align 4 dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <3 x i8> <i8 32, i8 110, i8 115>, ptr %3105, align 4
  %3106 = call noalias align 4 dereferenceable_or_null(4) ptr @bump_malloc_inner(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %3106, ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3105, i64 noundef 3, i1 noundef false)
  %3107 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3106) #28
  %3108 = icmp eq i64 %3070, 500000500000
  %3109 = call noalias align 32 dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <18 x i8> <i8 32, i8 32, i8 32, i8 32, i8 86, i8 101, i8 114, i8 105, i8 102, i8 105, i8 99, i8 97, i8 116, i8 105, i8 111, i8 110, i8 58, i8 32>, ptr %3109, align 32
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3110 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %3111 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %3112 = call noalias align 4 dereferenceable_or_null(19) ptr @bump_malloc_inner(i64 noundef 19, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(19) %3112, ptr nocapture nofree noundef nonnull readonly align 32 dereferenceable(19) %3109, i64 noundef 18, i1 noundef false)
  %3113 = select i1 %3108, i1 %3069, i1 false
  %3114 = getelementptr i8, ptr %3112, i64 18
  store i8 0, ptr %3114, align 2
  %3115 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(19) %3112) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3116 = select i1 %3113, <4 x i8> <i8 80, i8 65, i8 83, i8 83>, <4 x i8> <i8 70, i8 65, i8 73, i8 76>
  %3117 = select i1 %3113, ptr %4, ptr %8
  %3118 = select i1 %3113, ptr %5, ptr %9
  %3119 = select i1 %3113, ptr %6, ptr %10
  %3120 = select i1 %3113, ptr %7, ptr %11
  store ptr @_parameterization_Bufferi8, ptr %3117, align 8
  %3121 = select i1 %3113, ptr %4, ptr %8
  %3122 = getelementptr inbounds i8, ptr %3121, i64 8
  store ptr @_parameterization_i32, ptr %3122, align 8
  %3123 = select i1 %3113, ptr %4, ptr %8
  %3124 = getelementptr inbounds i8, ptr %3123, i64 16
  store ptr @_parameterization_i32, ptr %3124, align 8
  %3125 = call ptr @llvm.invariant.start.p0(i64 noundef 9, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %3117)
  store ptr @buffer_typ, ptr %3118, align 8
  %3126 = select i1 %3113, ptr %5, ptr %9
  %3127 = getelementptr inbounds i8, ptr %3126, i64 8
  store ptr @i32_typ, ptr %3127, align 8
  %3128 = select i1 %3113, ptr %5, ptr %9
  %3129 = getelementptr inbounds i8, ptr %3128, i64 16
  store ptr @i32_typ, ptr %3129, align 8
  %3130 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(24) %3118) #43
  store ptr @_parameterization_String, ptr %3119, align 8
  %3131 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %3119)
  %3132 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  store ptr @String, ptr %3120, align 8
  %3133 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %3120) #43
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3134 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %3135 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %3136 = call noalias align 4 dereferenceable_or_null(5) ptr @bump_malloc_inner(i64 noundef 5, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <4 x i8> %3116, ptr %3136, align 4
  %3137 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3138 = getelementptr i8, ptr %3136, i64 4
  store i8 0, ptr %3138, align 4
  %3139 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %3136) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %10)
  call void @llvm.lifetime.end.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  call void @benchmark_get_random_hit(i32 noundef 1000000)
  call void @benchmark_get_random_miss(i32 noundef 1000000)
  call void @benchmark_remove_random(i32 noundef 1000000)
  %3140 = call noalias align 32 dereferenceable_or_null(28) ptr @bump_malloc_inner(i64 noundef 28, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <27 x i8> <i8 45, i8 45, i8 45, i8 32, i8 66, i8 101, i8 110, i8 99, i8 104, i8 109, i8 97, i8 114, i8 107, i8 115, i8 32, i8 67, i8 111, i8 109, i8 112, i8 108, i8 101, i8 116, i8 101, i8 32, i8 45, i8 45, i8 45>, ptr %3140, align 32
  %3141 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @IO)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  %3142 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1) #43
  %3143 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %1) #43
  %3144 = call noalias align 4 dereferenceable_or_null(28) ptr @bump_malloc_inner(i64 noundef 28, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.p0.p0.i64(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(28) %3144, ptr nocapture nofree noundef nonnull readonly align 32 dereferenceable(28) %3140, i64 noundef 27, i1 noundef false)
  %3145 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %3146 = getelementptr i8, ptr %3144, i64 27
  store i8 0, ptr %3146, align 1
  %3147 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(28) %3144) #28
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %1)
  ret i32 0
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_function_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_function_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(8) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i64, ptr %0, align 1
  %4 = zext i64 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @function_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_function_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(8) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i64
  store i64 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_any_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Object(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_bool_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_bool_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i8, ptr %0, align 1
  %4 = zext i8 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_bool_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(1) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i8
  store i8 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_IO(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @IO_B__Self_print_xi1__Self_print_xNil__Self_print_xCharacter__Self_print_xi32__Self_print_xRepresentable__Self_print_xString__Self_print_xf64__Self_print_xi64__Self_print_xi8(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #32 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #43
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @f64_typ
  br i1 %4, label %34, label %5

5:                                                ; preds = %1
  %6 = icmp eq ptr %3, @i32_typ
  br i1 %6, label %34, label %7

7:                                                ; preds = %5
  %8 = getelementptr i8, ptr %3, i64 8
  %9 = getelementptr i8, ptr %3, i64 16
  %10 = getelementptr i8, ptr %3, i64 24
  %11 = getelementptr i8, ptr %3, i64 32
  %12 = load i64, ptr %8, align 4
  %13 = load i64, ptr %9, align 4
  %14 = load ptr, ptr %10, align 8
  %15 = load ptr, ptr %11, align 8
  %16 = call i1 %14(i64 %13, i64 %12, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr readonly %15) #2
  br i1 %16, label %17, label %19

17:                                               ; preds = %7
  %18 = call i1 %14(i64 %13, i64 %12, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %15) #2
  br i1 %18, label %19, label %34

19:                                               ; preds = %17, %7
  %20 = icmp eq ptr %3, @bool_typ
  br i1 %20, label %34, label %21

21:                                               ; preds = %19
  %22 = icmp eq ptr %3, @i8_typ
  br i1 %22, label %34, label %23

23:                                               ; preds = %21
  %24 = call i1 %14(i64 %13, i64 %12, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr readonly %15) #2
  %25 = xor i1 %24, true
  %26 = or i1 %16, %25
  br i1 %26, label %27, label %34

27:                                               ; preds = %23
  %28 = icmp eq ptr %3, @i64_typ
  br i1 %28, label %34, label %29

29:                                               ; preds = %27
  %30 = icmp eq ptr %3, @nil_typ
  %31 = icmp eq ptr %3, null
  %32 = or i1 %30, %31
  %33 = select i1 %32, i64 2, i64 5
  br label %34

34:                                               ; preds = %29, %27, %23, %21, %19, %17, %5, %1
  %35 = phi i64 [ 7, %1 ], [ 4, %5 ], [ 1, %19 ], [ 9, %21 ], [ 8, %27 ], [ 3, %17 ], [ %33, %29 ], [ 6, %23 ]
  %36 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %35
  %37 = getelementptr i8, ptr %36, i64 80
  %38 = load ptr, ptr %37, align 8
  ret ptr %38
}

; Function Attrs: nofree nounwind
define dso_local void @IO__Self_print_xi1(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #33 {
  %3 = alloca [6 x i8], align 8
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 8 dereferenceable(6) %3, i8 0, i64 6, i1 false)
  %4 = alloca [5 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(5) %4, i8 0, i64 5, i1 false)
  %5 = extractvalue { ptr, i160 } %1, 1
  %6 = trunc i160 %5 to i1
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  store i32 1702195828, ptr %4, align 4
  br label %9

8:                                                ; preds = %2
  store <5 x i8> <i8 102, i8 97, i8 108, i8 115, i8 101>, ptr %3, align 8
  br label %9

9:                                                ; preds = %8, %7
  %10 = phi i64 [ 4, %7 ], [ 5, %8 ]
  %11 = phi ptr [ %4, %7 ], [ %3, %8 ]
  %12 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %13 = getelementptr i8, ptr %11, i64 %10
  store i8 0, ptr %13, align 1
  %14 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(5) %11) #28
  ret void
}

; Function Attrs: nofree nounwind
define dso_local void @IO__Self_print_xNil(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #33 {
  %3 = alloca [4 x i8], align 4
  store i32 0, ptr %3, align 4
  store <3 x i8> <i8 110, i8 105, i8 108>, ptr %3, align 4
  %4 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %5 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %3) #28
  ret void
}

; Function Attrs: nounwind
define dso_local void @IO__Self_print_xCharacter(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #31 {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [2 x i8], align 1
  %5 = extractvalue { ptr, i160 } %1, 0
  %6 = extractvalue { ptr, i160 } %1, 1
  %7 = trunc i160 %6 to i64
  %8 = inttoptr i64 %7 to ptr
  %9 = lshr i160 %6, 64
  %10 = trunc i160 %9 to i64
  %11 = inttoptr i64 %10 to ptr
  %12 = getelementptr i8, ptr %5, i64 8
  %13 = getelementptr i8, ptr %5, i64 16
  %14 = getelementptr i8, ptr %5, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !488
  %16 = load i64, ptr %13, align 4, !noalias !488
  %17 = load ptr, ptr %14, align 8, !noalias !488
  %18 = mul i64 %15, 6681222582356018452
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !488
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %8, 1
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %11, 2
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %23, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3) #43
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %5) #43
  %30 = sext i32 %23 to i64
  %31 = getelementptr ptr, ptr %5, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call align 4 ptr %33({ ptr, ptr, ptr, i32 } %27, ptr nocapture nofree noundef nonnull readonly align 8 %3) #10
  %35 = call i8 %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull align 8 %3) #28
  store i8 %35, ptr %4, align 4
  %36 = getelementptr inbounds i8, ptr %4, i64 1
  store i8 0, ptr %36, align 1
  %37 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(2) %4) #28
  ret void
}

; Function Attrs: nofree nounwind
define dso_local void @IO__Self_print_xi32(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #33 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %4) #25
  ret void
}

; Function Attrs: nounwind
define dso_local void @IO__Self_print_xRepresentable(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #31 {
  %3 = alloca [0 x ptr], align 8
  %4 = extractvalue { ptr, i160 } %1, 0
  %5 = extractvalue { ptr, i160 } %1, 1
  %6 = trunc i160 %5 to i64
  %7 = inttoptr i64 %6 to ptr
  %8 = lshr i160 %5, 64
  %9 = trunc i160 %8 to i64
  %10 = inttoptr i64 %9 to ptr
  %11 = getelementptr i8, ptr %4, i64 8
  %12 = getelementptr i8, ptr %4, i64 16
  %13 = getelementptr i8, ptr %4, i64 40
  %14 = load i64, ptr %11, align 4, !noalias !491
  %15 = load i64, ptr %12, align 4, !noalias !491
  %16 = load ptr, ptr %13, align 8, !noalias !491
  %17 = mul i64 %14, -7260840641129990118
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = and i64 %19, %15
  %21 = getelementptr i32, ptr %16, i64 %20
  %22 = load i32, ptr %21, align 4, !noalias !491
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %7, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %10, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %22, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3) #43
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef align 8 %4) #43
  %29 = sext i32 %22 to i64
  %30 = getelementptr ptr, ptr %4, i64 %29
  %31 = load ptr, ptr %30, align 8
  %32 = call align 4 ptr %31({ ptr, ptr, ptr, i32 } %26, ptr nocapture nofree noundef nonnull readonly align 8 %3) #10
  %33 = call { ptr, ptr, ptr, i32 } %32({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull align 8 %3) #28
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %37 = getelementptr i8, ptr %34, i64 8
  %38 = getelementptr i8, ptr %34, i64 16
  %39 = getelementptr i8, ptr %34, i64 40
  %40 = load i64, ptr %37, align 4, !noalias !494
  %41 = load i64, ptr %38, align 4, !noalias !494
  %42 = load ptr, ptr %39, align 8, !noalias !494
  %43 = mul i64 %40, 6499063144389013426
  %44 = lshr i64 %43, 32
  %45 = xor i64 %44, %43
  %46 = and i64 %45, %41
  %47 = getelementptr i32, ptr %42, i64 %46
  %48 = load i32, ptr %47, align 4, !noalias !494
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %35, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %48, 3
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %34)
  %55 = sext i32 %48 to i64
  %56 = getelementptr ptr, ptr %34, i64 %55
  %57 = getelementptr i8, ptr %56, i64 80
  %58 = load ptr, ptr %57, align 8
  %59 = call align 4 ptr %58({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly align 8 %3) #10
  %60 = call { ptr } %59({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 %3) #28
  %61 = extractvalue { ptr } %60, 0
  %62 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %61) #28
  ret void
}

; Function Attrs: nounwind
define dso_local void @IO__Self_print_xString(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #31 {
  %3 = alloca [0 x ptr], align 8
  %4 = extractvalue { ptr, i160 } %1, 0
  %5 = extractvalue { ptr, i160 } %1, 1
  %6 = trunc i160 %5 to i64
  %7 = inttoptr i64 %6 to ptr
  %8 = lshr i160 %5, 64
  %9 = trunc i160 %8 to i64
  %10 = inttoptr i64 %9 to ptr
  %11 = getelementptr i8, ptr %4, i64 8
  %12 = getelementptr i8, ptr %4, i64 16
  %13 = getelementptr i8, ptr %4, i64 40
  %14 = load i64, ptr %11, align 4, !noalias !497
  %15 = load i64, ptr %12, align 4, !noalias !497
  %16 = load ptr, ptr %13, align 8, !noalias !497
  %17 = mul i64 %14, 6499063144389013426
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = and i64 %19, %15
  %21 = getelementptr i32, ptr %16, i64 %20
  %22 = load i32, ptr %21, align 4, !noalias !497
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %7, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %10, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %22, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3) #43
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %29 = sext i32 %22 to i64
  %30 = getelementptr ptr, ptr %4, i64 %29
  %31 = getelementptr i8, ptr %30, i64 80
  %32 = load ptr, ptr %31, align 8
  %33 = call align 4 ptr %32({ ptr, ptr, ptr, i32 } %26, ptr nocapture nofree noundef nonnull readonly align 8 %3) #10
  %34 = call { ptr } %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull align 8 %3) #28
  %35 = extractvalue { ptr } %34, 0
  %36 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %35) #28
  ret void
}

; Function Attrs: nofree nounwind
define dso_local void @IO__Self_print_xf64(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #33 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i64
  %5 = bitcast i64 %4 to double
  %6 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @float_string, double %5) #25
  ret void
}

; Function Attrs: nofree nounwind
define dso_local void @IO__Self_print_xi64(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #33 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i64
  %5 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(6) @i64_string, i64 %4) #25
  ret void
}

; Function Attrs: nofree nounwind
define dso_local void @IO__Self_print_xi8(ptr nocapture nofree readnone %0, { ptr, i160 } %1) #33 {
  %3 = extractvalue { ptr, i160 } %1, 1
  %4 = trunc i160 %3 to i32
  %5 = shl i32 %4, 24
  %6 = ashr exact i32 %5, 24
  %7 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %6) #25
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #25

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_String(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local noundef nonnull align 8 dereferenceable(16) ptr @String_field_String_0(ptr nocapture nofree readnone %0) #1 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define dso_local noundef nonnull align 4 ptr @String_B__Self_from_c_string_c_stringBufferi8(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #34 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #43
  ret ptr @String__Self_from_c_string_c_stringBufferi8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_append_xi8({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 504
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, argmem: read, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @String__Self_from_c_string_c_stringBufferi8(ptr nocapture nofree readnone %0, { ptr } %1) #35 {
  %3 = extractvalue { ptr } %1, 0
  br label %4

4:                                                ; preds = %4, %2
  %5 = phi i32 [ 0, %2 ], [ %10, %4 ]
  %6 = sext i32 %5 to i64
  %7 = getelementptr i8, ptr %3, i64 %6
  %8 = load i8, ptr %7, align 1
  %9 = icmp eq i8 %8, 0
  %10 = add i32 %5, 1
  br i1 %9, label %11, label %4

11:                                               ; preds = %4
  %12 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %13 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr undef, 2
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, i32 10, 3
  store ptr %3, ptr %12, align 8
  %16 = getelementptr i8, ptr %12, i64 8
  store i32 %5, ptr %16, align 8
  %17 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  %18 = getelementptr i8, ptr %12, i64 12
  store i32 %10, ptr %18, align 4
  ret { ptr, ptr, ptr, i32 } %15
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #6 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !500
  %10 = load i64, ptr %7, align 4, !noalias !500
  %11 = load ptr, ptr %8, align 8, !noalias !500
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !500
  %18 = call noalias align 4 dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %20 = sext i32 %17 to i64
  %21 = getelementptr ptr, ptr %4, i64 %20
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = insertvalue { ptr } undef, ptr %18, 0
  call void %24(ptr %5, { ptr } %25) #45
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %27 = getelementptr i8, ptr %21, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %5, i32 1) #45
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %32 = getelementptr i8, ptr %21, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr i8, ptr %33, i64 8
  %35 = load ptr, ptr %34, align 8
  call void %35(ptr %5, i32 0) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @String_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, i32 %4, i32 %5) #6 {
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = getelementptr i8, ptr %7, i64 8
  %10 = getelementptr i8, ptr %7, i64 16
  %11 = getelementptr i8, ptr %7, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !503
  %13 = load i64, ptr %10, align 4, !noalias !503
  %14 = load ptr, ptr %11, align 8, !noalias !503
  %15 = mul i64 %12, 6499063144389013426
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !503
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %7) #43
  %22 = sext i32 %20 to i64
  %23 = getelementptr ptr, ptr %7, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  call void %26(ptr %8, { ptr } %3) #45
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %7) #43
  %28 = getelementptr i8, ptr %23, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %8, i32 %4) #45
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %7) #43
  %33 = getelementptr i8, ptr %23, i64 16
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  call void %36(ptr %8, i32 %5) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !506
  %10 = load i64, ptr %7, align 4, !noalias !506
  %11 = load ptr, ptr %8, align 8, !noalias !506
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !506
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  ret i32 %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !509
  %10 = load i64, ptr %7, align 4, !noalias !509
  %11 = load ptr, ptr %8, align 8, !noalias !509
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !509
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  ret i32 %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !512
  %10 = load i64, ptr %7, align 4, !noalias !512
  %11 = load ptr, ptr %8, align 8, !noalias !512
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !512
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call { ptr } %22(ptr %5) #46
  ret { ptr } %23
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !515
  %10 = load i64, ptr %7, align 4, !noalias !515
  %11 = load ptr, ptr %8, align 8, !noalias !515
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !515
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  %25 = add i32 %24, 1
  %26 = sext i32 %25 to i64
  %27 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %26, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #43
  %29 = load ptr, ptr %21, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %5) #46
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %51

33:                                               ; preds = %3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %44, %35 ]
  %37 = load ptr, ptr %20, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call { ptr } %38(ptr %5) #46
  %40 = extractvalue { ptr } %39, 0
  %41 = getelementptr i8, ptr %40, i64 %36
  %42 = load i8, ptr %41, align 1
  %43 = getelementptr i8, ptr %27, i64 %36
  store i8 %42, ptr %43, align 1
  %44 = add nuw nsw i64 %36, 1
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %46 = load ptr, ptr %21, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %5) #46
  %49 = sext i32 %48 to i64
  %50 = icmp slt i64 %44, %49
  br i1 %50, label %35, label %51

51:                                               ; preds = %35, %3
  %52 = phi ptr [ %30, %3 ], [ %47, %35 ]
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %54 = call i32 %52(ptr %5) #46
  %55 = sext i32 %54 to i64
  %56 = getelementptr i8, ptr %27, i64 %55
  store i8 0, ptr %56, align 1
  %57 = insertvalue { ptr } undef, ptr %27, 0
  ret { ptr } %57
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, ptr, ptr, i32 } @String_append_xi8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i8 %3) #7 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4
  %11 = load i64, ptr %8, align 4
  %12 = load ptr, ptr %9, align 8
  %13 = mul i64 %10, 6499063144389013426
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 %24(ptr %6) #46
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %27 = getelementptr i8, ptr %21, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %6) #46
  %31 = icmp slt i32 %25, %30
  br i1 %31, label %78, label %32

32:                                               ; preds = %4
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %34 = call i32 %29(ptr %6) #46
  %35 = shl i32 %34, 1
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %37 = getelementptr i8, ptr %28, i64 8
  %38 = load ptr, ptr %37, align 8
  call void %38(ptr %6, i32 %35) #45
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %40 = load ptr, ptr %21, align 8
  %41 = load ptr, ptr %40, align 8
  %42 = call { ptr } %41(ptr %6) #46
  %43 = extractvalue { ptr } %42, 0
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %45 = load ptr, ptr %27, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %6) #46
  %48 = sext i32 %47 to i64
  %49 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %48, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %51 = load ptr, ptr %21, align 8
  %52 = getelementptr i8, ptr %51, i64 8
  %53 = load ptr, ptr %52, align 8
  %54 = insertvalue { ptr } undef, ptr %49, 0
  call void %53(ptr %6, { ptr } %54) #45
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %56 = load ptr, ptr %22, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call i32 %57(ptr %6) #46
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %60, label %78

60:                                               ; preds = %32
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %71, %62 ]
  %64 = getelementptr i8, ptr %43, i64 %63
  %65 = load i8, ptr %64, align 1
  %66 = load ptr, ptr %21, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr } %67(ptr %6) #46
  %69 = extractvalue { ptr } %68, 0
  %70 = getelementptr i8, ptr %69, i64 %63
  store i8 %65, ptr %70, align 1
  %71 = add nuw nsw i64 %63, 1
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %73 = load ptr, ptr %22, align 8
  %74 = load ptr, ptr %73, align 8
  %75 = call i32 %74(ptr %6) #46
  %76 = sext i32 %75 to i64
  %77 = icmp slt i64 %71, %76
  br i1 %77, label %62, label %78

78:                                               ; preds = %62, %32, %4
  %79 = phi ptr [ %57, %32 ], [ %24, %4 ], [ %74, %62 ]
  %80 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %82 = load ptr, ptr %21, align 8
  %83 = load ptr, ptr %82, align 8
  %84 = call { ptr } %83(ptr %6) #46
  %85 = extractvalue { ptr } %84, 0
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %87 = call i32 %79(ptr %6) #46
  %88 = sext i32 %87 to i64
  %89 = getelementptr i8, ptr %85, i64 %88
  store i8 %3, ptr %89, align 1
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %91 = load ptr, ptr %22, align 8
  %92 = load ptr, ptr %91, align 8
  %93 = call i32 %92(ptr %6) #46
  %94 = add i32 %93, 1
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %96 = getelementptr i8, ptr %91, i64 8
  %97 = load ptr, ptr %96, align 8
  call void %97(ptr %6, i32 %94) #45
  %98 = load i64, ptr %7, align 4
  %99 = load i64, ptr %8, align 4
  %100 = load ptr, ptr %9, align 8
  %101 = mul i64 %98, 6499063144389013426
  %102 = lshr i64 %101, 32
  %103 = xor i64 %102, %101
  %104 = and i64 %103, %99
  %105 = getelementptr i32, ptr %100, i64 %104
  %106 = load i32, ptr %105, align 4
  %107 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %108 = insertvalue { ptr, ptr, ptr, i32 } %107, ptr %6, 1
  %109 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %80, 2
  %110 = insertvalue { ptr, ptr, ptr, i32 } %109, i32 %106, 3
  ret { ptr, ptr, ptr, i32 } %110
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #31 {
  %5 = alloca [0 x ptr], align 8
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4
  %12 = load i64, ptr %9, align 4
  %13 = load ptr, ptr %10, align 8
  %14 = mul i64 %11, 6499063144389013426
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !518
  %27 = load i64, ptr %24, align 4, !noalias !518
  %28 = load ptr, ptr %25, align 8, !noalias !518
  %29 = mul i64 %26, 6499063144389013426
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !518
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %21, 1
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %22, 2
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %34, 3
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %20) #43
  %41 = sext i32 %34 to i64
  %42 = getelementptr ptr, ptr %20, i64 %41
  %43 = getelementptr i8, ptr %42, i64 72
  %44 = load ptr, ptr %43, align 8
  %45 = call align 4 ptr %44({ ptr, ptr, ptr, i32 } %38, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %46 = call { ptr } %45({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull align 8 %5) #28
  %47 = extractvalue { ptr } %46, 0
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %20)
  %50 = getelementptr i8, ptr %42, i64 56
  %51 = load ptr, ptr %50, align 8
  %52 = call align 4 ptr %51({ ptr, ptr, ptr, i32 } %38, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %53 = call i32 %52({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull align 8 %5) #28
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %55 = sext i32 %19 to i64
  %56 = getelementptr ptr, ptr %6, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %7) #46
  %61 = add i32 %60, %53
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %63 = getelementptr i8, ptr %56, i64 16
  %64 = load ptr, ptr %63, align 8
  %65 = load ptr, ptr %64, align 8
  %66 = call i32 %65(ptr %7) #46
  %67 = icmp slt i32 %61, %66
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %69 = call i32 %59(ptr %7) #46
  br i1 %67, label %70, label %98

70:                                               ; preds = %4
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %72 = call i32 %59(ptr %7) #46
  %73 = add i32 %72, %53
  %74 = icmp slt i32 %69, %73
  br i1 %74, label %75, label %164

75:                                               ; preds = %70
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %77 = sext i32 %69 to i64
  br label %78

78:                                               ; preds = %78, %75
  %79 = phi i64 [ %77, %75 ], [ %89, %78 ]
  %80 = phi i32 [ 0, %75 ], [ %90, %78 ]
  %81 = sext i32 %80 to i64
  %82 = getelementptr i8, ptr %47, i64 %81
  %83 = load i8, ptr %82, align 1
  %84 = load ptr, ptr %56, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr } %85(ptr %7) #46
  %87 = extractvalue { ptr } %86, 0
  %88 = getelementptr i8, ptr %87, i64 %79
  store i8 %83, ptr %88, align 1
  %89 = add nsw i64 %79, 1
  %90 = add nuw i32 %80, 1
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %92 = load ptr, ptr %57, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call i32 %93(ptr %7) #46
  %95 = add i32 %94, %53
  %96 = sext i32 %95 to i64
  %97 = icmp slt i64 %89, %96
  br i1 %97, label %78, label %164

98:                                               ; preds = %4
  %99 = add i32 %69, %53
  %100 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %101 = getelementptr i8, ptr %64, i64 8
  %102 = load ptr, ptr %101, align 8
  call void %102(ptr %7, i32 %99) #45
  %103 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %104 = load ptr, ptr %56, align 8
  %105 = load ptr, ptr %104, align 8
  %106 = call { ptr } %105(ptr %7) #46
  %107 = extractvalue { ptr } %106, 0
  %108 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %109 = load ptr, ptr %63, align 8
  %110 = load ptr, ptr %109, align 8
  %111 = call i32 %110(ptr %7) #46
  %112 = sext i32 %111 to i64
  %113 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %112, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %114 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %115 = load ptr, ptr %56, align 8
  %116 = getelementptr i8, ptr %115, i64 8
  %117 = load ptr, ptr %116, align 8
  %118 = insertvalue { ptr } undef, ptr %113, 0
  call void %117(ptr %7, { ptr } %118) #45
  %119 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %120 = load ptr, ptr %57, align 8
  %121 = load ptr, ptr %120, align 8
  %122 = call i32 %121(ptr %7) #46
  %123 = add i32 %122, %53
  %124 = icmp sgt i32 %123, 0
  br i1 %124, label %125, label %164

125:                                              ; preds = %98
  %126 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  br label %127

127:                                              ; preds = %154, %125
  %128 = phi i64 [ 0, %125 ], [ %156, %154 ]
  %129 = phi ptr [ %121, %125 ], [ %159, %154 ]
  %130 = phi i32 [ 0, %125 ], [ %155, %154 ]
  %131 = call i32 %129(ptr %7) #46
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %128, %132
  br i1 %133, label %134, label %143

134:                                              ; preds = %127
  %135 = getelementptr i8, ptr %107, i64 %128
  %136 = load i8, ptr %135, align 1
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %138 = load ptr, ptr %56, align 8
  %139 = load ptr, ptr %138, align 8
  %140 = call { ptr } %139(ptr %7) #46
  %141 = extractvalue { ptr } %140, 0
  %142 = getelementptr i8, ptr %141, i64 %128
  store i8 %136, ptr %142, align 1
  br label %154

143:                                              ; preds = %127
  %144 = sext i32 %130 to i64
  %145 = getelementptr i8, ptr %47, i64 %144
  %146 = load i8, ptr %145, align 1
  %147 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %148 = load ptr, ptr %56, align 8
  %149 = load ptr, ptr %148, align 8
  %150 = call { ptr } %149(ptr %7) #46
  %151 = extractvalue { ptr } %150, 0
  %152 = getelementptr i8, ptr %151, i64 %128
  store i8 %146, ptr %152, align 1
  %153 = add i32 %130, 1
  br label %154

154:                                              ; preds = %143, %134
  %155 = phi i32 [ %130, %134 ], [ %153, %143 ]
  %156 = add nuw nsw i64 %128, 1
  %157 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %158 = load ptr, ptr %57, align 8
  %159 = load ptr, ptr %158, align 8
  %160 = call i32 %159(ptr %7) #46
  %161 = add i32 %160, %53
  %162 = sext i32 %161 to i64
  %163 = icmp slt i64 %156, %162
  br i1 %163, label %127, label %164

164:                                              ; preds = %154, %98, %78, %70
  %165 = phi ptr [ %59, %70 ], [ %121, %98 ], [ %93, %78 ], [ %159, %154 ]
  %166 = phi ptr [ %58, %70 ], [ %120, %98 ], [ %92, %78 ], [ %158, %154 ]
  %167 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %168 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %169 = call i32 %165(ptr %7) #46
  %170 = add i32 %169, %53
  %171 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %172 = getelementptr i8, ptr %166, i64 8
  %173 = load ptr, ptr %172, align 8
  call void %173(ptr %7, i32 %170) #45
  %174 = load i64, ptr %8, align 4
  %175 = load i64, ptr %9, align 4
  %176 = load ptr, ptr %10, align 8
  %177 = mul i64 %174, 6499063144389013426
  %178 = lshr i64 %177, 32
  %179 = xor i64 %178, %177
  %180 = and i64 %179, %175
  %181 = getelementptr i32, ptr %176, i64 %180
  %182 = load i32, ptr %181, align 4
  %183 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %184 = insertvalue { ptr, ptr, ptr, i32 } %183, ptr %7, 1
  %185 = insertvalue { ptr, ptr, ptr, i32 } %184, ptr %167, 2
  %186 = insertvalue { ptr, ptr, ptr, i32 } %185, i32 %182, 3
  ret { ptr, ptr, ptr, i32 } %186
}

; Function Attrs: nounwind
define dso_local i8 @String__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #31 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !521
  %11 = load i64, ptr %8, align 4, !noalias !521
  %12 = load ptr, ptr %9, align 8, !noalias !521
  %13 = mul i64 %10, 6499063144389013426
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !521
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 %24(ptr %6) #46
  %26 = add i32 %25, -1
  %27 = icmp sgt i32 %3, %26
  br i1 %27, label %28, label %31

28:                                               ; preds = %4
  %29 = load ptr, ptr @current_coroutine, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  call preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %30, ptr noundef nonnull align 8 dereferenceable(24) @into_caller_buf) #52
  br label %31

31:                                               ; preds = %28, %4
  %32 = icmp sgt i32 %3, -1
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5) #55
  br i1 %32, label %34, label %41

34:                                               ; preds = %31
  %35 = load ptr, ptr %21, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call { ptr } %36(ptr %6) #46
  %38 = extractvalue { ptr } %37, 0
  %39 = zext nneg i32 %3 to i64
  %40 = getelementptr i8, ptr %38, i64 %39
  br label %64

41:                                               ; preds = %31
  %42 = load ptr, ptr %22, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %6) #46
  %45 = add i32 %44, %3
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %41
  %48 = load ptr, ptr @current_coroutine, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  call preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %49, ptr noundef nonnull align 8 dereferenceable(24) @into_caller_buf) #52
  %50 = load ptr, ptr %22, align 8
  %51 = load ptr, ptr %50, align 8
  br label %52

52:                                               ; preds = %47, %41
  %53 = phi ptr [ %43, %41 ], [ %51, %47 ]
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5)
  %55 = load ptr, ptr %21, align 8
  %56 = load ptr, ptr %55, align 8
  %57 = call { ptr } %56(ptr %6) #46
  %58 = extractvalue { ptr } %57, 0
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %5)
  %60 = call i32 %53(ptr %6) #46
  %61 = add i32 %60, %3
  %62 = sext i32 %61 to i64
  %63 = getelementptr i8, ptr %58, i64 %62
  br label %64

64:                                               ; preds = %52, %34
  %65 = phi ptr [ %40, %34 ], [ %63, %52 ]
  %66 = load i8, ptr %65, align 1
  ret i8 %66
}

; Function Attrs: nounwind
define dso_local noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #31 {
  %5 = alloca [0 x ptr], align 8
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !524
  %12 = load i64, ptr %9, align 4, !noalias !524
  %13 = load ptr, ptr %10, align 8, !noalias !524
  %14 = mul i64 %11, 6499063144389013426
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !524
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !527
  %27 = load i64, ptr %24, align 4, !noalias !527
  %28 = load ptr, ptr %25, align 8, !noalias !527
  %29 = mul i64 %26, 6499063144389013426
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !527
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %7) #46
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %20) #55
  %48 = sext i32 %34 to i64
  %49 = getelementptr ptr, ptr %20, i64 %48
  %50 = getelementptr i8, ptr %49, i64 56
  %51 = load ptr, ptr %50, align 8
  %52 = call align 4 ptr %51({ ptr, ptr, ptr, i32 } %45, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %53 = call i32 %52({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull align 8 %5) #28
  %54 = icmp eq i32 %41, %53
  br i1 %54, label %55, label %83

55:                                               ; preds = %4
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %57 = getelementptr i8, ptr %49, i64 72
  br label %58

58:                                               ; preds = %65, %55
  %59 = phi i64 [ 0, %55 ], [ %82, %65 ]
  %60 = load ptr, ptr %38, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %7) #46
  %63 = sext i32 %62 to i64
  %64 = icmp sge i64 %59, %63
  br i1 %64, label %83, label %65

65:                                               ; preds = %58
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %6)
  %67 = load ptr, ptr %37, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr } %68(ptr %7) #46
  %70 = extractvalue { ptr } %69, 0
  %71 = getelementptr i8, ptr %70, i64 %59
  %72 = load i8, ptr %71, align 1
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %20)
  %75 = load ptr, ptr %57, align 8
  %76 = call align 4 ptr %75({ ptr, ptr, ptr, i32 } %45, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %77 = call { ptr } %76({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull align 8 %5) #28
  %78 = extractvalue { ptr } %77, 0
  %79 = getelementptr i8, ptr %78, i64 %59
  %80 = load i8, ptr %79, align 1
  %81 = icmp eq i8 %72, %80
  %82 = add nuw nsw i64 %59, 1
  br i1 %81, label %58, label %83

83:                                               ; preds = %65, %58, %4
  %84 = phi i1 [ false, %4 ], [ %64, %58 ], [ %64, %65 ]
  ret i1 %84
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !530
  %10 = load i64, ptr %7, align 4, !noalias !530
  %11 = load ptr, ptr %8, align 8, !noalias !530
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !530
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %45, label %26

26:                                               ; preds = %3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %28 = call i32 %23(ptr %5) #46
  %29 = add i32 %28, -1
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %31 = getelementptr i8, ptr %22, i64 8
  %32 = load ptr, ptr %31, align 8
  call void %32(ptr %5, i32 %29) #45
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %34 = load ptr, ptr %20, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr } %35(ptr %5) #46
  %37 = extractvalue { ptr } %36, 0
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %39 = load ptr, ptr %21, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = call i32 %40(ptr %5) #46
  %42 = sext i32 %41 to i64
  %43 = getelementptr i8, ptr %37, i64 %42
  %44 = load i8, ptr %43, align 1
  br label %45

45:                                               ; preds = %26, %3
  %46 = phi ptr [ @i8_typ, %26 ], [ @nil_typ, %3 ]
  %47 = phi i8 [ %44, %26 ], [ undef, %3 ]
  %48 = insertvalue { ptr, i8 } poison, ptr %46, 0
  %49 = insertvalue { ptr, i8 } %48, i8 %47, 1
  ret { ptr, i8 } %49
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !533
  %10 = load i64, ptr %7, align 4, !noalias !533
  %11 = load ptr, ptr %8, align 8, !noalias !533
  %12 = mul i64 %9, 6499063144389013426
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !533
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  %25 = sext i32 %24 to i64
  %26 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %25, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #43
  %28 = load ptr, ptr %21, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %5) #46
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %50

32:                                               ; preds = %3
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ 0, %32 ], [ %43, %34 ]
  %36 = load ptr, ptr %20, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call { ptr } %37(ptr %5) #46
  %39 = extractvalue { ptr } %38, 0
  %40 = getelementptr i8, ptr %39, i64 %35
  %41 = load i8, ptr %40, align 1
  %42 = getelementptr i8, ptr %26, i64 %35
  store i8 %41, ptr %42, align 1
  %43 = add nuw nsw i64 %35, 1
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %45 = load ptr, ptr %21, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call i32 %46(ptr %5) #46
  %48 = sext i32 %47 to i64
  %49 = icmp slt i64 %43, %48
  br i1 %49, label %34, label %50

50:                                               ; preds = %34, %3
  %51 = phi ptr [ %29, %3 ], [ %46, %34 ]
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %53 = call i32 %51(ptr %5) #46
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %55 = call i32 %51(ptr %5) #46
  %56 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %58 = load ptr, ptr %21, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = call i32 %59(ptr %5) #46
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %62 = call i32 %59(ptr %5) #46
  %63 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %56, 1
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr undef, 2
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 10, 3
  store ptr %26, ptr %56, align 8
  %66 = getelementptr i8, ptr %56, i64 8
  store i32 %60, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  %68 = getelementptr i8, ptr %56, i64 12
  store i32 %62, ptr %68, align 4
  ret { ptr, ptr, ptr, i32 } %65
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #36 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %7 = getelementptr i8, ptr %4, i64 8
  %8 = getelementptr i8, ptr %4, i64 16
  %9 = getelementptr i8, ptr %4, i64 40
  %10 = call noalias align 8 dereferenceable_or_null(40) ptr @bump_malloc_inner(i64 noundef 40, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %11 = load i64, ptr %7, align 4, !noalias !25
  %12 = load i64, ptr %8, align 4, !noalias !25
  %13 = load ptr, ptr %9, align 8, !noalias !25
  %14 = mul i64 %11, 6499063144389013426
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !25
  %20 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %10, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr undef, 2
  store ptr %4, ptr %10, align 8
  %22 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %5, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %6, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %19, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @StringIterator) #43
  %26 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 17, 3
  ret { ptr, ptr, ptr, i32 } %26
}

define dso_local void @Iterable_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #30 {
  %5 = alloca [0 x ptr], align 8
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %9 = getelementptr i8, ptr %6, i64 8
  %10 = getelementptr i8, ptr %6, i64 16
  %11 = getelementptr i8, ptr %6, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !536
  %13 = load i64, ptr %10, align 4, !noalias !536
  %14 = load ptr, ptr %11, align 8, !noalias !536
  %15 = mul i64 %12, 3037712219555723519
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !536
  %21 = extractvalue { ptr } %3, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %7, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %8, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %20, 3
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #53
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6) #53
  %28 = sext i32 %20 to i64
  %29 = getelementptr ptr, ptr %6, i64 %28
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = call align 4 ptr %31({ ptr, ptr, ptr, i32 } %25, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %33 = call { ptr, ptr, ptr, i32 } %32({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull align 8 %5) #28
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %37 = getelementptr i8, ptr %34, i64 8
  %38 = getelementptr i8, ptr %34, i64 16
  %39 = getelementptr i8, ptr %34, i64 40
  %40 = load i64, ptr %37, align 4, !noalias !25
  %41 = load i64, ptr %38, align 4, !noalias !25
  %42 = load ptr, ptr %39, align 8, !noalias !25
  %43 = mul i64 %40, 8673632051301757104
  %44 = lshr i64 %43, 32
  %45 = xor i64 %44, %43
  %46 = and i64 %45, %41
  %47 = getelementptr i32, ptr %42, i64 %46
  %48 = load i32, ptr %47, align 4, !noalias !539
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %35, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %48, 3
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 8 %34)
  %55 = sext i32 %48 to i64
  %56 = getelementptr ptr, ptr %34, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = call align 4 ptr %58({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %60 = call { ptr, i160 } %59({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 %5) #28
  %61 = extractvalue { ptr, i160 } %60, 0
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6)
  %63 = icmp ne ptr %61, @nil_typ
  %64 = icmp ne ptr %61, null
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %76

66:                                               ; preds = %66, %4
  %67 = phi { ptr, i160 } [ %70, %66 ], [ %60, %4 ]
  call void %21({ ptr, i160 } %67)
  %68 = load ptr, ptr %57, align 8
  %69 = call align 4 ptr %68({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly %5) #10
  %70 = call { ptr, i160 } %69({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 %5) #28
  %71 = extractvalue { ptr, i160 } %70, 0
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6)
  %73 = icmp ne ptr %71, @nil_typ
  %74 = icmp ne ptr %71, null
  %75 = and i1 %73, %74
  br i1 %75, label %66, label %76

76:                                               ; preds = %66, %4
  ret void
}

define dso_local { ptr, i160 } @Iterable_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr } %4) #30 {
  %6 = alloca [0 x ptr], align 8
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %10 = getelementptr i8, ptr %7, i64 8
  %11 = getelementptr i8, ptr %7, i64 16
  %12 = getelementptr i8, ptr %7, i64 40
  %13 = load i64, ptr %10, align 4, !noalias !542
  %14 = load i64, ptr %11, align 4, !noalias !542
  %15 = load ptr, ptr %12, align 8, !noalias !542
  %16 = mul i64 %13, 3037712219555723519
  %17 = lshr i64 %16, 32
  %18 = xor i64 %17, %16
  %19 = and i64 %18, %14
  %20 = getelementptr i32, ptr %15, i64 %19
  %21 = load i32, ptr %20, align 4, !noalias !542
  %22 = extractvalue { ptr } %4, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %8, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %9, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %21, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6) #53
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %7) #53
  %29 = sext i32 %21 to i64
  %30 = getelementptr ptr, ptr %7, i64 %29
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = call align 4 ptr %32({ ptr, ptr, ptr, i32 } %26, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  %34 = call { ptr, ptr, ptr, i32 } %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull align 8 %6) #28
  %35 = extractvalue { ptr, ptr, ptr, i32 } %34, 0
  %36 = extractvalue { ptr, ptr, ptr, i32 } %34, 1
  %37 = extractvalue { ptr, ptr, ptr, i32 } %34, 2
  %38 = getelementptr i8, ptr %35, i64 8
  %39 = getelementptr i8, ptr %35, i64 16
  %40 = getelementptr i8, ptr %35, i64 40
  %41 = load i64, ptr %38, align 4, !noalias !25
  %42 = load i64, ptr %39, align 4, !noalias !25
  %43 = load ptr, ptr %40, align 8, !noalias !25
  %44 = mul i64 %41, 8673632051301757104
  %45 = lshr i64 %44, 32
  %46 = xor i64 %45, %44
  %47 = and i64 %46, %42
  %48 = getelementptr i32, ptr %43, i64 %47
  %49 = load i32, ptr %48, align 4, !noalias !545
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %37, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %49, 3
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 8 %35)
  %56 = sext i32 %49 to i64
  %57 = getelementptr ptr, ptr %35, i64 %56
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = call align 4 ptr %59({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  %61 = call { ptr, i160 } %60({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %6) #28
  %62 = extractvalue { ptr, i160 } %61, 0
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %7)
  %64 = icmp ne ptr %62, @nil_typ
  %65 = icmp ne ptr %62, null
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %79

67:                                               ; preds = %67, %5
  %68 = phi { ptr, i160 } [ %73, %67 ], [ %61, %5 ]
  %69 = phi { ptr, i160 } [ %70, %67 ], [ %3, %5 ]
  %70 = call { ptr, i160 } %22({ ptr, i160 } %69, { ptr, i160 } %68)
  %71 = load ptr, ptr %58, align 8
  %72 = call align 4 ptr %71({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly %6) #10
  %73 = call { ptr, i160 } %72({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %6) #28
  %74 = extractvalue { ptr, i160 } %73, 0
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %7)
  %76 = icmp ne ptr %74, @nil_typ
  %77 = icmp ne ptr %74, null
  %78 = and i1 %76, %77
  br i1 %78, label %67, label %79

79:                                               ; preds = %67, %5
  %80 = phi { ptr, i160 } [ %3, %5 ], [ %70, %67 ]
  ret { ptr, i160 } %80
}

define dso_local noundef i1 @Iterable_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #30 {
  %5 = alloca [0 x ptr], align 8
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %9 = getelementptr i8, ptr %6, i64 8
  %10 = getelementptr i8, ptr %6, i64 16
  %11 = getelementptr i8, ptr %6, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !548
  %13 = load i64, ptr %10, align 4, !noalias !548
  %14 = load ptr, ptr %11, align 8, !noalias !548
  %15 = mul i64 %12, 3037712219555723519
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !548
  %21 = extractvalue { ptr } %3, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %7, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %8, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %20, 3
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #53
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6) #53
  %28 = sext i32 %20 to i64
  %29 = getelementptr ptr, ptr %6, i64 %28
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = call align 4 ptr %31({ ptr, ptr, ptr, i32 } %25, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %33 = call { ptr, ptr, ptr, i32 } %32({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull align 8 %5) #28
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %37 = getelementptr i8, ptr %34, i64 8
  %38 = getelementptr i8, ptr %34, i64 16
  %39 = getelementptr i8, ptr %34, i64 40
  %40 = load i64, ptr %37, align 4, !noalias !25
  %41 = load i64, ptr %38, align 4, !noalias !25
  %42 = load ptr, ptr %39, align 8, !noalias !25
  %43 = mul i64 %40, 8673632051301757104
  %44 = lshr i64 %43, 32
  %45 = xor i64 %44, %43
  %46 = and i64 %45, %41
  %47 = getelementptr i32, ptr %42, i64 %46
  %48 = load i32, ptr %47, align 4, !noalias !551
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %35, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %48, 3
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 8 %34)
  %55 = sext i32 %48 to i64
  %56 = getelementptr ptr, ptr %34, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  br label %58

58:                                               ; preds = %67, %4
  %59 = load ptr, ptr %57, align 8
  %60 = call align 4 ptr %59({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %61 = call { ptr, i160 } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 %5) #28
  %62 = extractvalue { ptr, i160 } %61, 0
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6)
  %64 = icmp eq ptr %62, @nil_typ
  %65 = icmp eq ptr %62, null
  %66 = or i1 %64, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %58
  %68 = call i1 %21({ ptr, i160 } %61)
  br i1 %68, label %58, label %69

69:                                               ; preds = %67, %58
  ret i1 %66
}

define dso_local noundef i1 @Iterable_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #30 {
  %5 = alloca [0 x ptr], align 8
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %9 = getelementptr i8, ptr %6, i64 8
  %10 = getelementptr i8, ptr %6, i64 16
  %11 = getelementptr i8, ptr %6, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !554
  %13 = load i64, ptr %10, align 4, !noalias !554
  %14 = load ptr, ptr %11, align 8, !noalias !554
  %15 = mul i64 %12, 3037712219555723519
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !554
  %21 = extractvalue { ptr } %3, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %7, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %8, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 %20, 3
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #53
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6) #53
  %28 = sext i32 %20 to i64
  %29 = getelementptr ptr, ptr %6, i64 %28
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = call align 4 ptr %31({ ptr, ptr, ptr, i32 } %25, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %33 = call { ptr, ptr, ptr, i32 } %32({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull align 8 %5) #28
  %34 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  %35 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %36 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %37 = getelementptr i8, ptr %34, i64 8
  %38 = getelementptr i8, ptr %34, i64 16
  %39 = getelementptr i8, ptr %34, i64 40
  %40 = load i64, ptr %37, align 4, !noalias !25
  %41 = load i64, ptr %38, align 4, !noalias !25
  %42 = load ptr, ptr %39, align 8, !noalias !25
  %43 = mul i64 %40, 8673632051301757104
  %44 = lshr i64 %43, 32
  %45 = xor i64 %44, %43
  %46 = and i64 %45, %41
  %47 = getelementptr i32, ptr %42, i64 %46
  %48 = load i32, ptr %47, align 4, !noalias !557
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %35, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %48, 3
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 8 %34)
  %55 = sext i32 %48 to i64
  %56 = getelementptr ptr, ptr %34, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  br label %58

58:                                               ; preds = %67, %4
  %59 = load ptr, ptr %57, align 8
  %60 = call align 4 ptr %59({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %61 = call { ptr, i160 } %60({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 %5) #28
  %62 = extractvalue { ptr, i160 } %61, 0
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %6)
  %64 = icmp ne ptr %62, @nil_typ
  %65 = icmp ne ptr %62, null
  %66 = and i1 %64, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %58
  %68 = call i1 %21({ ptr, i160 } %61)
  br i1 %68, label %69, label %58

69:                                               ; preds = %67, %58
  ret i1 %66
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Iterable_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %2, { ptr } %3) #37 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !560
  %12 = load i64, ptr %9, align 4, !noalias !560
  %13 = load ptr, ptr %10, align 8, !noalias !560
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !560
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %5, i64 %21
  %23 = load ptr, ptr %22, align 8
  %24 = call align 4 ptr %23(ptr nocapture nofree noundef nonnull readonly %6) #2
  %25 = load ptr, ptr %2, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = call noalias nonnull align 8 dereferenceable(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %24, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %27, ptr %29, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(56) %28) #43
  %31 = load i64, ptr %8, align 4, !noalias !25
  %32 = load i64, ptr %9, align 4, !noalias !25
  %33 = load ptr, ptr %10, align 8, !noalias !25
  %34 = mul i64 %31, 3037712219555723519
  %35 = lshr i64 %34, 32
  %36 = xor i64 %35, %34
  %37 = and i64 %36, %32
  %38 = getelementptr i32, ptr %33, i64 %37
  %39 = load i32, ptr %38, align 4, !noalias !25
  %40 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable, ptr undef, ptr undef, i32 undef }, ptr %28, 1
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr undef, 2
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 10, 3
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %45 = getelementptr inbounds i8, ptr %28, i64 16
  store ptr %5, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %28, i64 24
  store ptr %6, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %28, i64 32
  store ptr %7, ptr %47, align 8
  %48 = getelementptr inbounds i8, ptr %28, i64 40
  store i32 %39, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef nonnull align 16 dereferenceable(488) @MapIterable) #43
  %50 = getelementptr inbounds i8, ptr %28, i64 48
  %51 = extractvalue { ptr } %3, 0
  store ptr %51, ptr %50, align 8
  ret { ptr, ptr, ptr, i32 } %42
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Iterable_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #37 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !563
  %12 = load i64, ptr %9, align 4, !noalias !563
  %13 = load ptr, ptr %10, align 8, !noalias !563
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !563
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %5, i64 %21
  %23 = load ptr, ptr %22, align 8
  %24 = call align 4 ptr %23(ptr nocapture nofree noundef nonnull readonly %6) #2
  %25 = call noalias nonnull align 8 dereferenceable(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %24, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(48) %25) #43
  %27 = load i64, ptr %8, align 4, !noalias !25
  %28 = load i64, ptr %9, align 4, !noalias !25
  %29 = load ptr, ptr %10, align 8, !noalias !25
  %30 = mul i64 %27, 3037712219555723519
  %31 = lshr i64 %30, 32
  %32 = xor i64 %31, %30
  %33 = and i64 %32, %28
  %34 = getelementptr i32, ptr %29, i64 %33
  %35 = load i32, ptr %34, align 4, !noalias !25
  %36 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr undef, 2
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 10, 3
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %41 = getelementptr inbounds i8, ptr %25, i64 8
  store ptr %5, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %25, i64 16
  store ptr %6, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %25, i64 24
  store ptr %7, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %25, i64 32
  store i32 %35, ptr %44, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @FilterIterable) #43
  %46 = getelementptr inbounds i8, ptr %25, i64 40
  %47 = extractvalue { ptr } %3, 0
  store ptr %47, ptr %46, align 8
  ret { ptr, ptr, ptr, i32 } %38
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Iterable_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #37 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !566
  %12 = load i64, ptr %9, align 4, !noalias !566
  %13 = load ptr, ptr %10, align 8, !noalias !566
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !566
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %27 = sext i32 %19 to i64
  %28 = getelementptr ptr, ptr %5, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = call align 4 ptr %29(ptr nocapture nofree noundef nonnull readonly %6) #2
  %31 = call noalias nonnull align 8 dereferenceable(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(72) %31) #43
  %33 = load i64, ptr %8, align 4, !noalias !25
  %34 = load i64, ptr %9, align 4, !noalias !25
  %35 = load ptr, ptr %10, align 8, !noalias !25
  %36 = mul i64 %33, 3037712219555723519
  %37 = lshr i64 %36, 32
  %38 = xor i64 %37, %36
  %39 = and i64 %38, %34
  %40 = getelementptr i32, ptr %35, i64 %39
  %41 = load i32, ptr %40, align 4, !noalias !25
  %42 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable, ptr undef, ptr undef, i32 undef }, ptr %31, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr undef, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 10, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @ChainIterable) #43
  %48 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr %5, ptr %48, align 8
  %49 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr %6, ptr %49, align 8
  %50 = getelementptr inbounds i8, ptr %31, i64 24
  store ptr %7, ptr %50, align 8
  %51 = getelementptr inbounds i8, ptr %31, i64 32
  store i32 %41, ptr %51, align 8
  %52 = load i64, ptr %23, align 4, !noalias !25
  %53 = load i64, ptr %24, align 4, !noalias !25
  %54 = load ptr, ptr %25, align 8, !noalias !25
  %55 = mul i64 %52, 3037712219555723519
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !569
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @ChainIterable) #43
  %62 = getelementptr inbounds i8, ptr %31, i64 40
  store ptr %20, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %31, i64 48
  store ptr %21, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %31, i64 56
  store ptr %22, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %31, i64 64
  store i32 %60, ptr %65, align 8
  ret { ptr, ptr, ptr, i32 } %44
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Iterable_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #37 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !572
  %12 = load i64, ptr %9, align 4, !noalias !572
  %13 = load ptr, ptr %10, align 8, !noalias !572
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !572
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %27 = sext i32 %19 to i64
  %28 = getelementptr ptr, ptr %5, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = call align 4 ptr %29(ptr nocapture nofree noundef nonnull readonly %6) #2
  %31 = call noalias nonnull align 8 dereferenceable(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %30, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(72) %31) #43
  %33 = load i64, ptr %8, align 4, !noalias !25
  %34 = load i64, ptr %9, align 4, !noalias !25
  %35 = load ptr, ptr %10, align 8, !noalias !25
  %36 = mul i64 %33, 3037712219555723519
  %37 = lshr i64 %36, 32
  %38 = xor i64 %37, %36
  %39 = and i64 %38, %34
  %40 = getelementptr i32, ptr %35, i64 %39
  %41 = load i32, ptr %40, align 4, !noalias !25
  %42 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable, ptr undef, ptr undef, i32 undef }, ptr %31, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr undef, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 10, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @InterleaveIterable) #43
  %48 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr %5, ptr %48, align 8
  %49 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr %6, ptr %49, align 8
  %50 = getelementptr inbounds i8, ptr %31, i64 24
  store ptr %7, ptr %50, align 8
  %51 = getelementptr inbounds i8, ptr %31, i64 32
  store i32 %41, ptr %51, align 8
  %52 = load i64, ptr %23, align 4, !noalias !25
  %53 = load i64, ptr %24, align 4, !noalias !25
  %54 = load ptr, ptr %25, align 8, !noalias !25
  %55 = mul i64 %52, 3037712219555723519
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !575
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef nonnull align 16 dereferenceable(480) @InterleaveIterable) #43
  %62 = getelementptr inbounds i8, ptr %31, i64 40
  store ptr %20, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %31, i64 48
  store ptr %21, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %31, i64 56
  store ptr %22, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %31, i64 64
  store i32 %60, ptr %65, align 8
  ret { ptr, ptr, ptr, i32 } %44
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Iterable_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #37 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !578
  %12 = load i64, ptr %9, align 4, !noalias !578
  %13 = load ptr, ptr %10, align 8, !noalias !578
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !578
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %24 = getelementptr i8, ptr %20, i64 8
  %25 = getelementptr i8, ptr %20, i64 16
  %26 = getelementptr i8, ptr %20, i64 40
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %28 = sext i32 %19 to i64
  %29 = getelementptr ptr, ptr %5, i64 %28
  %30 = load ptr, ptr %29, align 8
  %31 = call align 4 ptr %30(ptr nocapture nofree noundef nonnull readonly %6) #2
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %20) #43
  %33 = sext i32 %23 to i64
  %34 = getelementptr ptr, ptr %20, i64 %33
  %35 = load ptr, ptr %34, align 8
  %36 = call align 4 ptr %35(ptr nocapture nofree noundef nonnull readonly %21) #2
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %20) #43
  %39 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %40 = getelementptr inbounds i8, ptr %39, i64 16
  store ptr %36, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %39, i64 8
  store ptr %31, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(32) %39) #43
  store ptr @Pair, ptr %39, align 8
  %43 = call noalias nonnull align 8 dereferenceable(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %31, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %43, i64 8
  store ptr %36, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 16
  store ptr %39, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(88) %43) #43
  %47 = load i64, ptr %8, align 4, !noalias !25
  %48 = load i64, ptr %9, align 4, !noalias !25
  %49 = load ptr, ptr %10, align 8, !noalias !25
  %50 = mul i64 %47, 3037712219555723519
  %51 = lshr i64 %50, 32
  %52 = xor i64 %51, %50
  %53 = and i64 %52, %48
  %54 = getelementptr i32, ptr %49, i64 %53
  %55 = load i32, ptr %54, align 4, !noalias !25
  %56 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable, ptr undef, ptr undef, i32 undef }, ptr %43, 1
  %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr undef, 2
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 10, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %20) #43
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef nonnull align 16 dereferenceable(496) @ZipIterable) #43
  %62 = getelementptr inbounds i8, ptr %43, i64 24
  store ptr %5, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %43, i64 32
  store ptr %6, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %43, i64 40
  store ptr %7, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %43, i64 48
  store i32 %55, ptr %65, align 8
  %66 = load i64, ptr %24, align 4, !noalias !25
  %67 = load i64, ptr %25, align 4, !noalias !25
  %68 = load ptr, ptr %26, align 8, !noalias !25
  %69 = mul i64 %66, 3037712219555723519
  %70 = lshr i64 %69, 32
  %71 = xor i64 %70, %69
  %72 = and i64 %71, %67
  %73 = getelementptr i32, ptr %68, i64 %72
  %74 = load i32, ptr %73, align 4, !noalias !581
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef nonnull align 16 dereferenceable(496) @ZipIterable) #43
  %76 = getelementptr inbounds i8, ptr %43, i64 56
  store ptr %20, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %43, i64 64
  store ptr %21, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %43, i64 72
  store ptr %22, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %43, i64 80
  store i32 %74, ptr %79, align 8
  ret { ptr, ptr, ptr, i32 } %58
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Iterable_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #37 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !584
  %12 = load i64, ptr %9, align 4, !noalias !584
  %13 = load ptr, ptr %10, align 8, !noalias !584
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !584
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %24 = getelementptr i8, ptr %20, i64 8
  %25 = getelementptr i8, ptr %20, i64 16
  %26 = getelementptr i8, ptr %20, i64 40
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %28 = sext i32 %19 to i64
  %29 = getelementptr ptr, ptr %5, i64 %28
  %30 = load ptr, ptr %29, align 8
  %31 = call align 4 ptr %30(ptr nocapture nofree noundef nonnull readonly %6) #2
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %20) #43
  %33 = sext i32 %23 to i64
  %34 = getelementptr ptr, ptr %20, i64 %33
  %35 = load ptr, ptr %34, align 8
  %36 = call align 4 ptr %35(ptr nocapture nofree noundef nonnull readonly %21) #2
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %20) #43
  %39 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %40 = getelementptr inbounds i8, ptr %39, i64 16
  store ptr %36, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %39, i64 8
  store ptr %31, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(32) %39) #43
  store ptr @Pair, ptr %39, align 8
  %43 = call noalias nonnull align 8 dereferenceable(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %31, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %43, i64 8
  store ptr %36, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 16
  store ptr %39, ptr %45, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(88) %43) #43
  %47 = load i64, ptr %8, align 4, !noalias !25
  %48 = load i64, ptr %9, align 4, !noalias !25
  %49 = load ptr, ptr %10, align 8, !noalias !25
  %50 = mul i64 %47, 3037712219555723519
  %51 = lshr i64 %50, 32
  %52 = xor i64 %51, %50
  %53 = and i64 %52, %48
  %54 = getelementptr i32, ptr %49, i64 %53
  %55 = load i32, ptr %54, align 4, !noalias !25
  %56 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable, ptr undef, ptr undef, i32 undef }, ptr %43, 1
  %57 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr undef, 2
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 10, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %5) #43
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %20) #43
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef nonnull align 16 dereferenceable(496) @ProductIterable) #43
  %62 = getelementptr inbounds i8, ptr %43, i64 24
  store ptr %5, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %43, i64 32
  store ptr %6, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %43, i64 40
  store ptr %7, ptr %64, align 8
  %65 = getelementptr inbounds i8, ptr %43, i64 48
  store i32 %55, ptr %65, align 8
  %66 = load i64, ptr %24, align 4, !noalias !25
  %67 = load i64, ptr %25, align 4, !noalias !25
  %68 = load ptr, ptr %26, align 8, !noalias !25
  %69 = mul i64 %66, 3037712219555723519
  %70 = lshr i64 %69, 32
  %71 = xor i64 %70, %69
  %72 = and i64 %71, %67
  %73 = getelementptr i32, ptr %68, i64 %72
  %74 = load i32, ptr %73, align 4, !noalias !587
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef nonnull align 16 dereferenceable(496) @ProductIterable) #43
  %76 = getelementptr inbounds i8, ptr %43, i64 56
  store ptr %20, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %43, i64 64
  store ptr %21, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %43, i64 72
  store ptr %22, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %43, i64 80
  store i32 %74, ptr %79, align 8
  ret { ptr, ptr, ptr, i32 } %58
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #38 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %7 = getelementptr i8, ptr %4, i64 8
  %8 = getelementptr i8, ptr %4, i64 16
  %9 = getelementptr i8, ptr %4, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !25
  %11 = load i64, ptr %8, align 4, !noalias !25
  %12 = load ptr, ptr %9, align 8, !noalias !25
  %13 = mul i64 %10, 6499063144389013426
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !590
  %19 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %5, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %6, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %18, 3
  ret { ptr, ptr, ptr, i32 } %22
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ProductIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ProductIterable_field_ProductIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ProductIterable_field_ProductIterable_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ProductIterable_field_ProductIterable_2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @ProductIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !593
  %12 = load i64, ptr %9, align 4, !noalias !593
  %13 = load ptr, ptr %10, align 8, !noalias !593
  %14 = mul i64 %11, 4128338911757318636
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !593
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 3037712219555723519
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !596
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 24
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 3037712219555723519
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !599
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 32
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !602
  %11 = load i64, ptr %8, align 4, !noalias !602
  %12 = load ptr, ptr %9, align 8, !noalias !602
  %13 = mul i64 %10, 4128338911757318636
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !602
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %43 = getelementptr i8, ptr %21, i64 32
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr, ptr, ptr, i32 } %45(ptr %6) #46
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %48 = load ptr, ptr %21, align 8
  %49 = call align 4 ptr %48(ptr nocapture nofree noundef nonnull readonly %6) #2
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %51 = getelementptr i8, ptr %21, i64 8
  %52 = load ptr, ptr %51, align 8
  %53 = call align 4 ptr %52(ptr nocapture nofree noundef nonnull readonly %6) #2
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %56 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %57 = getelementptr inbounds i8, ptr %56, i64 16
  store ptr %53, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %56, i64 8
  store ptr %49, ptr %58, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %56)
  store ptr @Pair, ptr %56, align 8
  %60 = call noalias nonnull align 8 dereferenceable(152) ptr @bump_malloc_inner(i64 noundef 152, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %49, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %60, i64 8
  store ptr %53, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %60, i64 16
  store ptr %56, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(152) %60)
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %65 = load ptr, ptr %22, align 8
  %66 = load ptr, ptr %65, align 8
  %67 = call { ptr, ptr, ptr, i32 } %66(ptr %6) #46
  %68 = extractvalue { ptr, ptr, ptr, i32 } %67, 0
  %69 = extractvalue { ptr, ptr, ptr, i32 } %67, 1
  %70 = extractvalue { ptr, ptr, ptr, i32 } %67, 2
  %71 = extractvalue { ptr, ptr, ptr, i32 } %67, 3
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %69, 1
  %74 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %70, 2
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %71, 3
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %68)
  %78 = sext i32 %71 to i64
  %79 = getelementptr ptr, ptr %68, i64 %78
  %80 = getelementptr i8, ptr %79, i64 8
  %81 = load ptr, ptr %80, align 8
  %82 = call align 4 ptr %81({ ptr, ptr, ptr, i32 } %75, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %83 = call { ptr, ptr, ptr, i32 } %82({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr nonnull align 8 %4) #28
  %84 = extractvalue { ptr, ptr, ptr, i32 } %83, 0
  %85 = extractvalue { ptr, ptr, ptr, i32 } %83, 1
  %86 = extractvalue { ptr, ptr, ptr, i32 } %83, 2
  %87 = getelementptr i8, ptr %84, i64 8
  %88 = getelementptr i8, ptr %84, i64 16
  %89 = getelementptr i8, ptr %84, i64 40
  %90 = load i64, ptr %87, align 4, !noalias !25
  %91 = load i64, ptr %88, align 4, !noalias !25
  %92 = load ptr, ptr %89, align 8, !noalias !25
  %93 = mul i64 %90, 8673632051301757104
  %94 = lshr i64 %93, 32
  %95 = xor i64 %94, %93
  %96 = and i64 %95, %91
  %97 = getelementptr i32, ptr %92, i64 %96
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %99 = load ptr, ptr %43, align 8
  %100 = load ptr, ptr %99, align 8
  %101 = call { ptr, ptr, ptr, i32 } %100(ptr %6) #46
  %102 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %103 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %104 = extractvalue { ptr, ptr, ptr, i32 } %101, 2
  %105 = load i32, ptr %97, align 4, !noalias !25
  %106 = getelementptr i8, ptr %102, i64 8
  %107 = getelementptr i8, ptr %102, i64 16
  %108 = getelementptr i8, ptr %102, i64 40
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %102, 0
  %110 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %103, 1
  %111 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %104, 2
  %112 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterator, ptr undef, ptr undef, i32 undef }, ptr %60, 1
  %113 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr undef, 2
  %114 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  call void @llvm.lifetime.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 16 dereferenceable(192) @ProductIterator) #43
  %117 = getelementptr inbounds i8, ptr %60, i64 24
  store ptr %84, ptr %117, align 8
  %118 = getelementptr inbounds i8, ptr %60, i64 32
  store ptr %85, ptr %118, align 8
  %119 = getelementptr inbounds i8, ptr %60, i64 40
  store ptr %86, ptr %119, align 8
  %120 = getelementptr inbounds i8, ptr %60, i64 48
  store i32 %105, ptr %120, align 8
  %121 = load i64, ptr %106, align 4, !noalias !25
  %122 = load i64, ptr %107, align 4, !noalias !25
  %123 = load ptr, ptr %108, align 8, !noalias !25
  %124 = mul i64 %121, 3037712219555723519
  %125 = lshr i64 %124, 32
  %126 = xor i64 %125, %124
  %127 = and i64 %126, %122
  %128 = getelementptr i32, ptr %123, i64 %127
  %129 = load i32, ptr %128, align 4, !noalias !605
  %130 = getelementptr inbounds i8, ptr %60, i64 88
  store ptr %102, ptr %130, align 8
  %131 = getelementptr inbounds i8, ptr %60, i64 96
  store ptr %103, ptr %131, align 8
  %132 = getelementptr inbounds i8, ptr %60, i64 104
  store ptr %104, ptr %132, align 8
  %133 = getelementptr inbounds i8, ptr %60, i64 112
  store i32 %129, ptr %133, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 16 dereferenceable(192) @ProductIterator) #43
  %135 = insertvalue { ptr, ptr, ptr, i32 } %111, i32 %129, 3
  %136 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #43
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %102) #43
  %138 = sext i32 %129 to i64
  %139 = getelementptr ptr, ptr %102, i64 %138
  %140 = getelementptr i8, ptr %139, i64 8
  %141 = load ptr, ptr %140, align 8
  %142 = call align 4 ptr %141({ ptr, ptr, ptr, i32 } %135, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %143 = call { ptr, ptr, ptr, i32 } %142({ ptr, ptr, ptr, i32 } %135, { ptr, ptr, ptr, i32 } %135, ptr nonnull align 8 %4) #28
  %144 = extractvalue { ptr, ptr, ptr, i32 } %143, 0
  %145 = extractvalue { ptr, ptr, ptr, i32 } %143, 1
  %146 = extractvalue { ptr, ptr, ptr, i32 } %143, 2
  %147 = getelementptr i8, ptr %144, i64 8
  %148 = getelementptr i8, ptr %144, i64 16
  %149 = getelementptr i8, ptr %144, i64 40
  %150 = load i64, ptr %147, align 4, !noalias !25
  %151 = load i64, ptr %148, align 4, !noalias !25
  %152 = load ptr, ptr %149, align 8, !noalias !25
  %153 = mul i64 %150, 8673632051301757104
  %154 = lshr i64 %153, 32
  %155 = xor i64 %154, %153
  %156 = and i64 %155, %151
  %157 = getelementptr i32, ptr %152, i64 %156
  %158 = load i32, ptr %157, align 4, !noalias !608
  %159 = getelementptr inbounds i8, ptr %60, i64 56
  store ptr %144, ptr %159, align 8
  %160 = getelementptr inbounds i8, ptr %60, i64 64
  store ptr %145, ptr %160, align 8
  %161 = getelementptr inbounds i8, ptr %60, i64 72
  store ptr %146, ptr %161, align 8
  %162 = getelementptr inbounds i8, ptr %60, i64 80
  store i32 %158, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 16 dereferenceable(192) @ProductIterator)
  %164 = load ptr, ptr %117, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %164, 0
  %166 = load ptr, ptr %118, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 1
  %168 = load ptr, ptr %119, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 2
  %170 = load i32, ptr %120, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, i32 %170, 3
  %172 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %173 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %164)
  %174 = sext i32 %170 to i64
  %175 = getelementptr ptr, ptr %164, i64 %174
  %176 = getelementptr i8, ptr %175, i64 8
  %177 = load ptr, ptr %176, align 8
  %178 = call align 4 ptr %177({ ptr, ptr, ptr, i32 } %171, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %179 = call { ptr, i160 } %178({ ptr, ptr, ptr, i32 } %171, { ptr, ptr, ptr, i32 } %171, ptr nonnull align 8 %4) #28
  %180 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 16 dereferenceable(192) @ProductIterator)
  %181 = getelementptr inbounds i8, ptr %60, i64 120
  %182 = extractvalue { ptr, i160 } %179, 0
  %183 = extractvalue { ptr, i160 } %179, 1
  store ptr %182, ptr %181, align 8
  %184 = getelementptr inbounds i8, ptr %60, i64 128
  store i160 %183, ptr %184, align 8
  call void @llvm.lifetime.end.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %185 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 21, 3
  ret { ptr, ptr, ptr, i32 } %185
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ProductIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 152, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ProductIterator_field_ProductIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ProductIterator_field_ProductIterator_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ProductIterator_field_ProductIterator_2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: nounwind
define dso_local void @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #31 {
  %6 = alloca [0 x ptr], align 8
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = getelementptr i8, ptr %7, i64 8
  %10 = getelementptr i8, ptr %7, i64 16
  %11 = getelementptr i8, ptr %7, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !611
  %13 = load i64, ptr %10, align 4, !noalias !611
  %14 = load ptr, ptr %11, align 8, !noalias !611
  %15 = mul i64 %12, 1697250377212095568
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !611
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %23 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %24 = getelementptr i8, ptr %21, i64 8
  %25 = getelementptr i8, ptr %21, i64 16
  %26 = getelementptr i8, ptr %21, i64 40
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load i64, ptr %25, align 4, !noalias !25
  %29 = load ptr, ptr %26, align 8, !noalias !25
  %30 = mul i64 %27, 8673632051301757104
  %31 = lshr i64 %30, 32
  %32 = xor i64 %31, %30
  %33 = and i64 %32, %28
  %34 = getelementptr i32, ptr %29, i64 %33
  %35 = load i32, ptr %34, align 4, !noalias !614
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %7) #43
  %37 = sext i32 %20 to i64
  %38 = getelementptr ptr, ptr %7, i64 %37
  %39 = getelementptr i8, ptr %38, i64 24
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %23, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %35, 3
  call void %42(ptr %8, { ptr, ptr, ptr, i32 } %46) #45
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %49 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %50 = getelementptr i8, ptr %47, i64 8
  %51 = getelementptr i8, ptr %47, i64 16
  %52 = getelementptr i8, ptr %47, i64 40
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load i64, ptr %51, align 4, !noalias !25
  %55 = load ptr, ptr %52, align 8, !noalias !25
  %56 = mul i64 %53, 3037712219555723519
  %57 = lshr i64 %56, 32
  %58 = xor i64 %57, %56
  %59 = and i64 %58, %54
  %60 = getelementptr i32, ptr %55, i64 %59
  %61 = load i32, ptr %60, align 4, !noalias !617
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %7) #43
  %63 = getelementptr i8, ptr %38, i64 40
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 1
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %49, 2
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %61, 3
  call void %66(ptr %8, { ptr, ptr, ptr, i32 } %70) #45
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %7) #43
  %72 = load ptr, ptr %63, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, ptr, ptr, i32 } %73(ptr %8) #46
  %75 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %76 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %77 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %78 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %76, 1
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, ptr %77, 2
  %82 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %78, 3
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6) #43
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %75) #43
  %85 = sext i32 %78 to i64
  %86 = getelementptr ptr, ptr %75, i64 %85
  %87 = getelementptr i8, ptr %86, i64 8
  %88 = load ptr, ptr %87, align 8
  %89 = call align 4 ptr %88({ ptr, ptr, ptr, i32 } %82, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  %90 = call { ptr, ptr, ptr, i32 } %89({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull align 8 %6) #28
  %91 = extractvalue { ptr, ptr, ptr, i32 } %90, 0
  %92 = extractvalue { ptr, ptr, ptr, i32 } %90, 1
  %93 = extractvalue { ptr, ptr, ptr, i32 } %90, 2
  %94 = getelementptr i8, ptr %91, i64 8
  %95 = getelementptr i8, ptr %91, i64 16
  %96 = getelementptr i8, ptr %91, i64 40
  %97 = load i64, ptr %94, align 4, !noalias !25
  %98 = load i64, ptr %95, align 4, !noalias !25
  %99 = load ptr, ptr %96, align 8, !noalias !25
  %100 = mul i64 %97, 8673632051301757104
  %101 = lshr i64 %100, 32
  %102 = xor i64 %101, %100
  %103 = and i64 %102, %98
  %104 = getelementptr i32, ptr %99, i64 %103
  %105 = load i32, ptr %104, align 4, !noalias !620
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %7)
  %107 = getelementptr i8, ptr %38, i64 32
  %108 = load ptr, ptr %107, align 8
  %109 = getelementptr i8, ptr %108, i64 8
  %110 = load ptr, ptr %109, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %112 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %92, 1
  %113 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %93, 2
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %105, 3
  call void %110(ptr %8, { ptr, ptr, ptr, i32 } %114) #45
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %7)
  %116 = load ptr, ptr %39, align 8
  %117 = load ptr, ptr %116, align 8
  %118 = call { ptr, ptr, ptr, i32 } %117(ptr %8) #46
  %119 = extractvalue { ptr, ptr, ptr, i32 } %118, 0
  %120 = extractvalue { ptr, ptr, ptr, i32 } %118, 1
  %121 = extractvalue { ptr, ptr, ptr, i32 } %118, 2
  %122 = extractvalue { ptr, ptr, ptr, i32 } %118, 3
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %124 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %120, 1
  %125 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %121, 2
  %126 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %122, 3
  %127 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %128 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %119)
  %129 = sext i32 %122 to i64
  %130 = getelementptr ptr, ptr %119, i64 %129
  %131 = getelementptr i8, ptr %130, i64 8
  %132 = load ptr, ptr %131, align 8
  %133 = call align 4 ptr %132({ ptr, ptr, ptr, i32 } %126, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  %134 = call { ptr, i160 } %133({ ptr, ptr, ptr, i32 } %126, { ptr, ptr, ptr, i32 } %126, ptr nonnull align 8 %6) #28
  %135 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %7)
  %136 = getelementptr i8, ptr %38, i64 48
  %137 = load ptr, ptr %136, align 8
  %138 = getelementptr i8, ptr %137, i64 8
  %139 = load ptr, ptr %138, align 8
  call void %139(ptr %8, { ptr, i160 } %134) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4
  %11 = load i64, ptr %8, align 4
  %12 = load ptr, ptr %9, align 8
  %13 = mul i64 %10, 1697250377212095568
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %5) #53
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 48
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, i160 } %24(ptr %6) #46
  %26 = extractvalue { ptr, i160 } %25, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef align 8 %5) #53
  %28 = icmp ne ptr %26, @nil_typ
  %29 = icmp ne ptr %26, null
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %226

31:                                               ; preds = %3
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %33 = getelementptr i8, ptr %21, i64 32
  %34 = getelementptr i8, ptr %21, i64 8
  %35 = getelementptr i8, ptr %21, i64 24
  %36 = getelementptr i8, ptr %21, i64 40
  br label %37

37:                                               ; preds = %65, %31
  %38 = phi { ptr, i160 } [ %135, %65 ], [ %25, %31 ]
  %39 = load ptr, ptr %33, align 8
  %40 = load ptr, ptr %39, align 8
  %41 = call { ptr, ptr, ptr, i32 } %40(ptr %6) #46
  %42 = extractvalue { ptr, ptr, ptr, i32 } %41, 0
  %43 = extractvalue { ptr, ptr, ptr, i32 } %41, 1
  %44 = extractvalue { ptr, ptr, ptr, i32 } %41, 2
  %45 = extractvalue { ptr, ptr, ptr, i32 } %41, 3
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %43, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %44, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %45, 3
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %42)
  %52 = sext i32 %45 to i64
  %53 = getelementptr ptr, ptr %42, i64 %52
  %54 = getelementptr i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8
  %56 = call align 4 ptr %55({ ptr, ptr, ptr, i32 } %49, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %57 = call { ptr, i160 } %56({ ptr, ptr, ptr, i32 } %49, { ptr, ptr, ptr, i32 } %49, ptr nonnull align 8 %4) #28
  %58 = extractvalue { ptr, i160 } %57, 0
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %60 = load ptr, ptr %34, align 8
  %61 = icmp ne ptr %58, @nil_typ
  %62 = icmp ne ptr %58, null
  %63 = and i1 %61, %62
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  br i1 %63, label %141, label %65

65:                                               ; preds = %37
  %66 = load ptr, ptr %35, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %6) #46
  %69 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %70 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %71 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %72 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %73 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %74 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %70, 1
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %71, 2
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %72, 3
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %69)
  %79 = sext i32 %72 to i64
  %80 = getelementptr ptr, ptr %69, i64 %79
  %81 = getelementptr i8, ptr %80, i64 8
  %82 = load ptr, ptr %81, align 8
  %83 = call align 4 ptr %82({ ptr, ptr, ptr, i32 } %76, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %84 = call { ptr, i160 } %83({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr nonnull align 8 %4) #28
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %86 = load ptr, ptr %22, align 8
  %87 = getelementptr i8, ptr %86, i64 8
  %88 = load ptr, ptr %87, align 8
  call void %88(ptr %6, { ptr, i160 } %84) #45
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %90 = load ptr, ptr %36, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call { ptr, ptr, ptr, i32 } %91(ptr %6) #46
  %93 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  %94 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  %95 = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  %96 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %98 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %94, 1
  %99 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %95, 2
  %100 = insertvalue { ptr, ptr, ptr, i32 } %99, i32 %96, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %102 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %93)
  %103 = sext i32 %96 to i64
  %104 = getelementptr ptr, ptr %93, i64 %103
  %105 = getelementptr i8, ptr %104, i64 8
  %106 = load ptr, ptr %105, align 8
  %107 = call align 4 ptr %106({ ptr, ptr, ptr, i32 } %100, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %108 = call { ptr, ptr, ptr, i32 } %107({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr nonnull align 8 %4) #28
  %109 = extractvalue { ptr, ptr, ptr, i32 } %108, 0
  %110 = extractvalue { ptr, ptr, ptr, i32 } %108, 1
  %111 = extractvalue { ptr, ptr, ptr, i32 } %108, 2
  %112 = getelementptr i8, ptr %109, i64 8
  %113 = getelementptr i8, ptr %109, i64 16
  %114 = getelementptr i8, ptr %109, i64 40
  %115 = load i64, ptr %112, align 4
  %116 = load i64, ptr %113, align 4
  %117 = load ptr, ptr %114, align 8
  %118 = mul i64 %115, 8673632051301757104
  %119 = lshr i64 %118, 32
  %120 = xor i64 %119, %118
  %121 = and i64 %120, %116
  %122 = getelementptr i32, ptr %117, i64 %121
  %123 = load i32, ptr %122, align 4
  %124 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %125 = load ptr, ptr %33, align 8
  %126 = getelementptr i8, ptr %125, i64 8
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %109, 0
  %129 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %110, 1
  %130 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr %111, 2
  %131 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 %123, 3
  call void %127(ptr %6, { ptr, ptr, ptr, i32 } %131) #45
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %133 = load ptr, ptr %22, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = call { ptr, i160 } %134(ptr %6) #46
  %136 = extractvalue { ptr, i160 } %135, 0
  %137 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %138 = icmp ne ptr %136, @nil_typ
  %139 = icmp ne ptr %136, null
  %140 = and i1 %138, %139
  br i1 %140, label %37, label %226

141:                                              ; preds = %37
  %142 = load ptr, ptr %21, align 8
  %143 = call align 8 ptr %142(ptr nocapture nofree noundef nonnull readonly %6) #2
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %145 = call align 8 ptr %60(ptr nocapture nofree noundef nonnull readonly %6) #2
  %146 = load ptr, ptr %143, align 8
  %147 = getelementptr i8, ptr %146, i64 72
  %148 = load ptr, ptr %147, align 8
  %149 = call { i64, i64 } %148(ptr nocapture nofree nonnull readonly align 8 %143) #2
  %150 = extractvalue { i64, i64 } %149, 0
  %151 = extractvalue { i64, i64 } %149, 1
  %152 = urem i64 16, %151
  %153 = icmp eq i64 %152, 0
  %154 = sub i64 %151, %152
  %155 = select i1 %153, i64 0, i64 %154
  %156 = add i64 %150, 16
  %157 = add i64 %156, %155
  %158 = load ptr, ptr %145, align 8
  %159 = getelementptr i8, ptr %158, i64 72
  %160 = load ptr, ptr %159, align 8
  %161 = call { i64, i64 } %160(ptr nocapture nofree nonnull readonly align 8 %145) #2
  %162 = extractvalue { i64, i64 } %161, 0
  %163 = extractvalue { i64, i64 } %161, 1
  %164 = call i64 @llvm.umax.i64(i64 %151, i64 %163) #44
  %165 = call i64 @llvm.umax.i64(i64 %164, i64 noundef 8) #44, !range !18
  %166 = urem i64 %157, %163
  %167 = icmp eq i64 %166, 0
  %168 = sub i64 %163, %166
  %169 = select i1 %167, i64 0, i64 %168
  %170 = add i64 %162, %157
  %171 = add i64 %170, %169
  %172 = urem i64 %171, %165
  %173 = icmp eq i64 %172, 0
  %174 = sub i64 %165, %172
  %175 = select i1 %173, i64 0, i64 %174
  %176 = add i64 %175, %171
  %177 = call noalias nonnull align 8 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef %176, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %143, ptr %177, align 8
  %178 = getelementptr inbounds i8, ptr %177, i64 8
  store ptr %145, ptr %178, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %177)
  %180 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %181 = call ptr @llvm.invariant.start.p0(i64 noundef 112, ptr nocapture nofree noundef nonnull align 8 %5)
  %182 = load ptr, ptr %143, align 8
  %183 = getelementptr i8, ptr %182, i64 72
  %184 = load ptr, ptr %183, align 8
  %185 = call { i64, i64 } %184(ptr nocapture nofree nonnull readonly align 8 %143) #2
  %186 = extractvalue { i64, i64 } %185, 1
  %187 = urem i64 16, %186
  %188 = icmp eq i64 %187, 0
  %189 = sub i64 %186, %187
  %190 = add i64 %189, 16
  %191 = select i1 %188, i64 16, i64 %190
  %192 = getelementptr i8, ptr %177, i64 %191
  %193 = getelementptr i8, ptr %182, i64 64
  %194 = load ptr, ptr %193, align 8
  call void %194({ ptr, i160 } %38, ptr nocapture nofree nonnull readonly align 8 %143, ptr nocapture nofree writeonly %192) #8
  %195 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @Pair) #43
  %196 = load ptr, ptr %177, align 8
  %197 = load ptr, ptr %196, align 8
  %198 = getelementptr i8, ptr %197, i64 72
  %199 = load ptr, ptr %198, align 8
  %200 = call { i64, i64 } %199(ptr nocapture nofree nonnull readonly align 8 %196) #2
  %201 = extractvalue { i64, i64 } %200, 0
  %202 = extractvalue { i64, i64 } %200, 1
  %203 = urem i64 16, %202
  %204 = icmp eq i64 %203, 0
  %205 = sub i64 %202, %203
  %206 = select i1 %204, i64 0, i64 %205
  %207 = add i64 %201, 16
  %208 = add i64 %207, %206
  %209 = load ptr, ptr %178, align 8
  %210 = load ptr, ptr %209, align 8
  %211 = getelementptr i8, ptr %210, i64 72
  %212 = load ptr, ptr %211, align 8
  %213 = call { i64, i64 } %212(ptr nocapture nofree nonnull readonly align 8 %209) #2
  %214 = extractvalue { i64, i64 } %213, 1
  %215 = urem i64 %208, %214
  %216 = icmp eq i64 %215, 0
  %217 = sub i64 %214, %215
  %218 = select i1 %216, i64 0, i64 %217
  %219 = getelementptr i8, ptr %177, i64 %208
  %220 = getelementptr i8, ptr %219, i64 %218
  %221 = getelementptr i8, ptr %210, i64 64
  %222 = load ptr, ptr %221, align 8
  call void %222({ ptr, i160 } %57, ptr nocapture nofree nonnull readonly align 8 %209, ptr nocapture nofree writeonly %220) #8
  %223 = ptrtoint ptr %177 to i64
  %224 = zext i64 %223 to i160
  %225 = or disjoint i160 %224, 3402823669209384634633746074317682114560
  br label %226

226:                                              ; preds = %141, %65, %3
  %227 = phi i160 [ %225, %141 ], [ undef, %3 ], [ undef, %65 ]
  %228 = phi ptr [ @Pair, %141 ], [ @nil_typ, %3 ], [ @nil_typ, %65 ]
  %229 = insertvalue { ptr, i160 } poison, ptr %228, 0
  %230 = insertvalue { ptr, i160 } %229, i160 %227, 1
  ret { ptr, i160 } %230
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { i64, i64 } @_data_size_Pair(ptr nocapture nofree readonly align 8 %0) #39 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } %6(ptr nocapture nofree nonnull readonly align 8 %3) #2
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } %20(ptr nocapture nofree nonnull readonly align 8 %17) #2
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = call i64 @llvm.umax.i64(i64 %9, i64 %23) #44
  %25 = call i64 @llvm.umax.i64(i64 %24, i64 noundef 8) #44, !range !18
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %35, %31
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_nil_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { ptr, i160 } @_box_nil_typ(ptr nocapture nofree readnone %0, ptr nocapture nofree readnone %1) #1 {
  ret { ptr, i160 } { ptr @nil_typ, i160 undef }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local void @_unbox_nil_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree readnone %2) #1 {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @ProductIterator_getter_current_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 120
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 128
  %6 = load i160, ptr %5, align 8
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ProductIterator_setter_current_first(ptr nocapture nofree writeonly align 8 %0, { ptr, i160 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 120
  %4 = extractvalue { ptr, i160 } %1, 0
  %5 = extractvalue { ptr, i160 } %1, 1
  store ptr %4, ptr %3, align 8
  %6 = getelementptr i8, ptr %0, i64 128
  store i160 %5, ptr %6, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 96
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 104
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 112
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ProductIterator_setter_second_iterable(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 88
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 96
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 104
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 112
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ProductIterator_setter_second_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 56
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 64
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 72
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 80
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ProductIterator_setter_first_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 32
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 40
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 48
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Container(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Iterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ProductIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 56
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 64
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 72
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 80
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ProductIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 32
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 40
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 48
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @Pair_field_Pair_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @Pair_field_Pair_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !623
  %12 = load i64, ptr %9, align 4, !noalias !623
  %13 = load ptr, ptr %10, align 8, !noalias !623
  %14 = mul i64 %11, 9197944775169318296
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !623
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %6) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %6, i64 %21
  %23 = getelementptr i8, ptr %22, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  call void %26(ptr %7, { ptr, i160 } %3) #45
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %6) #43
  %28 = getelementptr i8, ptr %22, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %7, { ptr, i160 } %4) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !626
  %10 = load i64, ptr %7, align 4, !noalias !626
  %11 = load ptr, ptr %8, align 8, !noalias !626
  %12 = mul i64 %9, 9197944775169318296
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !626
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } %23(ptr %5) #46
  ret { ptr, i160 } %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !629
  %10 = load i64, ptr %7, align 4, !noalias !629
  %11 = load ptr, ptr %8, align 8, !noalias !629
  %12 = mul i64 %9, 9197944775169318296
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !629
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 24
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } %23(ptr %5) #46
  ret { ptr, i160 } %24
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { ptr, i160 } @Pair_getter_second(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %0) #39 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } %5(ptr nocapture nofree nonnull readonly align 8 %2) #2
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 16
  %14 = add i64 %13, %12
  %15 = getelementptr inbounds i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = call { i64, i64 } %19(ptr nocapture nofree nonnull readonly align 8 %16) #2
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = getelementptr i8, ptr %17, i64 56
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr nocapture nofree readonly %27, ptr nocapture nofree nonnull readonly align 8 %16) #2
  ret { ptr, i160 } %30
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Pair_setter_second(ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %0, { ptr, i160 } %1) #37 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } %6(ptr nocapture nofree nonnull readonly align 8 %3) #2
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr inbounds i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } %20(ptr nocapture nofree nonnull readonly align 8 %17) #2
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = getelementptr i8, ptr %18, i64 64
  %30 = load ptr, ptr %29, align 8
  call void %30({ ptr, i160 } %1, ptr nocapture nofree nonnull readonly align 8 %17, ptr nocapture nofree writeonly %28) #8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { ptr, i160 } @Pair_getter_first(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #39 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } %5(ptr nocapture nofree nonnull readonly align 8 %2) #2
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 %7, %8
  %11 = add i64 %10, 16
  %12 = select i1 %9, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr i8, ptr %3, i64 56
  %15 = load ptr, ptr %14, align 8
  %16 = call { ptr, i160 } %15(ptr nocapture nofree readonly %13, ptr nocapture nofree nonnull readonly align 8 %2) #2
  ret { ptr, i160 } %16
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Pair_setter_first(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0, { ptr, i160 } %1) #37 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } %6(ptr nocapture nofree nonnull readonly align 8 %3) #2
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = add i64 %11, 16
  %13 = select i1 %10, i64 16, i64 %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = getelementptr i8, ptr %4, i64 64
  %16 = load ptr, ptr %15, align 8
  call void %16({ ptr, i160 } %1, ptr nocapture nofree nonnull readonly align 8 %3, ptr nocapture nofree writeonly %14) #8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Iterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ZipIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ZipIterable_field_ZipIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ZipIterable_field_ZipIterable_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ZipIterable_field_ZipIterable_2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @ZipIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !632
  %12 = load i64, ptr %9, align 4, !noalias !632
  %13 = load ptr, ptr %10, align 8, !noalias !632
  %14 = mul i64 %11, 35232740166152944
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !632
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 3037712219555723519
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !635
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 24
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 3037712219555723519
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !638
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 32
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !641
  %11 = load i64, ptr %8, align 4, !noalias !641
  %12 = load ptr, ptr %9, align 8, !noalias !641
  %13 = mul i64 %10, 35232740166152944
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !641
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %43 = getelementptr i8, ptr %21, i64 32
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr, ptr, ptr, i32 } %45(ptr %6) #46
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 2
  %50 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %48, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %49, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %50, 3
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %47)
  %57 = sext i32 %50 to i64
  %58 = getelementptr ptr, ptr %47, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = call align 4 ptr %60({ ptr, ptr, ptr, i32 } %54, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull align 8 %4) #28
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %64 = load ptr, ptr %21, align 8
  %65 = call align 4 ptr %64(ptr nocapture nofree noundef nonnull readonly %6) #2
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %67 = getelementptr i8, ptr %21, i64 8
  %68 = load ptr, ptr %67, align 8
  %69 = call align 4 ptr %68(ptr nocapture nofree noundef nonnull readonly %6) #2
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %72 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %73 = getelementptr inbounds i8, ptr %72, i64 16
  store ptr %69, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr %65, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %72)
  store ptr @Pair, ptr %72, align 8
  %76 = call noalias nonnull align 8 dereferenceable(88) ptr @bump_malloc_inner(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %65, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %76, i64 8
  store ptr %69, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %76, i64 16
  store ptr %72, ptr %78, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(88) %76)
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %81 = load ptr, ptr %22, align 8
  %82 = load ptr, ptr %81, align 8
  %83 = call { ptr, ptr, ptr, i32 } %82(ptr %6) #46
  %84 = extractvalue { ptr, ptr, ptr, i32 } %83, 0
  %85 = extractvalue { ptr, ptr, ptr, i32 } %83, 1
  %86 = extractvalue { ptr, ptr, ptr, i32 } %83, 2
  %87 = extractvalue { ptr, ptr, ptr, i32 } %83, 3
  %88 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %84, 0
  %89 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %85, 1
  %90 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %86, 2
  %91 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %87, 3
  %92 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %93 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %84)
  %94 = sext i32 %87 to i64
  %95 = getelementptr ptr, ptr %84, i64 %94
  %96 = getelementptr i8, ptr %95, i64 8
  %97 = load ptr, ptr %96, align 8
  %98 = call align 4 ptr %97({ ptr, ptr, ptr, i32 } %91, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %99 = call { ptr, ptr, ptr, i32 } %98({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr nonnull align 8 %4) #28
  %100 = extractvalue { ptr, ptr, ptr, i32 } %99, 0
  %101 = extractvalue { ptr, ptr, ptr, i32 } %99, 1
  %102 = extractvalue { ptr, ptr, ptr, i32 } %99, 2
  %103 = getelementptr i8, ptr %100, i64 8
  %104 = getelementptr i8, ptr %100, i64 16
  %105 = getelementptr i8, ptr %100, i64 40
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %107 = load ptr, ptr %43, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %6) #46
  %110 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  %111 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %112 = extractvalue { ptr, ptr, ptr, i32 } %109, 2
  %113 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %114 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %110, 0
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %111, 1
  %116 = insertvalue { ptr, ptr, ptr, i32 } %115, ptr %112, 2
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %113, 3
  %118 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %119 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %110)
  %120 = sext i32 %113 to i64
  %121 = getelementptr ptr, ptr %110, i64 %120
  %122 = getelementptr i8, ptr %121, i64 8
  %123 = load ptr, ptr %122, align 8
  %124 = call align 4 ptr %123({ ptr, ptr, ptr, i32 } %117, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %125 = call { ptr, ptr, ptr, i32 } %124({ ptr, ptr, ptr, i32 } %117, { ptr, ptr, ptr, i32 } %117, ptr nonnull align 8 %4) #28
  %126 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  %127 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %128 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %129 = getelementptr i8, ptr %126, i64 8
  %130 = getelementptr i8, ptr %126, i64 16
  %131 = getelementptr i8, ptr %126, i64 40
  %132 = load i64, ptr %103, align 4, !noalias !25
  %133 = load i64, ptr %104, align 4, !noalias !25
  %134 = load ptr, ptr %105, align 8, !noalias !25
  %135 = mul i64 %132, 8673632051301757104
  %136 = lshr i64 %135, 32
  %137 = xor i64 %136, %135
  %138 = and i64 %137, %133
  %139 = getelementptr i32, ptr %134, i64 %138
  %140 = load i32, ptr %139, align 4, !noalias !25
  %141 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterator, ptr undef, ptr undef, i32 undef }, ptr %76, 1
  %142 = insertvalue { ptr, ptr, ptr, i32 } %141, ptr undef, 2
  %143 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 416, ptr nocapture nofree noundef align 8 %5)
  %145 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 16 dereferenceable(176) @ZipIterator) #43
  %146 = getelementptr inbounds i8, ptr %76, i64 24
  store ptr %100, ptr %146, align 8
  %147 = getelementptr inbounds i8, ptr %76, i64 32
  store ptr %101, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %76, i64 40
  store ptr %102, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %76, i64 48
  store i32 %140, ptr %149, align 8
  %150 = load i64, ptr %129, align 4, !noalias !25
  %151 = load i64, ptr %130, align 4, !noalias !25
  %152 = load ptr, ptr %131, align 8, !noalias !25
  %153 = mul i64 %150, 8673632051301757104
  %154 = lshr i64 %153, 32
  %155 = xor i64 %154, %153
  %156 = and i64 %155, %151
  %157 = getelementptr i32, ptr %152, i64 %156
  %158 = load i32, ptr %157, align 4, !noalias !644
  %159 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 16 dereferenceable(176) @ZipIterator) #43
  %160 = getelementptr inbounds i8, ptr %76, i64 56
  store ptr %126, ptr %160, align 8
  %161 = getelementptr inbounds i8, ptr %76, i64 64
  store ptr %127, ptr %161, align 8
  %162 = getelementptr inbounds i8, ptr %76, i64 72
  store ptr %128, ptr %162, align 8
  %163 = getelementptr inbounds i8, ptr %76, i64 80
  store i32 %158, ptr %163, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %142, i32 19, 3
  ret { ptr, ptr, ptr, i32 } %164
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ZipIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 88, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ZipIterator_field_ZipIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ZipIterator_field_ZipIterator_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ZipIterator_field_ZipIterator_2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @ZipIterator_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !647
  %12 = load i64, ptr %9, align 4, !noalias !647
  %13 = load ptr, ptr %10, align 8, !noalias !647
  %14 = mul i64 %11, -2141114445739585318
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !647
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 8673632051301757104
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !650
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 24
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 8673632051301757104
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !653
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 32
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !656
  %11 = load i64, ptr %8, align 4, !noalias !656
  %12 = load ptr, ptr %9, align 8, !noalias !656
  %13 = mul i64 %10, -2141114445739585318
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !656
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = extractvalue { ptr, i160 } %41, 0
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef align 8 %5)
  %44 = getelementptr i8, ptr %21, i64 32
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call { ptr, ptr, ptr, i32 } %46(ptr %6) #46
  %48 = extractvalue { ptr, ptr, ptr, i32 } %47, 0
  %49 = extractvalue { ptr, ptr, ptr, i32 } %47, 1
  %50 = extractvalue { ptr, ptr, ptr, i32 } %47, 2
  %51 = extractvalue { ptr, ptr, ptr, i32 } %47, 3
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %49, 1
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %50, 2
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %51, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %48)
  %58 = sext i32 %51 to i64
  %59 = getelementptr ptr, ptr %48, i64 %58
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = call align 4 ptr %61({ ptr, ptr, ptr, i32 } %55, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull align 8 %4) #28
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef align 8 %5)
  %65 = load ptr, ptr %21, align 8
  %66 = icmp ne ptr %42, @nil_typ
  %67 = icmp ne ptr %42, null
  %68 = and i1 %66, %67
  br i1 %68, label %69, label %162

69:                                               ; preds = %3
  %70 = extractvalue { ptr, i160 } %63, 0
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 8 %5)
  %72 = icmp ne ptr %70, @nil_typ
  %73 = icmp ne ptr %70, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %162

75:                                               ; preds = %69
  %76 = getelementptr i8, ptr %21, i64 8
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 8 %5)
  %79 = call align 8 ptr %65(ptr nocapture nofree noundef nonnull readonly %6) #2
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 8 %5)
  %81 = call align 8 ptr %77(ptr nocapture nofree noundef nonnull readonly %6) #2
  %82 = load ptr, ptr %79, align 8, !alias.scope !659
  %83 = getelementptr i8, ptr %82, i64 72
  %84 = load ptr, ptr %83, align 8, !alias.scope !659
  %85 = call { i64, i64 } %84(ptr nocapture nofree nonnull readonly align 8 %79) #2, !alias.scope !659
  %86 = extractvalue { i64, i64 } %85, 0
  %87 = extractvalue { i64, i64 } %85, 1
  %88 = urem i64 16, %87
  %89 = icmp eq i64 %88, 0
  %90 = sub i64 %87, %88
  %91 = select i1 %89, i64 0, i64 %90
  %92 = add i64 %86, 16
  %93 = add i64 %92, %91
  %94 = load ptr, ptr %81, align 8, !alias.scope !659
  %95 = getelementptr i8, ptr %94, i64 72
  %96 = load ptr, ptr %95, align 8, !alias.scope !659
  %97 = call { i64, i64 } %96(ptr nocapture nofree nonnull readonly align 8 %81) #2, !alias.scope !659
  %98 = extractvalue { i64, i64 } %97, 0
  %99 = extractvalue { i64, i64 } %97, 1
  %100 = call i64 @llvm.umax.i64(i64 %87, i64 %99) #44
  %101 = call i64 @llvm.umax.i64(i64 %100, i64 noundef 8) #44, !range !18
  %102 = urem i64 %93, %99
  %103 = icmp eq i64 %102, 0
  %104 = sub i64 %99, %102
  %105 = select i1 %103, i64 0, i64 %104
  %106 = add i64 %98, %93
  %107 = add i64 %106, %105
  %108 = urem i64 %107, %101
  %109 = icmp eq i64 %108, 0
  %110 = sub i64 %101, %108
  %111 = select i1 %109, i64 0, i64 %110
  %112 = add i64 %111, %107
  %113 = call noalias nonnull align 8 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef %112, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %79, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %81, ptr %114, align 8
  %115 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %113)
  %116 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 8 %5)
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 96, ptr nocapture nofree noundef nonnull align 8 %5)
  %118 = load ptr, ptr %79, align 8
  %119 = getelementptr i8, ptr %118, i64 72
  %120 = load ptr, ptr %119, align 8
  %121 = call { i64, i64 } %120(ptr nocapture nofree nonnull readonly align 8 %79) #2
  %122 = extractvalue { i64, i64 } %121, 1
  %123 = urem i64 16, %122
  %124 = icmp eq i64 %123, 0
  %125 = sub i64 %122, %123
  %126 = add i64 %125, 16
  %127 = select i1 %124, i64 16, i64 %126
  %128 = getelementptr i8, ptr %113, i64 %127
  %129 = getelementptr i8, ptr %118, i64 64
  %130 = load ptr, ptr %129, align 8
  call void %130({ ptr, i160 } %41, ptr nocapture nofree nonnull readonly align 8 %79, ptr nocapture nofree writeonly %128) #8
  %131 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @Pair) #43
  %132 = load ptr, ptr %113, align 8
  %133 = load ptr, ptr %132, align 8
  %134 = getelementptr i8, ptr %133, i64 72
  %135 = load ptr, ptr %134, align 8
  %136 = call { i64, i64 } %135(ptr nocapture nofree nonnull readonly align 8 %132) #2
  %137 = extractvalue { i64, i64 } %136, 0
  %138 = extractvalue { i64, i64 } %136, 1
  %139 = urem i64 16, %138
  %140 = icmp eq i64 %139, 0
  %141 = sub i64 %138, %139
  %142 = select i1 %140, i64 0, i64 %141
  %143 = add i64 %137, 16
  %144 = add i64 %143, %142
  %145 = load ptr, ptr %114, align 8
  %146 = load ptr, ptr %145, align 8
  %147 = getelementptr i8, ptr %146, i64 72
  %148 = load ptr, ptr %147, align 8
  %149 = call { i64, i64 } %148(ptr nocapture nofree nonnull readonly align 8 %145) #2
  %150 = extractvalue { i64, i64 } %149, 1
  %151 = urem i64 %144, %150
  %152 = icmp eq i64 %151, 0
  %153 = sub i64 %150, %151
  %154 = select i1 %152, i64 0, i64 %153
  %155 = getelementptr i8, ptr %113, i64 %144
  %156 = getelementptr i8, ptr %155, i64 %154
  %157 = getelementptr i8, ptr %146, i64 64
  %158 = load ptr, ptr %157, align 8
  call void %158({ ptr, i160 } %63, ptr nocapture nofree nonnull readonly align 8 %145, ptr nocapture nofree writeonly %156) #8
  %159 = ptrtoint ptr %113 to i64
  %160 = zext i64 %159 to i160
  %161 = or disjoint i160 %160, 3402823669209384634633746074317682114560
  br label %162

162:                                              ; preds = %75, %69, %3
  %163 = phi i160 [ %161, %75 ], [ poison, %3 ], [ poison, %69 ]
  %164 = phi ptr [ @Pair, %75 ], [ @nil_typ, %3 ], [ @nil_typ, %69 ]
  %165 = insertvalue { ptr, i160 } poison, ptr %164, 0
  %166 = insertvalue { ptr, i160 } %165, i160 %163, 1
  ret { ptr, i160 } %166
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ZipIterator_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 56
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 64
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 72
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 80
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ZipIterator_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 32
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 40
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 48
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ZipIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 56
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 64
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 72
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 80
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ZipIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 24
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 32
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 40
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 48
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_InterleaveIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @InterleaveIterable_field_InterleaveIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @InterleaveIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !662
  %12 = load i64, ptr %9, align 4, !noalias !662
  %13 = load ptr, ptr %10, align 8, !noalias !662
  %14 = mul i64 %11, 4936782714255954462
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !662
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 3037712219555723519
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !665
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 3037712219555723519
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !668
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 16
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !671
  %11 = load i64, ptr %8, align 4, !noalias !671
  %12 = load ptr, ptr %9, align 8, !noalias !671
  %13 = mul i64 %10, 4936782714255954462
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !671
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %43 = getelementptr i8, ptr %21, i64 16
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr, ptr, ptr, i32 } %45(ptr %6) #46
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 2
  %50 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %48, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %49, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %50, 3
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %47)
  %57 = sext i32 %50 to i64
  %58 = getelementptr ptr, ptr %47, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = call align 4 ptr %60({ ptr, ptr, ptr, i32 } %54, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull align 8 %4) #28
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %64 = load ptr, ptr %21, align 8
  %65 = call align 4 ptr %64(ptr nocapture nofree noundef nonnull readonly %6) #2
  %66 = call noalias nonnull align 8 dereferenceable(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %65, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(80) %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %69 = load ptr, ptr %22, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = call { ptr, ptr, ptr, i32 } %70(ptr %6) #46
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 2
  %75 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %72, 0
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %73, 1
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %74, 2
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %75, 3
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %72)
  %82 = sext i32 %75 to i64
  %83 = getelementptr ptr, ptr %72, i64 %82
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load ptr, ptr %84, align 8
  %86 = call align 4 ptr %85({ ptr, ptr, ptr, i32 } %79, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %87 = call { ptr, ptr, ptr, i32 } %86({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr nonnull align 8 %4) #28
  %88 = extractvalue { ptr, ptr, ptr, i32 } %87, 0
  %89 = extractvalue { ptr, ptr, ptr, i32 } %87, 1
  %90 = extractvalue { ptr, ptr, ptr, i32 } %87, 2
  %91 = getelementptr i8, ptr %88, i64 8
  %92 = getelementptr i8, ptr %88, i64 16
  %93 = getelementptr i8, ptr %88, i64 40
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %95 = load ptr, ptr %43, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = call { ptr, ptr, ptr, i32 } %96(ptr %6) #46
  %98 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %99 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %100 = extractvalue { ptr, ptr, ptr, i32 } %97, 2
  %101 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %103 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %99, 1
  %104 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %100, 2
  %105 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %101, 3
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %98)
  %108 = sext i32 %101 to i64
  %109 = getelementptr ptr, ptr %98, i64 %108
  %110 = getelementptr i8, ptr %109, i64 8
  %111 = load ptr, ptr %110, align 8
  %112 = call align 4 ptr %111({ ptr, ptr, ptr, i32 } %105, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %113 = call { ptr, ptr, ptr, i32 } %112({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr nonnull align 8 %4) #28
  %114 = extractvalue { ptr, ptr, ptr, i32 } %113, 0
  %115 = extractvalue { ptr, ptr, ptr, i32 } %113, 1
  %116 = extractvalue { ptr, ptr, ptr, i32 } %113, 2
  %117 = getelementptr i8, ptr %114, i64 8
  %118 = getelementptr i8, ptr %114, i64 16
  %119 = getelementptr i8, ptr %114, i64 40
  %120 = load i64, ptr %91, align 4, !noalias !25
  %121 = load i64, ptr %92, align 4, !noalias !25
  %122 = load ptr, ptr %93, align 8, !noalias !25
  %123 = mul i64 %120, 8673632051301757104
  %124 = lshr i64 %123, 32
  %125 = xor i64 %124, %123
  %126 = and i64 %125, %121
  %127 = getelementptr i32, ptr %122, i64 %126
  %128 = load i32, ptr %127, align 4, !noalias !25
  %129 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterator, ptr undef, ptr undef, i32 undef }, ptr %66, 1
  %130 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr undef, 2
  %131 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %133 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @InterleaveIterator) #43
  %134 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %88, ptr %134, align 8
  %135 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr %89, ptr %135, align 8
  %136 = getelementptr inbounds i8, ptr %66, i64 24
  store ptr %90, ptr %136, align 8
  %137 = getelementptr inbounds i8, ptr %66, i64 32
  store i32 %128, ptr %137, align 8
  %138 = load i64, ptr %117, align 4, !noalias !25
  %139 = load i64, ptr %118, align 4, !noalias !25
  %140 = load ptr, ptr %119, align 8, !noalias !25
  %141 = mul i64 %138, 8673632051301757104
  %142 = lshr i64 %141, 32
  %143 = xor i64 %142, %141
  %144 = and i64 %143, %139
  %145 = getelementptr i32, ptr %140, i64 %144
  %146 = load i32, ptr %145, align 4, !noalias !674
  %147 = getelementptr inbounds i8, ptr %66, i64 40
  store ptr %114, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %66, i64 48
  store ptr %115, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %66, i64 56
  store ptr %116, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %66, i64 64
  store i32 %146, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @InterleaveIterator) #43
  %152 = getelementptr inbounds i8, ptr %66, i64 72
  store i1 true, ptr %152, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 18, 3
  ret { ptr, ptr, ptr, i32 } %153
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_InterleaveIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @InterleaveIterator_field_InterleaveIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @InterleaveIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !677
  %12 = load i64, ptr %9, align 4, !noalias !677
  %13 = load ptr, ptr %10, align 8, !noalias !677
  %14 = mul i64 %11, -3924664358248524505
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !677
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 8673632051301757104
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !680
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 8673632051301757104
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !683
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 16
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %71 = getelementptr i8, ptr %37, i64 24
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr i8, ptr %72, i64 8
  %74 = load ptr, ptr %73, align 8
  call void %74(ptr %7, i1 true) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !686
  %11 = load i64, ptr %8, align 4, !noalias !686
  %12 = load ptr, ptr %9, align 8, !noalias !686
  %13 = mul i64 %10, -3924664358248524505
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !686
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i1 %24(ptr %6) #46
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %27 = getelementptr i8, ptr %23, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = xor i1 %25, true
  %30 = select i1 %25, i64 8, i64 16
  call void %28(ptr %6, i1 %29) #45
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %32 = getelementptr i8, ptr %21, i64 %30
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %6) #46
  %36 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %37 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %38 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %39 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %37, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %38, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %39, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #43
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %36) #43
  %46 = sext i32 %39 to i64
  %47 = getelementptr ptr, ptr %36, i64 %46
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = call align 4 ptr %49({ ptr, ptr, ptr, i32 } %43, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %51 = call { ptr, i160 } %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull align 8 %4) #28
  ret { ptr, i160 } %51
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i1 @InterleaveIterator_getter_on_first(ptr nocapture nofree readonly %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @InterleaveIterator_setter_on_first(ptr nocapture nofree writeonly %0, i1 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @InterleaveIterator_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 48
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 56
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 64
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @InterleaveIterator_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @InterleaveIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 48
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 56
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 64
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @InterleaveIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ChainIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ChainIterable_field_ChainIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @ChainIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !689
  %12 = load i64, ptr %9, align 4, !noalias !689
  %13 = load ptr, ptr %10, align 8, !noalias !689
  %14 = mul i64 %11, -2370247058431047815
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !689
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 3037712219555723519
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !692
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 3037712219555723519
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !695
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 16
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !698
  %11 = load i64, ptr %8, align 4, !noalias !698
  %12 = load ptr, ptr %9, align 8, !noalias !698
  %13 = mul i64 %10, -2370247058431047815
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !698
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %43 = getelementptr i8, ptr %21, i64 16
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr, ptr, ptr, i32 } %45(ptr %6) #46
  %47 = extractvalue { ptr, ptr, ptr, i32 } %46, 0
  %48 = extractvalue { ptr, ptr, ptr, i32 } %46, 1
  %49 = extractvalue { ptr, ptr, ptr, i32 } %46, 2
  %50 = extractvalue { ptr, ptr, ptr, i32 } %46, 3
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %47, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %48, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %49, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %50, 3
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %47)
  %57 = sext i32 %50 to i64
  %58 = getelementptr ptr, ptr %47, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = call align 4 ptr %60({ ptr, ptr, ptr, i32 } %54, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %62 = call { ptr, ptr, ptr, i32 } %61({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull align 8 %4) #28
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %64 = load ptr, ptr %21, align 8
  %65 = call align 4 ptr %64(ptr nocapture nofree noundef nonnull readonly %6) #2
  %66 = call noalias nonnull align 8 dereferenceable(80) ptr @bump_malloc_inner(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %65, ptr %66, align 8
  %67 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(80) %66)
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %69 = load ptr, ptr %22, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = call { ptr, ptr, ptr, i32 } %70(ptr %6) #46
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 2
  %75 = extractvalue { ptr, ptr, ptr, i32 } %71, 3
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %72, 0
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %73, 1
  %78 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %74, 2
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %75, 3
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %72)
  %82 = sext i32 %75 to i64
  %83 = getelementptr ptr, ptr %72, i64 %82
  %84 = getelementptr i8, ptr %83, i64 8
  %85 = load ptr, ptr %84, align 8
  %86 = call align 4 ptr %85({ ptr, ptr, ptr, i32 } %79, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %87 = call { ptr, ptr, ptr, i32 } %86({ ptr, ptr, ptr, i32 } %79, { ptr, ptr, ptr, i32 } %79, ptr nonnull align 8 %4) #28
  %88 = extractvalue { ptr, ptr, ptr, i32 } %87, 0
  %89 = extractvalue { ptr, ptr, ptr, i32 } %87, 1
  %90 = extractvalue { ptr, ptr, ptr, i32 } %87, 2
  %91 = getelementptr i8, ptr %88, i64 8
  %92 = getelementptr i8, ptr %88, i64 16
  %93 = getelementptr i8, ptr %88, i64 40
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %95 = load ptr, ptr %43, align 8
  %96 = load ptr, ptr %95, align 8
  %97 = call { ptr, ptr, ptr, i32 } %96(ptr %6) #46
  %98 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %99 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %100 = extractvalue { ptr, ptr, ptr, i32 } %97, 2
  %101 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %98, 0
  %103 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %99, 1
  %104 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %100, 2
  %105 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %101, 3
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %98)
  %108 = sext i32 %101 to i64
  %109 = getelementptr ptr, ptr %98, i64 %108
  %110 = getelementptr i8, ptr %109, i64 8
  %111 = load ptr, ptr %110, align 8
  %112 = call align 4 ptr %111({ ptr, ptr, ptr, i32 } %105, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %113 = call { ptr, ptr, ptr, i32 } %112({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr nonnull align 8 %4) #28
  %114 = extractvalue { ptr, ptr, ptr, i32 } %113, 0
  %115 = extractvalue { ptr, ptr, ptr, i32 } %113, 1
  %116 = extractvalue { ptr, ptr, ptr, i32 } %113, 2
  %117 = getelementptr i8, ptr %114, i64 8
  %118 = getelementptr i8, ptr %114, i64 16
  %119 = getelementptr i8, ptr %114, i64 40
  %120 = load i64, ptr %91, align 4, !noalias !25
  %121 = load i64, ptr %92, align 4, !noalias !25
  %122 = load ptr, ptr %93, align 8, !noalias !25
  %123 = mul i64 %120, 8673632051301757104
  %124 = lshr i64 %123, 32
  %125 = xor i64 %124, %123
  %126 = and i64 %125, %121
  %127 = getelementptr i32, ptr %122, i64 %126
  %128 = load i32, ptr %127, align 4, !noalias !25
  %129 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterator, ptr undef, ptr undef, i32 undef }, ptr %66, 1
  %130 = insertvalue { ptr, ptr, ptr, i32 } %129, ptr undef, 2
  %131 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %133 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @ChainIterator) #43
  %134 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %88, ptr %134, align 8
  %135 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr %89, ptr %135, align 8
  %136 = getelementptr inbounds i8, ptr %66, i64 24
  store ptr %90, ptr %136, align 8
  %137 = getelementptr inbounds i8, ptr %66, i64 32
  store i32 %128, ptr %137, align 8
  %138 = load i64, ptr %117, align 4, !noalias !25
  %139 = load i64, ptr %118, align 4, !noalias !25
  %140 = load ptr, ptr %119, align 8, !noalias !25
  %141 = mul i64 %138, 8673632051301757104
  %142 = lshr i64 %141, 32
  %143 = xor i64 %142, %141
  %144 = and i64 %143, %139
  %145 = getelementptr i32, ptr %140, i64 %144
  %146 = load i32, ptr %145, align 4, !noalias !701
  %147 = getelementptr inbounds i8, ptr %66, i64 40
  store ptr %114, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %66, i64 48
  store ptr %115, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %66, i64 56
  store ptr %116, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %66, i64 64
  store i32 %146, ptr %150, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @ChainIterator) #43
  %152 = getelementptr inbounds i8, ptr %66, i64 72
  store i1 true, ptr %152, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %130, i32 18, 3
  ret { ptr, ptr, ptr, i32 } %153
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ChainIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 80, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ChainIterator_field_ChainIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @ChainIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !704
  %12 = load i64, ptr %9, align 4, !noalias !704
  %13 = load ptr, ptr %10, align 8, !noalias !704
  %14 = mul i64 %11, 6043157723929225452
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !704
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 8673632051301757104
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !707
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %47 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %48 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %49 = getelementptr i8, ptr %46, i64 8
  %50 = getelementptr i8, ptr %46, i64 16
  %51 = getelementptr i8, ptr %46, i64 40
  %52 = load i64, ptr %49, align 4, !noalias !25
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load ptr, ptr %51, align 8, !noalias !25
  %55 = mul i64 %52, 8673632051301757104
  %56 = lshr i64 %55, 32
  %57 = xor i64 %56, %55
  %58 = and i64 %57, %53
  %59 = getelementptr i32, ptr %54, i64 %58
  %60 = load i32, ptr %59, align 4, !noalias !710
  %61 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %62 = getelementptr i8, ptr %37, i64 16
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %46, 0
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %47, 1
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %48, 2
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %60, 3
  call void %65(ptr %7, { ptr, ptr, ptr, i32 } %69) #45
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %71 = getelementptr i8, ptr %37, i64 24
  %72 = load ptr, ptr %71, align 8
  %73 = getelementptr i8, ptr %72, i64 8
  %74 = load ptr, ptr %73, align 8
  call void %74(ptr %7, i1 true) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !713
  %11 = load i64, ptr %8, align 4, !noalias !713
  %12 = load ptr, ptr %9, align 8, !noalias !713
  %13 = mul i64 %10, 6043157723929225452
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !713
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5) #53
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i1 %24(ptr %6) #46
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5) #53
  br i1 %25, label %49, label %27

27:                                               ; preds = %3
  %28 = getelementptr i8, ptr %21, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr, ptr, ptr, i32 } %30(ptr %6) #46
  %32 = extractvalue { ptr, ptr, ptr, i32 } %31, 0
  %33 = extractvalue { ptr, ptr, ptr, i32 } %31, 1
  %34 = extractvalue { ptr, ptr, ptr, i32 } %31, 2
  %35 = extractvalue { ptr, ptr, ptr, i32 } %31, 3
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %33, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %34, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %35, 3
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %32)
  %42 = sext i32 %35 to i64
  %43 = getelementptr ptr, ptr %32, i64 %42
  %44 = getelementptr i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = call align 4 ptr %45({ ptr, ptr, ptr, i32 } %39, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %47 = call { ptr, i160 } %46({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull align 8 %4) #28
  %48 = extractvalue { ptr, i160 } %47, 0
  br label %81

49:                                               ; preds = %3
  %50 = getelementptr i8, ptr %21, i64 8
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr, ptr, ptr, i32 } %52(ptr %6) #46
  %54 = extractvalue { ptr, ptr, ptr, i32 } %53, 0
  %55 = extractvalue { ptr, ptr, ptr, i32 } %53, 1
  %56 = extractvalue { ptr, ptr, ptr, i32 } %53, 2
  %57 = extractvalue { ptr, ptr, ptr, i32 } %53, 3
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %59 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %55, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %56, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %57, 3
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %54)
  %64 = sext i32 %57 to i64
  %65 = getelementptr ptr, ptr %54, i64 %64
  %66 = getelementptr i8, ptr %65, i64 8
  %67 = load ptr, ptr %66, align 8
  %68 = call align 4 ptr %67({ ptr, ptr, ptr, i32 } %61, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %69 = call { ptr, i160 } %68({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull align 8 %4) #28
  %70 = extractvalue { ptr, i160 } %69, 0
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5)
  %72 = icmp eq ptr %70, @nil_typ
  %73 = icmp eq ptr %70, null
  %74 = or i1 %72, %73
  br i1 %74, label %75, label %81

75:                                               ; preds = %49
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5)
  br label %77

77:                                               ; preds = %77, %75
  %78 = load ptr, ptr %22, align 8
  %79 = getelementptr i8, ptr %78, i64 8
  %80 = load ptr, ptr %79, align 8
  call void %80(ptr %6, i1 false) #45
  br label %77

81:                                               ; preds = %49, %27
  %82 = phi ptr [ %48, %27 ], [ %70, %49 ]
  %83 = phi { ptr, i160 } [ %47, %27 ], [ %69, %49 ]
  %84 = insertvalue { ptr, i160 } poison, ptr %82, 0
  %85 = extractvalue { ptr, i160 } %83, 1
  %86 = insertvalue { ptr, i160 } %84, i160 %85, 1
  ret { ptr, i160 } %86
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i1 @ChainIterator_getter_on_first(ptr nocapture nofree readonly %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ChainIterator_setter_on_first(ptr nocapture nofree writeonly %0, i1 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ChainIterator_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 48
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 56
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 64
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ChainIterator_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ChainIterable_setter_second(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 48
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 56
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 64
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ChainIterable_setter_first(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_FilterIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @FilterIterable_field_FilterIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @FilterIterable_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !716
  %12 = load i64, ptr %9, align 4, !noalias !716
  %13 = load ptr, ptr %10, align 8, !noalias !716
  %14 = mul i64 %11, 8498466713076104350
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !716
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 3037712219555723519
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !719
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %6) #43
  %47 = getelementptr i8, ptr %37, i64 16
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %7, { ptr } %4) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !722
  %11 = load i64, ptr %8, align 4, !noalias !722
  %12 = load ptr, ptr %9, align 8, !noalias !722
  %13 = mul i64 %10, 8498466713076104350
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !722
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %43 = getelementptr i8, ptr %21, i64 16
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr } %45(ptr nonnull %6) #46
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %48 = load ptr, ptr %21, align 8
  %49 = call align 4 ptr %48(ptr nocapture nofree noundef nonnull readonly %6) #2
  %50 = call noalias nonnull align 8 dereferenceable(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %49, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(48) %50)
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %53 = load ptr, ptr %22, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call { ptr, ptr, ptr, i32 } %54(ptr %6) #46
  %56 = extractvalue { ptr, ptr, ptr, i32 } %55, 0
  %57 = extractvalue { ptr, ptr, ptr, i32 } %55, 1
  %58 = extractvalue { ptr, ptr, ptr, i32 } %55, 2
  %59 = extractvalue { ptr, ptr, ptr, i32 } %55, 3
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %57, 1
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %58, 2
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %59, 3
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %56)
  %66 = sext i32 %59 to i64
  %67 = getelementptr ptr, ptr %56, i64 %66
  %68 = getelementptr i8, ptr %67, i64 8
  %69 = load ptr, ptr %68, align 8
  %70 = call align 4 ptr %69({ ptr, ptr, ptr, i32 } %63, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %71 = call { ptr, ptr, ptr, i32 } %70({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr nonnull align 8 %4) #28
  %72 = extractvalue { ptr, ptr, ptr, i32 } %71, 0
  %73 = extractvalue { ptr, ptr, ptr, i32 } %71, 1
  %74 = extractvalue { ptr, ptr, ptr, i32 } %71, 2
  %75 = getelementptr i8, ptr %72, i64 8
  %76 = getelementptr i8, ptr %72, i64 16
  %77 = getelementptr i8, ptr %72, i64 40
  %78 = load i64, ptr %75, align 4, !noalias !25
  %79 = load i64, ptr %76, align 4, !noalias !25
  %80 = load ptr, ptr %77, align 8, !noalias !25
  %81 = mul i64 %78, 8673632051301757104
  %82 = lshr i64 %81, 32
  %83 = xor i64 %82, %81
  %84 = and i64 %83, %79
  %85 = getelementptr i32, ptr %80, i64 %84
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %87 = load ptr, ptr %43, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr %6) #46
  %90 = load i32, ptr %85, align 4, !noalias !25
  %91 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterator, ptr undef, ptr undef, i32 undef }, ptr %50, 1
  %92 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr undef, 2
  %93 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 400, ptr nocapture nofree noundef align 8 %5)
  %95 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %72, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %73, ptr %96, align 8
  %97 = getelementptr inbounds i8, ptr %50, i64 24
  store ptr %74, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %50, i64 32
  store i32 %90, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @FilterIterator) #43
  %100 = getelementptr inbounds i8, ptr %50, i64 40
  %101 = extractvalue { ptr } %89, 0
  store ptr %101, ptr %100, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %92, i32 17, 3
  ret { ptr, ptr, ptr, i32 } %102
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_FilterIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @FilterIterator_field_FilterIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !725
  %12 = load i64, ptr %9, align 4, !noalias !725
  %13 = load ptr, ptr %10, align 8, !noalias !725
  %14 = mul i64 %11, -1221365496900303883
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !725
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 8673632051301757104
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !728
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %6) #43
  %47 = getelementptr i8, ptr %37, i64 16
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %7, { ptr } %4) #45
  ret void
}

define dso_local { ptr, i160 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #30 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !731
  %11 = load i64, ptr %8, align 4, !noalias !731
  %12 = load ptr, ptr %9, align 8, !noalias !731
  %13 = mul i64 %10, -1221365496900303883
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !731
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #53
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %26)
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = extractvalue { ptr, i160 } %41, 0
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5)
  %44 = icmp ne ptr %42, @nil_typ
  %45 = icmp ne ptr %42, null
  %46 = and i1 %44, %45
  br i1 %46, label %47, label %94

47:                                               ; preds = %3
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %49 = getelementptr i8, ptr %21, i64 16
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr } %51(ptr %6) #46
  %53 = extractvalue { ptr } %52, 0
  %54 = call i1 %53({ ptr, i160 } %41)
  br i1 %54, label %90, label %55

55:                                               ; preds = %47
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  br label %64

57:                                               ; preds = %64
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %59 = load ptr, ptr %49, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr } %60(ptr %6) #46
  %62 = extractvalue { ptr } %61, 0
  %63 = call i1 %62({ ptr, i160 } %84)
  br i1 %63, label %90, label %64

64:                                               ; preds = %57, %55
  %65 = phi { ptr, i160 } [ %84, %57 ], [ %41, %55 ]
  %66 = load ptr, ptr %22, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %6) #46
  %69 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  %70 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %71 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %72 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %73 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %74 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %70, 1
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %71, 2
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %72, 3
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %69)
  %79 = sext i32 %72 to i64
  %80 = getelementptr ptr, ptr %69, i64 %79
  %81 = getelementptr i8, ptr %80, i64 8
  %82 = load ptr, ptr %81, align 8
  %83 = call align 4 ptr %82({ ptr, ptr, ptr, i32 } %76, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %84 = call { ptr, i160 } %83({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr nonnull align 8 %4) #28
  %85 = extractvalue { ptr, i160 } %84, 0
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %87 = icmp ne ptr %85, @nil_typ
  %88 = icmp ne ptr %85, null
  %89 = and i1 %87, %88
  br i1 %89, label %57, label %90

90:                                               ; preds = %64, %57, %47
  %91 = phi { ptr, i160 } [ %41, %47 ], [ %65, %64 ], [ %84, %57 ]
  %92 = phi ptr [ %42, %47 ], [ @nil_typ, %64 ], [ %85, %57 ]
  %93 = extractvalue { ptr, i160 } %91, 1
  br label %94

94:                                               ; preds = %90, %3
  %95 = phi i160 [ undef, %3 ], [ %93, %90 ]
  %96 = phi ptr [ @nil_typ, %3 ], [ %92, %90 ]
  %97 = insertvalue { ptr, i160 } poison, ptr %96, 0
  %98 = insertvalue { ptr, i160 } %97, i160 %95, 1
  ret { ptr, i160 } %98
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @FilterIterator_getter_f(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @FilterIterator_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @FilterIterator_setter_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @FilterIterable_getter_f(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @FilterIterable_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @FilterIterable_setter_iterable(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_MapIterable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @MapIterable_field_MapIterable_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @MapIterable_field_MapIterable_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @MapIterable_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !734
  %12 = load i64, ptr %9, align 4, !noalias !734
  %13 = load ptr, ptr %10, align 8, !noalias !734
  %14 = mul i64 %11, -7488770571603291722
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !734
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 3037712219555723519
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !737
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 16
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %6) #43
  %47 = getelementptr i8, ptr %37, i64 24
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %7, { ptr } %4) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !740
  %11 = load i64, ptr %8, align 4, !noalias !740
  %12 = load ptr, ptr %9, align 8, !noalias !740
  %13 = mul i64 %10, -7488770571603291722
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !740
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 16
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, ptr, ptr, i32 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %43 = getelementptr i8, ptr %21, i64 24
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call { ptr } %45(ptr nonnull %6) #46
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %48 = load ptr, ptr %21, align 8
  %49 = call align 4 ptr %48(ptr nocapture nofree noundef nonnull readonly %6) #2
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %51 = getelementptr i8, ptr %21, i64 8
  %52 = load ptr, ptr %51, align 8
  %53 = call align 4 ptr %52(ptr nocapture nofree noundef nonnull readonly %6) #2
  %54 = call noalias nonnull align 8 dereferenceable(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %49, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  store ptr %53, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(56) %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %58 = load ptr, ptr %22, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr, ptr, ptr, i32 } %59(ptr %6) #46
  %61 = extractvalue { ptr, ptr, ptr, i32 } %60, 0
  %62 = extractvalue { ptr, ptr, ptr, i32 } %60, 1
  %63 = extractvalue { ptr, ptr, ptr, i32 } %60, 2
  %64 = extractvalue { ptr, ptr, ptr, i32 } %60, 3
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %61, 0
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %62, 1
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %63, 2
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %64, 3
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef %61)
  %71 = sext i32 %64 to i64
  %72 = getelementptr ptr, ptr %61, i64 %71
  %73 = getelementptr i8, ptr %72, i64 8
  %74 = load ptr, ptr %73, align 8
  %75 = call align 4 ptr %74({ ptr, ptr, ptr, i32 } %68, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %76 = call { ptr, ptr, ptr, i32 } %75({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull align 8 %4) #28
  %77 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  %78 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %79 = extractvalue { ptr, ptr, ptr, i32 } %76, 2
  %80 = getelementptr i8, ptr %77, i64 8
  %81 = getelementptr i8, ptr %77, i64 16
  %82 = getelementptr i8, ptr %77, i64 40
  %83 = load i64, ptr %80, align 4, !noalias !25
  %84 = load i64, ptr %81, align 4, !noalias !25
  %85 = load ptr, ptr %82, align 8, !noalias !25
  %86 = mul i64 %83, 8673632051301757104
  %87 = lshr i64 %86, 32
  %88 = xor i64 %87, %86
  %89 = and i64 %88, %84
  %90 = getelementptr i32, ptr %85, i64 %89
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %92 = load ptr, ptr %43, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr } %93(ptr %6) #46
  %95 = load i32, ptr %90, align 4, !noalias !25
  %96 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterator, ptr undef, ptr undef, i32 undef }, ptr %54, 1
  %97 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr undef, 2
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %100 = call ptr @llvm.invariant.start.p0(i64 noundef 408, ptr nocapture nofree noundef align 8 %5)
  %101 = getelementptr inbounds i8, ptr %54, i64 16
  store ptr %77, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %54, i64 24
  store ptr %78, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %54, i64 32
  store ptr %79, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %54, i64 40
  store i32 %95, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 16 dereferenceable(168) @MapIterator) #43
  %106 = getelementptr inbounds i8, ptr %54, i64 48
  %107 = extractvalue { ptr } %94, 0
  store ptr %107, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %97, i32 18, 3
  ret { ptr, ptr, ptr, i32 } %108
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_MapIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @MapIterator_field_MapIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @MapIterator_field_MapIterator_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @MapIterator_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !743
  %12 = load i64, ptr %9, align 4, !noalias !743
  %13 = load ptr, ptr %10, align 8, !noalias !743
  %14 = mul i64 %11, -146553482626734782
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !743
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %22 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %23 = getelementptr i8, ptr %20, i64 8
  %24 = getelementptr i8, ptr %20, i64 16
  %25 = getelementptr i8, ptr %20, i64 40
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load i64, ptr %24, align 4, !noalias !25
  %28 = load ptr, ptr %25, align 8, !noalias !25
  %29 = mul i64 %26, 8673632051301757104
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !746
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %36 = sext i32 %19 to i64
  %37 = getelementptr ptr, ptr %6, i64 %36
  %38 = getelementptr i8, ptr %37, i64 16
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 8
  %41 = load ptr, ptr %40, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %22, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %34, 3
  call void %41(ptr %7, { ptr, ptr, ptr, i32 } %45) #45
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %6) #43
  %47 = getelementptr i8, ptr %37, i64 24
  %48 = load ptr, ptr %47, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  call void %50(ptr %7, { ptr } %4) #45
  ret void
}

define dso_local { ptr, i160 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #30 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !749
  %11 = load i64, ptr %8, align 4, !noalias !749
  %12 = load ptr, ptr %9, align 8, !noalias !749
  %13 = mul i64 %10, -146553482626734782
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !749
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 16
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr, i160 } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = extractvalue { ptr, i160 } %41, 0
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef align 8 %5)
  %44 = icmp ne ptr %42, @nil_typ
  %45 = icmp ne ptr %42, null
  %46 = and i1 %44, %45
  br i1 %46, label %47, label %57

47:                                               ; preds = %3
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 88, ptr nocapture nofree noundef nonnull align 8 %5)
  %49 = getelementptr i8, ptr %21, i64 24
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call { ptr } %51(ptr %6) #46
  %53 = extractvalue { ptr } %52, 0
  %54 = call { ptr, i160 } %53({ ptr, i160 } %41)
  %55 = extractvalue { ptr, i160 } %54, 0
  %56 = extractvalue { ptr, i160 } %54, 1
  br label %57

57:                                               ; preds = %47, %3
  %58 = phi ptr [ %55, %47 ], [ @nil_typ, %3 ]
  %59 = phi i160 [ %56, %47 ], [ undef, %3 ]
  %60 = insertvalue { ptr, i160 } poison, ptr %58, 0
  %61 = insertvalue { ptr, i160 } %60, i160 %59, 1
  ret { ptr, i160 } %61
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @MapIterator_getter_f(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @MapIterator_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 48
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @MapIterator_setter_iterator(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 16
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 24
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 32
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 40
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @MapIterable_getter_f(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @MapIterable_setter_f(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 48
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @MapIterable_setter_iterable(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 16
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 24
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 32
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 40
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_StringIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local noundef nonnull align 8 dereferenceable(16) ptr @StringIterator_field_StringIterator_0(ptr nocapture nofree readnone %0) #1 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #6 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !752
  %11 = load i64, ptr %8, align 4, !noalias !752
  %12 = load ptr, ptr %9, align 8, !noalias !752
  %13 = mul i64 %10, -7260570988945952630
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !752
  %19 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %22 = getelementptr i8, ptr %19, i64 8
  %23 = getelementptr i8, ptr %19, i64 16
  %24 = getelementptr i8, ptr %19, i64 40
  %25 = load i64, ptr %22, align 4, !noalias !25
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load ptr, ptr %24, align 8, !noalias !25
  %28 = mul i64 %25, 6499063144389013426
  %29 = lshr i64 %28, 32
  %30 = xor i64 %29, %28
  %31 = and i64 %30, %26
  %32 = getelementptr i32, ptr %27, i64 %31
  %33 = load i32, ptr %32, align 4, !noalias !755
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #43
  %35 = sext i32 %18 to i64
  %36 = getelementptr ptr, ptr %5, i64 %35
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %20, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %21, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %33, 3
  call void %39(ptr %6, { ptr, ptr, ptr, i32 } %43) #45
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #43
  %45 = getelementptr i8, ptr %36, i64 8
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  call void %48(ptr %6, i32 0) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !758
  %11 = load i64, ptr %8, align 4, !noalias !758
  %12 = load ptr, ptr %9, align 8, !noalias !758
  %13 = mul i64 %10, -7260570988945952630
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !758
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 %24(ptr %6) #46
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #55
  %27 = load ptr, ptr %21, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, ptr, ptr, i32 } %28(ptr %6) #46
  %30 = extractvalue { ptr, ptr, ptr, i32 } %29, 0
  %31 = extractvalue { ptr, ptr, ptr, i32 } %29, 1
  %32 = extractvalue { ptr, ptr, ptr, i32 } %29, 2
  %33 = extractvalue { ptr, ptr, ptr, i32 } %29, 3
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %31, 1
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %32, 2
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %33, 3
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %30) #55
  %40 = sext i32 %33 to i64
  %41 = getelementptr ptr, ptr %30, i64 %40
  %42 = getelementptr i8, ptr %41, i64 56
  %43 = load ptr, ptr %42, align 8
  %44 = call align 4 ptr %43({ ptr, ptr, ptr, i32 } %37, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %45 = call i32 %44({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr nonnull align 8 %4) #28
  %46 = icmp slt i32 %25, %45
  br i1 %46, label %47, label %114

47:                                               ; preds = %3
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %49 = load ptr, ptr %22, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call i32 %50(ptr %6) #46
  %52 = add i32 %51, 1
  %53 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %54 = getelementptr i8, ptr %49, i64 8
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %6, i32 %52) #45
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %57 = load ptr, ptr %21, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr, ptr, ptr, i32 } %58(ptr %6) #46
  %60 = extractvalue { ptr, ptr, ptr, i32 } %59, 0
  %61 = extractvalue { ptr, ptr, ptr, i32 } %59, 1
  %62 = extractvalue { ptr, ptr, ptr, i32 } %59, 2
  %63 = extractvalue { ptr, ptr, ptr, i32 } %59, 3
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %61, 1
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %62, 2
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %63, 3
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %60)
  %70 = sext i32 %63 to i64
  %71 = getelementptr ptr, ptr %60, i64 %70
  %72 = getelementptr i8, ptr %71, i64 72
  %73 = load ptr, ptr %72, align 8
  %74 = call align 4 ptr %73({ ptr, ptr, ptr, i32 } %67, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %75 = call { ptr } %74({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr nonnull align 8 %4) #28
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %77 = load ptr, ptr %22, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call i32 %78(ptr %6) #46
  %80 = call noalias align 4 dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %82 = load ptr, ptr %21, align 8
  %83 = load ptr, ptr %82, align 8
  %84 = call { ptr, ptr, ptr, i32 } %83(ptr %6) #46
  %85 = extractvalue { ptr, ptr, ptr, i32 } %84, 0
  %86 = extractvalue { ptr, ptr, ptr, i32 } %84, 1
  %87 = extractvalue { ptr, ptr, ptr, i32 } %84, 2
  %88 = extractvalue { ptr, ptr, ptr, i32 } %84, 3
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %90 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %86, 1
  %91 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %87, 2
  %92 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %88, 3
  %93 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %85)
  %95 = sext i32 %88 to i64
  %96 = getelementptr ptr, ptr %85, i64 %95
  %97 = getelementptr i8, ptr %96, i64 72
  %98 = load ptr, ptr %97, align 8
  %99 = call align 4 ptr %98({ ptr, ptr, ptr, i32 } %92, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %100 = call { ptr } %99({ ptr, ptr, ptr, i32 } %92, { ptr, ptr, ptr, i32 } %92, ptr nonnull align 8 %4) #28
  %101 = extractvalue { ptr } %100, 0
  %102 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %5)
  %103 = load ptr, ptr %22, align 8
  %104 = load ptr, ptr %103, align 8
  %105 = call i32 %104(ptr %6) #46
  %106 = add i32 %105, -1
  %107 = sext i32 %106 to i64
  %108 = getelementptr i8, ptr %101, i64 %107
  %109 = load i8, ptr %108, align 1
  %110 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 16 dereferenceable(120) @Character) #43
  store i8 %109, ptr %80, align 4
  %111 = ptrtoint ptr %80 to i64
  %112 = zext i64 %111 to i160
  %113 = or disjoint i160 %112, 3402823669209384634633746074317682114560
  br label %114

114:                                              ; preds = %47, %3
  %115 = phi ptr [ @Character, %47 ], [ @nil_typ, %3 ]
  %116 = phi i160 [ %113, %47 ], [ undef, %3 ]
  %117 = insertvalue { ptr, i160 } poison, ptr %115, 0
  %118 = insertvalue { ptr, i160 } %117, i160 %116, 1
  ret { ptr, i160 } %118
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Character(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Character_B_init_bytei8({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_i8_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_i8_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i8, ptr %0, align 1
  %4 = zext i8 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i8_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_i8_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(1) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i8
  store i8 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !761
  %10 = load i64, ptr %7, align 4, !noalias !761
  %11 = load ptr, ptr %8, align 8, !noalias !761
  %12 = mul i64 %9, 6681222582356018452
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !761
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i8 %22(ptr %5) #46
  ret i8 %23
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Character_init_bytei8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i8 %3) #6 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !764
  %11 = load i64, ptr %8, align 4, !noalias !764
  %12 = load ptr, ptr %9, align 8, !noalias !764
  %13 = mul i64 %10, 6681222582356018452
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !764
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  call void %24(ptr %6, i8 %3) #45
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i8 @Character_getter_byte(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %0) #12 {
  %2 = load i8, ptr %0, align 1
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Character_setter_byte(ptr nocapture nofree noundef nonnull writeonly dereferenceable(1) %0, i8 %1) #13 {
  store i8 %1, ptr %0, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @StringIterator_getter_index(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @StringIterator_setter_index(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 32
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(28) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr inbounds i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr inbounds i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr inbounds i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @StringIterator_setter_str(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(28) %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %3, ptr %0, align 8
  %7 = getelementptr inbounds i8, ptr %0, i64 8
  store ptr %4, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %0, i64 24
  store i32 %6, ptr %9, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_i32_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_i32_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i32, ptr %0, align 1
  %4 = zext i32 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_i32_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(4) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i32
  store i32 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_buffer_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_buffer_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(8) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i64, ptr %0, align 1
  %4 = zext i64 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @buffer_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_buffer_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(8) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i64
  store i64 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @String_getter_capacity(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 12
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @String_setter_capacity(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 12
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @String_getter_length(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @String_setter_length(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @String_getter_bytes(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr } undef, ptr %2, 0
  ret { ptr } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @String_setter_bytes(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) %0, { ptr } %1) #13 {
  %3 = extractvalue { ptr } %1, 0
  store ptr %3, ptr %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Representable(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #40 {
  %4 = call noalias align 8 dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <6 x i8> <i8 79, i8 98, i8 106, i8 101, i8 99, i8 116>, ptr %4, align 8
  %5 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %6 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %5, 1
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr undef, 2
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, i32 10, 3
  store ptr %4, ptr %5, align 8
  %9 = getelementptr i8, ptr %5, i64 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 6, i32 7>, ptr %9, align 8
  ret { ptr, ptr, ptr, i32 } %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_i64_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_i64_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(8) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i64, ptr %0, align 1
  %4 = zext i64 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_i64_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(8) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i64
  store i64 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_f64_typ(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, i160 } @_box_f64_typ(ptr nocapture nofree noundef nonnull readonly dereferenceable(8) %0, ptr nocapture nofree readnone %1) #12 {
  %3 = load i64, ptr %0, align 1
  %4 = zext i64 %3 to i160
  %5 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %4, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @_unbox_f64_typ({ ptr, i160 } %0, ptr nocapture nofree readnone %1, ptr nocapture nofree noundef nonnull writeonly dereferenceable(8) %2) #13 {
  %4 = extractvalue { ptr, i160 } %0, 1
  %5 = trunc i160 %4 to i64
  store i64 %5, ptr %2, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Array(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @Array_field_Array_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define dso_local noundef nonnull align 4 ptr @Array_B__Self_from_iterable_iterableIterableT(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #34 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0) #43
  ret ptr @Array__Self_from_iterable_iterableIterableT
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_init_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 504
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 512
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 520
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 528
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Array_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 536
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterableT(ptr nocapture nofree readnone %0, { ptr, ptr, ptr, i32 } %1) #31 {
  %3 = alloca [0 x ptr], align 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %8 = getelementptr i8, ptr %4, i64 8
  %9 = getelementptr i8, ptr %4, i64 16
  %10 = getelementptr i8, ptr %4, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !767
  %12 = load i64, ptr %9, align 4, !noalias !767
  %13 = load ptr, ptr %10, align 8, !noalias !767
  %14 = mul i64 %11, 3037712219555723519
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !767
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #53
  %21 = sext i32 %7 to i64
  %22 = getelementptr ptr, ptr %4, i64 %21
  %23 = load ptr, ptr %22, align 8
  %24 = call align 8 ptr %23(ptr nocapture nofree noundef nonnull readonly %5) #2
  %25 = call noalias nonnull align 8 dereferenceable(24) ptr @bump_malloc_inner(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %24, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(24) %25) #53
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %3) #43
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #43
  %29 = load ptr, ptr %24, align 8
  %30 = getelementptr i8, ptr %29, i64 72
  %31 = load ptr, ptr %30, align 8
  %32 = call { i64, i64 } %31(ptr nocapture nofree nonnull readonly align 8 %24) #2
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %33, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %35 = getelementptr inbounds i8, ptr %25, i64 8
  store ptr %34, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #43
  %37 = getelementptr inbounds i8, ptr %25, i64 20
  store i32 1, ptr %37, align 4
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %4, 0
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %5, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %6, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %19, 3
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3) #53
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 184, ptr nocapture nofree noundef align 8 %4) #53
  %44 = sext i32 %19 to i64
  %45 = getelementptr ptr, ptr %4, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = call align 4 ptr %47({ ptr, ptr, ptr, i32 } %41, ptr nocapture nofree noundef nonnull readonly align 8 %3) #10
  %49 = call { ptr, ptr, ptr, i32 } %48({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull align 8 %3) #28
  %50 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  %51 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %52 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %53 = getelementptr i8, ptr %50, i64 8
  %54 = getelementptr i8, ptr %50, i64 16
  %55 = getelementptr i8, ptr %50, i64 40
  %56 = load i64, ptr %53, align 4, !noalias !25
  %57 = load i64, ptr %54, align 4, !noalias !25
  %58 = load ptr, ptr %55, align 8, !noalias !25
  %59 = mul i64 %56, 8673632051301757104
  %60 = lshr i64 %59, 32
  %61 = xor i64 %60, %59
  %62 = and i64 %61, %57
  %63 = getelementptr i32, ptr %58, i64 %62
  %64 = load i32, ptr %63, align 4, !noalias !770
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %51, 1
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %52, 2
  %68 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %64, 3
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %3)
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef align 8 %50)
  %71 = sext i32 %64 to i64
  %72 = getelementptr ptr, ptr %50, i64 %71
  %73 = getelementptr i8, ptr %72, i64 8
  %74 = load ptr, ptr %73, align 8
  %75 = call align 4 ptr %74({ ptr, ptr, ptr, i32 } %68, ptr nocapture nofree noundef nonnull readonly align 8 %3) #10
  %76 = call { ptr, i160 } %75({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull align 8 %3) #28
  %77 = extractvalue { ptr, i160 } %76, 0
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %4)
  %79 = icmp ne ptr %77, @nil_typ
  %80 = icmp ne ptr %77, null
  %81 = and i1 %79, %80
  br i1 %81, label %82, label %153

82:                                               ; preds = %2
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %4)
  %84 = getelementptr inbounds i8, ptr %25, i64 16
  br label %85

85:                                               ; preds = %129, %82
  %86 = phi ptr [ %34, %82 ], [ %131, %129 ]
  %87 = phi i32 [ 0, %82 ], [ %143, %129 ]
  %88 = phi { ptr, i160 } [ %76, %82 ], [ %147, %129 ]
  %89 = load i32, ptr %37, align 4
  %90 = icmp slt i32 %87, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %85
  %92 = load ptr, ptr %24, align 8
  br label %129

93:                                               ; preds = %85
  %94 = shl i32 %89, 1
  %95 = icmp sgt i32 %94, %89
  %96 = load ptr, ptr %35, align 8
  %97 = load ptr, ptr %24, align 8
  br i1 %95, label %98, label %129

98:                                               ; preds = %93
  store i32 %94, ptr %37, align 4
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %100 = getelementptr i8, ptr %97, i64 72
  %101 = load ptr, ptr %100, align 8
  %102 = call { i64, i64 } %101(ptr nocapture nofree nonnull readonly %24) #2
  %103 = extractvalue { i64, i64 } %102, 0
  %104 = sext i32 %94 to i64
  %105 = mul i64 %103, %104
  %106 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %105, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %106, ptr %35, align 8
  %107 = icmp sgt i32 %87, 0
  %108 = load ptr, ptr %24, align 8
  br i1 %107, label %109, label %129

109:                                              ; preds = %98
  %110 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %111 = zext nneg i32 %87 to i64
  %112 = getelementptr i8, ptr %108, i64 72
  %113 = getelementptr i8, ptr %108, i64 56
  %114 = getelementptr i8, ptr %108, i64 64
  br label %115

115:                                              ; preds = %115, %109
  %116 = phi i64 [ 0, %109 ], [ %126, %115 ]
  %117 = load ptr, ptr %112, align 8
  %118 = call { i64, i64 } %117(ptr nocapture nofree nonnull readonly %24) #2
  %119 = extractvalue { i64, i64 } %118, 0
  %120 = mul i64 %119, %116
  %121 = getelementptr i8, ptr %96, i64 %120
  %122 = load ptr, ptr %113, align 8
  %123 = call { ptr, i160 } %122(ptr nocapture nofree readonly %121, ptr nocapture nofree nonnull readonly %24) #2
  %124 = getelementptr i8, ptr %106, i64 %120
  %125 = load ptr, ptr %114, align 8
  call void %125({ ptr, i160 } %123, ptr nocapture nofree nonnull readonly %24, ptr nocapture nofree writeonly %124) #8
  %126 = add nuw nsw i64 %116, 1
  %127 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %128 = icmp eq i64 %126, %111
  br i1 %128, label %129, label %115

129:                                              ; preds = %115, %98, %93, %91
  %130 = phi ptr [ %92, %91 ], [ %97, %93 ], [ %108, %98 ], [ %108, %115 ]
  %131 = phi ptr [ %86, %91 ], [ %96, %93 ], [ %106, %98 ], [ %106, %115 ]
  %132 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  %133 = getelementptr i8, ptr %130, i64 72
  %134 = load ptr, ptr %133, align 8
  %135 = call { i64, i64 } %134(ptr nocapture nofree nonnull readonly %24) #2
  %136 = extractvalue { i64, i64 } %135, 0
  %137 = sext i32 %87 to i64
  %138 = mul i64 %136, %137
  %139 = getelementptr i8, ptr %131, i64 %138
  %140 = getelementptr i8, ptr %130, i64 64
  %141 = load ptr, ptr %140, align 8
  call void %141({ ptr, i160 } %88, ptr nocapture nofree nonnull readonly %24, ptr nocapture nofree writeonly %139) #8
  %142 = load i32, ptr %84, align 8
  %143 = add i32 %142, 1
  %144 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 16 dereferenceable(744) @Array) #55
  store i32 %143, ptr %84, align 8
  %145 = load ptr, ptr %73, align 8
  %146 = call align 4 ptr %145({ ptr, ptr, ptr, i32 } %68, ptr nocapture nofree noundef nonnull readonly %3) #10
  %147 = call { ptr, i160 } %146({ ptr, ptr, ptr, i32 } %68, { ptr, ptr, ptr, i32 } %68, ptr nonnull align 8 %3) #28
  %148 = extractvalue { ptr, i160 } %147, 0
  %149 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %4)
  %150 = icmp ne ptr %148, @nil_typ
  %151 = icmp ne ptr %148, null
  %152 = and i1 %150, %151
  br i1 %152, label %85, label %153

153:                                              ; preds = %129, %2
  %154 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %155 = insertvalue { ptr, ptr, ptr, i32 } %154, ptr undef, 2
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 10, 3
  ret { ptr, ptr, ptr, i32 } %156
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #6 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !773
  %10 = load i64, ptr %7, align 4, !noalias !773
  %11 = load ptr, ptr %8, align 8, !noalias !773
  %12 = mul i64 %9, -5261542750394134544
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !773
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = call nonnull align 8 dereferenceable(8) ptr %21(ptr nocapture nofree noundef nonnull readonly %5) #2
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 72
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } %25(ptr nocapture nofree nonnull readonly align 8 %22) #2
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %27, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %30 = getelementptr i8, ptr %20, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = insertvalue { ptr } undef, ptr %28, 0
  call void %33(ptr %5, { ptr } %34) #45
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %36 = getelementptr i8, ptr %20, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %5, i32 0) #45
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #55
  %41 = getelementptr i8, ptr %20, i64 24
  %42 = load ptr, ptr %41, align 8
  %43 = getelementptr i8, ptr %42, i64 8
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %5, i32 1) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local void @Array_init_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #7 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !776
  %11 = load i64, ptr %8, align 4, !noalias !776
  %12 = load ptr, ptr %9, align 8, !noalias !776
  %13 = mul i64 %10, -5261542750394134544
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !776
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  call void %25(ptr %6, i32 %3) #45
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %27 = load ptr, ptr %22, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr nonnull %6) #46
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %31 = load ptr, ptr %21, align 8
  %32 = call nonnull align 8 dereferenceable(8) ptr %31(ptr nocapture nofree noundef nonnull readonly %6) #2
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr i8, ptr %33, i64 72
  %35 = load ptr, ptr %34, align 8
  %36 = call { i64, i64 } %35(ptr nocapture nofree nonnull readonly align 8 %32) #2
  %37 = extractvalue { i64, i64 } %36, 0
  %38 = sext i32 %29 to i64
  %39 = mul i64 %37, %38
  %40 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %39, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %42 = getelementptr i8, ptr %21, i64 8
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr } undef, ptr %40, 0
  call void %45(ptr %6, { ptr } %46) #45
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %48 = getelementptr i8, ptr %21, i64 16
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  call void %51(ptr %6, i32 0) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local void @Array_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, i32 %4) #7 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !779
  %12 = load i64, ptr %9, align 4, !noalias !779
  %13 = load ptr, ptr %10, align 8, !noalias !779
  %14 = mul i64 %11, -5261542750394134544
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !779
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %6, i64 %21
  %23 = getelementptr i8, ptr %22, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  call void %26(ptr %7, i32 %3) #45
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #43
  %28 = getelementptr i8, ptr %22, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %7, i32 %4) #45
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #43
  %33 = load ptr, ptr %28, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call i32 %34(ptr nonnull %7) #46
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #43
  %37 = load ptr, ptr %22, align 8
  %38 = call nonnull align 8 dereferenceable(8) ptr %37(ptr nocapture nofree noundef nonnull readonly %7) #2
  %39 = load ptr, ptr %38, align 8
  %40 = getelementptr i8, ptr %39, i64 72
  %41 = load ptr, ptr %40, align 8
  %42 = call { i64, i64 } %41(ptr nocapture nofree nonnull readonly align 8 %38) #2
  %43 = extractvalue { i64, i64 } %42, 0
  %44 = sext i32 %35 to i64
  %45 = mul i64 %43, %44
  %46 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %45, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #43
  %48 = getelementptr i8, ptr %22, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr } undef, ptr %46, 0
  call void %51(ptr %7, { ptr } %52) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Array_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, i32 %4, i32 %5) #6 {
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = getelementptr i8, ptr %7, i64 8
  %10 = getelementptr i8, ptr %7, i64 16
  %11 = getelementptr i8, ptr %7, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !782
  %13 = load i64, ptr %10, align 4, !noalias !782
  %14 = load ptr, ptr %11, align 8, !noalias !782
  %15 = mul i64 %12, -5261542750394134544
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !782
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %7) #43
  %22 = sext i32 %20 to i64
  %23 = getelementptr ptr, ptr %7, i64 %22
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %8, { ptr } %3) #45
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %7) #43
  %29 = getelementptr i8, ptr %23, i64 16
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  call void %32(ptr %8, i32 %4) #45
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %7) #43
  %34 = getelementptr i8, ptr %23, i64 24
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %35, i64 8
  %37 = load ptr, ptr %36, align 8
  call void %37(ptr %8, i32 %5) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !785
  %10 = load i64, ptr %7, align 4, !noalias !785
  %11 = load ptr, ptr %8, align 8, !noalias !785
  %12 = mul i64 %9, -5261542750394134544
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !785
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  ret i32 %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !788
  %10 = load i64, ptr %7, align 4, !noalias !788
  %11 = load ptr, ptr %8, align 8, !noalias !788
  %12 = mul i64 %9, -5261542750394134544
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !788
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 24
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  ret i32 %24
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #31 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %10 = getelementptr i8, ptr %7, i64 8
  %11 = getelementptr i8, ptr %7, i64 16
  %12 = getelementptr i8, ptr %7, i64 40
  %13 = load i64, ptr %10, align 4, !noalias !791
  %14 = load i64, ptr %11, align 4, !noalias !791
  %15 = load ptr, ptr %12, align 8, !noalias !791
  %16 = mul i64 %13, -5261542750394134544
  %17 = lshr i64 %16, 32
  %18 = xor i64 %17, %16
  %19 = and i64 %18, %14
  %20 = getelementptr i32, ptr %15, i64 %19
  %21 = load i32, ptr %20, align 4, !noalias !791
  %22 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #43
  %23 = sext i32 %21 to i64
  %24 = getelementptr ptr, ptr %7, i64 %23
  %25 = getelementptr i8, ptr %24, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %8) #46
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #43
  %30 = getelementptr i8, ptr %24, i64 24
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %8) #46
  %34 = icmp slt i32 %28, %33
  br i1 %34, label %35, label %39

35:                                               ; preds = %4
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %8, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %9, 2
  br label %54

39:                                               ; preds = %4
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %41 = call i32 %32(ptr %8) #46
  %42 = shl i32 %41, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %8, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %9, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %21, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5) #55
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %49 = getelementptr i8, ptr %24, i64 104
  %50 = load ptr, ptr %49, align 8
  store ptr @i32_typ, ptr %6, align 8
  %51 = call align 4 ptr %50({ ptr, ptr, ptr, i32 } %46, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  call void %51({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull align 8 dereferenceable(8) %5, i32 %42) #28
  %52 = load ptr, ptr %25, align 8
  %53 = load ptr, ptr %52, align 8
  br label %54

54:                                               ; preds = %39, %35
  %55 = phi { ptr, ptr, ptr, i32 } [ %38, %35 ], [ %45, %39 ]
  %56 = phi ptr [ %27, %35 ], [ %53, %39 ]
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %58 = getelementptr i8, ptr %24, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call { ptr } %60(ptr nonnull %8) #46
  %62 = extractvalue { ptr } %61, 0
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %64 = call i32 %56(ptr nonnull %8) #46
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %66 = load ptr, ptr %24, align 8
  %67 = call nonnull align 8 dereferenceable(8) ptr %66(ptr nocapture nofree noundef nonnull readonly %8) #2
  %68 = load ptr, ptr %67, align 8
  %69 = getelementptr i8, ptr %68, i64 72
  %70 = load ptr, ptr %69, align 8
  %71 = call { i64, i64 } %70(ptr nocapture nofree nonnull readonly align 8 %67) #2
  %72 = extractvalue { i64, i64 } %71, 0
  %73 = sext i32 %64 to i64
  %74 = mul i64 %72, %73
  %75 = getelementptr i8, ptr %62, i64 %74
  %76 = getelementptr i8, ptr %68, i64 64
  %77 = load ptr, ptr %76, align 8
  call void %77({ ptr, i160 } %3, ptr nocapture nofree nonnull readonly align 8 %67, ptr nocapture nofree writeonly %75) #8
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %79 = load ptr, ptr %25, align 8
  %80 = load ptr, ptr %79, align 8
  %81 = call i32 %80(ptr %8) #46
  %82 = add i32 %81, 1
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %7) #55
  %84 = getelementptr i8, ptr %79, i64 8
  %85 = load ptr, ptr %84, align 8
  call void %85(ptr %8, i32 %82) #45
  %86 = load i64, ptr %10, align 4, !noalias !794
  %87 = load i64, ptr %11, align 4, !noalias !794
  %88 = load ptr, ptr %12, align 8, !noalias !794
  %89 = mul i64 %86, -5261542750394134544
  %90 = lshr i64 %89, 32
  %91 = xor i64 %90, %89
  %92 = and i64 %91, %87
  %93 = getelementptr i32, ptr %88, i64 %92
  %94 = load i32, ptr %93, align 4, !noalias !794
  %95 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %94, 3
  ret { ptr, ptr, ptr, i32 } %95
}

; Function Attrs: nounwind
define dso_local { ptr, ptr, ptr, i32 } @Array_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #31 {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %12 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %13 = getelementptr i8, ptr %10, i64 8
  %14 = getelementptr i8, ptr %10, i64 16
  %15 = getelementptr i8, ptr %10, i64 40
  %16 = load i64, ptr %13, align 4, !noalias !797
  %17 = load i64, ptr %14, align 4, !noalias !797
  %18 = load ptr, ptr %15, align 8, !noalias !797
  %19 = mul i64 %16, -5261542750394134544
  %20 = lshr i64 %19, 32
  %21 = xor i64 %20, %19
  %22 = and i64 %21, %17
  %23 = getelementptr i32, ptr %18, i64 %22
  %24 = load i32, ptr %23, align 4, !noalias !797
  %25 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %26 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %27 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %28 = getelementptr i8, ptr %25, i64 8
  %29 = getelementptr i8, ptr %25, i64 16
  %30 = getelementptr i8, ptr %25, i64 40
  %31 = load i64, ptr %28, align 4, !noalias !800
  %32 = load i64, ptr %29, align 4, !noalias !800
  %33 = load ptr, ptr %30, align 8, !noalias !800
  %34 = mul i64 %31, -5261542750394134544
  %35 = lshr i64 %34, 32
  %36 = xor i64 %35, %34
  %37 = and i64 %36, %32
  %38 = getelementptr i32, ptr %33, i64 %37
  %39 = load i32, ptr %38, align 4, !noalias !800
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %25, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %26, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %27, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %39, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %25) #43
  %46 = sext i32 %39 to i64
  %47 = getelementptr ptr, ptr %25, i64 %46
  %48 = getelementptr i8, ptr %47, i64 72
  %49 = load ptr, ptr %48, align 8
  %50 = call align 4 ptr %49({ ptr, ptr, ptr, i32 } %43, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %51 = call i32 %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull align 8 %5) #28
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %10)
  %53 = sext i32 %24 to i64
  %54 = getelementptr ptr, ptr %10, i64 %53
  %55 = getelementptr i8, ptr %54, i64 16
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call i32 %57(ptr %11) #46
  %59 = add i32 %58, %51
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %11, 1
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %12, 2
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %24, 3
  %64 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %64)
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %10)
  %67 = getelementptr i8, ptr %54, i64 104
  %68 = load ptr, ptr %67, align 8
  %69 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %69, align 8
  %70 = call align 4 ptr %68({ ptr, ptr, ptr, i32 } %63, ptr nocapture nofree noundef nonnull readonly align 8 %69) #10
  call void %70({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr nonnull align 8 dereferenceable(8) %64, i32 %59) #28
  %71 = icmp sgt i32 %51, 0
  br i1 %71, label %72, label %95

72:                                               ; preds = %4
  %73 = getelementptr inbounds i8, ptr %8, i64 8
  %74 = getelementptr inbounds i8, ptr %9, i64 8
  %75 = getelementptr i8, ptr %47, i64 136
  %76 = getelementptr i8, ptr %54, i64 144
  br label %77

77:                                               ; preds = %77, %72
  %78 = phi i32 [ 0, %72 ], [ %93, %77 ]
  %79 = add i32 %78, %58
  store ptr @_parameterization_i32, ptr %6, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %25)
  %82 = load ptr, ptr %75, align 8
  store ptr @i32_typ, ptr %7, align 8
  %83 = call align 4 ptr %82({ ptr, ptr, ptr, i32 } %43, ptr nocapture nofree noundef nonnull readonly %7) #10
  %84 = call { ptr, i160 } %83({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull align 8 dereferenceable(8) %6, i32 %78) #28
  %85 = extractvalue { ptr, i160 } %84, 0
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10)
  %87 = load ptr, ptr %54, align 8
  %88 = call align 4 ptr %87(ptr nocapture nofree noundef nonnull readonly %11) #2
  store ptr @_parameterization_i32, ptr %8, align 8
  store ptr %88, ptr %73, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %8)
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10)
  %91 = load ptr, ptr %76, align 8
  store ptr @i32_typ, ptr %9, align 8
  store ptr %85, ptr %74, align 8
  %92 = call align 4 ptr %91({ ptr, ptr, ptr, i32 } %63, ptr nocapture nofree noundef nonnull readonly %9) #10
  call void %92({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr nonnull align 8 dereferenceable(16) %8, i32 %79, { ptr, i160 } %84) #28
  %93 = add nuw nsw i32 %78, 1
  %94 = icmp eq i32 %93, %51
  br i1 %94, label %95, label %77

95:                                               ; preds = %77, %4
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10)
  %97 = load ptr, ptr %55, align 8
  %98 = getelementptr i8, ptr %97, i64 8
  %99 = load ptr, ptr %98, align 8
  call void %99(ptr %11, i32 %59) #45
  %100 = load i64, ptr %13, align 4, !noalias !803
  %101 = load i64, ptr %14, align 4, !noalias !803
  %102 = load ptr, ptr %15, align 8, !noalias !803
  %103 = mul i64 %100, -5261542750394134544
  %104 = lshr i64 %103, 32
  %105 = xor i64 %104, %103
  %106 = and i64 %105, %101
  %107 = getelementptr i32, ptr %102, i64 %106
  %108 = load i32, ptr %107, align 4, !noalias !803
  %109 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %108, 3
  ret { ptr, ptr, ptr, i32 } %109
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local void @Array_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #7 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4
  %11 = load i64, ptr %8, align 4
  %12 = load ptr, ptr %9, align 8
  %13 = mul i64 %10, -5261542750394134544
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 %24(ptr %6) #46
  %26 = icmp sgt i32 %3, %25
  br i1 %26, label %27, label %95

27:                                               ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %29 = getelementptr i8, ptr %23, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %6, i32 %3) #45
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %32 = getelementptr i8, ptr %21, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr } %34(ptr nonnull %6) #46
  %36 = extractvalue { ptr } %35, 0
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %38 = load ptr, ptr %22, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr nonnull %6) #46
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %42 = load ptr, ptr %21, align 8
  %43 = call nonnull align 8 dereferenceable(8) ptr %42(ptr nocapture nofree noundef nonnull readonly %6) #2
  %44 = load ptr, ptr %43, align 8
  %45 = getelementptr i8, ptr %44, i64 72
  %46 = load ptr, ptr %45, align 8
  %47 = call { i64, i64 } %46(ptr nocapture nofree nonnull readonly align 8 %43) #2
  %48 = extractvalue { i64, i64 } %47, 0
  %49 = sext i32 %40 to i64
  %50 = mul i64 %48, %49
  %51 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %50, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %53 = load ptr, ptr %32, align 8
  %54 = getelementptr i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8
  %56 = insertvalue { ptr } undef, ptr %51, 0
  call void %55(ptr %6, { ptr } %56) #45
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %58 = getelementptr i8, ptr %21, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %6) #46
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %95

63:                                               ; preds = %27
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  br label %66

66:                                               ; preds = %66, %63
  %67 = phi i64 [ 0, %63 ], [ %88, %66 ]
  %68 = load ptr, ptr %21, align 8
  %69 = call nonnull align 8 dereferenceable(8) ptr %68(ptr nocapture nofree noundef nonnull readonly %6) #2
  %70 = load ptr, ptr %69, align 8
  %71 = getelementptr i8, ptr %70, i64 72
  %72 = load ptr, ptr %71, align 8
  %73 = call { i64, i64 } %72(ptr nocapture nofree nonnull readonly align 8 %69) #2
  %74 = extractvalue { i64, i64 } %73, 0
  %75 = mul i64 %74, %67
  %76 = getelementptr i8, ptr %36, i64 %75
  %77 = getelementptr i8, ptr %70, i64 56
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, i160 } %78(ptr nocapture nofree readonly %76, ptr nocapture nofree nonnull readonly align 8 %69) #2
  %80 = load ptr, ptr %32, align 8
  %81 = load ptr, ptr %80, align 8
  %82 = call { ptr } %81(ptr nonnull %6) #46
  %83 = extractvalue { ptr } %82, 0
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %85 = getelementptr i8, ptr %83, i64 %75
  %86 = getelementptr i8, ptr %70, i64 64
  %87 = load ptr, ptr %86, align 8
  call void %87({ ptr, i160 } %79, ptr nocapture nofree nonnull readonly align 8 %69, ptr nocapture nofree writeonly %85) #8
  %88 = add nuw nsw i64 %67, 1
  %89 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %5) #55
  %90 = load ptr, ptr %58, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %6) #46
  %93 = sext i32 %92 to i64
  %94 = icmp slt i64 %88, %93
  br i1 %94, label %66, label %95

95:                                               ; preds = %66, %27, %4
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @Array__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #31 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %12 = getelementptr i8, ptr %9, i64 8
  %13 = getelementptr i8, ptr %9, i64 16
  %14 = getelementptr i8, ptr %9, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !806
  %16 = load i64, ptr %13, align 4, !noalias !806
  %17 = load ptr, ptr %14, align 8, !noalias !806
  %18 = mul i64 %15, -5261542750394134544
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !806
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %9) #43
  %25 = sext i32 %23 to i64
  %26 = getelementptr ptr, ptr %9, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %10) #46
  %31 = add i32 %30, -1
  %32 = icmp sgt i32 %3, %31
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %9) #43
  %34 = call i32 %29(ptr %10) #46
  %35 = add i32 %34, %3
  %36 = icmp slt i32 %35, 0
  %37 = select i1 %32, i1 true, i1 %36
  br i1 %37, label %38, label %48

38:                                               ; preds = %4
  %39 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %10, 1
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %11, 2
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %23, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5) #55
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %9) #55
  %45 = getelementptr i8, ptr %26, i64 128
  %46 = load ptr, ptr %45, align 8
  store ptr @i32_typ, ptr %6, align 8
  %47 = call align 4 ptr %46({ ptr, ptr, ptr, i32 } %42, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  call void %47({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr nonnull align 8 dereferenceable(8) %5, i32 %3) #28
  br label %48

48:                                               ; preds = %38, %4
  %49 = icmp slt i32 %3, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %48
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %9) #55
  %52 = load ptr, ptr %27, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %10) #46
  %55 = add i32 %54, %3
  br label %56

56:                                               ; preds = %50, %48
  %57 = phi i32 [ %55, %50 ], [ %3, %48 ]
  %58 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %59 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %10, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %11, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %23, 3
  store ptr @_parameterization_i32, ptr %7, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7) #55
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %9) #55
  %64 = getelementptr i8, ptr %26, i64 136
  %65 = load ptr, ptr %64, align 8
  store ptr @i32_typ, ptr %8, align 8
  %66 = call align 4 ptr %65({ ptr, ptr, ptr, i32 } %61, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %67 = call { ptr, i160 } %66({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull align 8 dereferenceable(8) %7, i32 %57) #28
  ret { ptr, i160 } %67
}

; Function Attrs: nounwind
define dso_local void @Array__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, { ptr, i160 } %4) #31 {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %12 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %13 = getelementptr i8, ptr %10, i64 8
  %14 = getelementptr i8, ptr %10, i64 16
  %15 = getelementptr i8, ptr %10, i64 40
  %16 = load i64, ptr %13, align 4, !noalias !809
  %17 = load i64, ptr %14, align 4, !noalias !809
  %18 = load ptr, ptr %15, align 8, !noalias !809
  %19 = mul i64 %16, -5261542750394134544
  %20 = lshr i64 %19, 32
  %21 = xor i64 %20, %19
  %22 = and i64 %21, %17
  %23 = getelementptr i32, ptr %18, i64 %22
  %24 = load i32, ptr %23, align 4, !noalias !809
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10) #43
  %26 = sext i32 %24 to i64
  %27 = getelementptr ptr, ptr %10, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call i32 %30(ptr %11) #46
  %32 = add i32 %31, -1
  %33 = icmp sgt i32 %3, %32
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10) #43
  %35 = call i32 %30(ptr %11) #46
  %36 = add i32 %35, %3
  %37 = icmp slt i32 %36, 0
  %38 = select i1 %33, i1 true, i1 %37
  br i1 %38, label %39, label %49

39:                                               ; preds = %5
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %11, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %12, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %24, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6) #55
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10) #55
  %46 = getelementptr i8, ptr %27, i64 128
  %47 = load ptr, ptr %46, align 8
  store ptr @i32_typ, ptr %7, align 8
  %48 = call align 4 ptr %47({ ptr, ptr, ptr, i32 } %43, ptr nocapture nofree noundef nonnull readonly align 8 %7) #10
  call void %48({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull align 8 dereferenceable(8) %6, i32 %3) #28
  br label %49

49:                                               ; preds = %39, %5
  %50 = icmp slt i32 %3, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %49
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10) #55
  %53 = load ptr, ptr %28, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr nonnull %11) #46
  %56 = add i32 %55, %3
  br label %57

57:                                               ; preds = %51, %49
  %58 = phi i32 [ %56, %51 ], [ %3, %49 ]
  %59 = extractvalue { ptr, i160 } %4, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %11, 1
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %12, 2
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, i32 %24, 3
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10) #55
  %65 = load ptr, ptr %27, align 8
  %66 = call align 4 ptr %65(ptr nocapture nofree noundef nonnull readonly %11) #2
  store ptr @_parameterization_i32, ptr %8, align 8
  %67 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %66, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %8) #55
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef nonnull align 8 %10) #55
  %70 = getelementptr i8, ptr %27, i64 144
  %71 = load ptr, ptr %70, align 8
  store ptr @i32_typ, ptr %9, align 8
  %72 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %59, ptr %72, align 8
  %73 = call align 4 ptr %71({ ptr, ptr, ptr, i32 } %63, ptr nocapture nofree noundef nonnull readonly align 8 %9) #10
  call void %73({ ptr, ptr, ptr, i32 } %63, { ptr, ptr, ptr, i32 } %63, ptr nonnull align 8 dereferenceable(16) %8, i32 %58, { ptr, i160 } %4) #28
  ret void
}

; Function Attrs: nounwind
define dso_local void @Array_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #31 {
  %5 = call noalias align 8 dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %6 = call noalias align 8 dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %6, align 8
  %7 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %6, ptr %7, align 8
  %8 = getelementptr i8, ptr %7, i64 8
  store <2 x i32> <i32 6, i32 7>, ptr %8, align 8
  %9 = getelementptr i8, ptr %5, i64 40
  store ptr @String, ptr %9, align 8
  %10 = getelementptr i8, ptr %5, i64 48
  store ptr %7, ptr %10, align 8
  %11 = getelementptr i8, ptr %5, i64 64
  store i32 10, ptr %11, align 8
  %12 = getelementptr i8, ptr %5, i64 8
  %13 = getelementptr i8, ptr %5, i64 16
  %14 = getelementptr i8, ptr %5, i64 32
  %15 = call noalias align 64 dereferenceable_or_null(57) ptr @bump_malloc_inner(i64 noundef 57, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %16 = load <56 x i8>, ptr @fvslk_CUsersPaulKOneDriveDocumentsPLPyPLlibarraymini, align 64
  store <56 x i8> %16, ptr %15, align 64
  %17 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %15, ptr %17, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 56, i32 57>, ptr %18, align 8
  store i32 89, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef nonnull align 16 dereferenceable(184) @Exception) #43
  store ptr @String, ptr %12, align 8
  store ptr %17, ptr %13, align 8
  store i32 10, ptr %14, align 8
  %21 = ptrtoint ptr %5 to i64
  %22 = zext i64 %21 to i160
  %23 = or disjoint i160 %22, 3402823669209384634633746074317682114560
  %24 = load ptr, ptr @current_coroutine, align 8
  %25 = getelementptr i8, ptr %24, i64 48
  store ptr @Exception, ptr %25, align 8
  %26 = getelementptr i8, ptr %24, i64 56
  store i160 %23, ptr %26, align 8
  %27 = getelementptr i8, ptr %24, i64 8
  call preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %27, ptr noundef nonnull align 8 dereferenceable(24) @into_caller_buf) #52
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, i160 } @Array_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #7 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !812
  %11 = load i64, ptr %8, align 4, !noalias !812
  %12 = load ptr, ptr %9, align 8, !noalias !812
  %13 = mul i64 %10, -5261542750394134544
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !812
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr } %24(ptr nonnull %6) #46
  %26 = extractvalue { ptr } %25, 0
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %5) #55
  %28 = load ptr, ptr %21, align 8
  %29 = call nonnull align 8 dereferenceable(8) ptr %28(ptr nocapture nofree noundef nonnull readonly %6) #2
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 72
  %32 = load ptr, ptr %31, align 8
  %33 = call { i64, i64 } %32(ptr nocapture nofree nonnull readonly align 8 %29) #2
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = sext i32 %3 to i64
  %36 = mul i64 %34, %35
  %37 = getelementptr i8, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %30, i64 56
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr, i160 } %39(ptr nocapture nofree readonly %37, ptr nocapture nofree nonnull readonly align 8 %29) #2
  ret { ptr, i160 } %40
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local void @Array_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, { ptr, i160 } %4) #7 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !815
  %12 = load i64, ptr %9, align 4, !noalias !815
  %13 = load ptr, ptr %10, align 8, !noalias !815
  %14 = mul i64 %11, -5261542750394134544
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !815
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %6, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr } %25(ptr nonnull %7) #46
  %27 = extractvalue { ptr } %26, 0
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %6) #55
  %29 = load ptr, ptr %22, align 8
  %30 = call nonnull align 8 dereferenceable(8) ptr %29(ptr nocapture nofree noundef nonnull readonly %7) #2
  %31 = load ptr, ptr %30, align 8
  %32 = getelementptr i8, ptr %31, i64 72
  %33 = load ptr, ptr %32, align 8
  %34 = call { i64, i64 } %33(ptr nocapture nofree nonnull readonly align 8 %30) #2
  %35 = extractvalue { i64, i64 } %34, 0
  %36 = sext i32 %3 to i64
  %37 = mul i64 %35, %36
  %38 = getelementptr i8, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %31, i64 64
  %40 = load ptr, ptr %39, align 8
  call void %40({ ptr, i160 } %4, ptr nocapture nofree nonnull readonly align 8 %30, ptr nocapture nofree writeonly %38) #8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #37 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %7 = getelementptr i8, ptr %4, i64 8
  %8 = getelementptr i8, ptr %4, i64 16
  %9 = getelementptr i8, ptr %4, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !818
  %11 = load i64, ptr %8, align 4, !noalias !818
  %12 = load ptr, ptr %9, align 8, !noalias !818
  %13 = mul i64 %10, -5261542750394134544
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !818
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %4, i64 %20
  %22 = load ptr, ptr %21, align 8
  %23 = call align 4 ptr %22(ptr nocapture nofree noundef nonnull readonly %5) #2
  %24 = call noalias nonnull align 8 dereferenceable(48) ptr @bump_malloc_inner(i64 noundef 48, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %23, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(48) %24) #43
  %26 = load i64, ptr %7, align 4, !noalias !25
  %27 = load i64, ptr %8, align 4, !noalias !25
  %28 = load ptr, ptr %9, align 8, !noalias !25
  %29 = mul i64 %26, -5261542750394134544
  %30 = lshr i64 %29, 32
  %31 = xor i64 %30, %29
  %32 = and i64 %31, %27
  %33 = getelementptr i32, ptr %28, i64 %32
  %34 = load i32, ptr %33, align 4, !noalias !25
  %35 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %24, 1
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr undef, 2
  %37 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef align 8 %4) #43
  %38 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr %4, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr %5, ptr %39, align 8
  %40 = getelementptr inbounds i8, ptr %24, i64 24
  store ptr %6, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %24, i64 32
  store i32 %34, ptr %41, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @ArrayIterator) #43
  %43 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 17, 3
  ret { ptr, ptr, ptr, i32 } %43
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none)
define dso_local { ptr, ptr, ptr, i32 } @Array_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #40 {
  %4 = call noalias align 8 dereferenceable_or_null(6) ptr @bump_malloc_inner(i64 noundef 6, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <5 x i8> <i8 65, i8 114, i8 114, i8 97, i8 121>, ptr %4, align 8
  %5 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %6 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %5, 1
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr undef, 2
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, i32 10, 3
  store ptr %4, ptr %5, align 8
  %9 = getelementptr i8, ptr %5, i64 8
  %10 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 5, i32 6>, ptr %9, align 8
  ret { ptr, ptr, ptr, i32 } %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_ArrayIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 48, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #6 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !821
  %11 = load i64, ptr %8, align 4, !noalias !821
  %12 = load ptr, ptr %9, align 8, !noalias !821
  %13 = mul i64 %10, 3447345754186651411
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !821
  %19 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %22 = getelementptr i8, ptr %19, i64 8
  %23 = getelementptr i8, ptr %19, i64 16
  %24 = getelementptr i8, ptr %19, i64 40
  %25 = load i64, ptr %22, align 4, !noalias !25
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load ptr, ptr %24, align 8, !noalias !25
  %28 = mul i64 %25, -5261542750394134544
  %29 = lshr i64 %28, 32
  %30 = xor i64 %29, %28
  %31 = and i64 %30, %26
  %32 = getelementptr i32, ptr %27, i64 %31
  %33 = load i32, ptr %32, align 4, !noalias !824
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #43
  %35 = sext i32 %18 to i64
  %36 = getelementptr ptr, ptr %5, i64 %35
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %20, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %33, 3
  call void %40(ptr %6, { ptr, ptr, ptr, i32 } %44) #45
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %5) #43
  %46 = getelementptr i8, ptr %36, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %6, i32 0) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = getelementptr i8, ptr %7, i64 8
  %10 = getelementptr i8, ptr %7, i64 16
  %11 = getelementptr i8, ptr %7, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !827
  %13 = load i64, ptr %10, align 4, !noalias !827
  %14 = load ptr, ptr %11, align 8, !noalias !827
  %15 = mul i64 %12, 3447345754186651411
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !827
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %7) #43
  %22 = sext i32 %20 to i64
  %23 = getelementptr ptr, ptr %7, i64 %22
  %24 = getelementptr i8, ptr %23, i64 16
  %25 = load ptr, ptr %24, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call i32 %26(ptr %8) #46
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef align 8 %7) #55
  %29 = getelementptr i8, ptr %23, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr, ptr, ptr, i32 } %31(ptr %8) #46
  %33 = extractvalue { ptr, ptr, ptr, i32 } %32, 0
  %34 = extractvalue { ptr, ptr, ptr, i32 } %32, 1
  %35 = extractvalue { ptr, ptr, ptr, i32 } %32, 2
  %36 = extractvalue { ptr, ptr, ptr, i32 } %32, 3
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %34, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %35, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %36, 3
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %33) #55
  %43 = sext i32 %36 to i64
  %44 = getelementptr ptr, ptr %33, i64 %43
  %45 = getelementptr i8, ptr %44, i64 72
  %46 = load ptr, ptr %45, align 8
  %47 = call align 4 ptr %46({ ptr, ptr, ptr, i32 } %40, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %48 = call i32 %47({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull align 8 %4) #28
  %49 = icmp slt i32 %27, %48
  br i1 %49, label %50, label %86

50:                                               ; preds = %3
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %7)
  %52 = load ptr, ptr %24, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %8) #46
  %55 = add i32 %54, 1
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %7)
  %57 = getelementptr i8, ptr %52, i64 8
  %58 = load ptr, ptr %57, align 8
  call void %58(ptr %8, i32 %55) #45
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %7)
  %60 = load ptr, ptr %24, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call i32 %61(ptr %8) #46
  %63 = add i32 %62, -1
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 8 %7)
  %65 = load ptr, ptr %29, align 8
  %66 = load ptr, ptr %65, align 8
  %67 = call { ptr, ptr, ptr, i32 } %66(ptr %8) #46
  %68 = extractvalue { ptr, ptr, ptr, i32 } %67, 0
  %69 = extractvalue { ptr, ptr, ptr, i32 } %67, 1
  %70 = extractvalue { ptr, ptr, ptr, i32 } %67, 2
  %71 = extractvalue { ptr, ptr, ptr, i32 } %67, 3
  %72 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %68, 0
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %69, 1
  %74 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %70, 2
  %75 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %71, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 664, ptr nocapture nofree noundef %68)
  %78 = sext i32 %71 to i64
  %79 = getelementptr ptr, ptr %68, i64 %78
  %80 = getelementptr i8, ptr %79, i64 136
  %81 = load ptr, ptr %80, align 8
  store ptr @i32_typ, ptr %6, align 8
  %82 = call align 4 ptr %81({ ptr, ptr, ptr, i32 } %75, ptr nocapture nofree noundef nonnull readonly %6) #10
  %83 = call { ptr, i160 } %82({ ptr, ptr, ptr, i32 } %75, { ptr, ptr, ptr, i32 } %75, ptr nonnull align 8 dereferenceable(8) %5, i32 %63) #28
  %84 = extractvalue { ptr, i160 } %83, 0
  %85 = extractvalue { ptr, i160 } %83, 1
  br label %86

86:                                               ; preds = %50, %3
  %87 = phi ptr [ %84, %50 ], [ @nil_typ, %3 ]
  %88 = phi i160 [ %85, %50 ], [ undef, %3 ]
  %89 = insertvalue { ptr, i160 } poison, ptr %87, 0
  %90 = insertvalue { ptr, i160 } %89, i160 %88, 1
  ret { ptr, i160 } %90
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @ArrayIterator_getter_index(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ArrayIterator_setter_index(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @ArrayIterator_setter_array(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Exception(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Exception_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #6 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !830
  %11 = load i64, ptr %8, align 4, !noalias !830
  %12 = load ptr, ptr %9, align 8, !noalias !830
  %13 = mul i64 %10, 9027164862567808692
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !830
  %19 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %20 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %21 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %22 = getelementptr i8, ptr %19, i64 8
  %23 = getelementptr i8, ptr %19, i64 16
  %24 = getelementptr i8, ptr %19, i64 40
  %25 = load i64, ptr %22, align 4, !noalias !25
  %26 = load i64, ptr %23, align 4, !noalias !25
  %27 = load ptr, ptr %24, align 8, !noalias !25
  %28 = mul i64 %25, 6499063144389013426
  %29 = lshr i64 %28, 32
  %30 = xor i64 %29, %28
  %31 = and i64 %30, %26
  %32 = getelementptr i32, ptr %27, i64 %31
  %33 = load i32, ptr %32, align 4, !noalias !833
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %5) #43
  %35 = sext i32 %18 to i64
  %36 = getelementptr ptr, ptr %5, i64 %35
  %37 = getelementptr i8, ptr %36, i64 16
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %19, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %20, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %21, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %33, 3
  call void %40(ptr %6, { ptr, ptr, ptr, i32 } %44) #45
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %5) #43
  %46 = load ptr, ptr %36, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  call void %48(ptr %6, i32 0) #45
  %49 = call noalias align 4 dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %50 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %51 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %50, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr undef, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 10, 3
  store ptr %49, ptr %50, align 8
  %54 = getelementptr i8, ptr %50, i64 8
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 0, i32 1>, ptr %54, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %5)
  %57 = getelementptr i8, ptr %36, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %6, { ptr, ptr, ptr, i32 } %53) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #6 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !836
  %10 = load i64, ptr %7, align 4, !noalias !836
  %11 = load ptr, ptr %8, align 8, !noalias !836
  %12 = mul i64 %9, 9027164862567808692
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !836
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = load ptr, ptr %20, align 8
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  call void %23(ptr %5, i32 0) #45
  %24 = call noalias align 8 dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %24, align 8
  %25 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %26 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr undef, 2
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 10, 3
  store ptr %24, ptr %25, align 8
  %29 = getelementptr i8, ptr %25, i64 8
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 6, i32 7>, ptr %29, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %4)
  %32 = getelementptr i8, ptr %20, i64 16
  %33 = load ptr, ptr %32, align 8
  %34 = getelementptr i8, ptr %33, i64 8
  %35 = load ptr, ptr %34, align 8
  call void %35(ptr %5, { ptr, ptr, ptr, i32 } %28) #45
  %36 = call noalias align 4 dereferenceable_or_null(1) ptr @bump_malloc_inner(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %37 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %38 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %37, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr undef, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 10, 3
  store ptr %36, ptr %37, align 8
  %41 = getelementptr i8, ptr %37, i64 8
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 0, i32 1>, ptr %41, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %4)
  %44 = getelementptr i8, ptr %20, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %5, { ptr, ptr, ptr, i32 } %40) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Exception_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !839
  %12 = load i64, ptr %9, align 4, !noalias !839
  %13 = load ptr, ptr %10, align 8, !noalias !839
  %14 = mul i64 %11, 9027164862567808692
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !839
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %6) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %6, i64 %21
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  call void %25(ptr %7, i32 %3) #45
  %26 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %29 = getelementptr i8, ptr %26, i64 8
  %30 = getelementptr i8, ptr %26, i64 16
  %31 = getelementptr i8, ptr %26, i64 40
  %32 = load i64, ptr %29, align 4, !noalias !25
  %33 = load i64, ptr %30, align 4, !noalias !25
  %34 = load ptr, ptr %31, align 8, !noalias !25
  %35 = mul i64 %32, 6499063144389013426
  %36 = lshr i64 %35, 32
  %37 = xor i64 %36, %35
  %38 = and i64 %37, %33
  %39 = getelementptr i32, ptr %34, i64 %38
  %40 = load i32, ptr %39, align 4, !noalias !842
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %6) #43
  %42 = getelementptr i8, ptr %22, i64 8
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %27, 1
  %48 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %28, 2
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %40, 3
  call void %45(ptr %7, { ptr, ptr, ptr, i32 } %49) #45
  ret void
}

; Function Attrs: nounwind
define dso_local void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [10 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(10) %5, i8 0, i64 10, i1 false)
  %6 = alloca [13 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(13) %6, i8 0, i64 13, i1 false)
  %7 = alloca [8 x i8], align 8
  store i64 0, ptr %7, align 8
  %8 = alloca [27 x i8], align 4
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 4 dereferenceable(27) %8, i8 0, i64 27, i1 false)
  %9 = alloca [10 x i8], align 16
  call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(10) %9, i8 0, i64 10, i1 false)
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %12 = getelementptr i8, ptr %10, i64 8
  %13 = getelementptr i8, ptr %10, i64 16
  %14 = getelementptr i8, ptr %10, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !845
  %16 = load i64, ptr %13, align 4, !noalias !845
  %17 = load ptr, ptr %14, align 8, !noalias !845
  %18 = mul i64 %15, 9027164862567808692
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !845
  %24 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %4) #43
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %9, align 16
  %25 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(10) %9) #25
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %4) #43
  store <26 x i8> <i8 69, i8 120, i8 99, i8 101, i8 112, i8 116, i8 105, i8 111, i8 110, i8 32, i8 116, i8 104, i8 114, i8 111, i8 119, i8 110, i8 32, i8 102, i8 114, i8 111, i8 109, i8 32, i8 102, i8 105, i8 108, i8 101>, ptr %8, align 4
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  %28 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(27) %8) #25
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %10) #53
  %30 = sext i32 %23 to i64
  %31 = getelementptr ptr, ptr %10, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = load ptr, ptr %33, align 8
  %35 = call { ptr, ptr, ptr, i32 } %34(ptr %11) #46
  %36 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %37 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %38 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %39 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %37, 1
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %38, 2
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %39, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %36)
  %46 = sext i32 %39 to i64
  %47 = getelementptr ptr, ptr %36, i64 %46
  %48 = getelementptr i8, ptr %47, i64 80
  %49 = load ptr, ptr %48, align 8
  %50 = call align 4 ptr %49({ ptr, ptr, ptr, i32 } %43, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %51 = call { ptr } %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull align 8 %4) #28
  %52 = extractvalue { ptr } %51, 0
  %53 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %52) #28
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %4) #43
  store <7 x i8> <i8 65, i8 116, i8 32, i8 108, i8 105, i8 110, i8 101>, ptr %7, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %57 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(8) %7) #28
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %10)
  %59 = load ptr, ptr %31, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %11) #46
  %62 = call i32 (ptr, ...) @printf(ptr nocapture nofree noundef nonnull readonly dereferenceable(4) @i32_string, i32 %61) #28
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %4) #43
  store <12 x i8> <i8 87, i8 105, i8 116, i8 104, i8 32, i8 109, i8 101, i8 115, i8 115, i8 97, i8 103, i8 101>, ptr %6, align 16
  %65 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %67 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(13) %6) #28
  %68 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %69 = insertvalue { ptr, ptr, ptr, i32 } %68, ptr %11, 1
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %65, 2
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, i32 %23, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %10)
  %74 = getelementptr i8, ptr %31, i64 56
  %75 = load ptr, ptr %74, align 8
  %76 = call align 4 ptr %75({ ptr, ptr, ptr, i32 } %71, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  call void %76({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr nonnull align 8 %4) #28
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4)
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %4) #43
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %5, align 16
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #55
  %80 = call i32 @puts(ptr noalias nocapture nofree noundef nonnull readonly align 4 dereferenceable(10) %5) #28
  ret void
}

; Function Attrs: nounwind
define dso_local void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [0 x ptr], align 8
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !848
  %11 = load i64, ptr %8, align 4, !noalias !848
  %12 = load ptr, ptr %9, align 8, !noalias !848
  %13 = mul i64 %10, 9027164862567808692
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !848
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 16
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %6) #46
  %26 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %27 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %28 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %29 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %27, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %28, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %4) #55
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef %26) #55
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 80
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %4) #10
  %41 = call { ptr } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %4) #28
  %42 = extractvalue { ptr } %41, 0
  %43 = call i32 @puts(ptr nocapture nofree noundef nonnull readonly dereferenceable(1) %42) #28
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Exception_setter_message(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 48
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 56
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 64
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Exception_setter_file_name(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @Exception_getter_line_number(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %0) #12 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Exception_setter_line_number(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %0, i32 %1) #13 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @Array_getter_capacity(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 20
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Array_setter_capacity(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 20
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @Array_getter_length(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Array_setter_length(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @Array_getter_buffer(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Array_setter_buffer(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_CuckooMap(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 64, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @CuckooMap_field_CuckooMap_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @CuckooMap_field_CuckooMap_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @CuckooMap_field_CuckooMap_6(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define dso_local noundef nonnull align 4 ptr @CuckooMap_B__Self_max_displacements_(ptr nocapture nofree %0) #34 {
  %2 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %0) #43
  ret ptr @CuckooMap__Self_max_displacements_
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_hash1_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_hash2_from_primary_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 416
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_index1_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_index2_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_resize_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 40, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 464
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_size_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_get_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 504
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 512
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_remove_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 520
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_clear_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 528
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B__index_keyK({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 536
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 544
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 552
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 560
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 568
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 576
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 584
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 592
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 600
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 608
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 616
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMap_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 624
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local noundef i32 @CuckooMap__Self_max_displacements_(ptr nocapture nofree readnone %0) #1 {
  ret i32 100
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @CuckooMap_init_hasherFunctionK_to_i32_eqFunctionK._K_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, { ptr } %4) #6 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !851
  %12 = load i64, ptr %9, align 4, !noalias !851
  %13 = load ptr, ptr %10, align 8, !noalias !851
  %14 = mul i64 %11, 3547150501766965522
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !851
  %20 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %21 = sext i32 %19 to i64
  %22 = getelementptr ptr, ptr %6, i64 %21
  %23 = getelementptr i8, ptr %22, i64 56
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  call void %26(ptr %7, { ptr } %3) #45
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %28 = getelementptr i8, ptr %22, i64 64
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  call void %31(ptr %7, { ptr } %4) #45
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %33 = getelementptr i8, ptr %22, i64 40
  %34 = load ptr, ptr %33, align 8
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  call void %36(ptr %7, i32 8) #45
  %37 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %39 = getelementptr i8, ptr %22, i64 24
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = insertvalue { ptr } undef, ptr %37, 0
  call void %42(ptr %7, { ptr } %43) #45
  %44 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %46 = getelementptr i8, ptr %22, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr } undef, ptr %44, 0
  call void %49(ptr %7, { ptr } %50) #45
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %52 = getelementptr i8, ptr %22, i64 48
  %53 = load ptr, ptr %52, align 8
  %54 = getelementptr i8, ptr %53, i64 8
  %55 = load ptr, ptr %54, align 8
  call void %55(ptr %7, i32 0) #45
  ret void
}

define dso_local i32 @CuckooMap_hash1_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #30 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !854
  %11 = load i64, ptr %8, align 4, !noalias !854
  %12 = load ptr, ptr %9, align 8, !noalias !854
  %13 = mul i64 %10, 3547150501766965522
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !854
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 56
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr } %24(ptr %6) #46
  %26 = extractvalue { ptr } %25, 0
  %27 = call i32 %26({ ptr, i160 } %3)
  ret i32 %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local i32 @CuckooMap_hash2_from_primary_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #1 {
  %5 = add i32 %3, 2127912214
  %6 = shl i32 %3, 12
  %7 = add i32 %5, %6
  %8 = ashr i32 %7, 19
  %9 = xor i32 %7, %8
  %10 = xor i32 %9, -949894596
  %11 = add i32 %10, 374761393
  %12 = shl i32 %10, 5
  %13 = add i32 %11, %12
  %14 = add i32 %13, -744332180
  %15 = shl i32 %13, 9
  %16 = xor i32 %14, %15
  %17 = add i32 %16, -42973499
  %18 = shl i32 %16, 3
  %19 = add i32 %17, %18
  %20 = ashr i32 %19, 16
  %21 = xor i32 %19, %20
  %22 = xor i32 %21, -1252372727
  ret i32 %22
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @CuckooMap_index1_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #7 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = getelementptr i8, ptr %5, i64 8
  %8 = getelementptr i8, ptr %5, i64 16
  %9 = getelementptr i8, ptr %5, i64 40
  %10 = load i64, ptr %7, align 4, !noalias !857
  %11 = load i64, ptr %8, align 4, !noalias !857
  %12 = load ptr, ptr %9, align 8, !noalias !857
  %13 = mul i64 %10, 3547150501766965522
  %14 = lshr i64 %13, 32
  %15 = xor i64 %14, %13
  %16 = and i64 %15, %11
  %17 = getelementptr i32, ptr %12, i64 %16
  %18 = load i32, ptr %17, align 4, !noalias !857
  %19 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %5) #43
  %20 = sext i32 %18 to i64
  %21 = getelementptr ptr, ptr %5, i64 %20
  %22 = getelementptr i8, ptr %21, i64 40
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i32 %24(ptr %6) #46
  %26 = add i32 %25, -1
  %27 = and i32 %26, %3
  ret i32 %27
}

; Function Attrs: nounwind
define dso_local i32 @CuckooMap_index2_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, i32 %3) #31 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !860
  %12 = load i64, ptr %9, align 4, !noalias !860
  %13 = load ptr, ptr %10, align 8, !noalias !860
  %14 = mul i64 %11, 3547150501766965522
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !860
  %20 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %6, 1
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %7, 2
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, i32 %19, 3
  %24 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %24, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %24) #43
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %5) #43
  %27 = sext i32 %19 to i64
  %28 = getelementptr ptr, ptr %5, i64 %27
  %29 = getelementptr i8, ptr %28, i64 96
  %30 = load ptr, ptr %29, align 8
  %31 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %31, align 8
  %32 = call align 4 ptr %30({ ptr, ptr, ptr, i32 } %23, ptr nocapture nofree noundef nonnull readonly align 8 %31) #10
  %33 = call i32 %32({ ptr, ptr, ptr, i32 } %23, { ptr, ptr, ptr, i32 } %23, ptr nonnull align 8 dereferenceable(8) %24, i32 %3) #28
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %5)
  %35 = getelementptr i8, ptr %28, i64 40
  %36 = load ptr, ptr %35, align 8
  %37 = load ptr, ptr %36, align 8
  %38 = call i32 %37(ptr %6) #46
  %39 = add i32 %38, -1
  %40 = and i32 %39, %33
  ret i32 %40
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @CuckooMap_place_entry_or_get_failed_entry_to_insertEntryK._V({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, ptr, ptr, i32 } %3) #31 {
  %5 = alloca {}, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %12 = getelementptr i8, ptr %10, i64 8
  %13 = getelementptr i8, ptr %10, i64 16
  %14 = getelementptr i8, ptr %10, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !863
  %16 = load i64, ptr %13, align 4, !noalias !863
  %17 = load ptr, ptr %14, align 8, !noalias !863
  %18 = mul i64 %15, 3547150501766965522
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !863
  %24 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %25 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %26 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %27 = getelementptr i8, ptr %24, i64 8
  %28 = getelementptr i8, ptr %24, i64 16
  %29 = getelementptr i8, ptr %24, i64 40
  %30 = load i64, ptr %27, align 4, !noalias !25
  %31 = load i64, ptr %28, align 4, !noalias !25
  %32 = load ptr, ptr %29, align 8, !noalias !25
  %33 = mul i64 %30, 4015701072841558310
  %34 = lshr i64 %33, 32
  %35 = xor i64 %34, %33
  %36 = and i64 %35, %31
  %37 = getelementptr i32, ptr %32, i64 %36
  %38 = load i32, ptr %37, align 4, !noalias !866
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10) #43
  %40 = sext i32 %23 to i64
  %41 = getelementptr ptr, ptr %10, i64 %40
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10) #43
  %43 = ptrtoint ptr %25 to i64
  %44 = ptrtoint ptr %26 to i64
  %45 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #43
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %5) #43
  %47 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %11, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %47, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 %23, 3
  %53 = getelementptr i8, ptr %41, i64 112
  %54 = getelementptr i8, ptr %41, i64 32
  %55 = getelementptr i8, ptr %41, i64 104
  %56 = getelementptr i8, ptr %41, i64 24
  br label %57

57:                                               ; preds = %138, %4
  %58 = phi i64 [ %44, %4 ], [ %140, %138 ]
  %59 = phi i64 [ %43, %4 ], [ %139, %138 ]
  %60 = phi i32 [ 0, %4 ], [ %73, %138 ]
  %61 = phi i1 [ true, %4 ], [ %156, %138 ]
  %62 = phi ptr [ %24, %4 ], [ %141, %138 ]
  %63 = phi ptr [ %25, %4 ], [ %142, %138 ]
  %64 = phi ptr [ %26, %4 ], [ %143, %138 ]
  %65 = phi i32 [ %38, %4 ], [ %155, %138 ]
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %62, i64 %66
  %68 = getelementptr i8, ptr %67, i64 64
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %63, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %64, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %65, 3
  %73 = add nuw nsw i32 %60, 1
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull %62) #43
  %75 = load ptr, ptr %68, align 8
  %76 = call align 4 ptr %75({ ptr, ptr, ptr, i32 } %72, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %77 = call i32 %76({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull align 8 %5) #28
  br i1 %61, label %78, label %108

78:                                               ; preds = %57
  store ptr @_parameterization_i32, ptr %6, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6)
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %81 = load ptr, ptr %55, align 8
  store ptr @i32_typ, ptr %7, align 8
  %82 = call align 4 ptr %81({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly %7) #10
  %83 = call i32 %82({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 dereferenceable(8) %6, i32 %77) #28
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %85 = load ptr, ptr %56, align 8
  %86 = load ptr, ptr %85, align 8
  %87 = call { ptr } %86(ptr %11) #46
  %88 = extractvalue { ptr } %87, 0
  %89 = sext i32 %83 to i64
  %90 = shl nsw i64 %89, 5
  %91 = getelementptr i8, ptr %88, i64 %90
  %92 = load ptr, ptr %91, align 8
  %93 = getelementptr i8, ptr %91, i64 8
  %94 = load i160, ptr %93, align 4
  %95 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %96 = call { ptr } %86(ptr %11) #46
  %97 = extractvalue { ptr } %96, 0
  %98 = getelementptr i8, ptr %97, i64 %90
  store ptr %62, ptr %98, align 8
  %99 = getelementptr i8, ptr %98, i64 8
  store i64 %59, ptr %99, align 4
  %100 = getelementptr i8, ptr %98, i64 16
  store i64 %58, ptr %100, align 4
  %101 = getelementptr i8, ptr %98, i64 24
  store i32 %65, ptr %101, align 4
  %102 = icmp ne ptr %92, @nil_typ
  %103 = icmp ne ptr %92, null
  %104 = and i1 %102, %103
  %105 = trunc i160 %94 to i64
  %106 = lshr i160 %94, 64
  %107 = trunc i160 %106 to i64
  br i1 %104, label %138, label %160

108:                                              ; preds = %57
  store ptr @_parameterization_i32, ptr %8, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %8)
  %110 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %111 = load ptr, ptr %53, align 8
  store ptr @i32_typ, ptr %9, align 8
  %112 = call align 4 ptr %111({ ptr, ptr, ptr, i32 } %52, ptr nocapture nofree noundef nonnull readonly %9) #10
  %113 = call i32 %112({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull align 8 dereferenceable(8) %8, i32 %77) #28
  %114 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %115 = load ptr, ptr %54, align 8
  %116 = load ptr, ptr %115, align 8
  %117 = call { ptr } %116(ptr %11) #46
  %118 = extractvalue { ptr } %117, 0
  %119 = sext i32 %113 to i64
  %120 = shl nsw i64 %119, 5
  %121 = getelementptr i8, ptr %118, i64 %120
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr i8, ptr %121, i64 8
  %124 = load i160, ptr %123, align 4
  %125 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %126 = call { ptr } %116(ptr %11) #46
  %127 = extractvalue { ptr } %126, 0
  %128 = getelementptr i8, ptr %127, i64 %120
  store ptr %62, ptr %128, align 8
  %129 = getelementptr i8, ptr %128, i64 8
  store i64 %59, ptr %129, align 4
  %130 = getelementptr i8, ptr %128, i64 16
  store i64 %58, ptr %130, align 4
  %131 = getelementptr i8, ptr %128, i64 24
  store i32 %65, ptr %131, align 4
  %132 = icmp ne ptr %122, @nil_typ
  %133 = icmp ne ptr %122, null
  %134 = and i1 %132, %133
  %135 = trunc i160 %124 to i64
  %136 = lshr i160 %124, 64
  %137 = trunc i160 %136 to i64
  br i1 %134, label %138, label %160

138:                                              ; preds = %108, %78
  %139 = phi i64 [ %105, %78 ], [ %135, %108 ]
  %140 = phi i64 [ %107, %78 ], [ %137, %108 ]
  %141 = phi ptr [ %92, %78 ], [ %122, %108 ]
  %142 = inttoptr i64 %139 to ptr
  %143 = inttoptr i64 %140 to ptr
  %144 = getelementptr i8, ptr %141, i64 8
  %145 = getelementptr i8, ptr %141, i64 16
  %146 = getelementptr i8, ptr %141, i64 40
  %147 = load i64, ptr %144, align 4
  %148 = load i64, ptr %145, align 4
  %149 = load ptr, ptr %146, align 8
  %150 = mul i64 %147, 4015701072841558310
  %151 = lshr i64 %150, 32
  %152 = xor i64 %151, %150
  %153 = and i64 %152, %148
  %154 = getelementptr i32, ptr %149, i64 %153
  %155 = load i32, ptr %154, align 4
  %156 = xor i1 %61, true
  %157 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 16 dereferenceable(2256) @CuckooMap) #53
  %158 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull readonly align 8 %5) #43
  %159 = icmp eq i32 %73, 100
  br i1 %159, label %170, label %57

160:                                              ; preds = %108, %78
  %161 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %162 = getelementptr i8, ptr %41, i64 48
  %163 = load ptr, ptr %162, align 8
  %164 = load ptr, ptr %163, align 8
  %165 = call i32 %164(ptr %11) #46
  %166 = add i32 %165, 1
  %167 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %168 = getelementptr i8, ptr %163, i64 8
  %169 = load ptr, ptr %168, align 8
  call void %169(ptr %11, i32 %166) #45
  br label %178

170:                                              ; preds = %138
  %171 = zext i32 %155 to i160
  %172 = shl nuw i160 %171, 128
  %173 = zext i64 %140 to i160
  %174 = shl nuw nsw i160 %173, 64
  %175 = or disjoint i160 %172, %174
  %176 = zext i64 %139 to i160
  %177 = or disjoint i160 %175, %176
  br label %178

178:                                              ; preds = %170, %160
  %179 = phi i160 [ undef, %160 ], [ %177, %170 ]
  %180 = phi ptr [ @nil_typ, %160 ], [ %141, %170 ]
  %181 = insertvalue { ptr, i160 } poison, ptr %180, 0
  %182 = insertvalue { ptr, i160 } %181, i160 %179, 1
  ret { ptr, i160 } %182
}

; Function Attrs: nounwind
define dso_local void @CuckooMap_move_entries_old_tableBufferEntryK._V_or_Nil_old_capacity_per_tablei32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, i32 %4) #31 {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %10 = extractvalue { ptr } %3, 0
  %11 = icmp sgt i32 %4, 0
  br i1 %11, label %12, label %85

12:                                               ; preds = %5
  %13 = getelementptr i8, ptr %8, i64 40
  %14 = load ptr, ptr %13, align 8, !noalias !869
  %15 = getelementptr i8, ptr %8, i64 8
  %16 = load i64, ptr %15, align 4, !noalias !869
  %17 = mul i64 %16, 3547150501766965522
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = getelementptr i8, ptr %8, i64 16
  %21 = load i64, ptr %20, align 4, !noalias !869
  %22 = and i64 %19, %21
  %23 = getelementptr i32, ptr %14, i64 %22
  %24 = load i32, ptr %23, align 4, !noalias !869
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %8, 0
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %9, 1
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %25, 2
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %24, 3
  %30 = sext i32 %24 to i64
  %31 = getelementptr ptr, ptr %8, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = getelementptr i8, ptr %31, i64 120
  %34 = zext nneg i32 %4 to i64
  br label %35

35:                                               ; preds = %82, %12
  %36 = phi i64 [ 0, %12 ], [ %83, %82 ]
  %37 = shl nuw nsw i64 %36, 5
  %38 = getelementptr i8, ptr %10, i64 %37
  %39 = load ptr, ptr %38, align 8
  %40 = icmp ne ptr %39, @nil_typ
  %41 = icmp ne ptr %39, null
  %42 = and i1 %40, %41
  br i1 %42, label %43, label %82

43:                                               ; preds = %35
  %44 = getelementptr i8, ptr %38, i64 8
  %45 = load i64, ptr %44, align 4
  %46 = getelementptr i8, ptr %38, i64 16
  %47 = load i64, ptr %46, align 4
  %48 = inttoptr i64 %45 to ptr
  %49 = inttoptr i64 %47 to ptr
  %50 = getelementptr i8, ptr %39, i64 8
  %51 = getelementptr i8, ptr %39, i64 16
  %52 = getelementptr i8, ptr %39, i64 40
  %53 = load i64, ptr %50, align 4, !noalias !25
  %54 = load i64, ptr %51, align 4, !noalias !25
  %55 = load ptr, ptr %52, align 8, !noalias !25
  %56 = mul i64 %53, 4015701072841558310
  %57 = lshr i64 %56, 32
  %58 = xor i64 %57, %56
  %59 = and i64 %58, %54
  %60 = getelementptr i32, ptr %55, i64 %59
  %61 = load i32, ptr %60, align 4, !noalias !872
  %62 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } %62, ptr %48, 1
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %49, 2
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 %61, 3
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %67 = load ptr, ptr %31, align 8
  %68 = call align 4 ptr %67(ptr nocapture nofree noundef nonnull readonly %9) #2
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %70 = load ptr, ptr %32, align 8
  %71 = call align 4 ptr %70(ptr nocapture nofree noundef nonnull readonly %9) #2
  %72 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %73 = getelementptr inbounds i8, ptr %72, i64 16
  store ptr %71, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %72, i64 8
  store ptr %68, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %72, i64 24
  store ptr null, ptr %75, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %72) #43
  store ptr @Entry, ptr %72, align 8
  store ptr %72, ptr %6, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6) #43
  %78 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %79 = load ptr, ptr %33, align 8
  store ptr %39, ptr %7, align 8
  %80 = call align 4 ptr %79({ ptr, ptr, ptr, i32 } %29, ptr nocapture nofree noundef nonnull readonly %7) #10
  %81 = call { ptr, i160 } %80({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr nonnull align 8 dereferenceable(8) %6, { ptr, ptr, ptr, i32 } %65) #28
  br label %82

82:                                               ; preds = %43, %35
  %83 = add nuw nsw i64 %36, 1
  %84 = icmp eq i64 %83, %34
  br i1 %84, label %85, label %35

85:                                               ; preds = %82, %5
  ret void
}

; Function Attrs: nounwind
define dso_local void @CuckooMap_resize_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [2 x ptr], align 8
  %5 = alloca { ptr, ptr }, align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %11 = getelementptr i8, ptr %8, i64 8
  %12 = getelementptr i8, ptr %8, i64 16
  %13 = getelementptr i8, ptr %8, i64 40
  %14 = load i64, ptr %11, align 4, !noalias !875
  %15 = load i64, ptr %12, align 4, !noalias !875
  %16 = load ptr, ptr %13, align 8, !noalias !875
  %17 = mul i64 %14, 3547150501766965522
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = and i64 %19, %15
  %21 = getelementptr i32, ptr %16, i64 %20
  %22 = load i32, ptr %21, align 4, !noalias !875
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %24 = sext i32 %22 to i64
  %25 = getelementptr ptr, ptr %8, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr %9) #46
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %31 = getelementptr i8, ptr %25, i64 32
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call { ptr } %33(ptr %9) #46
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %36 = getelementptr i8, ptr %25, i64 40
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %9) #46
  %40 = shl i32 %39, 1
  %41 = call i32 @llvm.smax.i32(i32 %40, i32 noundef 16) #43
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %43 = getelementptr i8, ptr %37, i64 8
  %44 = load ptr, ptr %43, align 8
  call void %44(ptr %9, i32 %41) #45
  %45 = zext nneg i32 %41 to i64
  %46 = shl nuw nsw i64 %45, 5
  %47 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %46, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %49 = load ptr, ptr %26, align 8
  %50 = getelementptr i8, ptr %49, i64 8
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr } undef, ptr %47, 0
  call void %51(ptr %9, { ptr } %52) #45
  %53 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %46, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %55 = load ptr, ptr %31, align 8
  %56 = getelementptr i8, ptr %55, i64 8
  %57 = load ptr, ptr %56, align 8
  %58 = insertvalue { ptr } undef, ptr %53, 0
  call void %57(ptr %9, { ptr } %58) #45
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %60 = getelementptr i8, ptr %25, i64 48
  %61 = load ptr, ptr %60, align 8
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  call void %63(ptr %9, i32 0) #45
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %8, 0
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %9, 1
  %66 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %10, 2
  %67 = insertvalue { ptr, ptr, ptr, i32 } %66, i32 %22, 3
  %68 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %69 = getelementptr i8, ptr %68, i64 8
  store ptr null, ptr %69, align 8
  store ptr @buffer_typ, ptr %68, align 8
  store ptr %68, ptr %4, align 8
  %70 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr @_parameterization_i32, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %4) #43
  %72 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8) #43
  %73 = getelementptr i8, ptr %25, i64 128
  %74 = load ptr, ptr %73, align 8
  store ptr @buffer_typ, ptr %5, align 8
  %75 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @i32_typ, ptr %75, align 8
  %76 = call align 4 ptr %74({ ptr, ptr, ptr, i32 } %67, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  call void %76({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr nonnull align 8 dereferenceable(16) %4, { ptr } %29, i32 %39) #28
  %77 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %78 = getelementptr i8, ptr %77, i64 8
  store ptr null, ptr %78, align 8
  store ptr @buffer_typ, ptr %77, align 8
  store ptr %77, ptr %6, align 8
  %79 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @_parameterization_i32, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %6)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %8)
  %82 = load ptr, ptr %73, align 8
  store ptr @buffer_typ, ptr %7, align 8
  %83 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @i32_typ, ptr %83, align 8
  %84 = call align 4 ptr %82({ ptr, ptr, ptr, i32 } %67, ptr nocapture nofree noundef nonnull readonly %7) #10
  call void %84({ ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %67, ptr nonnull align 8 dereferenceable(16) %6, { ptr } %34, i32 %39) #28
  ret void
}

define dso_local noundef i1 @CuckooMap_replace_in_table_keyK_valueV_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5, i32 %6, { ptr } %7) #30 {
  %9 = alloca [0 x ptr], align 8
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %12 = getelementptr i8, ptr %10, i64 8
  %13 = getelementptr i8, ptr %10, i64 16
  %14 = getelementptr i8, ptr %10, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !878
  %16 = load i64, ptr %13, align 4, !noalias !878
  %17 = load ptr, ptr %14, align 8, !noalias !878
  %18 = mul i64 %15, 3547150501766965522
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !878
  %24 = extractvalue { ptr } %7, 0
  %25 = sext i32 %6 to i64
  %26 = shl nsw i64 %25, 5
  %27 = getelementptr i8, ptr %24, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %27, i64 8
  %30 = icmp ne ptr %28, @nil_typ
  %31 = icmp ne ptr %28, null
  %32 = and i1 %30, %31
  br i1 %32, label %33, label %168

33:                                               ; preds = %8
  %34 = load i64, ptr %29, align 4
  %35 = getelementptr i8, ptr %27, i64 16
  %36 = load i64, ptr %35, align 4
  %37 = inttoptr i64 %34 to ptr
  %38 = inttoptr i64 %36 to ptr
  %39 = getelementptr i8, ptr %28, i64 8
  %40 = getelementptr i8, ptr %28, i64 16
  %41 = getelementptr i8, ptr %28, i64 40
  %42 = load i64, ptr %39, align 4, !noalias !881
  %43 = load i64, ptr %40, align 4, !noalias !881
  %44 = load ptr, ptr %41, align 8, !noalias !881
  %45 = mul i64 %42, 4015701072841558310
  %46 = lshr i64 %45, 32
  %47 = xor i64 %46, %45
  %48 = and i64 %47, %43
  %49 = getelementptr i32, ptr %44, i64 %48
  %50 = load i32, ptr %49, align 4, !noalias !881
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %37, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %38, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %50, 3
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %9) #43
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %28) #43
  %57 = sext i32 %50 to i64
  %58 = getelementptr ptr, ptr %28, i64 %57
  %59 = getelementptr i8, ptr %58, i64 64
  %60 = load ptr, ptr %59, align 8
  %61 = call align 4 ptr %60({ ptr, ptr, ptr, i32 } %54, ptr nocapture nofree noundef nonnull readonly align 8 %9) #10
  %62 = call i32 %61({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull align 8 %9) #28
  %63 = icmp eq i32 %62, %5
  br i1 %63, label %64, label %168

64:                                               ; preds = %33
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %9)
  %66 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %28)
  %67 = getelementptr i8, ptr %58, i64 48
  %68 = load ptr, ptr %67, align 8
  %69 = call align 4 ptr %68({ ptr, ptr, ptr, i32 } %54, ptr nocapture nofree noundef nonnull readonly align 8 %9) #10
  %70 = call { ptr, i160 } %69({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull align 8 %9) #28
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %72 = sext i32 %23 to i64
  %73 = getelementptr ptr, ptr %10, i64 %72
  %74 = getelementptr i8, ptr %73, i64 64
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call { ptr } %76(ptr %11) #46
  %78 = extractvalue { ptr } %77, 0
  %79 = call i1 %78({ ptr, i160 } %70, { ptr, i160 } %3)
  br i1 %79, label %80, label %168

80:                                               ; preds = %64
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %82 = load ptr, ptr %73, align 8
  %83 = call align 8 ptr %82(ptr nocapture nofree noundef nonnull readonly %11) #2
  %84 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %85 = getelementptr i8, ptr %73, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = call align 8 ptr %86(ptr nocapture nofree noundef nonnull readonly %11) #2
  %88 = load ptr, ptr %83, align 8, !alias.scope !884
  %89 = getelementptr i8, ptr %88, i64 72
  %90 = load ptr, ptr %89, align 8, !alias.scope !884
  %91 = call { i64, i64 } %90(ptr nocapture nofree nonnull readonly align 8 %83) #2, !alias.scope !884
  %92 = extractvalue { i64, i64 } %91, 0
  %93 = extractvalue { i64, i64 } %91, 1
  %94 = urem i64 20, %93
  %95 = icmp eq i64 %94, 0
  %96 = sub i64 %93, %94
  %97 = select i1 %95, i64 0, i64 %96
  %98 = add i64 %92, 20
  %99 = add i64 %98, %97
  %100 = load ptr, ptr %87, align 8, !alias.scope !884
  %101 = getelementptr i8, ptr %100, i64 72
  %102 = load ptr, ptr %101, align 8, !alias.scope !884
  %103 = call { i64, i64 } %102(ptr nocapture nofree nonnull readonly align 8 %87) #2, !alias.scope !884
  %104 = extractvalue { i64, i64 } %103, 0
  %105 = extractvalue { i64, i64 } %103, 1
  %106 = call i64 @llvm.umax.i64(i64 %93, i64 %105) #44
  %107 = call i64 @llvm.umax.i64(i64 %106, i64 noundef 8) #44, !range !18
  %108 = urem i64 %99, %105
  %109 = icmp eq i64 %108, 0
  %110 = sub i64 %105, %108
  %111 = select i1 %109, i64 0, i64 %110
  %112 = add i64 %104, %99
  %113 = add i64 %112, %111
  %114 = urem i64 %113, %107
  %115 = icmp eq i64 %114, 0
  %116 = sub i64 %107, %114
  %117 = select i1 %115, i64 0, i64 %116
  %118 = add i64 %117, %113
  %119 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %118, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %83, ptr %119, align 8
  %120 = getelementptr inbounds i8, ptr %119, i64 8
  store ptr %87, ptr %120, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %119)
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %123 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %10)
  %124 = load ptr, ptr %83, align 8
  %125 = getelementptr i8, ptr %124, i64 72
  %126 = load ptr, ptr %125, align 8
  %127 = call { i64, i64 } %126(ptr nocapture nofree nonnull readonly align 8 %83) #2
  %128 = extractvalue { i64, i64 } %127, 1
  %129 = urem i64 20, %128
  %130 = icmp eq i64 %129, 0
  %131 = sub i64 %128, %129
  %132 = add i64 %131, 20
  %133 = select i1 %130, i64 20, i64 %132
  %134 = getelementptr i8, ptr %119, i64 %133
  %135 = getelementptr i8, ptr %124, i64 64
  %136 = load ptr, ptr %135, align 8
  call void %136({ ptr, i160 } %3, ptr nocapture nofree nonnull readonly align 8 %83, ptr nocapture nofree writeonly %134) #8
  %137 = load ptr, ptr %119, align 8
  %138 = load ptr, ptr %137, align 8
  %139 = getelementptr i8, ptr %138, i64 72
  %140 = load ptr, ptr %139, align 8
  %141 = call { i64, i64 } %140(ptr nocapture nofree nonnull readonly align 8 %137) #2
  %142 = extractvalue { i64, i64 } %141, 0
  %143 = extractvalue { i64, i64 } %141, 1
  %144 = urem i64 20, %143
  %145 = icmp eq i64 %144, 0
  %146 = sub i64 %143, %144
  %147 = select i1 %145, i64 0, i64 %146
  %148 = add i64 %142, 20
  %149 = add i64 %148, %147
  %150 = load ptr, ptr %120, align 8
  %151 = load ptr, ptr %150, align 8
  %152 = getelementptr i8, ptr %151, i64 72
  %153 = load ptr, ptr %152, align 8
  %154 = call { i64, i64 } %153(ptr nocapture nofree nonnull readonly align 8 %150) #2
  %155 = extractvalue { i64, i64 } %154, 1
  %156 = urem i64 %149, %155
  %157 = icmp eq i64 %156, 0
  %158 = sub i64 %155, %156
  %159 = select i1 %157, i64 0, i64 %158
  %160 = getelementptr i8, ptr %119, i64 %149
  %161 = getelementptr i8, ptr %160, i64 %159
  %162 = getelementptr i8, ptr %151, i64 64
  %163 = load ptr, ptr %162, align 8
  call void %163({ ptr, i160 } %4, ptr nocapture nofree nonnull readonly align 8 %150, ptr nocapture nofree writeonly %161) #8
  %164 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %165 = getelementptr inbounds i8, ptr %119, i64 16
  store i32 %5, ptr %165, align 8
  store ptr @Entry, ptr %27, align 8
  %166 = ptrtoint ptr %119 to i64
  store i64 %166, ptr %29, align 4
  %167 = getelementptr i8, ptr %27, i64 24
  store i32 10, ptr %167, align 4
  br label %168

168:                                              ; preds = %80, %64, %33, %8
  %169 = phi i1 [ false, %64 ], [ true, %80 ], [ false, %8 ], [ false, %33 ]
  ret i1 %169
}

define dso_local { ptr, i160 } @CuckooMap_get_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr } %6) #30 {
  %8 = alloca [0 x ptr], align 8
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %11 = getelementptr i8, ptr %9, i64 8
  %12 = getelementptr i8, ptr %9, i64 16
  %13 = getelementptr i8, ptr %9, i64 40
  %14 = load i64, ptr %11, align 4, !noalias !887
  %15 = load i64, ptr %12, align 4, !noalias !887
  %16 = load ptr, ptr %13, align 8, !noalias !887
  %17 = mul i64 %14, 3547150501766965522
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = and i64 %19, %15
  %21 = getelementptr i32, ptr %16, i64 %20
  %22 = load i32, ptr %21, align 4, !noalias !887
  %23 = extractvalue { ptr } %6, 0
  %24 = sext i32 %5 to i64
  %25 = shl nsw i64 %24, 5
  %26 = getelementptr i8, ptr %23, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, @nil_typ
  %29 = icmp ne ptr %27, null
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %88

31:                                               ; preds = %7
  %32 = getelementptr i8, ptr %26, i64 8
  %33 = load i64, ptr %32, align 4
  %34 = getelementptr i8, ptr %26, i64 16
  %35 = load i64, ptr %34, align 4
  %36 = inttoptr i64 %33 to ptr
  %37 = inttoptr i64 %35 to ptr
  %38 = getelementptr i8, ptr %27, i64 8
  %39 = getelementptr i8, ptr %27, i64 16
  %40 = getelementptr i8, ptr %27, i64 40
  %41 = load i64, ptr %38, align 4, !noalias !890
  %42 = load i64, ptr %39, align 4, !noalias !890
  %43 = load ptr, ptr %40, align 8, !noalias !890
  %44 = mul i64 %41, 4015701072841558310
  %45 = lshr i64 %44, 32
  %46 = xor i64 %45, %44
  %47 = and i64 %46, %42
  %48 = getelementptr i32, ptr %43, i64 %47
  %49 = load i32, ptr %48, align 4, !noalias !890
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %37, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %49, 3
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8) #43
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %27) #43
  %56 = sext i32 %49 to i64
  %57 = getelementptr ptr, ptr %27, i64 %56
  %58 = getelementptr i8, ptr %57, i64 64
  %59 = load ptr, ptr %58, align 8
  %60 = call align 4 ptr %59({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %61 = call i32 %60({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %8) #28
  %62 = icmp eq i32 %61, %4
  br i1 %62, label %63, label %88

63:                                               ; preds = %31
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %27)
  %66 = getelementptr i8, ptr %57, i64 48
  %67 = load ptr, ptr %66, align 8
  %68 = call align 4 ptr %67({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %69 = call { ptr, i160 } %68({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %8) #28
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %71 = sext i32 %22 to i64
  %72 = getelementptr ptr, ptr %9, i64 %71
  %73 = getelementptr i8, ptr %72, i64 64
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr } %75(ptr %10) #46
  %77 = extractvalue { ptr } %76, 0
  %78 = call i1 %77({ ptr, i160 } %69, { ptr, i160 } %3)
  br i1 %78, label %79, label %88

79:                                               ; preds = %63
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %27)
  %82 = getelementptr i8, ptr %57, i64 56
  %83 = load ptr, ptr %82, align 8
  %84 = call align 4 ptr %83({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %85 = call { ptr, i160 } %84({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %8) #28
  %86 = extractvalue { ptr, i160 } %85, 0
  %87 = extractvalue { ptr, i160 } %85, 1
  br label %88

88:                                               ; preds = %79, %63, %31, %7
  %89 = phi i160 [ %87, %79 ], [ poison, %63 ], [ poison, %7 ], [ poison, %31 ]
  %90 = phi ptr [ %86, %79 ], [ @nil_typ, %63 ], [ @nil_typ, %7 ], [ @nil_typ, %31 ]
  %91 = insertvalue { ptr, i160 } poison, ptr %90, 0
  %92 = insertvalue { ptr, i160 } %91, i160 %89, 1
  ret { ptr, i160 } %92
}

define dso_local { ptr, i160 } @CuckooMap_remove_from_table_keyK_h1i32_idxi32_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, i32 %4, i32 %5, { ptr } %6) #30 {
  %8 = alloca [0 x ptr], align 8
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %11 = getelementptr i8, ptr %9, i64 8
  %12 = getelementptr i8, ptr %9, i64 16
  %13 = getelementptr i8, ptr %9, i64 40
  %14 = load i64, ptr %11, align 4, !noalias !893
  %15 = load i64, ptr %12, align 4, !noalias !893
  %16 = load ptr, ptr %13, align 8, !noalias !893
  %17 = mul i64 %14, 3547150501766965522
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = and i64 %19, %15
  %21 = getelementptr i32, ptr %16, i64 %20
  %22 = load i32, ptr %21, align 4, !noalias !893
  %23 = extractvalue { ptr } %6, 0
  %24 = sext i32 %5 to i64
  %25 = shl nsw i64 %24, 5
  %26 = getelementptr i8, ptr %23, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = icmp ne ptr %27, @nil_typ
  %29 = icmp ne ptr %27, null
  %30 = and i1 %28, %29
  br i1 %30, label %31, label %97

31:                                               ; preds = %7
  %32 = getelementptr i8, ptr %26, i64 8
  %33 = load i64, ptr %32, align 4
  %34 = getelementptr i8, ptr %26, i64 16
  %35 = load i64, ptr %34, align 4
  %36 = inttoptr i64 %33 to ptr
  %37 = inttoptr i64 %35 to ptr
  %38 = getelementptr i8, ptr %27, i64 8
  %39 = getelementptr i8, ptr %27, i64 16
  %40 = getelementptr i8, ptr %27, i64 40
  %41 = load i64, ptr %38, align 4, !noalias !896
  %42 = load i64, ptr %39, align 4, !noalias !896
  %43 = load ptr, ptr %40, align 8, !noalias !896
  %44 = mul i64 %41, 4015701072841558310
  %45 = lshr i64 %44, 32
  %46 = xor i64 %45, %44
  %47 = and i64 %46, %42
  %48 = getelementptr i32, ptr %43, i64 %47
  %49 = load i32, ptr %48, align 4, !noalias !896
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %36, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %37, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 %49, 3
  %54 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8) #43
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %27) #43
  %56 = sext i32 %49 to i64
  %57 = getelementptr ptr, ptr %27, i64 %56
  %58 = getelementptr i8, ptr %57, i64 64
  %59 = load ptr, ptr %58, align 8
  %60 = call align 4 ptr %59({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %61 = call i32 %60({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %8) #28
  %62 = icmp eq i32 %61, %4
  br i1 %62, label %63, label %97

63:                                               ; preds = %31
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %65 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %27)
  %66 = getelementptr i8, ptr %57, i64 48
  %67 = load ptr, ptr %66, align 8
  %68 = call align 4 ptr %67({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %69 = call { ptr, i160 } %68({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %8) #28
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %71 = sext i32 %22 to i64
  %72 = getelementptr ptr, ptr %9, i64 %71
  %73 = getelementptr i8, ptr %72, i64 64
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr } %75(ptr %10) #46
  %77 = extractvalue { ptr } %76, 0
  %78 = call i1 %77({ ptr, i160 } %69, { ptr, i160 } %3)
  br i1 %78, label %79, label %97

79:                                               ; preds = %63
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %8)
  %81 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 8 %27)
  %82 = getelementptr i8, ptr %57, i64 56
  %83 = load ptr, ptr %82, align 8
  %84 = call align 4 ptr %83({ ptr, ptr, ptr, i32 } %53, ptr nocapture nofree noundef nonnull readonly align 8 %8) #10
  %85 = call { ptr, i160 } %84({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull align 8 %8) #28
  %86 = extractvalue { ptr, i160 } %85, 0
  %87 = extractvalue { ptr, i160 } %85, 1
  store ptr @nil_typ, ptr %26, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %89 = getelementptr i8, ptr %72, i64 48
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call i32 %91(ptr %10) #46
  %93 = add i32 %92, -1
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %95 = getelementptr i8, ptr %90, i64 8
  %96 = load ptr, ptr %95, align 8
  call void %96(ptr %10, i32 %93) #45
  br label %97

97:                                               ; preds = %79, %63, %31, %7
  %98 = phi i160 [ %87, %79 ], [ poison, %63 ], [ poison, %7 ], [ poison, %31 ]
  %99 = phi ptr [ %86, %79 ], [ @nil_typ, %63 ], [ @nil_typ, %7 ], [ @nil_typ, %31 ]
  %100 = insertvalue { ptr, i160 } poison, ptr %99, 0
  %101 = insertvalue { ptr, i160 } %100, i160 %98, 1
  ret { ptr, i160 } %101
}

; Function Attrs: nounwind
define dso_local void @CuckooMap_insert_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) #31 {
  %6 = alloca [0 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %9 = alloca [5 x ptr], align 8
  %10 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  %11 = alloca [1 x ptr], align 8
  %12 = alloca { ptr }, align 8
  %13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %16 = getelementptr i8, ptr %13, i64 8
  %17 = getelementptr i8, ptr %13, i64 16
  %18 = getelementptr i8, ptr %13, i64 40
  %19 = load i64, ptr %16, align 4
  %20 = load i64, ptr %17, align 4
  %21 = load ptr, ptr %18, align 8
  %22 = mul i64 %19, 3547150501766965522
  %23 = lshr i64 %22, 32
  %24 = xor i64 %23, %22
  %25 = and i64 %24, %20
  %26 = getelementptr i32, ptr %21, i64 %25
  %27 = load i32, ptr %26, align 4
  %28 = extractvalue { ptr, i160 } %3, 0
  %29 = extractvalue { ptr, i160 } %4, 0
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %14, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %15, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %27, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13) #43
  %35 = sext i32 %27 to i64
  %36 = getelementptr ptr, ptr %13, i64 %35
  %37 = load ptr, ptr %36, align 8
  %38 = call align 4 ptr %37(ptr nocapture nofree noundef nonnull readonly %14) #2
  %39 = alloca [1 x ptr], align 8
  store ptr %38, ptr %39, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %39) #43
  %41 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13) #43
  %42 = getelementptr i8, ptr %36, i64 88
  %43 = load ptr, ptr %42, align 8
  %44 = alloca { ptr }, align 8
  store ptr %28, ptr %44, align 8
  %45 = call align 4 ptr %43({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %44) #10
  %46 = call i32 %45({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(8) %39, { ptr, i160 } %3) #28
  %47 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %47)
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13)
  %50 = getelementptr i8, ptr %36, i64 104
  %51 = load ptr, ptr %50, align 8
  %52 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %52, align 8
  %53 = call align 4 ptr %51({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %52) #10
  %54 = call i32 %53({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(8) %47, i32 %46) #28
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13)
  %56 = getelementptr i8, ptr %36, i64 24
  %57 = load ptr, ptr %56, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr } %58(ptr nonnull %14) #46
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13)
  %61 = load ptr, ptr %36, align 8
  %62 = call align 4 ptr %61(ptr nocapture nofree noundef nonnull readonly %14) #2
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13)
  %64 = getelementptr i8, ptr %36, i64 8
  %65 = load ptr, ptr %64, align 8
  %66 = call align 4 ptr %65(ptr nocapture nofree noundef nonnull readonly %14) #2
  %67 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %67, align 8
  %68 = alloca [5 x ptr], align 8
  store ptr %62, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %68, i64 8
  store ptr %66, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 16
  store ptr @_parameterization_i32, ptr %70, align 8
  %71 = getelementptr inbounds i8, ptr %68, i64 24
  store ptr @_parameterization_i32, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 32
  store ptr %67, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 noundef 25, ptr nocapture nofree noundef nonnull align 8 dereferenceable(40) %68)
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %13)
  %75 = getelementptr i8, ptr %36, i64 144
  %76 = load ptr, ptr %75, align 8
  %77 = alloca { ptr, ptr, ptr, ptr, ptr }, align 8
  store ptr %28, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %77, i64 8
  store ptr %29, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %77, i64 16
  store ptr @i32_typ, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %77, i64 24
  store ptr @i32_typ, ptr %80, align 8
  %81 = getelementptr inbounds i8, ptr %77, i64 32
  store ptr @buffer_typ, ptr %81, align 8
  %82 = call align 4 ptr %76({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %77) #10
  %83 = call i1 %82({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(40) %68, { ptr, i160 } %3, { ptr, i160 } %4, i32 %46, i32 %54, { ptr } %59) #28
  br i1 %83, label %306, label %84

84:                                               ; preds = %5
  store ptr @_parameterization_i32, ptr %7, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %7)
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %87 = getelementptr i8, ptr %36, i64 112
  %88 = load ptr, ptr %87, align 8
  store ptr @i32_typ, ptr %8, align 8
  %89 = call align 4 ptr %88({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly %8) #10
  %90 = call i32 %89({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(8) %7, i32 %46) #28
  %91 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %92 = getelementptr i8, ptr %36, i64 32
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = call { ptr } %94(ptr nonnull %14) #46
  %96 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %97 = load ptr, ptr %36, align 8
  %98 = call align 4 ptr %97(ptr nocapture nofree noundef nonnull readonly %14) #2
  %99 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %100 = load ptr, ptr %64, align 8
  %101 = call align 4 ptr %100(ptr nocapture nofree noundef nonnull readonly %14) #2
  %102 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %102, align 8
  store ptr %98, ptr %9, align 8
  %103 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @_parameterization_i32, ptr %104, align 8
  %105 = getelementptr inbounds i8, ptr %9, i64 24
  store ptr @_parameterization_i32, ptr %105, align 8
  %106 = getelementptr inbounds i8, ptr %9, i64 32
  store ptr %102, ptr %106, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 noundef 25, ptr nocapture nofree noundef nonnull align 8 dereferenceable(40) %9)
  %108 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %109 = load ptr, ptr %75, align 8
  store ptr %28, ptr %10, align 8
  %110 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %29, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr @i32_typ, ptr %111, align 8
  %112 = getelementptr inbounds i8, ptr %10, i64 24
  store ptr @i32_typ, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %10, i64 32
  store ptr @buffer_typ, ptr %113, align 8
  %114 = call align 4 ptr %109({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly %10) #10
  %115 = call i1 %114({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(40) %9, { ptr, i160 } %3, { ptr, i160 } %4, i32 %46, i32 %90, { ptr } %95) #28
  br i1 %115, label %306, label %116

116:                                              ; preds = %84
  %117 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %118 = getelementptr i8, ptr %36, i64 48
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %119, align 8
  %121 = call i32 %120(ptr %14) #46
  %122 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %123 = getelementptr i8, ptr %36, i64 40
  %124 = load ptr, ptr %123, align 8
  %125 = load ptr, ptr %124, align 8
  %126 = call i32 %125(ptr %14) #46
  %127 = icmp slt i32 %121, %126
  br i1 %127, label %134, label %128

128:                                              ; preds = %116
  %129 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %130 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %131 = getelementptr i8, ptr %36, i64 136
  %132 = load ptr, ptr %131, align 8
  %133 = call align 4 ptr %132({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  call void %133({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %6) #28
  br label %134

134:                                              ; preds = %128, %116
  %135 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %136 = load ptr, ptr %36, align 8
  %137 = call align 8 ptr %136(ptr nocapture nofree noundef nonnull readonly %14) #2
  %138 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %139 = load ptr, ptr %64, align 8
  %140 = call align 8 ptr %139(ptr nocapture nofree noundef nonnull readonly %14) #2
  %141 = load ptr, ptr %137, align 8
  %142 = getelementptr i8, ptr %141, i64 72
  %143 = load ptr, ptr %142, align 8
  %144 = call { i64, i64 } %143(ptr nocapture nofree nonnull readonly align 8 %137) #2
  %145 = extractvalue { i64, i64 } %144, 0
  %146 = extractvalue { i64, i64 } %144, 1
  %147 = urem i64 20, %146
  %148 = icmp eq i64 %147, 0
  %149 = sub i64 %146, %147
  %150 = select i1 %148, i64 0, i64 %149
  %151 = add i64 %145, 20
  %152 = add i64 %151, %150
  %153 = load ptr, ptr %140, align 8
  %154 = getelementptr i8, ptr %153, i64 72
  %155 = load ptr, ptr %154, align 8
  %156 = call { i64, i64 } %155(ptr nocapture nofree nonnull readonly align 8 %140) #2
  %157 = extractvalue { i64, i64 } %156, 0
  %158 = extractvalue { i64, i64 } %156, 1
  %159 = call i64 @llvm.umax.i64(i64 %146, i64 %158) #44
  %160 = call i64 @llvm.umax.i64(i64 %159, i64 noundef 8) #44, !range !18
  %161 = urem i64 %152, %158
  %162 = icmp eq i64 %161, 0
  %163 = sub i64 %158, %161
  %164 = select i1 %162, i64 0, i64 %163
  %165 = add i64 %157, %152
  %166 = add i64 %165, %164
  %167 = urem i64 %166, %160
  %168 = icmp eq i64 %167, 0
  %169 = sub i64 %160, %167
  %170 = select i1 %168, i64 0, i64 %169
  %171 = add i64 %170, %166
  %172 = call noalias nonnull align 8 dereferenceable(20) ptr @bump_malloc_inner(i64 noundef %171, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %137, ptr %172, align 8
  %173 = getelementptr inbounds i8, ptr %172, i64 8
  store ptr %140, ptr %173, align 8
  %174 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(20) %172)
  %175 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Entry, ptr undef, ptr undef, i32 undef }, ptr %172, 1
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, ptr undef, 2
  %177 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 10, 3
  %178 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %179 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %180 = load ptr, ptr %137, align 8
  %181 = getelementptr i8, ptr %180, i64 72
  %182 = load ptr, ptr %181, align 8
  %183 = call { i64, i64 } %182(ptr nocapture nofree nonnull readonly align 8 %137) #2
  %184 = extractvalue { i64, i64 } %183, 1
  %185 = urem i64 20, %184
  %186 = icmp eq i64 %185, 0
  %187 = sub i64 %184, %185
  %188 = add i64 %187, 20
  %189 = select i1 %186, i64 20, i64 %188
  %190 = getelementptr i8, ptr %172, i64 %189
  %191 = getelementptr i8, ptr %180, i64 64
  %192 = load ptr, ptr %191, align 8
  call void %192({ ptr, i160 } %3, ptr nocapture nofree nonnull readonly align 8 %137, ptr nocapture nofree writeonly %190) #8
  %193 = load ptr, ptr %172, align 8
  %194 = load ptr, ptr %193, align 8
  %195 = getelementptr i8, ptr %194, i64 72
  %196 = load ptr, ptr %195, align 8
  %197 = call { i64, i64 } %196(ptr nocapture nofree nonnull readonly align 8 %193) #2
  %198 = extractvalue { i64, i64 } %197, 0
  %199 = extractvalue { i64, i64 } %197, 1
  %200 = urem i64 20, %199
  %201 = icmp eq i64 %200, 0
  %202 = sub i64 %199, %200
  %203 = select i1 %201, i64 0, i64 %202
  %204 = add i64 %198, 20
  %205 = add i64 %204, %203
  %206 = load ptr, ptr %173, align 8
  %207 = load ptr, ptr %206, align 8
  %208 = getelementptr i8, ptr %207, i64 72
  %209 = load ptr, ptr %208, align 8
  %210 = call { i64, i64 } %209(ptr nocapture nofree nonnull readonly align 8 %206) #2
  %211 = extractvalue { i64, i64 } %210, 1
  %212 = urem i64 %205, %211
  %213 = icmp eq i64 %212, 0
  %214 = sub i64 %211, %212
  %215 = select i1 %213, i64 0, i64 %214
  %216 = getelementptr i8, ptr %172, i64 %205
  %217 = getelementptr i8, ptr %216, i64 %215
  %218 = getelementptr i8, ptr %207, i64 64
  %219 = load ptr, ptr %218, align 8
  call void %219({ ptr, i160 } %4, ptr nocapture nofree nonnull readonly align 8 %206, ptr nocapture nofree writeonly %217) #8
  %220 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef nonnull align 16 dereferenceable(200) @Entry) #43
  %221 = getelementptr inbounds i8, ptr %172, i64 16
  store i32 %46, ptr %221, align 8
  %222 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %223 = load ptr, ptr %36, align 8
  %224 = call align 4 ptr %223(ptr nocapture nofree noundef nonnull readonly %14) #2
  %225 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %226 = load ptr, ptr %64, align 8
  %227 = call align 4 ptr %226(ptr nocapture nofree noundef nonnull readonly %14) #2
  %228 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %229 = getelementptr inbounds i8, ptr %228, i64 16
  store ptr @_parameterization_Nil, ptr %229, align 8
  %230 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %231 = getelementptr inbounds i8, ptr %230, i64 16
  store ptr %227, ptr %231, align 8
  %232 = getelementptr inbounds i8, ptr %230, i64 8
  store ptr %224, ptr %232, align 8
  %233 = getelementptr inbounds i8, ptr %230, i64 24
  store ptr null, ptr %233, align 8
  %234 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %230)
  store ptr @Entry, ptr %230, align 8
  %235 = getelementptr inbounds i8, ptr %228, i64 8
  store ptr %230, ptr %235, align 8
  %236 = getelementptr inbounds i8, ptr %228, i64 24
  store ptr null, ptr %236, align 8
  %237 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %228)
  store ptr @union_typ, ptr %228, align 8
  store ptr %228, ptr %11, align 8
  %238 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  %239 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %240 = getelementptr i8, ptr %36, i64 120
  %241 = load ptr, ptr %240, align 8
  store ptr @union_typ, ptr %12, align 8
  %242 = call align 4 ptr %241({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly %12) #10
  %243 = call { ptr, i160 } %242({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(8) %11, { ptr, ptr, ptr, i32 } %177) #28
  %244 = extractvalue { ptr, i160 } %243, 0
  %245 = icmp eq ptr %244, @nil_typ
  %246 = icmp eq ptr %244, null
  %247 = or i1 %245, %246
  br i1 %247, label %306, label %248

248:                                              ; preds = %134
  %249 = extractvalue { ptr, i160 } %243, 1
  %250 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %251 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %252 = getelementptr i8, ptr %36, i64 136
  %253 = load ptr, ptr %252, align 8
  %254 = call align 4 ptr %253({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  call void %254({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %6) #28
  %255 = trunc i160 %249 to i64
  %256 = lshr i160 %249, 64
  %257 = trunc i160 %256 to i64
  %258 = inttoptr i64 %255 to ptr
  %259 = inttoptr i64 %257 to ptr
  %260 = getelementptr i8, ptr %244, i64 8
  %261 = getelementptr i8, ptr %244, i64 16
  %262 = getelementptr i8, ptr %244, i64 40
  %263 = load i64, ptr %260, align 4
  %264 = load i64, ptr %261, align 4
  %265 = load ptr, ptr %262, align 8
  %266 = mul i64 %263, 4015701072841558310
  %267 = lshr i64 %266, 32
  %268 = xor i64 %267, %266
  %269 = and i64 %268, %264
  %270 = getelementptr i32, ptr %265, i64 %269
  %271 = load i32, ptr %270, align 4
  %272 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %244, 0
  %273 = insertvalue { ptr, ptr, ptr, i32 } %272, ptr %258, 1
  %274 = insertvalue { ptr, ptr, ptr, i32 } %273, ptr %259, 2
  %275 = insertvalue { ptr, ptr, ptr, i32 } %274, i32 %271, 3
  %276 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %277 = load ptr, ptr %36, align 8
  %278 = call align 4 ptr %277(ptr nocapture nofree noundef nonnull readonly %14) #2
  %279 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %280 = load ptr, ptr %64, align 8
  %281 = call align 4 ptr %280(ptr nocapture nofree noundef nonnull readonly %14) #2
  %282 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %283 = getelementptr inbounds i8, ptr %282, i64 16
  store ptr @_parameterization_Nil, ptr %283, align 8
  %284 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %285 = getelementptr inbounds i8, ptr %284, i64 16
  store ptr %281, ptr %285, align 8
  %286 = getelementptr inbounds i8, ptr %284, i64 8
  store ptr %278, ptr %286, align 8
  %287 = getelementptr inbounds i8, ptr %284, i64 24
  store ptr null, ptr %287, align 8
  %288 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %284)
  store ptr @Entry, ptr %284, align 8
  %289 = getelementptr inbounds i8, ptr %282, i64 8
  store ptr %284, ptr %289, align 8
  %290 = getelementptr inbounds i8, ptr %282, i64 24
  store ptr null, ptr %290, align 8
  %291 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %282)
  store ptr @union_typ, ptr %282, align 8
  store ptr %282, ptr %11, align 8
  %292 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %11)
  %293 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %294 = load ptr, ptr %240, align 8
  store ptr @union_typ, ptr %12, align 8
  %295 = call align 4 ptr %294({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly %12) #10
  %296 = call { ptr, i160 } %295({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 dereferenceable(8) %11, { ptr, ptr, ptr, i32 } %275) #28
  %297 = extractvalue { ptr, i160 } %296, 0
  %298 = icmp eq ptr %297, @nil_typ
  %299 = icmp eq ptr %297, null
  %300 = or i1 %298, %299
  br i1 %300, label %306, label %301

301:                                              ; preds = %248
  %302 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %6)
  %303 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %13)
  %304 = load ptr, ptr %252, align 8
  %305 = call align 4 ptr %304({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %6) #10
  call void %305({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %6) #28
  br label %306

306:                                              ; preds = %301, %248, %134, %84, %5
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @CuckooMap_size_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !899
  %10 = load i64, ptr %7, align 4, !noalias !899
  %11 = load ptr, ptr %8, align 8, !noalias !899
  %12 = mul i64 %9, 3547150501766965522
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !899
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 48
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  ret i32 %24
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @CuckooMap_get_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #31 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [4 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, ptr }, align 8
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %12 = getelementptr i8, ptr %9, i64 8
  %13 = getelementptr i8, ptr %9, i64 16
  %14 = getelementptr i8, ptr %9, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !902
  %16 = load i64, ptr %13, align 4, !noalias !902
  %17 = load ptr, ptr %14, align 8, !noalias !902
  %18 = mul i64 %15, 3547150501766965522
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !902
  %24 = extractvalue { ptr, i160 } %3, 0
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %10, 1
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %11, 2
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %23, 3
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9) #43
  %30 = sext i32 %23 to i64
  %31 = getelementptr ptr, ptr %9, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call align 4 ptr %32(ptr nocapture nofree noundef nonnull readonly %10) #2
  %34 = alloca [1 x ptr], align 8
  store ptr %33, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %34) #43
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9) #43
  %37 = getelementptr i8, ptr %31, i64 88
  %38 = load ptr, ptr %37, align 8
  %39 = alloca { ptr }, align 8
  store ptr %24, ptr %39, align 8
  %40 = call align 4 ptr %38({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly align 8 %39) #10
  %41 = call i32 %40({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(8) %34, { ptr, i160 } %3) #28
  %42 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %45 = getelementptr i8, ptr %31, i64 104
  %46 = load ptr, ptr %45, align 8
  %47 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %47, align 8
  %48 = call align 4 ptr %46({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly align 8 %47) #10
  %49 = call i32 %48({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(8) %42, i32 %41) #28
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %51 = getelementptr i8, ptr %31, i64 24
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr } %53(ptr nonnull %10) #46
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %56 = load ptr, ptr %31, align 8
  %57 = call align 4 ptr %56(ptr nocapture nofree noundef nonnull readonly %10) #2
  %58 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %58, align 8
  %59 = alloca [4 x ptr], align 8
  store ptr %57, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %59, i64 8
  store ptr @_parameterization_i32, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %59, i64 16
  store ptr @_parameterization_i32, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %59, i64 24
  store ptr %58, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %59)
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %65 = getelementptr i8, ptr %31, i64 152
  %66 = load ptr, ptr %65, align 8
  %67 = alloca { ptr, ptr, ptr, ptr }, align 8
  store ptr %24, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr @i32_typ, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr @i32_typ, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store ptr @buffer_typ, ptr %70, align 8
  %71 = call align 4 ptr %66({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly align 8 %67) #10
  %72 = call { ptr, i160 } %71({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(32) %59, { ptr, i160 } %3, i32 %41, i32 %49, { ptr } %54) #28
  %73 = extractvalue { ptr, i160 } %72, 0
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %75 = icmp ne ptr %73, @nil_typ
  %76 = icmp ne ptr %73, null
  %77 = and i1 %75, %76
  br i1 %77, label %112, label %78

78:                                               ; preds = %4
  store ptr @_parameterization_i32, ptr %5, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %81 = getelementptr i8, ptr %31, i64 112
  %82 = load ptr, ptr %81, align 8
  store ptr @i32_typ, ptr %6, align 8
  %83 = call align 4 ptr %82({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly %6) #10
  %84 = call i32 %83({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(8) %5, i32 %41) #28
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %86 = getelementptr i8, ptr %31, i64 32
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr nonnull %10) #46
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %91 = load ptr, ptr %31, align 8
  %92 = call align 4 ptr %91(ptr nocapture nofree noundef nonnull readonly %10) #2
  %93 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %93, align 8
  store ptr %92, ptr %7, align 8
  %94 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr %93, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %7)
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %99 = load ptr, ptr %65, align 8
  store ptr %24, ptr %8, align 8
  %100 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %8, i64 24
  store ptr @buffer_typ, ptr %102, align 8
  %103 = call align 4 ptr %99({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly %8) #10
  %104 = call { ptr, i160 } %103({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(32) %7, { ptr, i160 } %3, i32 %41, i32 %84, { ptr } %89) #28
  %105 = extractvalue { ptr, i160 } %104, 0
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %107 = icmp ne ptr %105, @nil_typ
  %108 = icmp ne ptr %105, null
  %109 = and i1 %107, %108
  %110 = freeze i1 %109
  %111 = select i1 %110, ptr %105, ptr @nil_typ
  br label %112

112:                                              ; preds = %78, %4
  %113 = phi { ptr, i160 } [ %72, %4 ], [ %104, %78 ]
  %114 = phi ptr [ %73, %4 ], [ %111, %78 ]
  %115 = extractvalue { ptr, i160 } %113, 1
  %116 = insertvalue { ptr, i160 } poison, ptr %114, 0
  %117 = insertvalue { ptr, i160 } %116, i160 %115, 1
  ret { ptr, i160 } %117
}

; Function Attrs: nounwind
define dso_local void @CuckooMap__set_index_keyK_valueV({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) #31 {
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %9 = getelementptr i8, ptr %6, i64 8
  %10 = getelementptr i8, ptr %6, i64 16
  %11 = getelementptr i8, ptr %6, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !905
  %13 = load i64, ptr %10, align 4, !noalias !905
  %14 = load ptr, ptr %11, align 8, !noalias !905
  %15 = mul i64 %12, 3547150501766965522
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !905
  %21 = extractvalue { ptr, i160 } %3, 0
  %22 = extractvalue { ptr, i160 } %4, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %7, 1
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %8, 2
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %20, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %28 = sext i32 %20 to i64
  %29 = getelementptr ptr, ptr %6, i64 %28
  %30 = load ptr, ptr %29, align 8
  %31 = call align 4 ptr %30(ptr nocapture nofree noundef nonnull readonly %7) #2
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %33 = getelementptr i8, ptr %29, i64 8
  %34 = load ptr, ptr %33, align 8
  %35 = call align 4 ptr %34(ptr nocapture nofree noundef nonnull readonly %7) #2
  %36 = alloca [2 x ptr], align 8
  store ptr %31, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %35, ptr %37, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 4, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %36) #43
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %6) #43
  %40 = getelementptr i8, ptr %29, i64 168
  %41 = load ptr, ptr %40, align 8
  %42 = alloca { ptr, ptr }, align 8
  store ptr %21, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %22, ptr %43, align 8
  %44 = call align 4 ptr %41({ ptr, ptr, ptr, i32 } %26, ptr nocapture nofree noundef nonnull readonly align 8 %42) #10
  call void %44({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull align 8 dereferenceable(16) %36, { ptr, i160 } %3, { ptr, i160 } %4) #28
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @CuckooMap_remove_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #31 {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [4 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr, ptr }, align 8
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %12 = getelementptr i8, ptr %9, i64 8
  %13 = getelementptr i8, ptr %9, i64 16
  %14 = getelementptr i8, ptr %9, i64 40
  %15 = load i64, ptr %12, align 4, !noalias !908
  %16 = load i64, ptr %13, align 4, !noalias !908
  %17 = load ptr, ptr %14, align 8, !noalias !908
  %18 = mul i64 %15, 3547150501766965522
  %19 = lshr i64 %18, 32
  %20 = xor i64 %19, %18
  %21 = and i64 %20, %16
  %22 = getelementptr i32, ptr %17, i64 %21
  %23 = load i32, ptr %22, align 4, !noalias !908
  %24 = extractvalue { ptr, i160 } %3, 0
  %25 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %26 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %10, 1
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %11, 2
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %23, 3
  %29 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9) #43
  %30 = sext i32 %23 to i64
  %31 = getelementptr ptr, ptr %9, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call align 4 ptr %32(ptr nocapture nofree noundef nonnull readonly %10) #2
  %34 = alloca [1 x ptr], align 8
  store ptr %33, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %34) #43
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9) #43
  %37 = getelementptr i8, ptr %31, i64 88
  %38 = load ptr, ptr %37, align 8
  %39 = alloca { ptr }, align 8
  store ptr %24, ptr %39, align 8
  %40 = call align 4 ptr %38({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly align 8 %39) #10
  %41 = call i32 %40({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(8) %34, { ptr, i160 } %3) #28
  %42 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %42)
  %44 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %45 = getelementptr i8, ptr %31, i64 104
  %46 = load ptr, ptr %45, align 8
  %47 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %47, align 8
  %48 = call align 4 ptr %46({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly align 8 %47) #10
  %49 = call i32 %48({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(8) %42, i32 %41) #28
  %50 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %51 = getelementptr i8, ptr %31, i64 24
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr } %53(ptr nonnull %10) #46
  %55 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %56 = load ptr, ptr %31, align 8
  %57 = call align 4 ptr %56(ptr nocapture nofree noundef nonnull readonly %10) #2
  %58 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %58, align 8
  %59 = alloca [4 x ptr], align 8
  store ptr %57, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %59, i64 8
  store ptr @_parameterization_i32, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %59, i64 16
  store ptr @_parameterization_i32, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %59, i64 24
  store ptr %58, ptr %62, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %59)
  %64 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %65 = getelementptr i8, ptr %31, i64 160
  %66 = load ptr, ptr %65, align 8
  %67 = alloca { ptr, ptr, ptr, ptr }, align 8
  store ptr %24, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr @i32_typ, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr @i32_typ, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store ptr @buffer_typ, ptr %70, align 8
  %71 = call align 4 ptr %66({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly align 8 %67) #10
  %72 = call { ptr, i160 } %71({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(32) %59, { ptr, i160 } %3, i32 %41, i32 %49, { ptr } %54) #28
  %73 = extractvalue { ptr, i160 } %72, 0
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %9)
  %75 = icmp ne ptr %73, @nil_typ
  %76 = icmp ne ptr %73, null
  %77 = and i1 %75, %76
  br i1 %77, label %112, label %78

78:                                               ; preds = %4
  store ptr @_parameterization_i32, ptr %5, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %5)
  %80 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %81 = getelementptr i8, ptr %31, i64 112
  %82 = load ptr, ptr %81, align 8
  store ptr @i32_typ, ptr %6, align 8
  %83 = call align 4 ptr %82({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly %6) #10
  %84 = call i32 %83({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(8) %5, i32 %41) #28
  %85 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %86 = getelementptr i8, ptr %31, i64 32
  %87 = load ptr, ptr %86, align 8
  %88 = load ptr, ptr %87, align 8
  %89 = call { ptr } %88(ptr nonnull %10) #46
  %90 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %91 = load ptr, ptr %31, align 8
  %92 = call align 4 ptr %91(ptr nocapture nofree noundef nonnull readonly %10) #2
  %93 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %93, align 8
  store ptr %92, ptr %7, align 8
  %94 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %7, i64 24
  store ptr %93, ptr %96, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %7)
  %98 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %99 = load ptr, ptr %65, align 8
  store ptr %24, ptr %8, align 8
  %100 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %101, align 8
  %102 = getelementptr inbounds i8, ptr %8, i64 24
  store ptr @buffer_typ, ptr %102, align 8
  %103 = call align 4 ptr %99({ ptr, ptr, ptr, i32 } %28, ptr nocapture nofree noundef nonnull readonly %8) #10
  %104 = call { ptr, i160 } %103({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull align 8 dereferenceable(32) %7, { ptr, i160 } %3, i32 %41, i32 %84, { ptr } %89) #28
  %105 = extractvalue { ptr, i160 } %104, 0
  %106 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef nonnull align 8 %9)
  %107 = icmp ne ptr %105, @nil_typ
  %108 = icmp ne ptr %105, null
  %109 = and i1 %107, %108
  %110 = freeze i1 %109
  %111 = select i1 %110, ptr %105, ptr @nil_typ
  br label %112

112:                                              ; preds = %78, %4
  %113 = phi { ptr, i160 } [ %72, %4 ], [ %104, %78 ]
  %114 = phi ptr [ %73, %4 ], [ %111, %78 ]
  %115 = extractvalue { ptr, i160 } %113, 1
  %116 = insertvalue { ptr, i160 } poison, ptr %114, 0
  %117 = insertvalue { ptr, i160 } %116, i160 %115, 1
  ret { ptr, i160 } %117
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @CuckooMap_clear_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #6 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !911
  %10 = load i64, ptr %7, align 4, !noalias !911
  %11 = load ptr, ptr %8, align 8, !noalias !911
  %12 = mul i64 %9, 3547150501766965522
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !911
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 40
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  call void %24(ptr %5, i32 8) #45
  %25 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %26 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %27 = getelementptr i8, ptr %20, i64 24
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = insertvalue { ptr } undef, ptr %25, 0
  call void %30(ptr %5, { ptr } %31) #45
  %32 = call noalias align 4 dereferenceable_or_null(256) ptr @bump_malloc_inner(i64 noundef 256, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %34 = getelementptr i8, ptr %20, i64 32
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %35, i64 8
  %37 = load ptr, ptr %36, align 8
  %38 = insertvalue { ptr } undef, ptr %32, 0
  call void %37(ptr %5, { ptr } %38) #45
  %39 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %40 = getelementptr i8, ptr %20, i64 48
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr i8, ptr %41, i64 8
  %43 = load ptr, ptr %42, align 8
  call void %43(ptr %5, i32 0) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @Map__index_keyK({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3) #31 {
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %8 = getelementptr i8, ptr %5, i64 8
  %9 = getelementptr i8, ptr %5, i64 16
  %10 = getelementptr i8, ptr %5, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !914
  %12 = load i64, ptr %9, align 4, !noalias !914
  %13 = load ptr, ptr %10, align 8, !noalias !914
  %14 = mul i64 %11, -5249855671126779970
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !914
  %20 = extractvalue { ptr, i160 } %3, 0
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %6, 1
  %23 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %7, 2
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %19, 3
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 480, ptr nocapture nofree noundef align 8 %5) #43
  %26 = sext i32 %19 to i64
  %27 = getelementptr ptr, ptr %5, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = call align 4 ptr %28(ptr nocapture nofree noundef nonnull readonly %6) #2
  %30 = alloca [1 x ptr], align 8
  store ptr %29, ptr %30, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %30) #43
  %32 = call ptr @llvm.invariant.start.p0(i64 noundef 480, ptr nocapture nofree noundef align 8 %5) #43
  %33 = getelementptr i8, ptr %27, i64 32
  %34 = load ptr, ptr %33, align 8
  %35 = alloca { ptr }, align 8
  store ptr %20, ptr %35, align 8
  %36 = call align 4 ptr %34({ ptr, ptr, ptr, i32 } %24, ptr nocapture nofree noundef nonnull readonly align 8 %35) #10
  %37 = call { ptr, i160 } %36({ ptr, ptr, ptr, i32 } %24, { ptr, ptr, ptr, i32 } %24, ptr nonnull align 8 dereferenceable(8) %30, { ptr, i160 } %3) #28
  %38 = extractvalue { ptr, i160 } %37, 0
  %39 = icmp eq ptr %38, @nil_typ
  %40 = icmp eq ptr %38, null
  %41 = or i1 %39, %40
  br i1 %41, label %42, label %67

42:                                               ; preds = %4
  %43 = call noalias align 8 dereferenceable_or_null(72) ptr @bump_malloc_inner(i64 noundef 72, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %44 = call noalias align 8 dereferenceable_or_null(7) ptr @bump_malloc_inner(i64 noundef 7, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %44, align 8
  %45 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %44, ptr %45, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  store <2 x i32> <i32 6, i32 7>, ptr %46, align 8
  %47 = getelementptr i8, ptr %43, i64 40
  store ptr @String, ptr %47, align 8
  %48 = getelementptr i8, ptr %43, i64 48
  store ptr %45, ptr %48, align 8
  %49 = getelementptr i8, ptr %43, i64 64
  store i32 10, ptr %49, align 8
  %50 = getelementptr i8, ptr %43, i64 8
  %51 = getelementptr i8, ptr %43, i64 16
  %52 = getelementptr i8, ptr %43, i64 32
  %53 = call noalias align 64 dereferenceable_or_null(55) ptr @bump_malloc_inner(i64 noundef 55, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %54 = load <54 x i8>, ptr @gkoch_CUsersPaulKOneDriveDocumentsPLPyPLlibmapmini, align 64
  store <54 x i8> %54, ptr %53, align 64
  %55 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %53, ptr %55, align 8
  %56 = getelementptr i8, ptr %55, i64 8
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 632, ptr nocapture nofree noundef nonnull align 16 dereferenceable(712) @String) #43
  store <2 x i32> <i32 54, i32 55>, ptr %56, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 noundef 208, ptr nocapture nofree noundef nonnull align 16 dereferenceable(288) @KeyNotFound)
  store i32 16, ptr %43, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef nonnull align 16 dereferenceable(288) @KeyNotFound) #43
  store ptr @String, ptr %50, align 8
  store ptr %55, ptr %51, align 8
  store i32 10, ptr %52, align 8
  %60 = ptrtoint ptr %43 to i64
  %61 = zext i64 %60 to i160
  %62 = or disjoint i160 %61, 3402823669209384634633746074317682114560
  %63 = load ptr, ptr @current_coroutine, align 8
  %64 = getelementptr i8, ptr %63, i64 48
  store ptr @KeyNotFound, ptr %64, align 8
  %65 = getelementptr i8, ptr %63, i64 56
  store i160 %62, ptr %65, align 8
  %66 = getelementptr i8, ptr %63, i64 8
  call preserve_nonecc void @context_switch(ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %66, ptr noundef nonnull align 8 dereferenceable(24) @into_caller_buf) #52
  br label %67

67:                                               ; preds = %42, %4
  %68 = phi ptr [ @nil_typ, %42 ], [ %38, %4 ]
  %69 = call ptr @llvm.invariant.start.p0(i64 noundef 480, ptr nocapture nofree noundef nonnull align 8 %5)
  %70 = extractvalue { ptr, i160 } %37, 1
  %71 = insertvalue { ptr, i160 } poison, ptr %68, 0
  %72 = insertvalue { ptr, i160 } %71, i160 %70, 1
  ret { ptr, i160 } %72
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, ptr, ptr, i32 } @CuckooMap_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !917
  %10 = load i64, ptr %7, align 4, !noalias !917
  %11 = load ptr, ptr %8, align 8, !noalias !917
  %12 = mul i64 %9, 3547150501766965522
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !917
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 24
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr } %23(ptr nonnull %5) #46
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %26 = getelementptr i8, ptr %20, i64 32
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr } %28(ptr nonnull %5) #46
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %31 = getelementptr i8, ptr %20, i64 40
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 %33(ptr nonnull %5) #46
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %36 = load ptr, ptr %20, align 8
  %37 = call align 4 ptr %36(ptr nocapture nofree noundef nonnull readonly %5) #2
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %39 = getelementptr i8, ptr %20, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = call align 4 ptr %40(ptr nocapture nofree noundef nonnull readonly %5) #2
  %42 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %44 = call noalias nonnull align 8 dereferenceable(32) ptr @bump_malloc_inner(i64 noundef 32, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %45 = getelementptr inbounds i8, ptr %44, i64 16
  store ptr %41, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  store ptr %37, ptr %46, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(32) %44) #43
  store ptr @Pair, ptr %44, align 8
  %48 = call noalias nonnull align 8 dereferenceable(56) ptr @bump_malloc_inner(i64 noundef 56, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %37, ptr %48, align 8
  %49 = getelementptr inbounds i8, ptr %48, i64 8
  store ptr %41, ptr %49, align 8
  %50 = getelementptr inbounds i8, ptr %48, i64 16
  store ptr %44, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr noalias nocapture nofree noundef nonnull align 8 dereferenceable(56) %48) #43
  %52 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #43
  %53 = load ptr, ptr %21, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call { ptr } %54(ptr %5) #46
  %56 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #55
  %57 = load ptr, ptr %26, align 8
  %58 = load ptr, ptr %57, align 8
  %59 = call { ptr } %58(ptr %5) #46
  %60 = call ptr @llvm.invariant.start.p0(i64 noundef 2176, ptr nocapture nofree noundef align 8 %4) #55
  %61 = load ptr, ptr %31, align 8
  %62 = load ptr, ptr %61, align 8
  %63 = call i32 %62(ptr %5) #46
  %64 = insertvalue { ptr, ptr, ptr, i32 } { ptr @CuckooMapIterator, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr undef, 2
  %66 = getelementptr inbounds i8, ptr %48, i64 24
  %67 = extractvalue { ptr } %55, 0
  store ptr %67, ptr %66, align 8
  %68 = getelementptr inbounds i8, ptr %48, i64 32
  %69 = extractvalue { ptr } %59, 0
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %48, i64 40
  store i32 %63, ptr %70, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 16 dereferenceable(216) @CuckooMapIterator) #43
  %72 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 24, 3
  ret { ptr, ptr, ptr, i32 } %72
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_CuckooMapIterator(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMapIterator_B_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(24) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @CuckooMapIterator_field_CuckooMapIterator_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @CuckooMapIterator_field_CuckooMapIterator_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @CuckooMapIterator_field_CuckooMapIterator_2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMapIterator_B_next_from_table_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @CuckooMapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @CuckooMapIterator_init_map_table1BufferEntryK._V_or_Nil_map_table2BufferEntryK._V_or_Nil_table_leni32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3, { ptr } %4, i32 %5) #6 {
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = getelementptr i8, ptr %7, i64 8
  %10 = getelementptr i8, ptr %7, i64 16
  %11 = getelementptr i8, ptr %7, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !920
  %13 = load i64, ptr %10, align 4, !noalias !920
  %14 = load ptr, ptr %11, align 8, !noalias !920
  %15 = mul i64 %12, -1975748647346050920
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !920
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef align 8 %7) #43
  %22 = sext i32 %20 to i64
  %23 = getelementptr ptr, ptr %7, i64 %22
  %24 = getelementptr i8, ptr %23, i64 24
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %8, { ptr } %3) #45
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef align 8 %7) #43
  %29 = getelementptr i8, ptr %23, i64 32
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  call void %32(ptr %8, { ptr } %4) #45
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef align 8 %7) #43
  %34 = getelementptr i8, ptr %23, i64 40
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %35, i64 8
  %37 = load ptr, ptr %36, align 8
  call void %37(ptr %8, i32 %5) #45
  %38 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef align 8 %7) #43
  %39 = getelementptr i8, ptr %23, i64 48
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %8, i32 0) #45
  %43 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef align 8 %7) #43
  %44 = getelementptr i8, ptr %23, i64 56
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %8, i1 false) #45
  ret void
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @CuckooMapIterator_next_from_table_tableBufferEntryK._V_or_Nil({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr } %3) #31 {
  %5 = alloca [0 x ptr], align 8
  %6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %8 = getelementptr i8, ptr %6, i64 8
  %9 = getelementptr i8, ptr %6, i64 16
  %10 = getelementptr i8, ptr %6, i64 40
  %11 = load i64, ptr %8, align 4, !noalias !923
  %12 = load i64, ptr %9, align 4, !noalias !923
  %13 = load ptr, ptr %10, align 8, !noalias !923
  %14 = mul i64 %11, -1975748647346050920
  %15 = lshr i64 %14, 32
  %16 = xor i64 %15, %14
  %17 = and i64 %16, %12
  %18 = getelementptr i32, ptr %13, i64 %17
  %19 = load i32, ptr %18, align 4, !noalias !923
  %20 = extractvalue { ptr } %3, 0
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %6) #53
  %22 = sext i32 %19 to i64
  %23 = getelementptr ptr, ptr %6, i64 %22
  %24 = getelementptr i8, ptr %23, i64 48
  %25 = getelementptr i8, ptr %23, i64 40
  br label %26

26:                                               ; preds = %35, %4
  %27 = load ptr, ptr %24, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call i32 %28(ptr %7) #46
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %6) #53
  %31 = load ptr, ptr %25, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %7) #46
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %35, label %106

35:                                               ; preds = %26
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %6)
  %37 = call i32 %28(ptr %7) #46
  %38 = sext i32 %37 to i64
  %39 = shl nsw i64 %38, 5
  %40 = getelementptr i8, ptr %20, i64 %39
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr i8, ptr %40, i64 8
  %43 = load i64, ptr %42, align 4
  %44 = getelementptr i8, ptr %40, i64 16
  %45 = load i64, ptr %44, align 4
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %6)
  %47 = call i32 %28(ptr %7) #46
  %48 = add i32 %47, 1
  %49 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %6)
  %50 = getelementptr i8, ptr %27, i64 8
  %51 = load ptr, ptr %50, align 8
  call void %51(ptr %7, i32 %48) #45
  %52 = icmp eq ptr %41, @nil_typ
  %53 = icmp eq ptr %41, null
  %54 = or i1 %52, %53
  br i1 %54, label %26, label %55

55:                                               ; preds = %35
  %56 = inttoptr i64 %43 to ptr
  %57 = inttoptr i64 %45 to ptr
  %58 = getelementptr i8, ptr %41, i64 8
  %59 = getelementptr i8, ptr %41, i64 16
  %60 = getelementptr i8, ptr %41, i64 40
  %61 = load i64, ptr %58, align 4, !noalias !926
  %62 = load i64, ptr %59, align 4, !noalias !926
  %63 = load ptr, ptr %60, align 8, !noalias !926
  %64 = mul i64 %61, 4015701072841558310
  %65 = lshr i64 %64, 32
  %66 = xor i64 %65, %64
  %67 = and i64 %66, %62
  %68 = getelementptr i32, ptr %63, i64 %67
  %69 = load i32, ptr %68, align 4, !noalias !926
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %56, 1
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %57, 2
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 %69, 3
  %74 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %5)
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %41)
  %76 = sext i32 %69 to i64
  %77 = getelementptr ptr, ptr %41, i64 %76
  %78 = getelementptr i8, ptr %77, i64 72
  %79 = load ptr, ptr %78, align 8
  %80 = call align 4 ptr %79({ ptr, ptr, ptr, i32 } %73, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %81 = call { ptr, ptr, ptr, i32 } %80({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr nonnull align 8 %5) #28
  %82 = extractvalue { ptr, ptr, ptr, i32 } %81, 0
  %83 = extractvalue { ptr, ptr, ptr, i32 } %81, 1
  %84 = extractvalue { ptr, ptr, ptr, i32 } %81, 2
  %85 = getelementptr i8, ptr %82, i64 8
  %86 = getelementptr i8, ptr %82, i64 16
  %87 = getelementptr i8, ptr %82, i64 40
  %88 = load i64, ptr %85, align 4, !noalias !929
  %89 = load i64, ptr %86, align 4, !noalias !929
  %90 = load ptr, ptr %87, align 8, !noalias !929
  %91 = mul i64 %88, 9197944775169318296
  %92 = lshr i64 %91, 32
  %93 = xor i64 %92, %91
  %94 = and i64 %93, %89
  %95 = getelementptr i32, ptr %90, i64 %94
  %96 = load i32, ptr %95, align 4, !noalias !929
  %97 = ptrtoint ptr %83 to i64
  %98 = ptrtoint ptr %84 to i64
  %99 = zext i32 %96 to i160
  %100 = shl nuw i160 %99, 128
  %101 = zext i64 %98 to i160
  %102 = shl nuw nsw i160 %101, 64
  %103 = or disjoint i160 %100, %102
  %104 = zext i64 %97 to i160
  %105 = or disjoint i160 %103, %104
  br label %106

106:                                              ; preds = %55, %26
  %107 = phi i160 [ %105, %55 ], [ undef, %26 ]
  %108 = phi ptr [ %82, %55 ], [ @nil_typ, %26 ]
  %109 = insertvalue { ptr, i160 } poison, ptr %108, 0
  %110 = insertvalue { ptr, i160 } %109, i160 %107, 1
  ret { ptr, i160 } %110
}

; Function Attrs: nounwind
define dso_local { ptr, i160 } @CuckooMapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #31 {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %10 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %11 = getelementptr i8, ptr %8, i64 8
  %12 = getelementptr i8, ptr %8, i64 16
  %13 = getelementptr i8, ptr %8, i64 40
  %14 = load i64, ptr %11, align 4, !noalias !932
  %15 = load i64, ptr %12, align 4, !noalias !932
  %16 = load ptr, ptr %13, align 8, !noalias !932
  %17 = mul i64 %14, -1975748647346050920
  %18 = lshr i64 %17, 32
  %19 = xor i64 %18, %17
  %20 = and i64 %19, %15
  %21 = getelementptr i32, ptr %16, i64 %20
  %22 = load i32, ptr %21, align 4, !noalias !932
  %23 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8) #43
  %24 = sext i32 %22 to i64
  %25 = getelementptr ptr, ptr %8, i64 %24
  %26 = getelementptr i8, ptr %25, i64 56
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call i1 %28(ptr %9) #46
  br i1 %29, label %30, label %35

30:                                               ; preds = %3
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %8, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %9, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %10, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %22, 3
  br label %84

35:                                               ; preds = %3
  %36 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8) #55
  %37 = getelementptr i8, ptr %25, i64 24
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr } %39(ptr %9) #46
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %8, 0
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %9, 1
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %10, 2
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, i32 %22, 3
  %45 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr @buffer_typ, ptr %45, align 8
  store ptr %45, ptr %4, align 8
  %46 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %4) #55
  %47 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8) #55
  %48 = getelementptr i8, ptr %25, i64 72
  %49 = load ptr, ptr %48, align 8
  store ptr @buffer_typ, ptr %5, align 8
  %50 = call align 4 ptr %49({ ptr, ptr, ptr, i32 } %44, ptr nocapture nofree noundef nonnull readonly align 8 %5) #10
  %51 = call { ptr, i160 } %50({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull align 8 dereferenceable(8) %4, { ptr } %40) #28
  %52 = extractvalue { ptr, i160 } %51, 0
  %53 = icmp ne ptr %52, @nil_typ
  %54 = icmp ne ptr %52, null
  %55 = and i1 %53, %54
  br i1 %55, label %66, label %56

56:                                               ; preds = %35
  %57 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8)
  %58 = getelementptr i8, ptr %25, i64 48
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  call void %61(ptr %9, i32 0) #45
  %62 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8)
  %63 = load ptr, ptr %26, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  call void %65(ptr %9, i1 true) #45
  br label %84

66:                                               ; preds = %35
  %67 = extractvalue { ptr, i160 } %51, 1
  %68 = getelementptr i8, ptr %52, i64 8
  %69 = getelementptr i8, ptr %52, i64 16
  %70 = getelementptr i8, ptr %52, i64 40
  %71 = load i64, ptr %68, align 4, !noalias !935
  %72 = load i64, ptr %69, align 4, !noalias !935
  %73 = load ptr, ptr %70, align 8, !noalias !935
  %74 = mul i64 %71, 9197944775169318296
  %75 = lshr i64 %74, 32
  %76 = xor i64 %75, %74
  %77 = and i64 %76, %72
  %78 = getelementptr i32, ptr %73, i64 %77
  %79 = load i32, ptr %78, align 4, !noalias !935
  %80 = zext i32 %79 to i160
  %81 = shl nuw i160 %80, 128
  %82 = and i160 %67, 340282366920938463463374607431768211455
  %83 = or disjoint i160 %81, %82
  br label %101

84:                                               ; preds = %56, %30
  %85 = phi { ptr, ptr, ptr, i32 } [ %34, %30 ], [ %44, %56 ]
  %86 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8) #55
  %87 = getelementptr i8, ptr %25, i64 32
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %88, align 8
  %90 = call { ptr } %89(ptr %9) #46
  %91 = call noalias align 8 dereferenceable_or_null(16) ptr @bump_malloc_inner(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  %92 = getelementptr i8, ptr %91, i64 8
  store ptr null, ptr %92, align 8
  store ptr @buffer_typ, ptr %91, align 8
  store ptr %91, ptr %6, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 noundef 1, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %6) #55
  %94 = call ptr @llvm.invariant.start.p0(i64 noundef 136, ptr nocapture nofree noundef nonnull align 8 %8) #55
  %95 = getelementptr i8, ptr %25, i64 72
  %96 = load ptr, ptr %95, align 8
  store ptr @buffer_typ, ptr %7, align 8
  %97 = call align 4 ptr %96({ ptr, ptr, ptr, i32 } %85, ptr nocapture nofree noundef nonnull readonly align 8 %7) #10
  %98 = call { ptr, i160 } %97({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr nonnull align 8 dereferenceable(8) %6, { ptr } %90) #28
  %99 = extractvalue { ptr, i160 } %98, 0
  %100 = extractvalue { ptr, i160 } %98, 1
  br label %101

101:                                              ; preds = %84, %66
  %102 = phi ptr [ %99, %84 ], [ %52, %66 ]
  %103 = phi i160 [ %100, %84 ], [ %83, %66 ]
  %104 = insertvalue { ptr, i160 } poison, ptr %102, 0
  %105 = insertvalue { ptr, i160 } %104, i160 %103, 1
  ret { ptr, i160 } %105
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { i64, i64 } @_data_size_Entry(ptr nocapture nofree readonly align 8 %0) #39 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } %6(ptr nocapture nofree nonnull readonly align 8 %3) #2
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 20, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 20
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } %20(ptr nocapture nofree nonnull readonly align 8 %17) #2
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = call i64 @llvm.umax.i64(i64 %9, i64 %23) #44
  %25 = call i64 @llvm.umax.i64(i64 %24, i64 noundef 8) #44, !range !18
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %35, %31
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @Entry_field_Entry_0(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #12 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local align 4 ptr @Entry_field_Entry_1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Entry_B_init_keyK_valueV_primary_hashi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 24, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Entry_B_key_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Entry_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Entry_B_primary_hash_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @Entry_B_to_pair_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Entry_init_keyK_valueV_primary_hashi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2, { ptr, i160 } %3, { ptr, i160 } %4, i32 %5) #6 {
  %7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %9 = getelementptr i8, ptr %7, i64 8
  %10 = getelementptr i8, ptr %7, i64 16
  %11 = getelementptr i8, ptr %7, i64 40
  %12 = load i64, ptr %9, align 4, !noalias !938
  %13 = load i64, ptr %10, align 4, !noalias !938
  %14 = load ptr, ptr %11, align 8, !noalias !938
  %15 = mul i64 %12, 4015701072841558310
  %16 = lshr i64 %15, 32
  %17 = xor i64 %16, %15
  %18 = and i64 %17, %13
  %19 = getelementptr i32, ptr %14, i64 %18
  %20 = load i32, ptr %19, align 4, !noalias !938
  %21 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %7) #43
  %22 = sext i32 %20 to i64
  %23 = getelementptr ptr, ptr %7, i64 %22
  %24 = getelementptr i8, ptr %23, i64 24
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %8, { ptr, i160 } %3) #45
  %28 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %7) #43
  %29 = getelementptr i8, ptr %23, i64 32
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  call void %32(ptr %8, { ptr, i160 } %4) #45
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %7) #43
  %34 = getelementptr i8, ptr %23, i64 16
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %35, i64 8
  %37 = load ptr, ptr %36, align 8
  call void %37(ptr %8, i32 %5) #45
  ret void
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, i160 } @Entry_key_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !941
  %10 = load i64, ptr %7, align 4, !noalias !941
  %11 = load ptr, ptr %8, align 8, !noalias !941
  %12 = mul i64 %9, 4015701072841558310
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !941
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 24
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } %23(ptr %5) #46
  ret { ptr, i160 } %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, i160 } @Entry_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !944
  %10 = load i64, ptr %7, align 4, !noalias !944
  %11 = load ptr, ptr %8, align 8, !noalias !944
  %12 = mul i64 %9, 4015701072841558310
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !944
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 32
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } %23(ptr %5) #46
  ret { ptr, i160 } %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local i32 @Entry_primary_hash_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !947
  %10 = load i64, ptr %7, align 4, !noalias !947
  %11 = load ptr, ptr %8, align 8, !noalias !947
  %12 = mul i64 %9, 4015701072841558310
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !947
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call i32 %23(ptr %5) #46
  ret i32 %24
}

; Function Attrs: mustprogress nounwind willreturn
define dso_local { ptr, ptr, ptr, i32 } @Entry_to_pair_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture nofree readnone %2) #7 {
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %6 = getelementptr i8, ptr %4, i64 8
  %7 = getelementptr i8, ptr %4, i64 16
  %8 = getelementptr i8, ptr %4, i64 40
  %9 = load i64, ptr %6, align 4, !noalias !950
  %10 = load i64, ptr %7, align 4, !noalias !950
  %11 = load ptr, ptr %8, align 8, !noalias !950
  %12 = mul i64 %9, 4015701072841558310
  %13 = lshr i64 %12, 32
  %14 = xor i64 %13, %12
  %15 = and i64 %14, %10
  %16 = getelementptr i32, ptr %11, i64 %15
  %17 = load i32, ptr %16, align 4, !noalias !950
  %18 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %19 = sext i32 %17 to i64
  %20 = getelementptr ptr, ptr %4, i64 %19
  %21 = getelementptr i8, ptr %20, i64 24
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %22, align 8
  %24 = call { ptr, i160 } %23(ptr nonnull %5) #46
  %25 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %26 = getelementptr i8, ptr %20, i64 32
  %27 = load ptr, ptr %26, align 8
  %28 = load ptr, ptr %27, align 8
  %29 = call { ptr, i160 } %28(ptr nonnull %5) #46
  %30 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %31 = load ptr, ptr %20, align 8
  %32 = call align 8 ptr %31(ptr nocapture nofree noundef nonnull readonly %5) #2
  %33 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %34 = getelementptr i8, ptr %20, i64 8
  %35 = load ptr, ptr %34, align 8
  %36 = call align 8 ptr %35(ptr nocapture nofree noundef nonnull readonly %5) #2
  %37 = load ptr, ptr %32, align 8, !alias.scope !953
  %38 = getelementptr i8, ptr %37, i64 72
  %39 = load ptr, ptr %38, align 8, !alias.scope !953
  %40 = call { i64, i64 } %39(ptr nocapture nofree nonnull readonly align 8 %32) #2, !alias.scope !953
  %41 = extractvalue { i64, i64 } %40, 0
  %42 = extractvalue { i64, i64 } %40, 1
  %43 = urem i64 16, %42
  %44 = icmp eq i64 %43, 0
  %45 = sub i64 %42, %43
  %46 = select i1 %44, i64 0, i64 %45
  %47 = add i64 %41, 16
  %48 = add i64 %47, %46
  %49 = load ptr, ptr %36, align 8, !alias.scope !953
  %50 = getelementptr i8, ptr %49, i64 72
  %51 = load ptr, ptr %50, align 8, !alias.scope !953
  %52 = call { i64, i64 } %51(ptr nocapture nofree nonnull readonly align 8 %36) #2, !alias.scope !953
  %53 = extractvalue { i64, i64 } %52, 0
  %54 = extractvalue { i64, i64 } %52, 1
  %55 = call i64 @llvm.umax.i64(i64 %42, i64 %54) #44
  %56 = call i64 @llvm.umax.i64(i64 %55, i64 noundef 8) #44, !range !18
  %57 = urem i64 %48, %54
  %58 = icmp eq i64 %57, 0
  %59 = sub i64 %54, %57
  %60 = select i1 %58, i64 0, i64 %59
  %61 = add i64 %53, %48
  %62 = add i64 %61, %60
  %63 = urem i64 %62, %56
  %64 = icmp eq i64 %63, 0
  %65 = sub i64 %56, %63
  %66 = select i1 %64, i64 0, i64 %65
  %67 = add i64 %66, %62
  %68 = call noalias nonnull align 8 dereferenceable(16) ptr @bump_malloc_inner(i64 noundef %67, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  store ptr %32, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %68, i64 8
  store ptr %36, ptr %69, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %68) #43
  %71 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #43
  %72 = load ptr, ptr %21, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, i160 } %73(ptr nonnull %5) #46
  %75 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #55
  %76 = load ptr, ptr %26, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = call { ptr, i160 } %77(ptr nonnull %5) #46
  %79 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %68, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr undef, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 10, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #55
  %83 = call ptr @llvm.invariant.start.p0(i64 noundef 120, ptr nocapture nofree noundef align 8 %4) #55
  %84 = load ptr, ptr %32, align 8
  %85 = getelementptr i8, ptr %84, i64 72
  %86 = load ptr, ptr %85, align 8
  %87 = call { i64, i64 } %86(ptr nocapture nofree nonnull readonly align 8 %32) #2
  %88 = extractvalue { i64, i64 } %87, 1
  %89 = urem i64 16, %88
  %90 = icmp eq i64 %89, 0
  %91 = sub i64 %88, %89
  %92 = add i64 %91, 16
  %93 = select i1 %90, i64 16, i64 %92
  %94 = getelementptr i8, ptr %68, i64 %93
  %95 = getelementptr i8, ptr %84, i64 64
  %96 = load ptr, ptr %95, align 8
  call void %96({ ptr, i160 } %74, ptr nocapture nofree nonnull readonly align 8 %32, ptr nocapture nofree writeonly %94) #8
  %97 = call ptr @llvm.invariant.start.p0(i64 noundef 80, ptr nocapture nofree noundef nonnull align 16 dereferenceable(160) @Pair) #43
  %98 = load ptr, ptr %68, align 8
  %99 = load ptr, ptr %98, align 8
  %100 = getelementptr i8, ptr %99, i64 72
  %101 = load ptr, ptr %100, align 8
  %102 = call { i64, i64 } %101(ptr nocapture nofree nonnull readonly align 8 %98) #2
  %103 = extractvalue { i64, i64 } %102, 0
  %104 = extractvalue { i64, i64 } %102, 1
  %105 = urem i64 16, %104
  %106 = icmp eq i64 %105, 0
  %107 = sub i64 %104, %105
  %108 = select i1 %106, i64 0, i64 %107
  %109 = add i64 %103, 16
  %110 = add i64 %109, %108
  %111 = load ptr, ptr %69, align 8
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr i8, ptr %112, i64 72
  %114 = load ptr, ptr %113, align 8
  %115 = call { i64, i64 } %114(ptr nocapture nofree nonnull readonly align 8 %111) #2
  %116 = extractvalue { i64, i64 } %115, 1
  %117 = urem i64 %110, %116
  %118 = icmp eq i64 %117, 0
  %119 = sub i64 %116, %117
  %120 = select i1 %118, i64 0, i64 %119
  %121 = getelementptr i8, ptr %68, i64 %110
  %122 = getelementptr i8, ptr %121, i64 %120
  %123 = getelementptr i8, ptr %112, i64 64
  %124 = load ptr, ptr %123, align 8
  call void %124({ ptr, i160 } %78, ptr nocapture nofree nonnull readonly align 8 %111, ptr nocapture nofree writeonly %122) #8
  ret { ptr, ptr, ptr, i32 } %81
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { ptr, i160 } @Entry_getter_value(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(16) %0) #39 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } %5(ptr nocapture nofree nonnull readonly align 8 %2) #2
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 20, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 20
  %14 = add i64 %13, %12
  %15 = getelementptr inbounds i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = call { i64, i64 } %19(ptr nocapture nofree nonnull readonly align 8 %16) #2
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = getelementptr i8, ptr %17, i64 56
  %29 = load ptr, ptr %28, align 8
  %30 = call { ptr, i160 } %29(ptr nocapture nofree readonly %27, ptr nocapture nofree nonnull readonly align 8 %16) #2
  ret { ptr, i160 } %30
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Entry_setter_value(ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %0, { ptr, i160 } %1) #37 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } %6(ptr nocapture nofree nonnull readonly align 8 %3) #2
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 20, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 20
  %15 = add i64 %14, %13
  %16 = getelementptr inbounds i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = call { i64, i64 } %20(ptr nocapture nofree nonnull readonly align 8 %17) #2
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = getelementptr i8, ptr %18, i64 64
  %30 = load ptr, ptr %29, align 8
  call void %30({ ptr, i160 } %1, ptr nocapture nofree nonnull readonly align 8 %17, ptr nocapture nofree writeonly %28) #8
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local { ptr, i160 } @Entry_getter_key(ptr nocapture nofree noundef nonnull readonly align 8 dereferenceable(8) %0) #39 {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } %5(ptr nocapture nofree nonnull readonly align 8 %2) #2
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 20, %7
  %9 = icmp eq i64 %8, 0
  %10 = sub i64 %7, %8
  %11 = add i64 %10, 20
  %12 = select i1 %9, i64 20, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = getelementptr i8, ptr %3, i64 56
  %15 = load ptr, ptr %14, align 8
  %16 = call { ptr, i160 } %15(ptr nocapture nofree readonly %13, ptr nocapture nofree nonnull readonly align 8 %2) #2
  ret { ptr, i160 } %16
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @Entry_setter_key(ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %0, { ptr, i160 } %1) #37 {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = call { i64, i64 } %6(ptr nocapture nofree nonnull readonly align 8 %3) #2
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 20, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = add i64 %11, 20
  %13 = select i1 %10, i64 20, i64 %12
  %14 = getelementptr i8, ptr %0, i64 %13
  %15 = getelementptr i8, ptr %4, i64 64
  %16 = load ptr, ptr %15, align 8
  call void %16({ ptr, i160 } %1, ptr nocapture nofree nonnull readonly align 8 %3, ptr nocapture nofree writeonly %14) #8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @Entry_getter_primary_hash(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @Entry_setter_primary_hash(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i1 @CuckooMapIterator_getter_on_second(ptr nocapture nofree readonly %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMapIterator_setter_on_second(ptr nocapture nofree writeonly %0, i1 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 48
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @CuckooMapIterator_getter_index(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 44
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMapIterator_setter_index(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 44
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @CuckooMapIterator_getter_table_len(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMapIterator_setter_table_len(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @CuckooMapIterator_getter_map_table2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMapIterator_setter_map_table2(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 32
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @CuckooMapIterator_getter_map_table1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMapIterator_setter_map_table1(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 24
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_KeyNotFound(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 72, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @KeyNotFound_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @KeyNotFound_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 16, ptr nocapture nofree noundef nonnull align 8 dereferenceable(16) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @KeyNotFound_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 8, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @KeyNotFound_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local align 4 ptr @KeyNotFound_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree %1) #5 {
  %3 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree %1) #43
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @KeyNotFound_getter_message(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @KeyNotFound_setter_message(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 48
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 56
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 64
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr, ptr, ptr, i32 } @KeyNotFound_getter_file_name(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @KeyNotFound_setter_file_name(ptr nocapture nofree writeonly align 8 %0, { ptr, ptr, ptr, i32 } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 8
  %4 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %5 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %6 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %7 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %4, ptr %3, align 8
  %8 = getelementptr i8, ptr %0, i64 16
  store ptr %5, ptr %8, align 8
  %9 = getelementptr i8, ptr %0, i64 24
  store ptr %6, ptr %9, align 8
  %10 = getelementptr i8, ptr %0, i64 32
  store i32 %7, ptr %10, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @KeyNotFound_getter_line_number(ptr nocapture nofree noundef nonnull readonly align 4 dereferenceable(4) %0) #12 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @KeyNotFound_setter_line_number(ptr nocapture nofree noundef nonnull writeonly align 4 dereferenceable(4) %0, i32 %1) #13 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_Map(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree nosync nounwind willreturn
define dso_local { ptr, i160 } @_box_union_typ(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly align 4 %1) #41 {
  %3 = alloca [24 x i8], align 8
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load i64, ptr %4, align 4
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %34, label %7

7:                                                ; preds = %7, %2
  %8 = phi i64 [ %28, %7 ], [ %5, %2 ]
  %9 = phi i64 [ %26, %7 ], [ 1, %2 ]
  %10 = phi i64 [ %25, %7 ], [ 0, %2 ]
  %11 = phi i64 [ %19, %7 ], [ 1, %2 ]
  %12 = inttoptr i64 %8 to ptr
  %13 = load ptr, ptr %12, align 8
  %14 = getelementptr i8, ptr %13, i64 72
  %15 = load ptr, ptr %14, align 8
  %16 = call { i64, i64 } %15(ptr nonnull align 8 %12) #28
  %17 = extractvalue { i64, i64 } %16, 0
  %18 = extractvalue { i64, i64 } %16, 1
  %19 = call i64 @llvm.umax.i64(i64 noundef %18, i64 noundef %11)
  %20 = urem i64 %10, %18
  %21 = icmp eq i64 %20, 0
  %22 = sub i64 %18, %20
  %23 = select i1 %21, i64 0, i64 %22
  %24 = call i64 @llvm.umax.i64(i64 noundef %17, i64 noundef %10)
  %25 = call i64 @llvm.umax.i64(i64 noundef %24, i64 noundef %23)
  %26 = add i64 %9, 1
  %27 = getelementptr ptr, ptr %1, i64 %26
  %28 = load i64, ptr %27, align 4
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %30, label %7

30:                                               ; preds = %7
  %31 = icmp eq i64 %25, 32
  %32 = select i1 %31, i64 0, i64 8
  %33 = add i64 %32, %25
  br label %34

34:                                               ; preds = %30, %2
  %35 = phi i64 [ 1, %2 ], [ %19, %30 ]
  %36 = phi i64 [ 8, %2 ], [ %33, %30 ]
  %37 = urem i64 %36, %35
  %38 = icmp eq i64 %37, 0
  %39 = sub i64 %35, %37
  %40 = select i1 %38, i64 0, i64 %39
  %41 = add i64 %40, %36
  %42 = icmp eq i64 %41, 32
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = load ptr, ptr %0, align 8
  %45 = getelementptr i8, ptr %0, i64 8
  %46 = load i160, ptr %45, align 4
  store i160 %46, ptr %3, align 8
  br label %52

47:                                               ; preds = %34
  %48 = icmp slt i64 %41, 17
  br i1 %48, label %51, label %49

49:                                               ; preds = %47
  %50 = call noalias align 4 ptr @bump_malloc_inner(i64 noundef %41, ptr nocapture nofree noundef nonnull align 8 dereferenceable(8) @current_ptr) #48
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nocapture nofree writeonly align 4 %50, ptr nocapture nofree readonly align 1 %0, i64 %41, i1 noundef false) #43
  store ptr %50, ptr %3, align 8
  br label %52

51:                                               ; preds = %47
  call void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture nofree noundef nonnull writeonly align 8 dereferenceable(24) %3, ptr nocapture nofree readonly align 1 %0, i64 %41, i1 noundef false) #43
  br label %52

52:                                               ; preds = %51, %49, %43
  %53 = phi ptr [ %44, %43 ], [ @union_typ, %51 ], [ @union_typ, %49 ]
  %54 = insertvalue { ptr, i160 } undef, ptr %53, 0
  %55 = load i160, ptr %3, align 8
  %56 = insertvalue { ptr, i160 } %54, i160 %55, 1
  ret { ptr, i160 } %56
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local i32 @i32_hasher(i32 %0) #1 {
  %2 = add i32 %0, 2127912214
  %3 = shl i32 %0, 12
  %4 = add i32 %2, %3
  %5 = ashr i32 %4, 19
  %6 = xor i32 %4, %5
  %7 = xor i32 %6, -949894596
  %8 = add i32 %7, 374761393
  %9 = shl i32 %7, 5
  %10 = add i32 %8, %9
  %11 = add i32 %10, -744332180
  %12 = shl i32 %10, 9
  %13 = xor i32 %11, %12
  %14 = add i32 %13, -42973499
  %15 = shl i32 %13, 3
  %16 = add i32 %14, %15
  %17 = ashr i32 %16, 16
  %18 = xor i32 %16, %17
  %19 = xor i32 %18, -1252372727
  ret i32 %19
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @CuckooMap_getter_eq(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMap_setter_eq(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 56
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @CuckooMap_getter_hasher(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMap_setter_hasher(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 48
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @CuckooMap_getter_size(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 44
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMap_setter_size(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 44
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local i32 @CuckooMap_getter_table_len(ptr nocapture nofree readonly align 4 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMap_setter_table_len(ptr nocapture nofree writeonly align 4 %0, i32 %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @CuckooMap_getter_table2(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMap_setter_table2(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 32
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define dso_local { ptr } @CuckooMap_getter_table1(ptr nocapture nofree readonly align 8 %0) #12 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define dso_local void @CuckooMap_setter_table1(ptr nocapture nofree writeonly align 8 %0, { ptr } %1) #13 {
  %3 = getelementptr i8, ptr %0, i64 24
  %4 = extractvalue { ptr } %1, 0
  store ptr %4, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local { i64, i64 } @_data_size_HashMap(ptr nocapture nofree readnone %0) #1 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: nounwind
define dso_local void @report_exception({ ptr } %0) local_unnamed_addr #31 {
  %2 = alloca [0 x ptr], align 8
  %3 = extractvalue { ptr } %0, 0
  %4 = getelementptr i8, ptr %3, i64 48
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = call i1 %12(i64 %11, i64 %10, i64 9027164862567808692, i64 ptrtoint (ptr @Exception to i64), ptr readonly %13) #2
  br i1 %14, label %15, label %41

15:                                               ; preds = %1
  %16 = getelementptr i8, ptr %3, i64 56
  %17 = load i64, ptr %16, align 8
  %18 = getelementptr i8, ptr %3, i64 64
  %19 = load i64, ptr %18, align 8
  %20 = inttoptr i64 %17 to ptr
  %21 = inttoptr i64 %19 to ptr
  %22 = getelementptr i8, ptr %5, i64 40
  %23 = load ptr, ptr %22, align 8, !noalias !956
  %24 = mul i64 %10, 9027164862567808692
  %25 = lshr i64 %24, 32
  %26 = xor i64 %25, %24
  %27 = and i64 %26, %11
  %28 = getelementptr i32, ptr %23, i64 %27
  %29 = load i32, ptr %28, align 4, !noalias !956
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %5, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %20, 1
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %21, 2
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %29, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 noundef 0, ptr nocapture nofree noundef nonnull align 8 %2) #43
  %35 = call ptr @llvm.invariant.start.p0(i64 noundef 104, ptr nocapture nofree noundef nonnull align 8 %5) #43
  %36 = sext i32 %29 to i64
  %37 = getelementptr ptr, ptr %5, i64 %36
  %38 = getelementptr i8, ptr %37, i64 48
  %39 = load ptr, ptr %38, align 8
  %40 = call align 4 ptr %39({ ptr, ptr, ptr, i32 } %33, ptr nocapture nofree noundef nonnull readonly align 8 %2) #10
  call void %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull align 8 %2) #28
  br label %41

41:                                               ; preds = %15, %1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define dso_local i1 @i32_eq(i32 %0, i32 %1) #1 {
  %3 = icmp eq i32 %0, %1
  ret i1 %3
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #9

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #9

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #19

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #42

attributes #0 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) "disable-tail-calls"="true" }
attributes #2 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #3 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #6 = { mustprogress nounwind willreturn memory(readwrite, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #7 = { mustprogress nounwind willreturn "disable-tail-calls"="true" }
attributes #8 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #9 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #10 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #11 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) "disable-tail-calls"="true" }
attributes #13 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) "disable-tail-calls"="true" }
attributes #14 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #15 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #16 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #17 = { mustprogress nofree norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(readwrite, argmem: none, inaccessiblemem: none) "alloc-family"="malloc" }
attributes #18 = { mustprogress nofree noinline norecurse nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) memory(argmem: readwrite) "alloc-family"="malloc" }
attributes #19 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #20 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #21 = { mustprogress nofree noinline norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) }
attributes #22 = { noreturn nounwind }
attributes #23 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #24 = { nocallback nofree nosync nounwind willreturn }
attributes #25 = { nofree nounwind }
attributes #26 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) }
attributes #27 = { noinline nounwind memory(readwrite) }
attributes #28 = { nounwind }
attributes #29 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #30 = { "disable-tail-calls"="true" }
attributes #31 = { nounwind "disable-tail-calls"="true" }
attributes #32 = { mustprogress nofree nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #33 = { nofree nounwind "disable-tail-calls"="true" }
attributes #34 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) "disable-tail-calls"="true" }
attributes #35 = { nofree norecurse nosync nounwind memory(readwrite, argmem: read, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #36 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: read, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #37 = { mustprogress nofree nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #38 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #39 = { mustprogress nofree nosync nounwind willreturn memory(read, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #40 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, argmem: none, inaccessiblemem: none) "disable-tail-calls"="true" }
attributes #41 = { mustprogress nofree nosync nounwind willreturn "disable-tail-calls"="true" }
attributes #42 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #43 = { nofree willreturn }
attributes #44 = { nofree nosync willreturn }
attributes #45 = { nounwind willreturn memory(argmem: readwrite) }
attributes #46 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #47 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }
attributes #48 = { mustprogress nofree nosync nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #49 = { nofree nosync nounwind willreturn memory(read) }
attributes #50 = { mustprogress nofree nosync nounwind willreturn }
attributes #51 = { nounwind memory(read) }
attributes #52 = { nounwind memory(readwrite) }
attributes #53 = { nofree }
attributes #54 = { nofree nounwind willreturn }
attributes #55 = { willreturn }

!llvm.module.flags = !{!0, !1, !2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!2 = !{i32 1, !"UnifiedLTO", i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"set_offset: argument 0"}
!5 = distinct !{!5, !"set_offset"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"set_offset: argument 0"}
!8 = distinct !{!8, !"set_offset"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"set_offset: argument 0"}
!11 = distinct !{!11, !"set_offset"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"set_offset: argument 0"}
!14 = distinct !{!14, !"set_offset"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"size_wrapper: argument 0"}
!17 = distinct !{!17, !"size_wrapper"}
!18 = !{i64 8, i64 0}
!19 = !{!20}
!20 = distinct !{!20, !21, !"set_offset: argument 0"}
!21 = distinct !{!21, !"set_offset"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"size_wrapper: argument 0"}
!24 = distinct !{!24, !"size_wrapper"}
!25 = !{}
!26 = !{!27}
!27 = distinct !{!27, !28, !"set_offset: argument 0"}
!28 = distinct !{!28, !"set_offset"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"set_offset: argument 0"}
!31 = distinct !{!31, !"set_offset"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"set_offset: argument 0"}
!34 = distinct !{!34, !"set_offset"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"set_offset: argument 0"}
!37 = distinct !{!37, !"set_offset"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"set_offset: argument 0"}
!40 = distinct !{!40, !"set_offset"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"set_offset: argument 0"}
!43 = distinct !{!43, !"set_offset"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"set_offset: argument 0"}
!46 = distinct !{!46, !"set_offset"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"set_offset: argument 0"}
!49 = distinct !{!49, !"set_offset"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"set_offset: argument 0"}
!52 = distinct !{!52, !"set_offset"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"set_offset: argument 0"}
!55 = distinct !{!55, !"set_offset"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"size_wrapper: argument 0"}
!58 = distinct !{!58, !"size_wrapper"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"set_offset: argument 0"}
!61 = distinct !{!61, !"set_offset"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"size_wrapper: argument 0"}
!64 = distinct !{!64, !"size_wrapper"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"set_offset: argument 0"}
!67 = distinct !{!67, !"set_offset"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"set_offset: argument 0"}
!70 = distinct !{!70, !"set_offset"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"set_offset: argument 0"}
!73 = distinct !{!73, !"set_offset"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"set_offset: argument 0"}
!76 = distinct !{!76, !"set_offset"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"set_offset: argument 0"}
!79 = distinct !{!79, !"set_offset"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"set_offset: argument 0"}
!82 = distinct !{!82, !"set_offset"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"set_offset: argument 0"}
!85 = distinct !{!85, !"set_offset"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"set_offset: argument 0"}
!88 = distinct !{!88, !"set_offset"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"size_wrapper: argument 0"}
!91 = distinct !{!91, !"size_wrapper"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"set_offset: argument 0"}
!94 = distinct !{!94, !"set_offset"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"size_wrapper: argument 0"}
!97 = distinct !{!97, !"size_wrapper"}
!98 = !{!99}
!99 = distinct !{!99, !100, !"set_offset: argument 0"}
!100 = distinct !{!100, !"set_offset"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"set_offset: argument 0"}
!103 = distinct !{!103, !"set_offset"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"set_offset: argument 0"}
!106 = distinct !{!106, !"set_offset"}
!107 = !{!108}
!108 = distinct !{!108, !109, !"set_offset: argument 0"}
!109 = distinct !{!109, !"set_offset"}
!110 = !{!111}
!111 = distinct !{!111, !112, !"set_offset: argument 0"}
!112 = distinct !{!112, !"set_offset"}
!113 = !{!114}
!114 = distinct !{!114, !115, !"set_offset: argument 0"}
!115 = distinct !{!115, !"set_offset"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"set_offset: argument 0"}
!118 = distinct !{!118, !"set_offset"}
!119 = !{!120}
!120 = distinct !{!120, !121, !"set_offset: argument 0"}
!121 = distinct !{!121, !"set_offset"}
!122 = !{!123}
!123 = distinct !{!123, !124, !"set_offset: argument 0"}
!124 = distinct !{!124, !"set_offset"}
!125 = !{!126}
!126 = distinct !{!126, !127, !"set_offset: argument 0"}
!127 = distinct !{!127, !"set_offset"}
!128 = !{!129}
!129 = distinct !{!129, !130, !"size_wrapper: argument 0"}
!130 = distinct !{!130, !"size_wrapper"}
!131 = !{!132}
!132 = distinct !{!132, !133, !"set_offset: argument 0"}
!133 = distinct !{!133, !"set_offset"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"size_wrapper: argument 0"}
!136 = distinct !{!136, !"size_wrapper"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"set_offset: argument 0"}
!139 = distinct !{!139, !"set_offset"}
!140 = !{!141}
!141 = distinct !{!141, !142, !"set_offset: argument 0"}
!142 = distinct !{!142, !"set_offset"}
!143 = !{!144}
!144 = distinct !{!144, !145, !"set_offset: argument 0"}
!145 = distinct !{!145, !"set_offset"}
!146 = !{!147}
!147 = distinct !{!147, !148, !"set_offset: argument 0"}
!148 = distinct !{!148, !"set_offset"}
!149 = !{!150}
!150 = distinct !{!150, !151, !"set_offset: argument 0"}
!151 = distinct !{!151, !"set_offset"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"set_offset: argument 0"}
!154 = distinct !{!154, !"set_offset"}
!155 = !{!156}
!156 = distinct !{!156, !157, !"set_offset: argument 0"}
!157 = distinct !{!157, !"set_offset"}
!158 = !{!159}
!159 = distinct !{!159, !160, !"set_offset: argument 0"}
!160 = distinct !{!160, !"set_offset"}
!161 = !{!162}
!162 = distinct !{!162, !163, !"set_offset: argument 0"}
!163 = distinct !{!163, !"set_offset"}
!164 = !{!165}
!165 = distinct !{!165, !166, !"set_offset: argument 0"}
!166 = distinct !{!166, !"set_offset"}
!167 = !{!168}
!168 = distinct !{!168, !169, !"set_offset: argument 0"}
!169 = distinct !{!169, !"set_offset"}
!170 = !{!171}
!171 = distinct !{!171, !172, !"set_offset: argument 0"}
!172 = distinct !{!172, !"set_offset"}
!173 = !{!174}
!174 = distinct !{!174, !175, !"size_wrapper: argument 0"}
!175 = distinct !{!175, !"size_wrapper"}
!176 = !{!177}
!177 = distinct !{!177, !178, !"set_offset: argument 0"}
!178 = distinct !{!178, !"set_offset"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"size_wrapper: argument 0"}
!181 = distinct !{!181, !"size_wrapper"}
!182 = !{!183}
!183 = distinct !{!183, !184, !"set_offset: argument 0"}
!184 = distinct !{!184, !"set_offset"}
!185 = !{!186}
!186 = distinct !{!186, !187, !"set_offset: argument 0"}
!187 = distinct !{!187, !"set_offset"}
!188 = !{!189}
!189 = distinct !{!189, !190, !"set_offset: argument 0"}
!190 = distinct !{!190, !"set_offset"}
!191 = !{!192}
!192 = distinct !{!192, !193, !"set_offset: argument 0"}
!193 = distinct !{!193, !"set_offset"}
!194 = !{!195}
!195 = distinct !{!195, !196, !"set_offset: argument 0"}
!196 = distinct !{!196, !"set_offset"}
!197 = !{!198}
!198 = distinct !{!198, !199, !"set_offset: argument 0"}
!199 = distinct !{!199, !"set_offset"}
!200 = !{!201}
!201 = distinct !{!201, !202, !"set_offset: argument 0"}
!202 = distinct !{!202, !"set_offset"}
!203 = !{!204}
!204 = distinct !{!204, !205, !"set_offset: argument 0"}
!205 = distinct !{!205, !"set_offset"}
!206 = !{!207}
!207 = distinct !{!207, !208, !"size_wrapper: argument 0"}
!208 = distinct !{!208, !"size_wrapper"}
!209 = !{!210}
!210 = distinct !{!210, !211, !"set_offset: argument 0"}
!211 = distinct !{!211, !"set_offset"}
!212 = !{!213}
!213 = distinct !{!213, !214, !"size_wrapper: argument 0"}
!214 = distinct !{!214, !"size_wrapper"}
!215 = !{!216}
!216 = distinct !{!216, !217, !"set_offset: argument 0"}
!217 = distinct !{!217, !"set_offset"}
!218 = !{!219}
!219 = distinct !{!219, !220, !"set_offset: argument 0"}
!220 = distinct !{!220, !"set_offset"}
!221 = !{!222}
!222 = distinct !{!222, !223, !"set_offset: argument 0"}
!223 = distinct !{!223, !"set_offset"}
!224 = !{!225}
!225 = distinct !{!225, !226, !"set_offset: argument 0"}
!226 = distinct !{!226, !"set_offset"}
!227 = !{!228}
!228 = distinct !{!228, !229, !"set_offset: argument 0"}
!229 = distinct !{!229, !"set_offset"}
!230 = !{!231}
!231 = distinct !{!231, !232, !"set_offset: argument 0"}
!232 = distinct !{!232, !"set_offset"}
!233 = !{!234}
!234 = distinct !{!234, !235, !"set_offset: argument 0"}
!235 = distinct !{!235, !"set_offset"}
!236 = !{!237}
!237 = distinct !{!237, !238, !"set_offset: argument 0"}
!238 = distinct !{!238, !"set_offset"}
!239 = !{!240}
!240 = distinct !{!240, !241, !"set_offset: argument 0"}
!241 = distinct !{!241, !"set_offset"}
!242 = !{!243}
!243 = distinct !{!243, !244, !"set_offset: argument 0"}
!244 = distinct !{!244, !"set_offset"}
!245 = !{!246}
!246 = distinct !{!246, !247, !"set_offset: argument 0"}
!247 = distinct !{!247, !"set_offset"}
!248 = !{!249}
!249 = distinct !{!249, !250, !"set_offset: argument 0"}
!250 = distinct !{!250, !"set_offset"}
!251 = !{!252}
!252 = distinct !{!252, !253, !"size_wrapper: argument 0"}
!253 = distinct !{!253, !"size_wrapper"}
!254 = !{!255}
!255 = distinct !{!255, !256, !"set_offset: argument 0"}
!256 = distinct !{!256, !"set_offset"}
!257 = !{!258}
!258 = distinct !{!258, !259, !"size_wrapper: argument 0"}
!259 = distinct !{!259, !"size_wrapper"}
!260 = !{!261}
!261 = distinct !{!261, !262, !"set_offset: argument 0"}
!262 = distinct !{!262, !"set_offset"}
!263 = !{!264}
!264 = distinct !{!264, !265, !"set_offset: argument 0"}
!265 = distinct !{!265, !"set_offset"}
!266 = !{!267}
!267 = distinct !{!267, !268, !"set_offset: argument 0"}
!268 = distinct !{!268, !"set_offset"}
!269 = !{!270}
!270 = distinct !{!270, !271, !"set_offset: argument 0"}
!271 = distinct !{!271, !"set_offset"}
!272 = !{!273}
!273 = distinct !{!273, !274, !"set_offset: argument 0"}
!274 = distinct !{!274, !"set_offset"}
!275 = !{!276}
!276 = distinct !{!276, !277, !"set_offset: argument 0"}
!277 = distinct !{!277, !"set_offset"}
!278 = !{!279}
!279 = distinct !{!279, !280, !"set_offset: argument 0"}
!280 = distinct !{!280, !"set_offset"}
!281 = !{!282}
!282 = distinct !{!282, !283, !"set_offset: argument 0"}
!283 = distinct !{!283, !"set_offset"}
!284 = !{!285}
!285 = distinct !{!285, !286, !"size_wrapper: argument 0"}
!286 = distinct !{!286, !"size_wrapper"}
!287 = !{!288}
!288 = distinct !{!288, !289, !"set_offset: argument 0"}
!289 = distinct !{!289, !"set_offset"}
!290 = !{!291}
!291 = distinct !{!291, !292, !"size_wrapper: argument 0"}
!292 = distinct !{!292, !"size_wrapper"}
!293 = !{!294}
!294 = distinct !{!294, !295, !"set_offset: argument 0"}
!295 = distinct !{!295, !"set_offset"}
!296 = !{!297}
!297 = distinct !{!297, !298, !"set_offset: argument 0"}
!298 = distinct !{!298, !"set_offset"}
!299 = !{!300}
!300 = distinct !{!300, !301, !"set_offset: argument 0"}
!301 = distinct !{!301, !"set_offset"}
!302 = !{!303}
!303 = distinct !{!303, !304, !"set_offset: argument 0"}
!304 = distinct !{!304, !"set_offset"}
!305 = !{!306}
!306 = distinct !{!306, !307, !"set_offset: argument 0"}
!307 = distinct !{!307, !"set_offset"}
!308 = !{!309}
!309 = distinct !{!309, !310, !"set_offset: argument 0"}
!310 = distinct !{!310, !"set_offset"}
!311 = !{!312}
!312 = distinct !{!312, !313, !"set_offset: argument 0"}
!313 = distinct !{!313, !"set_offset"}
!314 = !{!315}
!315 = distinct !{!315, !316, !"set_offset: argument 0"}
!316 = distinct !{!316, !"set_offset"}
!317 = !{!318}
!318 = distinct !{!318, !319, !"set_offset: argument 0"}
!319 = distinct !{!319, !"set_offset"}
!320 = !{!321}
!321 = distinct !{!321, !322, !"set_offset: argument 0"}
!322 = distinct !{!322, !"set_offset"}
!323 = !{!324}
!324 = distinct !{!324, !325, !"set_offset: argument 0"}
!325 = distinct !{!325, !"set_offset"}
!326 = !{!327}
!327 = distinct !{!327, !328, !"set_offset: argument 0"}
!328 = distinct !{!328, !"set_offset"}
!329 = !{!330}
!330 = distinct !{!330, !331, !"set_offset: argument 0"}
!331 = distinct !{!331, !"set_offset"}
!332 = !{!333}
!333 = distinct !{!333, !334, !"set_offset: argument 0"}
!334 = distinct !{!334, !"set_offset"}
!335 = !{!336}
!336 = distinct !{!336, !337, !"size_wrapper: argument 0"}
!337 = distinct !{!337, !"size_wrapper"}
!338 = !{!339}
!339 = distinct !{!339, !340, !"set_offset: argument 0"}
!340 = distinct !{!340, !"set_offset"}
!341 = !{!342}
!342 = distinct !{!342, !343, !"size_wrapper: argument 0"}
!343 = distinct !{!343, !"size_wrapper"}
!344 = !{!345}
!345 = distinct !{!345, !346, !"set_offset: argument 0"}
!346 = distinct !{!346, !"set_offset"}
!347 = !{!348}
!348 = distinct !{!348, !349, !"set_offset: argument 0"}
!349 = distinct !{!349, !"set_offset"}
!350 = !{!351}
!351 = distinct !{!351, !352, !"set_offset: argument 0"}
!352 = distinct !{!352, !"set_offset"}
!353 = !{!354}
!354 = distinct !{!354, !355, !"set_offset: argument 0"}
!355 = distinct !{!355, !"set_offset"}
!356 = !{!357}
!357 = distinct !{!357, !358, !"set_offset: argument 0"}
!358 = distinct !{!358, !"set_offset"}
!359 = !{!360}
!360 = distinct !{!360, !361, !"set_offset: argument 0"}
!361 = distinct !{!361, !"set_offset"}
!362 = !{!363}
!363 = distinct !{!363, !364, !"set_offset: argument 0"}
!364 = distinct !{!364, !"set_offset"}
!365 = !{!366}
!366 = distinct !{!366, !367, !"set_offset: argument 0"}
!367 = distinct !{!367, !"set_offset"}
!368 = !{!369}
!369 = distinct !{!369, !370, !"size_wrapper: argument 0"}
!370 = distinct !{!370, !"size_wrapper"}
!371 = !{!372}
!372 = distinct !{!372, !373, !"set_offset: argument 0"}
!373 = distinct !{!373, !"set_offset"}
!374 = !{!375}
!375 = distinct !{!375, !376, !"size_wrapper: argument 0"}
!376 = distinct !{!376, !"size_wrapper"}
!377 = !{!378}
!378 = distinct !{!378, !379, !"set_offset: argument 0"}
!379 = distinct !{!379, !"set_offset"}
!380 = !{!381}
!381 = distinct !{!381, !382, !"set_offset: argument 0"}
!382 = distinct !{!382, !"set_offset"}
!383 = !{!384}
!384 = distinct !{!384, !385, !"set_offset: argument 0"}
!385 = distinct !{!385, !"set_offset"}
!386 = !{!387}
!387 = distinct !{!387, !388, !"set_offset: argument 0"}
!388 = distinct !{!388, !"set_offset"}
!389 = !{!390}
!390 = distinct !{!390, !391, !"set_offset: argument 0"}
!391 = distinct !{!391, !"set_offset"}
!392 = !{!393}
!393 = distinct !{!393, !394, !"set_offset: argument 0"}
!394 = distinct !{!394, !"set_offset"}
!395 = !{!396}
!396 = distinct !{!396, !397, !"set_offset: argument 0"}
!397 = distinct !{!397, !"set_offset"}
!398 = !{!399}
!399 = distinct !{!399, !400, !"set_offset: argument 0"}
!400 = distinct !{!400, !"set_offset"}
!401 = !{!402}
!402 = distinct !{!402, !403, !"set_offset: argument 0"}
!403 = distinct !{!403, !"set_offset"}
!404 = !{!405}
!405 = distinct !{!405, !406, !"set_offset: argument 0"}
!406 = distinct !{!406, !"set_offset"}
!407 = !{!408}
!408 = distinct !{!408, !409, !"set_offset: argument 0"}
!409 = distinct !{!409, !"set_offset"}
!410 = !{!411}
!411 = distinct !{!411, !412, !"set_offset: argument 0"}
!412 = distinct !{!412, !"set_offset"}
!413 = !{!414}
!414 = distinct !{!414, !415, !"size_wrapper: argument 0"}
!415 = distinct !{!415, !"size_wrapper"}
!416 = !{!417}
!417 = distinct !{!417, !418, !"set_offset: argument 0"}
!418 = distinct !{!418, !"set_offset"}
!419 = !{!420}
!420 = distinct !{!420, !421, !"size_wrapper: argument 0"}
!421 = distinct !{!421, !"size_wrapper"}
!422 = !{!423}
!423 = distinct !{!423, !424, !"set_offset: argument 0"}
!424 = distinct !{!424, !"set_offset"}
!425 = !{!426}
!426 = distinct !{!426, !427, !"set_offset: argument 0"}
!427 = distinct !{!427, !"set_offset"}
!428 = !{!429}
!429 = distinct !{!429, !430, !"set_offset: argument 0"}
!430 = distinct !{!430, !"set_offset"}
!431 = !{!432}
!432 = distinct !{!432, !433, !"set_offset: argument 0"}
!433 = distinct !{!433, !"set_offset"}
!434 = !{!435}
!435 = distinct !{!435, !436, !"set_offset: argument 0"}
!436 = distinct !{!436, !"set_offset"}
!437 = !{!438}
!438 = distinct !{!438, !439, !"set_offset: argument 0"}
!439 = distinct !{!439, !"set_offset"}
!440 = !{!441}
!441 = distinct !{!441, !442, !"set_offset: argument 0"}
!442 = distinct !{!442, !"set_offset"}
!443 = !{!444}
!444 = distinct !{!444, !445, !"set_offset: argument 0"}
!445 = distinct !{!445, !"set_offset"}
!446 = !{!447}
!447 = distinct !{!447, !448, !"set_offset: argument 0"}
!448 = distinct !{!448, !"set_offset"}
!449 = !{!450}
!450 = distinct !{!450, !451, !"set_offset: argument 0"}
!451 = distinct !{!451, !"set_offset"}
!452 = !{!453}
!453 = distinct !{!453, !454, !"size_wrapper: argument 0"}
!454 = distinct !{!454, !"size_wrapper"}
!455 = !{!456}
!456 = distinct !{!456, !457, !"set_offset: argument 0"}
!457 = distinct !{!457, !"set_offset"}
!458 = !{!459}
!459 = distinct !{!459, !460, !"size_wrapper: argument 0"}
!460 = distinct !{!460, !"size_wrapper"}
!461 = !{!462}
!462 = distinct !{!462, !463, !"set_offset: argument 0"}
!463 = distinct !{!463, !"set_offset"}
!464 = !{!465}
!465 = distinct !{!465, !466, !"set_offset: argument 0"}
!466 = distinct !{!466, !"set_offset"}
!467 = !{!468}
!468 = distinct !{!468, !469, !"set_offset: argument 0"}
!469 = distinct !{!469, !"set_offset"}
!470 = !{!471}
!471 = distinct !{!471, !472, !"set_offset: argument 0"}
!472 = distinct !{!472, !"set_offset"}
!473 = !{!474}
!474 = distinct !{!474, !475, !"set_offset: argument 0"}
!475 = distinct !{!475, !"set_offset"}
!476 = !{!477}
!477 = distinct !{!477, !478, !"set_offset: argument 0"}
!478 = distinct !{!478, !"set_offset"}
!479 = !{!480}
!480 = distinct !{!480, !481, !"set_offset: argument 0"}
!481 = distinct !{!481, !"set_offset"}
!482 = !{!483}
!483 = distinct !{!483, !484, !"set_offset: argument 0"}
!484 = distinct !{!484, !"set_offset"}
!485 = !{!486}
!486 = distinct !{!486, !487, !"set_offset: argument 0"}
!487 = distinct !{!487, !"set_offset"}
!488 = !{!489}
!489 = distinct !{!489, !490, !"set_offset: argument 0"}
!490 = distinct !{!490, !"set_offset"}
!491 = !{!492}
!492 = distinct !{!492, !493, !"set_offset: argument 0"}
!493 = distinct !{!493, !"set_offset"}
!494 = !{!495}
!495 = distinct !{!495, !496, !"set_offset: argument 0"}
!496 = distinct !{!496, !"set_offset"}
!497 = !{!498}
!498 = distinct !{!498, !499, !"set_offset: argument 0"}
!499 = distinct !{!499, !"set_offset"}
!500 = !{!501}
!501 = distinct !{!501, !502, !"set_offset: argument 0"}
!502 = distinct !{!502, !"set_offset"}
!503 = !{!504}
!504 = distinct !{!504, !505, !"set_offset: argument 0"}
!505 = distinct !{!505, !"set_offset"}
!506 = !{!507}
!507 = distinct !{!507, !508, !"set_offset: argument 0"}
!508 = distinct !{!508, !"set_offset"}
!509 = !{!510}
!510 = distinct !{!510, !511, !"set_offset: argument 0"}
!511 = distinct !{!511, !"set_offset"}
!512 = !{!513}
!513 = distinct !{!513, !514, !"set_offset: argument 0"}
!514 = distinct !{!514, !"set_offset"}
!515 = !{!516}
!516 = distinct !{!516, !517, !"set_offset: argument 0"}
!517 = distinct !{!517, !"set_offset"}
!518 = !{!519}
!519 = distinct !{!519, !520, !"set_offset: argument 0"}
!520 = distinct !{!520, !"set_offset"}
!521 = !{!522}
!522 = distinct !{!522, !523, !"set_offset: argument 0"}
!523 = distinct !{!523, !"set_offset"}
!524 = !{!525}
!525 = distinct !{!525, !526, !"set_offset: argument 0"}
!526 = distinct !{!526, !"set_offset"}
!527 = !{!528}
!528 = distinct !{!528, !529, !"set_offset: argument 0"}
!529 = distinct !{!529, !"set_offset"}
!530 = !{!531}
!531 = distinct !{!531, !532, !"set_offset: argument 0"}
!532 = distinct !{!532, !"set_offset"}
!533 = !{!534}
!534 = distinct !{!534, !535, !"set_offset: argument 0"}
!535 = distinct !{!535, !"set_offset"}
!536 = !{!537}
!537 = distinct !{!537, !538, !"set_offset: argument 0"}
!538 = distinct !{!538, !"set_offset"}
!539 = !{!540}
!540 = distinct !{!540, !541, !"set_offset: argument 0"}
!541 = distinct !{!541, !"set_offset"}
!542 = !{!543}
!543 = distinct !{!543, !544, !"set_offset: argument 0"}
!544 = distinct !{!544, !"set_offset"}
!545 = !{!546}
!546 = distinct !{!546, !547, !"set_offset: argument 0"}
!547 = distinct !{!547, !"set_offset"}
!548 = !{!549}
!549 = distinct !{!549, !550, !"set_offset: argument 0"}
!550 = distinct !{!550, !"set_offset"}
!551 = !{!552}
!552 = distinct !{!552, !553, !"set_offset: argument 0"}
!553 = distinct !{!553, !"set_offset"}
!554 = !{!555}
!555 = distinct !{!555, !556, !"set_offset: argument 0"}
!556 = distinct !{!556, !"set_offset"}
!557 = !{!558}
!558 = distinct !{!558, !559, !"set_offset: argument 0"}
!559 = distinct !{!559, !"set_offset"}
!560 = !{!561}
!561 = distinct !{!561, !562, !"set_offset: argument 0"}
!562 = distinct !{!562, !"set_offset"}
!563 = !{!564}
!564 = distinct !{!564, !565, !"set_offset: argument 0"}
!565 = distinct !{!565, !"set_offset"}
!566 = !{!567}
!567 = distinct !{!567, !568, !"set_offset: argument 0"}
!568 = distinct !{!568, !"set_offset"}
!569 = !{!570}
!570 = distinct !{!570, !571, !"set_offset: argument 0"}
!571 = distinct !{!571, !"set_offset"}
!572 = !{!573}
!573 = distinct !{!573, !574, !"set_offset: argument 0"}
!574 = distinct !{!574, !"set_offset"}
!575 = !{!576}
!576 = distinct !{!576, !577, !"set_offset: argument 0"}
!577 = distinct !{!577, !"set_offset"}
!578 = !{!579}
!579 = distinct !{!579, !580, !"set_offset: argument 0"}
!580 = distinct !{!580, !"set_offset"}
!581 = !{!582}
!582 = distinct !{!582, !583, !"set_offset: argument 0"}
!583 = distinct !{!583, !"set_offset"}
!584 = !{!585}
!585 = distinct !{!585, !586, !"set_offset: argument 0"}
!586 = distinct !{!586, !"set_offset"}
!587 = !{!588}
!588 = distinct !{!588, !589, !"set_offset: argument 0"}
!589 = distinct !{!589, !"set_offset"}
!590 = !{!591}
!591 = distinct !{!591, !592, !"set_offset: argument 0"}
!592 = distinct !{!592, !"set_offset"}
!593 = !{!594}
!594 = distinct !{!594, !595, !"set_offset: argument 0"}
!595 = distinct !{!595, !"set_offset"}
!596 = !{!597}
!597 = distinct !{!597, !598, !"set_offset: argument 0"}
!598 = distinct !{!598, !"set_offset"}
!599 = !{!600}
!600 = distinct !{!600, !601, !"set_offset: argument 0"}
!601 = distinct !{!601, !"set_offset"}
!602 = !{!603}
!603 = distinct !{!603, !604, !"set_offset: argument 0"}
!604 = distinct !{!604, !"set_offset"}
!605 = !{!606}
!606 = distinct !{!606, !607, !"set_offset: argument 0"}
!607 = distinct !{!607, !"set_offset"}
!608 = !{!609}
!609 = distinct !{!609, !610, !"set_offset: argument 0"}
!610 = distinct !{!610, !"set_offset"}
!611 = !{!612}
!612 = distinct !{!612, !613, !"set_offset: argument 0"}
!613 = distinct !{!613, !"set_offset"}
!614 = !{!615}
!615 = distinct !{!615, !616, !"set_offset: argument 0"}
!616 = distinct !{!616, !"set_offset"}
!617 = !{!618}
!618 = distinct !{!618, !619, !"set_offset: argument 0"}
!619 = distinct !{!619, !"set_offset"}
!620 = !{!621}
!621 = distinct !{!621, !622, !"set_offset: argument 0"}
!622 = distinct !{!622, !"set_offset"}
!623 = !{!624}
!624 = distinct !{!624, !625, !"set_offset: argument 0"}
!625 = distinct !{!625, !"set_offset"}
!626 = !{!627}
!627 = distinct !{!627, !628, !"set_offset: argument 0"}
!628 = distinct !{!628, !"set_offset"}
!629 = !{!630}
!630 = distinct !{!630, !631, !"set_offset: argument 0"}
!631 = distinct !{!631, !"set_offset"}
!632 = !{!633}
!633 = distinct !{!633, !634, !"set_offset: argument 0"}
!634 = distinct !{!634, !"set_offset"}
!635 = !{!636}
!636 = distinct !{!636, !637, !"set_offset: argument 0"}
!637 = distinct !{!637, !"set_offset"}
!638 = !{!639}
!639 = distinct !{!639, !640, !"set_offset: argument 0"}
!640 = distinct !{!640, !"set_offset"}
!641 = !{!642}
!642 = distinct !{!642, !643, !"set_offset: argument 0"}
!643 = distinct !{!643, !"set_offset"}
!644 = !{!645}
!645 = distinct !{!645, !646, !"set_offset: argument 0"}
!646 = distinct !{!646, !"set_offset"}
!647 = !{!648}
!648 = distinct !{!648, !649, !"set_offset: argument 0"}
!649 = distinct !{!649, !"set_offset"}
!650 = !{!651}
!651 = distinct !{!651, !652, !"set_offset: argument 0"}
!652 = distinct !{!652, !"set_offset"}
!653 = !{!654}
!654 = distinct !{!654, !655, !"set_offset: argument 0"}
!655 = distinct !{!655, !"set_offset"}
!656 = !{!657}
!657 = distinct !{!657, !658, !"set_offset: argument 0"}
!658 = distinct !{!658, !"set_offset"}
!659 = !{!660}
!660 = distinct !{!660, !661, !"size_wrapper: argument 0"}
!661 = distinct !{!661, !"size_wrapper"}
!662 = !{!663}
!663 = distinct !{!663, !664, !"set_offset: argument 0"}
!664 = distinct !{!664, !"set_offset"}
!665 = !{!666}
!666 = distinct !{!666, !667, !"set_offset: argument 0"}
!667 = distinct !{!667, !"set_offset"}
!668 = !{!669}
!669 = distinct !{!669, !670, !"set_offset: argument 0"}
!670 = distinct !{!670, !"set_offset"}
!671 = !{!672}
!672 = distinct !{!672, !673, !"set_offset: argument 0"}
!673 = distinct !{!673, !"set_offset"}
!674 = !{!675}
!675 = distinct !{!675, !676, !"set_offset: argument 0"}
!676 = distinct !{!676, !"set_offset"}
!677 = !{!678}
!678 = distinct !{!678, !679, !"set_offset: argument 0"}
!679 = distinct !{!679, !"set_offset"}
!680 = !{!681}
!681 = distinct !{!681, !682, !"set_offset: argument 0"}
!682 = distinct !{!682, !"set_offset"}
!683 = !{!684}
!684 = distinct !{!684, !685, !"set_offset: argument 0"}
!685 = distinct !{!685, !"set_offset"}
!686 = !{!687}
!687 = distinct !{!687, !688, !"set_offset: argument 0"}
!688 = distinct !{!688, !"set_offset"}
!689 = !{!690}
!690 = distinct !{!690, !691, !"set_offset: argument 0"}
!691 = distinct !{!691, !"set_offset"}
!692 = !{!693}
!693 = distinct !{!693, !694, !"set_offset: argument 0"}
!694 = distinct !{!694, !"set_offset"}
!695 = !{!696}
!696 = distinct !{!696, !697, !"set_offset: argument 0"}
!697 = distinct !{!697, !"set_offset"}
!698 = !{!699}
!699 = distinct !{!699, !700, !"set_offset: argument 0"}
!700 = distinct !{!700, !"set_offset"}
!701 = !{!702}
!702 = distinct !{!702, !703, !"set_offset: argument 0"}
!703 = distinct !{!703, !"set_offset"}
!704 = !{!705}
!705 = distinct !{!705, !706, !"set_offset: argument 0"}
!706 = distinct !{!706, !"set_offset"}
!707 = !{!708}
!708 = distinct !{!708, !709, !"set_offset: argument 0"}
!709 = distinct !{!709, !"set_offset"}
!710 = !{!711}
!711 = distinct !{!711, !712, !"set_offset: argument 0"}
!712 = distinct !{!712, !"set_offset"}
!713 = !{!714}
!714 = distinct !{!714, !715, !"set_offset: argument 0"}
!715 = distinct !{!715, !"set_offset"}
!716 = !{!717}
!717 = distinct !{!717, !718, !"set_offset: argument 0"}
!718 = distinct !{!718, !"set_offset"}
!719 = !{!720}
!720 = distinct !{!720, !721, !"set_offset: argument 0"}
!721 = distinct !{!721, !"set_offset"}
!722 = !{!723}
!723 = distinct !{!723, !724, !"set_offset: argument 0"}
!724 = distinct !{!724, !"set_offset"}
!725 = !{!726}
!726 = distinct !{!726, !727, !"set_offset: argument 0"}
!727 = distinct !{!727, !"set_offset"}
!728 = !{!729}
!729 = distinct !{!729, !730, !"set_offset: argument 0"}
!730 = distinct !{!730, !"set_offset"}
!731 = !{!732}
!732 = distinct !{!732, !733, !"set_offset: argument 0"}
!733 = distinct !{!733, !"set_offset"}
!734 = !{!735}
!735 = distinct !{!735, !736, !"set_offset: argument 0"}
!736 = distinct !{!736, !"set_offset"}
!737 = !{!738}
!738 = distinct !{!738, !739, !"set_offset: argument 0"}
!739 = distinct !{!739, !"set_offset"}
!740 = !{!741}
!741 = distinct !{!741, !742, !"set_offset: argument 0"}
!742 = distinct !{!742, !"set_offset"}
!743 = !{!744}
!744 = distinct !{!744, !745, !"set_offset: argument 0"}
!745 = distinct !{!745, !"set_offset"}
!746 = !{!747}
!747 = distinct !{!747, !748, !"set_offset: argument 0"}
!748 = distinct !{!748, !"set_offset"}
!749 = !{!750}
!750 = distinct !{!750, !751, !"set_offset: argument 0"}
!751 = distinct !{!751, !"set_offset"}
!752 = !{!753}
!753 = distinct !{!753, !754, !"set_offset: argument 0"}
!754 = distinct !{!754, !"set_offset"}
!755 = !{!756}
!756 = distinct !{!756, !757, !"set_offset: argument 0"}
!757 = distinct !{!757, !"set_offset"}
!758 = !{!759}
!759 = distinct !{!759, !760, !"set_offset: argument 0"}
!760 = distinct !{!760, !"set_offset"}
!761 = !{!762}
!762 = distinct !{!762, !763, !"set_offset: argument 0"}
!763 = distinct !{!763, !"set_offset"}
!764 = !{!765}
!765 = distinct !{!765, !766, !"set_offset: argument 0"}
!766 = distinct !{!766, !"set_offset"}
!767 = !{!768}
!768 = distinct !{!768, !769, !"set_offset: argument 0"}
!769 = distinct !{!769, !"set_offset"}
!770 = !{!771}
!771 = distinct !{!771, !772, !"set_offset: argument 0"}
!772 = distinct !{!772, !"set_offset"}
!773 = !{!774}
!774 = distinct !{!774, !775, !"set_offset: argument 0"}
!775 = distinct !{!775, !"set_offset"}
!776 = !{!777}
!777 = distinct !{!777, !778, !"set_offset: argument 0"}
!778 = distinct !{!778, !"set_offset"}
!779 = !{!780}
!780 = distinct !{!780, !781, !"set_offset: argument 0"}
!781 = distinct !{!781, !"set_offset"}
!782 = !{!783}
!783 = distinct !{!783, !784, !"set_offset: argument 0"}
!784 = distinct !{!784, !"set_offset"}
!785 = !{!786}
!786 = distinct !{!786, !787, !"set_offset: argument 0"}
!787 = distinct !{!787, !"set_offset"}
!788 = !{!789}
!789 = distinct !{!789, !790, !"set_offset: argument 0"}
!790 = distinct !{!790, !"set_offset"}
!791 = !{!792}
!792 = distinct !{!792, !793, !"set_offset: argument 0"}
!793 = distinct !{!793, !"set_offset"}
!794 = !{!795}
!795 = distinct !{!795, !796, !"set_offset: argument 0"}
!796 = distinct !{!796, !"set_offset"}
!797 = !{!798}
!798 = distinct !{!798, !799, !"set_offset: argument 0"}
!799 = distinct !{!799, !"set_offset"}
!800 = !{!801}
!801 = distinct !{!801, !802, !"set_offset: argument 0"}
!802 = distinct !{!802, !"set_offset"}
!803 = !{!804}
!804 = distinct !{!804, !805, !"set_offset: argument 0"}
!805 = distinct !{!805, !"set_offset"}
!806 = !{!807}
!807 = distinct !{!807, !808, !"set_offset: argument 0"}
!808 = distinct !{!808, !"set_offset"}
!809 = !{!810}
!810 = distinct !{!810, !811, !"set_offset: argument 0"}
!811 = distinct !{!811, !"set_offset"}
!812 = !{!813}
!813 = distinct !{!813, !814, !"set_offset: argument 0"}
!814 = distinct !{!814, !"set_offset"}
!815 = !{!816}
!816 = distinct !{!816, !817, !"set_offset: argument 0"}
!817 = distinct !{!817, !"set_offset"}
!818 = !{!819}
!819 = distinct !{!819, !820, !"set_offset: argument 0"}
!820 = distinct !{!820, !"set_offset"}
!821 = !{!822}
!822 = distinct !{!822, !823, !"set_offset: argument 0"}
!823 = distinct !{!823, !"set_offset"}
!824 = !{!825}
!825 = distinct !{!825, !826, !"set_offset: argument 0"}
!826 = distinct !{!826, !"set_offset"}
!827 = !{!828}
!828 = distinct !{!828, !829, !"set_offset: argument 0"}
!829 = distinct !{!829, !"set_offset"}
!830 = !{!831}
!831 = distinct !{!831, !832, !"set_offset: argument 0"}
!832 = distinct !{!832, !"set_offset"}
!833 = !{!834}
!834 = distinct !{!834, !835, !"set_offset: argument 0"}
!835 = distinct !{!835, !"set_offset"}
!836 = !{!837}
!837 = distinct !{!837, !838, !"set_offset: argument 0"}
!838 = distinct !{!838, !"set_offset"}
!839 = !{!840}
!840 = distinct !{!840, !841, !"set_offset: argument 0"}
!841 = distinct !{!841, !"set_offset"}
!842 = !{!843}
!843 = distinct !{!843, !844, !"set_offset: argument 0"}
!844 = distinct !{!844, !"set_offset"}
!845 = !{!846}
!846 = distinct !{!846, !847, !"set_offset: argument 0"}
!847 = distinct !{!847, !"set_offset"}
!848 = !{!849}
!849 = distinct !{!849, !850, !"set_offset: argument 0"}
!850 = distinct !{!850, !"set_offset"}
!851 = !{!852}
!852 = distinct !{!852, !853, !"set_offset: argument 0"}
!853 = distinct !{!853, !"set_offset"}
!854 = !{!855}
!855 = distinct !{!855, !856, !"set_offset: argument 0"}
!856 = distinct !{!856, !"set_offset"}
!857 = !{!858}
!858 = distinct !{!858, !859, !"set_offset: argument 0"}
!859 = distinct !{!859, !"set_offset"}
!860 = !{!861}
!861 = distinct !{!861, !862, !"set_offset: argument 0"}
!862 = distinct !{!862, !"set_offset"}
!863 = !{!864}
!864 = distinct !{!864, !865, !"set_offset: argument 0"}
!865 = distinct !{!865, !"set_offset"}
!866 = !{!867}
!867 = distinct !{!867, !868, !"set_offset: argument 0"}
!868 = distinct !{!868, !"set_offset"}
!869 = !{!870}
!870 = distinct !{!870, !871, !"set_offset: argument 0"}
!871 = distinct !{!871, !"set_offset"}
!872 = !{!873}
!873 = distinct !{!873, !874, !"set_offset: argument 0"}
!874 = distinct !{!874, !"set_offset"}
!875 = !{!876}
!876 = distinct !{!876, !877, !"set_offset: argument 0"}
!877 = distinct !{!877, !"set_offset"}
!878 = !{!879}
!879 = distinct !{!879, !880, !"set_offset: argument 0"}
!880 = distinct !{!880, !"set_offset"}
!881 = !{!882}
!882 = distinct !{!882, !883, !"set_offset: argument 0"}
!883 = distinct !{!883, !"set_offset"}
!884 = !{!885}
!885 = distinct !{!885, !886, !"size_wrapper: argument 0"}
!886 = distinct !{!886, !"size_wrapper"}
!887 = !{!888}
!888 = distinct !{!888, !889, !"set_offset: argument 0"}
!889 = distinct !{!889, !"set_offset"}
!890 = !{!891}
!891 = distinct !{!891, !892, !"set_offset: argument 0"}
!892 = distinct !{!892, !"set_offset"}
!893 = !{!894}
!894 = distinct !{!894, !895, !"set_offset: argument 0"}
!895 = distinct !{!895, !"set_offset"}
!896 = !{!897}
!897 = distinct !{!897, !898, !"set_offset: argument 0"}
!898 = distinct !{!898, !"set_offset"}
!899 = !{!900}
!900 = distinct !{!900, !901, !"set_offset: argument 0"}
!901 = distinct !{!901, !"set_offset"}
!902 = !{!903}
!903 = distinct !{!903, !904, !"set_offset: argument 0"}
!904 = distinct !{!904, !"set_offset"}
!905 = !{!906}
!906 = distinct !{!906, !907, !"set_offset: argument 0"}
!907 = distinct !{!907, !"set_offset"}
!908 = !{!909}
!909 = distinct !{!909, !910, !"set_offset: argument 0"}
!910 = distinct !{!910, !"set_offset"}
!911 = !{!912}
!912 = distinct !{!912, !913, !"set_offset: argument 0"}
!913 = distinct !{!913, !"set_offset"}
!914 = !{!915}
!915 = distinct !{!915, !916, !"set_offset: argument 0"}
!916 = distinct !{!916, !"set_offset"}
!917 = !{!918}
!918 = distinct !{!918, !919, !"set_offset: argument 0"}
!919 = distinct !{!919, !"set_offset"}
!920 = !{!921}
!921 = distinct !{!921, !922, !"set_offset: argument 0"}
!922 = distinct !{!922, !"set_offset"}
!923 = !{!924}
!924 = distinct !{!924, !925, !"set_offset: argument 0"}
!925 = distinct !{!925, !"set_offset"}
!926 = !{!927}
!927 = distinct !{!927, !928, !"set_offset: argument 0"}
!928 = distinct !{!928, !"set_offset"}
!929 = !{!930}
!930 = distinct !{!930, !931, !"set_offset: argument 0"}
!931 = distinct !{!931, !"set_offset"}
!932 = !{!933}
!933 = distinct !{!933, !934, !"set_offset: argument 0"}
!934 = distinct !{!934, !"set_offset"}
!935 = !{!936}
!936 = distinct !{!936, !937, !"set_offset: argument 0"}
!937 = distinct !{!937, !"set_offset"}
!938 = !{!939}
!939 = distinct !{!939, !940, !"set_offset: argument 0"}
!940 = distinct !{!940, !"set_offset"}
!941 = !{!942}
!942 = distinct !{!942, !943, !"set_offset: argument 0"}
!943 = distinct !{!943, !"set_offset"}
!944 = !{!945}
!945 = distinct !{!945, !946, !"set_offset: argument 0"}
!946 = distinct !{!946, !"set_offset"}
!947 = !{!948}
!948 = distinct !{!948, !949, !"set_offset: argument 0"}
!949 = distinct !{!949, !"set_offset"}
!950 = !{!951}
!951 = distinct !{!951, !952, !"set_offset: argument 0"}
!952 = distinct !{!952, !"set_offset"}
!953 = !{!954}
!954 = distinct !{!954, !955, !"size_wrapper: argument 0"}
!955 = distinct !{!955, !"size_wrapper"}
!956 = !{!957}
!957 = distinct !{!957, !958, !"set_offset: argument 0"}
!958 = distinct !{!958, !"set_offset"}
